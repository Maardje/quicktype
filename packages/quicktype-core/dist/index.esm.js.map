{"version":3,"file":"index.esm.js","sources":["../../../node_modules/tslib/tslib.es6.js","../src/support/Chance.ts","../../../node_modules/unicode-properties/dist/module.mjs","../src/Messages.ts","../../../node_modules/js-base64/base64.mjs","../../../node_modules/yaml/browser/dist/nodes/identity.js","../../../node_modules/yaml/browser/dist/visit.js","../../../node_modules/yaml/browser/dist/doc/directives.js","../../../node_modules/yaml/browser/dist/doc/anchors.js","../../../node_modules/yaml/browser/dist/doc/applyReviver.js","../../../node_modules/yaml/browser/dist/nodes/toJS.js","../../../node_modules/yaml/browser/dist/nodes/Node.js","../../../node_modules/yaml/browser/dist/nodes/Alias.js","../../../node_modules/yaml/browser/dist/nodes/Scalar.js","../../../node_modules/yaml/browser/dist/doc/createNode.js","../../../node_modules/yaml/browser/dist/nodes/Collection.js","../../../node_modules/yaml/browser/dist/stringify/stringifyComment.js","../../../node_modules/yaml/browser/dist/stringify/foldFlowLines.js","../../../node_modules/yaml/browser/dist/stringify/stringifyString.js","../../../node_modules/yaml/browser/dist/stringify/stringify.js","../../../node_modules/yaml/browser/dist/stringify/stringifyPair.js","../../../node_modules/yaml/browser/dist/log.js","../../../node_modules/yaml/browser/dist/nodes/addPairToJSMap.js","../../../node_modules/yaml/browser/dist/nodes/Pair.js","../../../node_modules/yaml/browser/dist/stringify/stringifyCollection.js","../../../node_modules/yaml/browser/dist/nodes/YAMLMap.js","../../../node_modules/yaml/browser/dist/schema/common/map.js","../../../node_modules/yaml/browser/dist/nodes/YAMLSeq.js","../../../node_modules/yaml/browser/dist/schema/common/seq.js","../../../node_modules/yaml/browser/dist/schema/common/string.js","../../../node_modules/yaml/browser/dist/schema/common/null.js","../../../node_modules/yaml/browser/dist/schema/core/bool.js","../../../node_modules/yaml/browser/dist/stringify/stringifyNumber.js","../../../node_modules/yaml/browser/dist/schema/core/float.js","../../../node_modules/yaml/browser/dist/schema/core/int.js","../../../node_modules/yaml/browser/dist/schema/core/schema.js","../../../node_modules/yaml/browser/dist/schema/json/schema.js","../../../node_modules/yaml/browser/dist/schema/yaml-1.1/binary.js","../../../node_modules/yaml/browser/dist/schema/yaml-1.1/pairs.js","../../../node_modules/yaml/browser/dist/schema/yaml-1.1/omap.js","../../../node_modules/yaml/browser/dist/schema/yaml-1.1/bool.js","../../../node_modules/yaml/browser/dist/schema/yaml-1.1/float.js","../../../node_modules/yaml/browser/dist/schema/yaml-1.1/int.js","../../../node_modules/yaml/browser/dist/schema/yaml-1.1/set.js","../../../node_modules/yaml/browser/dist/schema/yaml-1.1/timestamp.js","../../../node_modules/yaml/browser/dist/schema/yaml-1.1/schema.js","../../../node_modules/yaml/browser/dist/schema/tags.js","../../../node_modules/yaml/browser/dist/schema/Schema.js","../../../node_modules/yaml/browser/dist/stringify/stringifyDocument.js","../../../node_modules/yaml/browser/dist/doc/Document.js","../../../node_modules/yaml/browser/dist/errors.js","../../../node_modules/yaml/browser/dist/compose/resolve-props.js","../../../node_modules/yaml/browser/dist/compose/util-contains-newline.js","../../../node_modules/yaml/browser/dist/compose/util-flow-indent-check.js","../../../node_modules/yaml/browser/dist/compose/util-map-includes.js","../../../node_modules/yaml/browser/dist/compose/resolve-block-map.js","../../../node_modules/yaml/browser/dist/compose/resolve-block-seq.js","../../../node_modules/yaml/browser/dist/compose/resolve-end.js","../../../node_modules/yaml/browser/dist/compose/resolve-flow-collection.js","../../../node_modules/yaml/browser/dist/compose/compose-collection.js","../../../node_modules/yaml/browser/dist/compose/resolve-block-scalar.js","../../../node_modules/yaml/browser/dist/compose/resolve-flow-scalar.js","../../../node_modules/yaml/browser/dist/compose/compose-scalar.js","../../../node_modules/yaml/browser/dist/compose/util-empty-scalar-position.js","../../../node_modules/yaml/browser/dist/compose/compose-node.js","../../../node_modules/yaml/browser/dist/compose/compose-doc.js","../../../node_modules/yaml/browser/dist/compose/composer.js","../../../node_modules/yaml/browser/dist/parse/cst.js","../../../node_modules/yaml/browser/dist/parse/lexer.js","../../../node_modules/yaml/browser/dist/parse/line-counter.js","../../../node_modules/yaml/browser/dist/parse/parser.js","../../../node_modules/yaml/browser/dist/public-api.js","../src/support/Support.ts","../src/RendererOptions.ts","../src/support/Acronyms.ts","../src/support/Strings.ts","../src/attributes/TypeAttributes.ts","../src/attributes/TypeNames.ts","../src/attributes/URIAttributes.ts","../src/Graph.ts","../src/attributes/StringTypes.ts","../src/TypeBuilder.ts","../src/TypeUtils.ts","../src/GraphRewriting.ts","../src/TypeGraph.ts","../src/Type.ts","../src/Transformers.ts","../src/GatherNames.ts","../src/attributes/AccessorNames.ts","../src/attributes/Constraints.ts","../src/attributes/EnumValues.ts","../src/input/JSONSchemaStore.ts","../src/input/JSONSchemaInput.ts","../src/attributes/Description.ts","../src/DeclarationIR.ts","../src/Naming.ts","../src/Annotation.ts","../src/Source.ts","../src/Renderer.ts","../src/support/Comments.ts","../src/ConvenienceRenderer.ts","../src/DateTime.ts","../src/TargetLanguage.ts","../src/language/CJSON.ts","../src/language/CPlusPlus.ts","../src/language/Crystal.ts","../src/language/CSharp.ts","../src/language/Dart.ts","../src/language/Elixir.ts","../src/language/Elm.ts","../src/language/Golang.ts","../src/language/Haskell.ts","../src/language/Java.ts","../src/support/Converters.ts","../src/language/JavaScriptUnicodeMaps.ts","../src/language/JavaScript.ts","../src/language/JavaScriptPropTypes.ts","../src/language/JSONSchema.ts","../src/language/Kotlin.ts","../src/language/Objective-C.ts","../src/language/Php.ts","../src/language/Pike.ts","../src/language/Python.ts","../src/language/ruby/keywords.ts","../src/language/ruby/index.ts","../src/language/Rust.ts","../src/language/Scala3.ts","../src/language/Smithy4s.ts","../src/language/Swift.ts","../src/language/TypeScriptEffectSchema.ts","../src/language/TypeScriptFlow.ts","../src/language/TypeScriptZod.ts","../src/language/All.ts","../src/input/CompressedJSON.ts","../src/UnionBuilder.ts","../src/input/Inference.ts","../src/input/Inputs.ts","../src/MakeTransformations.ts","../src/UnifyClasses.ts","../src/rewrites/CombineClasses.ts","../src/rewrites/ExpandStrings.ts","../src/rewrites/FlattenStrings.ts","../src/rewrites/FlattenUnions.ts","../src/EncodedMarkovChain.ts","../src/MarkovChain.ts","../src/rewrites/InferMaps.ts","../src/rewrites/ReplaceObjectType.ts","../src/rewrites/ResolveIntersections.ts","../src/Run.ts","../src/input/io/get-stream/buffer-stream.ts","../src/input/io/get-stream/index.ts","../../../node_modules/browser-or-node/dist/index.mjs","../src/input/io/NodeIO.ts","../src/input/FetchingJSONSchemaStore.ts","../src/input/PostmanCollection.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/* eslint-disable */\n// Mersenne Twister from https://gist.github.com/banksean/300494\n/*\nA C-program for MT19937, with initialization improved 2002/1/26.\nCoded by Takuji Nishimura and Makoto Matsumoto.\nBefore using, initialize the state by using init_genrand(seed)\nor init_by_array(init_key, key_length).\nCopyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n3. The names of its contributors may not be used to endorse or promote\nproducts derived from this software without specific prior written\npermission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nAny feedback is very welcome.\nhttp://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\nemail: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\n*/\n\nclass MersenneTwister {\n    private readonly N: number;\n\n    private readonly M: number;\n\n    private readonly MATRIX_A: number;\n\n    private readonly UPPER_MASK: number;\n\n    private readonly LOWER_MASK: number;\n\n    private mt: number[];\n\n    private mti: number;\n\n    public constructor(seed: number) {\n        if (seed === undefined) {\n            // kept random number same size as time used previously to ensure no unexpected results downstream\n            seed = Math.floor(Math.random() * Math.pow(10, 13));\n        }\n\n        /* Period parameters */\n        this.N = 624;\n        this.M = 397;\n        this.MATRIX_A = 0x9908b0df; /* constant vector a */\n        this.UPPER_MASK = 0x80000000; /* most significant w-r bits */\n        this.LOWER_MASK = 0x7fffffff; /* least significant r bits */\n\n        this.mt = new Array(this.N); /* the array for the state vector */\n        this.mti = this.N + 1; /* mti==N + 1 means mt[N] is not initialized */\n\n        this.init_genrand(seed);\n    }\n\n    /* initializes mt[N] with a seed */\n    private init_genrand(s: number) {\n        this.mt[0] = s >>> 0;\n        for (this.mti = 1; this.mti < this.N; this.mti++) {\n            s = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);\n            this.mt[this.mti] =\n                ((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253 + this.mti;\n            /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n            /* In the previous versions, MSBs of the seed affect   */\n            /* only MSBs of the array mt[].                        */\n            /* 2002/01/09 modified by Makoto Matsumoto             */\n            this.mt[this.mti] >>>= 0;\n            /* for >32 bit machines */\n        }\n    }\n\n    /* generates a random number on [0,0xffffffff]-interval */\n    private genrand_int32() {\n        let y;\n        let mag01 = [0x0, this.MATRIX_A];\n        /* mag01[x] = x * MATRIX_A  for x=0,1 */\n\n        if (this.mti >= this.N) {\n            /* generate N words at one time */\n            let kk;\n\n            if (this.mti === this.N + 1) {\n                /* if init_genrand() has not been called, */\n                this.init_genrand(5489); /* a default initial seed is used */\n            }\n\n            for (kk = 0; kk < this.N - this.M; kk++) {\n                y = (this.mt[kk] & this.UPPER_MASK) | (this.mt[kk + 1] & this.LOWER_MASK);\n                this.mt[kk] = this.mt[kk + this.M] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n\n            for (; kk < this.N - 1; kk++) {\n                y = (this.mt[kk] & this.UPPER_MASK) | (this.mt[kk + 1] & this.LOWER_MASK);\n                this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n\n            y = (this.mt[this.N - 1] & this.UPPER_MASK) | (this.mt[0] & this.LOWER_MASK);\n            this.mt[this.N - 1] = this.mt[this.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n            this.mti = 0;\n        }\n\n        y = this.mt[this.mti++];\n\n        /* Tempering */\n        y ^= y >>> 11;\n        y ^= (y << 7) & 0x9d2c5680;\n        y ^= (y << 15) & 0xefc60000;\n        y ^= y >>> 18;\n\n        return y >>> 0;\n    }\n\n    /* generates a random number on [0,1)-real-interval */\n    random() {\n        return this.genrand_int32() * (1.0 / 4294967296.0);\n        /* divided by 2^32 */\n    }\n}\n\n// https://github.com/chancejs/chancejs\nexport class Chance {\n    private readonly mt: MersenneTwister;\n\n    public constructor(readonly seed: number) {\n        // If no generator function was provided, use our MT\n        this.mt = new MersenneTwister(this.seed);\n    }\n\n    random(): number {\n        return this.mt.random();\n    }\n\n    /**\n     *  Return a random integer\n     *\n     *  NOTE the max and min are INCLUDED in the range. So:\n     *  chance.integer({min: 1, max: 3});\n     *  would return either 1, 2, or 3.\n     *\n     *  @param {Object} [options={}] can specify a min and/or max\n     *  @returns {Number} a single random integer number\n     *  @throws {RangeError} min cannot be greater than max\n     */\n    integer(options: { max: number; min: number }): number {\n        return Math.floor(this.random() * (options.max - options.min + 1) + options.min);\n    }\n\n    /**\n     *  Return a random natural\n     *\n     *  NOTE the max and min are INCLUDED in the range. So:\n     *  chance.natural({min: 1, max: 3});\n     *  would return either 1, 2, or 3.\n     *\n     *  @param {Object} [options={}] can specify a min and/or maxm or a numerals count.\n     *  @returns {Number} a single random integer number\n     *  @throws {RangeError} min cannot be greater than max\n     */\n    natural(options: { max: number }): number {\n        return this.integer({ min: 0, max: options.max });\n    }\n\n    pick<T>(arr: T[]): T {\n        if (arr.length === 0) {\n            throw new RangeError(\"Chance: Cannot pick() from an empty array\");\n        }\n\n        return arr[this.natural({ max: arr.length - 1 })];\n    }\n\n    animal(): string {\n        // if user does not put in any animal type, will return a random animal regardless\n        const animalTypeArray = [\"desert\", \"forest\", \"ocean\", \"zoo\", \"farm\", \"pet\", \"grassland\"];\n        return this.pick(animals[this.pick(animalTypeArray)]);\n    }\n\n    city(): string {\n        return this.pick(cities);\n    }\n}\n\nconst animals: { [kind: string]: string[] } = {\n    // list of ocean animals comes from https://owlcation.com/stem/list-of-ocean-animals\n    ocean: [\n        \"Acantharea\",\n        \"Anemone\",\n        \"Angelfish King\",\n        \"Ahi Tuna\",\n        \"Albacore\",\n        \"American Oyster\",\n        \"Anchovy\",\n        \"Armored Snail\",\n        \"Arctic Char\",\n        \"Atlantic Bluefin Tuna\",\n        \"Atlantic Cod\",\n        \"Atlantic Goliath Grouper\",\n        \"Atlantic Trumpetfish\",\n        \"Atlantic Wolffish\",\n        \"Baleen Whale\",\n        \"Banded Butterflyfish\",\n        \"Banded Coral Shrimp\",\n        \"Banded Sea Krait\",\n        \"Barnacle\",\n        \"Barndoor Skate\",\n        \"Barracuda\",\n        \"Basking Shark\",\n        \"Bass\",\n        \"Beluga Whale\",\n        \"Bluebanded Goby\",\n        \"Bluehead Wrasse\",\n        \"Bluefish\",\n        \"Bluestreak Cleaner-Wrasse\",\n        \"Blue Marlin\",\n        \"Blue Shark\",\n        \"Blue Spiny Lobster\",\n        \"Blue Tang\",\n        \"Blue Whale\",\n        \"Broadclub Cuttlefish\",\n        \"Bull Shark\",\n        \"Chambered Nautilus\",\n        \"Chilean Basket Star\",\n        \"Chilean Jack Mackerel\",\n        \"Chinook Salmon\",\n        \"Christmas Tree Worm\",\n        \"Clam\",\n        \"Clown Anemonefish\",\n        \"Clown Triggerfish\",\n        \"Cod\",\n        \"Coelacanth\",\n        \"Cockscomb Cup Coral\",\n        \"Common Fangtooth\",\n        \"Conch\",\n        \"Cookiecutter Shark\",\n        \"Copepod\",\n        \"Coral\",\n        \"Corydoras\",\n        \"Cownose Ray\",\n        \"Crab\",\n        \"Crown-of-Thorns Starfish\",\n        \"Cushion Star\",\n        \"Cuttlefish\",\n        \"California Sea Otters\",\n        \"Dolphin\",\n        \"Dolphinfish\",\n        \"Dory\",\n        \"Devil Fish\",\n        \"Dugong\",\n        \"Dumbo Octopus\",\n        \"Dungeness Crab\",\n        \"Eccentric Sand Dollar\",\n        \"Edible Sea Cucumber\",\n        \"Eel\",\n        \"Elephant Seal\",\n        \"Elkhorn Coral\",\n        \"Emperor Shrimp\",\n        \"Estuarine Crocodile\",\n        \"Fathead Sculpin\",\n        \"Fiddler Crab\",\n        \"Fin Whale\",\n        \"Flameback\",\n        \"Flamingo Tongue Snail\",\n        \"Flashlight Fish\",\n        \"Flatback Turtle\",\n        \"Flatfish\",\n        \"Flying Fish\",\n        \"Flounder\",\n        \"Fluke\",\n        \"French Angelfish\",\n        \"Frilled Shark\",\n        \"Fugu (also called Pufferfish)\",\n        \"Gar\",\n        \"Geoduck\",\n        \"Giant Barrel Sponge\",\n        \"Giant Caribbean Sea Anemone\",\n        \"Giant Clam\",\n        \"Giant Isopod\",\n        \"Giant Kingfish\",\n        \"Giant Oarfish\",\n        \"Giant Pacific Octopus\",\n        \"Giant Pyrosome\",\n        \"Giant Sea Star\",\n        \"Giant Squid\",\n        \"Glowing Sucker Octopus\",\n        \"Giant Tube Worm\",\n        \"Goblin Shark\",\n        \"Goosefish\",\n        \"Great White Shark\",\n        \"Greenland Shark\",\n        \"Grey Atlantic Seal\",\n        \"Grouper\",\n        \"Grunion\",\n        \"Guineafowl Puffer\",\n        \"Haddock\",\n        \"Hake\",\n        \"Halibut\",\n        \"Hammerhead Shark\",\n        \"Hapuka\",\n        \"Harbor Porpoise\",\n        \"Harbor Seal\",\n        \"Hatchetfish\",\n        \"Hawaiian Monk Seal\",\n        \"Hawksbill Turtle\",\n        \"Hector's Dolphin\",\n        \"Hermit Crab\",\n        \"Herring\",\n        \"Hoki\",\n        \"Horn Shark\",\n        \"Horseshoe Crab\",\n        \"Humpback Anglerfish\",\n        \"Humpback Whale\",\n        \"Icefish\",\n        \"Imperator Angelfish\",\n        \"Irukandji Jellyfish\",\n        \"Isopod\",\n        \"Ivory Bush Coral\",\n        \"Japanese Spider Crab\",\n        \"Jellyfish\",\n        \"John Dory\",\n        \"Juan Fernandez Fur Seal\",\n        \"Killer Whale\",\n        \"Kiwa Hirsuta\",\n        \"Krill\",\n        \"Lagoon Triggerfish\",\n        \"Lamprey\",\n        \"Leafy Seadragon\",\n        \"Leopard Seal\",\n        \"Limpet\",\n        \"Ling\",\n        \"Lionfish\",\n        \"Lions Mane Jellyfish\",\n        \"Lobe Coral\",\n        \"Lobster\",\n        \"Loggerhead Turtle\",\n        \"Longnose Sawshark\",\n        \"Longsnout Seahorse\",\n        \"Lophelia Coral\",\n        \"Marrus Orthocanna\",\n        \"Manatee\",\n        \"Manta Ray\",\n        \"Marlin\",\n        \"Megamouth Shark\",\n        \"Mexican Lookdown\",\n        \"Mimic Octopus\",\n        \"Moon Jelly\",\n        \"Mollusk\",\n        \"Monkfish\",\n        \"Moray Eel\",\n        \"Mullet\",\n        \"Mussel\",\n        \"Megaladon\",\n        \"Napoleon Wrasse\",\n        \"Nassau Grouper\",\n        \"Narwhal\",\n        \"Nautilus\",\n        \"Needlefish\",\n        \"Northern Seahorse\",\n        \"North Atlantic Right Whale\",\n        \"Northern Red Snapper\",\n        \"Norway Lobster\",\n        \"Nudibranch\",\n        \"Nurse Shark\",\n        \"Oarfish\",\n        \"Ocean Sunfish\",\n        \"Oceanic Whitetip Shark\",\n        \"Octopus\",\n        \"Olive Sea Snake\",\n        \"Orange Roughy\",\n        \"Ostracod\",\n        \"Otter\",\n        \"Oyster\",\n        \"Pacific Angelshark\",\n        \"Pacific Blackdragon\",\n        \"Pacific Halibut\",\n        \"Pacific Sardine\",\n        \"Pacific Sea Nettle Jellyfish\",\n        \"Pacific White Sided Dolphin\",\n        \"Pantropical Spotted Dolphin\",\n        \"Patagonian Toothfish\",\n        \"Peacock Mantis Shrimp\",\n        \"Pelagic Thresher Shark\",\n        \"Penguin\",\n        \"Peruvian Anchoveta\",\n        \"Pilchard\",\n        \"Pink Salmon\",\n        \"Pinniped\",\n        \"Plankton\",\n        \"Porpoise\",\n        \"Polar Bear\",\n        \"Portuguese Man o' War\",\n        \"Pycnogonid Sea Spider\",\n        \"Quahog\",\n        \"Queen Angelfish\",\n        \"Queen Conch\",\n        \"Queen Parrotfish\",\n        \"Queensland Grouper\",\n        \"Ragfish\",\n        \"Ratfish\",\n        \"Rattail Fish\",\n        \"Ray\",\n        \"Red Drum\",\n        \"Red King Crab\",\n        \"Ringed Seal\",\n        \"Risso's Dolphin\",\n        \"Ross Seals\",\n        \"Sablefish\",\n        \"Salmon\",\n        \"Sand Dollar\",\n        \"Sandbar Shark\",\n        \"Sawfish\",\n        \"Sarcastic Fringehead\",\n        \"Scalloped Hammerhead Shark\",\n        \"Seahorse\",\n        \"Sea Cucumber\",\n        \"Sea Lion\",\n        \"Sea Urchin\",\n        \"Seal\",\n        \"Shark\",\n        \"Shortfin Mako Shark\",\n        \"Shovelnose Guitarfish\",\n        \"Shrimp\",\n        \"Silverside Fish\",\n        \"Skipjack Tuna\",\n        \"Slender Snipe Eel\",\n        \"Smalltooth Sawfish\",\n        \"Smelts\",\n        \"Sockeye Salmon\",\n        \"Southern Stingray\",\n        \"Sponge\",\n        \"Spotted Porcupinefish\",\n        \"Spotted Dolphin\",\n        \"Spotted Eagle Ray\",\n        \"Spotted Moray\",\n        \"Squid\",\n        \"Squidworm\",\n        \"Starfish\",\n        \"Stickleback\",\n        \"Stonefish\",\n        \"Stoplight Loosejaw\",\n        \"Sturgeon\",\n        \"Swordfish\",\n        \"Tan Bristlemouth\",\n        \"Tasseled Wobbegong\",\n        \"Terrible Claw Lobster\",\n        \"Threespot Damselfish\",\n        \"Tiger Prawn\",\n        \"Tiger Shark\",\n        \"Tilefish\",\n        \"Toadfish\",\n        \"Tropical Two-Wing Flyfish\",\n        \"Tuna\",\n        \"Umbrella Squid\",\n        \"Velvet Crab\",\n        \"Venus Flytrap Sea Anemone\",\n        \"Vigtorniella Worm\",\n        \"Viperfish\",\n        \"Vampire Squid\",\n        \"Vaquita\",\n        \"Wahoo\",\n        \"Walrus\",\n        \"West Indian Manatee\",\n        \"Whale\",\n        \"Whale Shark\",\n        \"Whiptail Gulper\",\n        \"White-Beaked Dolphin\",\n        \"White-Ring Garden Eel\",\n        \"White Shrimp\",\n        \"Wobbegong\",\n        \"Wrasse\",\n        \"Wreckfish\",\n        \"Xiphosura\",\n        \"Yellowtail Damselfish\",\n        \"Yelloweye Rockfish\",\n        \"Yellow Cup Black Coral\",\n        \"Yellow Tube Sponge\",\n        \"Yellowfin Tuna\",\n        \"Zebrashark\",\n        \"Zooplankton\"\n    ],\n    // list of desert, grassland, and forest animals comes from http://www.skyenimals.com/\n    desert: [\n        \"Aardwolf\",\n        \"Addax\",\n        \"African Wild Ass\",\n        \"Ant\",\n        \"Antelope\",\n        \"Armadillo\",\n        \"Baboon\",\n        \"Badger\",\n        \"Bat\",\n        \"Bearded Dragon\",\n        \"Beetle\",\n        \"Bird\",\n        \"Black-footed Cat\",\n        \"Boa\",\n        \"Brown Bear\",\n        \"Bustard\",\n        \"Butterfly\",\n        \"Camel\",\n        \"Caracal\",\n        \"Caracara\",\n        \"Caterpillar\",\n        \"Centipede\",\n        \"Cheetah\",\n        \"Chipmunk\",\n        \"Chuckwalla\",\n        \"Climbing Mouse\",\n        \"Coati\",\n        \"Cobra\",\n        \"Cotton Rat\",\n        \"Cougar\",\n        \"Courser\",\n        \"Crane Fly\",\n        \"Crow\",\n        \"Dassie Rat\",\n        \"Dove\",\n        \"Dunnart\",\n        \"Eagle\",\n        \"Echidna\",\n        \"Elephant\",\n        \"Emu\",\n        \"Falcon\",\n        \"Fly\",\n        \"Fox\",\n        \"Frogmouth\",\n        \"Gecko\",\n        \"Geoffroy's Cat\",\n        \"Gerbil\",\n        \"Grasshopper\",\n        \"Guanaco\",\n        \"Gundi\",\n        \"Hamster\",\n        \"Hawk\",\n        \"Hedgehog\",\n        \"Hyena\",\n        \"Hyrax\",\n        \"Jackal\",\n        \"Kangaroo\",\n        \"Kangaroo Rat\",\n        \"Kestrel\",\n        \"Kowari\",\n        \"Kultarr\",\n        \"Leopard\",\n        \"Lion\",\n        \"Macaw\",\n        \"Meerkat\",\n        \"Mouse\",\n        \"Oryx\",\n        \"Ostrich\",\n        \"Owl\",\n        \"Pronghorn\",\n        \"Python\",\n        \"Rabbit\",\n        \"Raccoon\",\n        \"Rattlesnake\",\n        \"Rhinoceros\",\n        \"Sand Cat\",\n        \"Spectacled Bear\",\n        \"Spiny Mouse\",\n        \"Starling\",\n        \"Stick Bug\",\n        \"Tarantula\",\n        \"Tit\",\n        \"Toad\",\n        \"Tortoise\",\n        \"Tyrant Flycatcher\",\n        \"Viper\",\n        \"Vulture\",\n        \"Waxwing\",\n        \"Xerus\",\n        \"Zebra\"\n    ],\n    grassland: [\n        \"Aardvark\",\n        \"Aardwolf\",\n        \"Accentor\",\n        \"African Buffalo\",\n        \"African Wild Dog\",\n        \"Alpaca\",\n        \"Anaconda\",\n        \"Ant\",\n        \"Anteater\",\n        \"Antelope\",\n        \"Armadillo\",\n        \"Baboon\",\n        \"Badger\",\n        \"Bandicoot\",\n        \"Barbet\",\n        \"Bat\",\n        \"Bee\",\n        \"Bee-eater\",\n        \"Beetle\",\n        \"Bird\",\n        \"Bison\",\n        \"Black-footed Cat\",\n        \"Black-footed Ferret\",\n        \"Bluebird\",\n        \"Boa\",\n        \"Bowerbird\",\n        \"Brown Bear\",\n        \"Bush Dog\",\n        \"Bushshrike\",\n        \"Bustard\",\n        \"Butterfly\",\n        \"Buzzard\",\n        \"Caracal\",\n        \"Caracara\",\n        \"Cardinal\",\n        \"Caterpillar\",\n        \"Cheetah\",\n        \"Chipmunk\",\n        \"Civet\",\n        \"Climbing Mouse\",\n        \"Clouded Leopard\",\n        \"Coati\",\n        \"Cobra\",\n        \"Cockatoo\",\n        \"Cockroach\",\n        \"Common Genet\",\n        \"Cotton Rat\",\n        \"Cougar\",\n        \"Courser\",\n        \"Coyote\",\n        \"Crane\",\n        \"Crane Fly\",\n        \"Cricket\",\n        \"Crow\",\n        \"Culpeo\",\n        \"Death Adder\",\n        \"Deer\",\n        \"Deer Mouse\",\n        \"Dingo\",\n        \"Dinosaur\",\n        \"Dove\",\n        \"Drongo\",\n        \"Duck\",\n        \"Duiker\",\n        \"Dunnart\",\n        \"Eagle\",\n        \"Echidna\",\n        \"Elephant\",\n        \"Elk\",\n        \"Emu\",\n        \"Falcon\",\n        \"Finch\",\n        \"Flea\",\n        \"Fly\",\n        \"Flying Frog\",\n        \"Fox\",\n        \"Frog\",\n        \"Frogmouth\",\n        \"Garter Snake\",\n        \"Gazelle\",\n        \"Gecko\",\n        \"Geoffroy's Cat\",\n        \"Gerbil\",\n        \"Giant Tortoise\",\n        \"Giraffe\",\n        \"Grasshopper\",\n        \"Grison\",\n        \"Groundhog\",\n        \"Grouse\",\n        \"Guanaco\",\n        \"Guinea Pig\",\n        \"Hamster\",\n        \"Harrier\",\n        \"Hartebeest\",\n        \"Hawk\",\n        \"Hedgehog\",\n        \"Helmetshrike\",\n        \"Hippopotamus\",\n        \"Hornbill\",\n        \"Hyena\",\n        \"Hyrax\",\n        \"Impala\",\n        \"Jackal\",\n        \"Jaguar\",\n        \"Jaguarundi\",\n        \"Kangaroo\",\n        \"Kangaroo Rat\",\n        \"Kestrel\",\n        \"Kultarr\",\n        \"Ladybug\",\n        \"Leopard\",\n        \"Lion\",\n        \"Macaw\",\n        \"Meerkat\",\n        \"Mouse\",\n        \"Newt\",\n        \"Oryx\",\n        \"Ostrich\",\n        \"Owl\",\n        \"Pangolin\",\n        \"Pheasant\",\n        \"Prairie Dog\",\n        \"Pronghorn\",\n        \"Przewalski's Horse\",\n        \"Python\",\n        \"Quoll\",\n        \"Rabbit\",\n        \"Raven\",\n        \"Rhinoceros\",\n        \"Shelduck\",\n        \"Sloth Bear\",\n        \"Spectacled Bear\",\n        \"Squirrel\",\n        \"Starling\",\n        \"Stick Bug\",\n        \"Tamandua\",\n        \"Tasmanian Devil\",\n        \"Thornbill\",\n        \"Thrush\",\n        \"Toad\",\n        \"Tortoise\"\n    ],\n    forest: [\n        \"Agouti\",\n        \"Anaconda\",\n        \"Anoa\",\n        \"Ant\",\n        \"Anteater\",\n        \"Antelope\",\n        \"Armadillo\",\n        \"Asian Black Bear\",\n        \"Aye-aye\",\n        \"Babirusa\",\n        \"Baboon\",\n        \"Badger\",\n        \"Bandicoot\",\n        \"Banteng\",\n        \"Barbet\",\n        \"Basilisk\",\n        \"Bat\",\n        \"Bearded Dragon\",\n        \"Bee\",\n        \"Bee-eater\",\n        \"Beetle\",\n        \"Bettong\",\n        \"Binturong\",\n        \"Bird-of-paradise\",\n        \"Bongo\",\n        \"Bowerbird\",\n        \"Bulbul\",\n        \"Bush Dog\",\n        \"Bushbaby\",\n        \"Bushshrike\",\n        \"Butterfly\",\n        \"Buzzard\",\n        \"Caecilian\",\n        \"Cardinal\",\n        \"Cassowary\",\n        \"Caterpillar\",\n        \"Centipede\",\n        \"Chameleon\",\n        \"Chimpanzee\",\n        \"Cicada\",\n        \"Civet\",\n        \"Clouded Leopard\",\n        \"Coati\",\n        \"Cobra\",\n        \"Cockatoo\",\n        \"Cockroach\",\n        \"Colugo\",\n        \"Cotinga\",\n        \"Cotton Rat\",\n        \"Cougar\",\n        \"Crane Fly\",\n        \"Cricket\",\n        \"Crocodile\",\n        \"Crow\",\n        \"Cuckoo\",\n        \"Cuscus\",\n        \"Death Adder\",\n        \"Deer\",\n        \"Dhole\",\n        \"Dingo\",\n        \"Dinosaur\",\n        \"Drongo\",\n        \"Duck\",\n        \"Duiker\",\n        \"Eagle\",\n        \"Echidna\",\n        \"Elephant\",\n        \"Finch\",\n        \"Flat-headed Cat\",\n        \"Flea\",\n        \"Flowerpecker\",\n        \"Fly\",\n        \"Flying Frog\",\n        \"Fossa\",\n        \"Frog\",\n        \"Frogmouth\",\n        \"Gaur\",\n        \"Gecko\",\n        \"Gorilla\",\n        \"Grison\",\n        \"Hawaiian Honeycreeper\",\n        \"Hawk\",\n        \"Hedgehog\",\n        \"Helmetshrike\",\n        \"Hornbill\",\n        \"Hyrax\",\n        \"Iguana\",\n        \"Jackal\",\n        \"Jaguar\",\n        \"Jaguarundi\",\n        \"Kestrel\",\n        \"Ladybug\",\n        \"Lemur\",\n        \"Leopard\",\n        \"Lion\",\n        \"Macaw\",\n        \"Mandrill\",\n        \"Margay\",\n        \"Monkey\",\n        \"Mouse\",\n        \"Mouse Deer\",\n        \"Newt\",\n        \"Okapi\",\n        \"Old World Flycatcher\",\n        \"Orangutan\",\n        \"Owl\",\n        \"Pangolin\",\n        \"Peafowl\",\n        \"Pheasant\",\n        \"Possum\",\n        \"Python\",\n        \"Quokka\",\n        \"Rabbit\",\n        \"Raccoon\",\n        \"Red Panda\",\n        \"Red River Hog\",\n        \"Rhinoceros\",\n        \"Sloth Bear\",\n        \"Spectacled Bear\",\n        \"Squirrel\",\n        \"Starling\",\n        \"Stick Bug\",\n        \"Sun Bear\",\n        \"Tamandua\",\n        \"Tamarin\",\n        \"Tapir\",\n        \"Tarantula\",\n        \"Thrush\",\n        \"Tiger\",\n        \"Tit\",\n        \"Toad\",\n        \"Tortoise\",\n        \"Toucan\",\n        \"Trogon\",\n        \"Trumpeter\",\n        \"Turaco\",\n        \"Turtle\",\n        \"Tyrant Flycatcher\",\n        \"Viper\",\n        \"Vulture\",\n        \"Wallaby\",\n        \"Warbler\",\n        \"Wasp\",\n        \"Waxwing\",\n        \"Weaver\",\n        \"Weaver-finch\",\n        \"Whistler\",\n        \"White-eye\",\n        \"Whydah\",\n        \"Woodswallow\",\n        \"Worm\",\n        \"Wren\",\n        \"Xenops\",\n        \"Yellowjacket\",\n        \"Accentor\",\n        \"African Buffalo\",\n        \"American Black Bear\",\n        \"Anole\",\n        \"Bird\",\n        \"Bison\",\n        \"Boa\",\n        \"Brown Bear\",\n        \"Chipmunk\",\n        \"Common Genet\",\n        \"Copperhead\",\n        \"Coyote\",\n        \"Deer Mouse\",\n        \"Dormouse\",\n        \"Elk\",\n        \"Emu\",\n        \"Fisher\",\n        \"Fox\",\n        \"Garter Snake\",\n        \"Giant Panda\",\n        \"Giant Tortoise\",\n        \"Groundhog\",\n        \"Grouse\",\n        \"Guanaco\",\n        \"Himalayan Tahr\",\n        \"Kangaroo\",\n        \"Koala\",\n        \"Numbat\",\n        \"Quoll\",\n        \"Raccoon dog\",\n        \"Tasmanian Devil\",\n        \"Thornbill\",\n        \"Turkey\",\n        \"Vole\",\n        \"Weasel\",\n        \"Wildcat\",\n        \"Wolf\",\n        \"Wombat\",\n        \"Woodchuck\",\n        \"Woodpecker\"\n    ],\n    // list of farm animals comes from https://www.buzzle.com/articles/farm-animals-list.html\n    farm: [\n        \"Alpaca\",\n        \"Buffalo\",\n        \"Banteng\",\n        \"Cow\",\n        \"Cat\",\n        \"Chicken\",\n        \"Carp\",\n        \"Camel\",\n        \"Donkey\",\n        \"Dog\",\n        \"Duck\",\n        \"Emu\",\n        \"Goat\",\n        \"Gayal\",\n        \"Guinea\",\n        \"Goose\",\n        \"Horse\",\n        \"Honey\",\n        \"Llama\",\n        \"Pig\",\n        \"Pigeon\",\n        \"Rhea\",\n        \"Rabbit\",\n        \"Sheep\",\n        \"Silkworm\",\n        \"Turkey\",\n        \"Yak\",\n        \"Zebu\"\n    ],\n    // list of pet animals comes from https://www.dogbreedinfo.com/pets/pet.htm\n    pet: [\n        \"Bearded Dragon\",\n        \"Birds\",\n        \"Burro\",\n        \"Cats\",\n        \"Chameleons\",\n        \"Chickens\",\n        \"Chinchillas\",\n        \"Chinese Water Dragon\",\n        \"Cows\",\n        \"Dogs\",\n        \"Donkey\",\n        \"Ducks\",\n        \"Ferrets\",\n        \"Fish\",\n        \"Geckos\",\n        \"Geese\",\n        \"Gerbils\",\n        \"Goats\",\n        \"Guinea Fowl\",\n        \"Guinea Pigs\",\n        \"Hamsters\",\n        \"Hedgehogs\",\n        \"Horses\",\n        \"Iguanas\",\n        \"Llamas\",\n        \"Lizards\",\n        \"Mice\",\n        \"Mule\",\n        \"Peafowl\",\n        \"Pigs and Hogs\",\n        \"Pigeons\",\n        \"Ponies\",\n        \"Pot Bellied Pig\",\n        \"Rabbits\",\n        \"Rats\",\n        \"Sheep\",\n        \"Skinks\",\n        \"Snakes\",\n        \"Stick Insects\",\n        \"Sugar Gliders\",\n        \"Tarantula\",\n        \"Turkeys\",\n        \"Turtles\"\n    ],\n    // list of zoo animals comes from https://bronxzoo.com/animals\n    zoo: [\n        \"Aardvark\",\n        \"African Wild Dog\",\n        \"Aldabra Tortoise\",\n        \"American Alligator\",\n        \"American Bison\",\n        \"Amur Tiger\",\n        \"Anaconda\",\n        \"Andean Condor\",\n        \"Asian Elephant\",\n        \"Baby Doll Sheep\",\n        \"Bald Eagle\",\n        \"Barred Owl\",\n        \"Blue Iguana\",\n        \"Boer Goat\",\n        \"California Sea Lion\",\n        \"Caribbean Flamingo\",\n        \"Chinchilla\",\n        \"Collared Lemur\",\n        \"Coquerel's Sifaka\",\n        \"Cuban Amazon Parrot\",\n        \"Ebony Langur\",\n        \"Fennec Fox\",\n        \"Fossa\",\n        \"Gelada\",\n        \"Giant Anteater\",\n        \"Giraffe\",\n        \"Gorilla\",\n        \"Grizzly Bear\",\n        \"Henkel's Leaf-tailed Gecko\",\n        \"Indian Gharial\",\n        \"Indian Rhinoceros\",\n        \"King Cobra\",\n        \"King Vulture\",\n        \"Komodo Dragon\",\n        \"Linne's Two-toed Sloth\",\n        \"Lion\",\n        \"Little Penguin\",\n        \"Madagascar Tree Boa\",\n        \"Magellanic Penguin\",\n        \"Malayan Tapir\",\n        \"Malayan Tiger\",\n        \"Matschies Tree Kangaroo\",\n        \"Mini Donkey\",\n        \"Monarch Butterfly\",\n        \"Nile crocodile\",\n        \"North American Porcupine\",\n        \"Nubian Ibex\",\n        \"Okapi\",\n        \"Poison Dart Frog\",\n        \"Polar Bear\",\n        \"Pygmy Marmoset\",\n        \"Radiated Tortoise\",\n        \"Red Panda\",\n        \"Red Ruffed Lemur\",\n        \"Ring-tailed Lemur\",\n        \"Ring-tailed Mongoose\",\n        \"Rock Hyrax\",\n        \"Small Clawed Asian Otter\",\n        \"Snow Leopard\",\n        \"Snowy Owl\",\n        \"Southern White-faced Owl\",\n        \"Southern White Rhinocerous\",\n        \"Squirrel Monkey\",\n        \"Tufted Puffin\",\n        \"White Cheeked Gibbon\",\n        \"White-throated Bee Eater\",\n        \"Zebra\"\n    ]\n};\n\n// Source: https://en.wikipedia.org/wiki/List_of_population_centers_by_latitude\nconst cities: string[] = [\n    \"Alert\",\n    \"Nord\",\n    \"Eureka\",\n    \"Ny-Ålesund\",\n    \"Longyearbyen\",\n    \"Qaanaaq\",\n    \"Grise Fiord\",\n    \"Dikson\",\n    \"Upernavik\",\n    \"Tiksi\",\n    \"Belushya Guba\",\n    \"Barrow\",\n    \"Honningsvåg\",\n    \"Hammerfest\",\n    \"Deadhorse\",\n    \"Nuorgam\",\n    \"Vadsø\",\n    \"Alta\",\n    \"Utsjoki\",\n    \"Kirkenes\",\n    \"Tromsø\",\n    \"Tuktoyaktuk\",\n    \"Norilsk\",\n    \"Murmansk\",\n    \"Harstad\",\n    \"Narvik\",\n    \"Inuvik\",\n    \"Kiruna\",\n    \"Verkhoyansk\",\n    \"Bodø\",\n    \"Gällivare\",\n    \"Kemijärvi\",\n    \"Rovaniemi\",\n    \"Ísafjörður\",\n    \"Kuusamo\",\n    \"Tornio\",\n    \"Boden\",\n    \"Haparanda\",\n    \"Kemi\",\n    \"Akureyri\",\n    \"Luleå\",\n    \"Pudasjärvi\",\n    \"Piteå\",\n    \"Oulu\",\n    \"Fairbanks\",\n    \"Skellefteå\",\n    \"Anadyr\",\n    \"Arkhangelsk\",\n    \"Nome\",\n    \"Nuuk (Godthåb)\",\n    \"Reykjavík\",\n    \"Umeå\",\n    \"Iqaluit\",\n    \"Stjørdal\",\n    \"Trondheim\",\n    \"Örnsköldsvik\",\n    \"Östersund\",\n    \"Vaasa\",\n    \"Kuopio\",\n    \"Yellowknife\",\n    \"Sundsvall\",\n    \"Jyväskylä\",\n    \"Yakutsk\",\n    \"Tórshavn\",\n    \"Petrozavodsk\",\n    \"Tampere\",\n    \"Anchorage\",\n    \"Lillehammer\",\n    \"Lahti\",\n    \"Qaqortoq\",\n    \"Whitehorse\",\n    \"Turku\",\n    \"Bergen\",\n    \"Vantaa\",\n    \"Lerwick\",\n    \"Espoo\",\n    \"Helsinki\",\n    \"Oslo\",\n    \"Saint Petersburg\",\n    \"Uppsala\",\n    \"Fritz Creek\",\n    \"Magadan\",\n    \"Tallinn\",\n    \"Stockholm\",\n    \"Sarpsborg\",\n    \"Örebro\",\n    \"Vologda\",\n    \"Norrköping\",\n    \"Linköping\",\n    \"Tartu\",\n    \"Juneau\",\n    \"Arendal\",\n    \"Kristiansand\",\n    \"Perm\",\n    \"Valga\",\n    \"Gothenburg\",\n    \"Visby\",\n    \"Yaroslavl\",\n    \"Inverness\",\n    \"Aberdeen\",\n    \"Sitka\",\n    \"Riga\",\n    \"Izhevsk\",\n    \"Yekaterinburg\",\n    \"Fort McMurray\",\n    \"Dundee\",\n    \"Nizhny Novgorod\",\n    \"Stirling\",\n    \"Bratsk\",\n    \"Aarhus\",\n    \"Krasnoyarsk\",\n    \"Edinburgh\",\n    \"Glasgow\",\n    \"Kazan\",\n    \"Moscow\",\n    \"Copenhagen\",\n    \"Malmö\",\n    \"Esbjerg\",\n    \"Odense\",\n    \"Grande Prairie\",\n    \"Chelyabinsk\",\n    \"Novosibirsk\",\n    \"Derry\",\n    \"Omsk\",\n    \"Newcastle upon Tyne\",\n    \"Sunderland\",\n    \"Petropavl\",\n    \"Flensburg\",\n    \"Ufa\",\n    \"Kaliningrad\",\n    \"Vilnius\",\n    \"Belfast\",\n    \"Middlesbrough\",\n    \"Gdynia\",\n    \"Gdańsk\",\n    \"Kiel\",\n    \"Douglas\",\n    \"Rostock\",\n    \"Lancaster\",\n    \"York\",\n    \"Prince George\",\n    \"Minsk\",\n    \"Bradford\",\n    \"Leeds\",\n    \"Hamburg\",\n    \"Edmonton\",\n    \"Tolyatti\",\n    \"Manchester\",\n    \"Liverpool\",\n    \"Sheffield\",\n    \"Dublin\",\n    \"Groningen\",\n    \"Samara\",\n    \"Bremen\",\n    \"Petropavlovsk-Kamchatsky\",\n    \"Nottingham\",\n    \"Derby\",\n    \"Leicester\",\n    \"Norwich\",\n    \"Peterborough\",\n    \"Berlin\",\n    \"Birmingham\",\n    \"Gomel\",\n    \"Coventry\",\n    \"Poznań\",\n    \"Haarlem\",\n    \"Amsterdam\",\n    \"Hannover\",\n    \"Irkutsk\",\n    \"Warsaw\",\n    \"Enschede\",\n    \"Cambridge\",\n    \"Leiden\",\n    \"Saskatoon\",\n    \"Utrecht\",\n    \"The Hague\",\n    \"Münster\",\n    \"Rotterdam\",\n    \"Cork\",\n    \"Adak\",\n    \"Gloucester\",\n    \"Oxford\",\n    \"Voronezh\",\n    \"Swansea\",\n    \"Saratov\",\n    \"Dortmund\",\n    \"London\",\n    \"Cardiff\",\n    \"Greenwich\",\n    \"Bristol\",\n    \"Bath\",\n    \"Leipzig\",\n    \"Düsseldorf\",\n    \"Antwerp\",\n    \"Astana\",\n    \"Winchester\",\n    \"Calgary\",\n    \"Ghent\",\n    \"Dresden\",\n    \"Erfurt\",\n    \"Calais\",\n    \"Cologne\",\n    \"Southampton\",\n    \"Maastricht\",\n    \"Brussels\",\n    \"Brighton and Hove\",\n    \"Portsmouth\",\n    \"Exeter\",\n    \"Kamloops\",\n    \"Lille\",\n    \"Regina\",\n    \"Kiev\",\n    \"Charleroi\",\n    \"Plymouth\",\n    \"Frankfurt am Main\",\n    \"Prague\",\n    \"Kraków\",\n    \"Kharkiv\",\n    \"Winnipeg\",\n    \"Kelowna\",\n    \"Lviv\",\n    \"Luxembourg\",\n    \"Le Havre\",\n    \"Nuremberg\",\n    \"Rouen\",\n    \"Vancouver\",\n    \"Paris\",\n    \"Stuttgart\",\n    \"Bellingham\",\n    \"Volgograd\",\n    \"Strasbourg\",\n    \"Dnipro\",\n    \"Victoria\",\n    \"Saguenay\",\n    \"Brest\",\n    \"Thunder Bay\",\n    \"Linz\",\n    \"Vienna\",\n    \"Bratislava\",\n    \"Munich\",\n    \"Donetsk\",\n    \"Ulaanbaatar\",\n    \"Orléans\",\n    \"Salzburg\",\n    \"Seattle\",\n    \"St. John's\",\n    \"Basel\",\n    \"Budapest\",\n    \"Qiqihar\",\n    \"Zürich\",\n    \"Innsbruck\",\n    \"Rostov-on-Don\",\n    \"Nantes\",\n    \"Vaduz\",\n    \"Atyrau\",\n    \"Graz\",\n    \"Chişinău\",\n    \"Bern\",\n    \"Tiraspol\",\n    \"Quebec City\",\n    \"Bismarck\",\n    \"Duluth\",\n    \"Saint-Pierre\",\n    \"Cluj-Napoca\",\n    \"Moscow\",\n    \"Helena\",\n    \"Sault Ste. Marie\",\n    \"Lausanne\",\n    \"Sudbury\",\n    \"Odessa\",\n    \"North Bay\",\n    \"Charlottetown\",\n    \"Geneva\",\n    \"Moncton\",\n    \"Ljubljana\",\n    \"Fredericton\",\n    \"Zagreb\",\n    \"Lyon\",\n    \"Harbin\",\n    \"New Glasgow\",\n    \"Portland\",\n    \"Montreal\",\n    \"Milan\",\n    \"Venice\",\n    \"Ottawa\",\n    \"Wakkanai\",\n    \"Saint John\",\n    \"Novi Sad\",\n    \"Turin\",\n    \"Krasnodar\",\n    \"Minneapolis\",\n    \"Simferopol\",\n    \"Halifax\",\n    \"Bordeaux\",\n    \"Belgrade\",\n    \"Šabac\",\n    \"Drobeta Turnu Severin\",\n    \"Bologna\",\n    \"Bucharest\",\n    \"Ravenna\",\n    \"Genoa\",\n    \"Pierre\",\n    \"Craiova\",\n    \"Augusta\",\n    \"Montpelier\",\n    \"Bath\",\n    \"San Marino\",\n    \"Changchun\",\n    \"Sarajevo\",\n    \"Yarmouth\",\n    \"Ürümqi\",\n    \"Florence\",\n    \"Asahikawa\",\n    \"Monaco\",\n    \"Nice\",\n    \"Toronto\",\n    \"Boise\",\n    \"Toulouse\",\n    \"Sochi\",\n    \"Cannes\",\n    \"Gijón\",\n    \"Sioux Falls\",\n    \"Split\",\n    \"Oviedo\",\n    \"Nemuro\",\n    \"San Sebastián\",\n    \"Marseille\",\n    \"Almaty\",\n    \"Bilbao\",\n    \"Concord\",\n    \"Rochester\",\n    \"Vladivostok\",\n    \"Sapporo\",\n    \"Milwaukee\",\n    \"Sukhumi\",\n    \"Kushiro\",\n    \"London\",\n    \"Follonica\",\n    \"Obihiro\",\n    \"Buffalo\",\n    \"Santiago de Compostela\",\n    \"Bishkek\",\n    \"Vitoria-Gasteiz\",\n    \"Sofia\",\n    \"Pristina\",\n    \"Andorra la Vella\",\n    \"Nukus\",\n    \"Podgorica\",\n    \"Boston\",\n    \"Detroit\",\n    \"Windsor\",\n    \"Vigo\",\n    \"Tskhinvali\",\n    \"Avezzano\",\n    \"Skopje\",\n    \"Colchester\",\n    \"Rome\",\n    \"Vatican City\",\n    \"Chicago\",\n    \"Providence\",\n    \"Shenyang\",\n    \"Chongjin\",\n    \"Hartford\",\n    \"Hakodate\",\n    \"Tbilisi\",\n    \"Valladolid\",\n    \"Zaragoza\",\n    \"Des Moines\",\n    \"Braga\",\n    \"Cleveland\",\n    \"Barcelona\",\n    \"Tirana\",\n    \"Tashkent\",\n    \"Porto\",\n    \"Cheyenne\",\n    \"Bari\",\n    \"Fort Wayne\",\n    \"Istanbul\",\n    \"Trabzon\",\n    \"Namangan\",\n    \"Naples\",\n    \"Aomori\",\n    \"Lincoln\",\n    \"Eureka\",\n    \"Salt Lake City\",\n    \"Jersey City\",\n    \"New York City\",\n    \"Thessaloniki\",\n    \"Lleida\",\n    \"Pittsburgh\",\n    \"Baku\",\n    \"Madrid\",\n    \"Trenton\",\n    \"Bursa\",\n    \"Yerevan\",\n    \"Boulder\",\n    \"Columbus\",\n    \"Ankara\",\n    \"Philadelphia\",\n    \"Beijing\",\n    \"Stepanakert\",\n    \"Forked River\",\n    \"Eskisehir\",\n    \"Indianapolis\",\n    \"Denver\",\n    \"Akita\",\n    \"Morioka\",\n    \"Palma\",\n    \"Reno\",\n    \"Flores Island\",\n    \"Valencia\",\n    \"Baltimore\",\n    \"Cagliari\",\n    \"Dover\",\n    \"Wonsan\",\n    \"Tianjin\",\n    \"Cincinnati\",\n    \"Kansas City\",\n    \"Pyongyang\",\n    \"Ibiza\",\n    \"Dalian\",\n    \"Washington\",\n    \"Lisbon\",\n    \"St. Louis\",\n    \"Horta\",\n    \"Sacramento\",\n    \"Dushanbe\",\n    \"Angra do Heroísmo\",\n    \"Halkida\",\n    \"İzmir\",\n    \"Charleston\",\n    \"Alicante\",\n    \"Sendai\",\n    \"Louisville\",\n    \"Yamagata\",\n    \"Messina\",\n    \"Palermo\",\n    \"Tabriz\",\n    \"Shijiazhuang\",\n    \"Trapani\",\n    \"Athena\",\n    \"Kaesong\",\n    \"Ashgabat\",\n    \"Niigata\",\n    \"Taiyuan\",\n    \"Konya\",\n    \"Ponta Delgada\",\n    \"Oakland\",\n    \"San Francisco\",\n    \"Fukushima\",\n    \"Wichita\",\n    \"Seoul\",\n    \"San Jose\",\n    \"Catania\",\n    \"Incheon\",\n    \"Sevilla\",\n    \"Mugla\",\n    \"Springfield\",\n    \"Gaziantep\",\n    \"Adana\",\n    \"Virginia Beach\",\n    \"Almería\",\n    \"Tunis\",\n    \"Mersin\",\n    \"Algiers\",\n    \"Málaga\",\n    \"Toyama\",\n    \"Jinan\",\n    \"Nagano\",\n    \"Xining\",\n    \"Handan\",\n    \"Kanazawa\",\n    \"Utsunomiya\",\n    \"Maebashi\",\n    \"Mito\",\n    \"Mosul\",\n    \"Mashhad\",\n    \"Arbil\",\n    \"Las Vegas\",\n    \"Nashville\",\n    \"Gibraltar\",\n    \"Tulsa\",\n    \"Fukui\",\n    \"Qingdao\",\n    \"Lanzhou\",\n    \"Knoxville\",\n    \"Valletta\",\n    \"Birkirkara\",\n    \"Los Alamos\",\n    \"Daegu\",\n    \"Raleigh\",\n    \"Tangier\",\n    \"Tehran\",\n    \"Tokyo\",\n    \"Santa Fe\",\n    \"Kōfu\",\n    \"Chiba\",\n    \"Latakia\",\n    \"Kawasaki\",\n    \"Tottori\",\n    \"Oklahoma City\",\n    \"Matsue\",\n    \"Kirkuk\",\n    \"Yokohama\",\n    \"Gifu\",\n    \"Tiaret\",\n    \"Heraklion\",\n    \"Melilla\",\n    \"Charlotte\",\n    \"Nagoya\",\n    \"Busan\",\n    \"Nicosia\",\n    \"Memphis\",\n    \"Albuquerque\",\n    \"Ōtsu\",\n    \"Kyoto\",\n    \"Shizuoka\",\n    \"Zhengzhou\",\n    \"Little Rock\",\n    \"Sfax\",\n    \"Tsu\",\n    \"Osaka\",\n    \"Kōbe\",\n    \"Nara\",\n    \"Okayama\",\n    \"Kabul\",\n    \"Santa Barbara\",\n    \"Hiroshima\",\n    \"Takamatsu\",\n    \"Xi'an\",\n    \"Wakayama\",\n    \"Wilmington\",\n    \"Yamaguchi\",\n    \"Arak\",\n    \"Srinagar\",\n    \"Tokushima\",\n    \"Los Angeles\",\n    \"Rabat\",\n    \"Peshawar\",\n    \"Columbia\",\n    \"Riverside\",\n    \"Beirut\",\n    \"Matsuyama\",\n    \"Atlanta\",\n    \"Islamabad\",\n    \"Birmingham\",\n    \"Rawalpindi\",\n    \"Fukuoka\",\n    \"Kōchi\",\n    \"Casablanca\",\n    \"Damascus\",\n    \"Phoenix\",\n    \"Lubbock\",\n    \"Baghdad\",\n    \"Saga\",\n    \"Ōita\",\n    \"Tripoli\",\n    \"Charleston\",\n    \"Dallas\",\n    \"Nagasaki\",\n    \"Kumamoto\",\n    \"San Diego\",\n    \"Mexicali\",\n    \"Funchal\",\n    \"El Centro\",\n    \"Isfahan\",\n    \"Karbala\",\n    \"Tijuana\",\n    \"Shreveport\",\n    \"Jackson\",\n    \"Hamilton\",\n    \"Tucson\",\n    \"Benghazi\",\n    \"Tel Aviv\",\n    \"Nanjing\",\n    \"Najaf\",\n    \"Amman\",\n    \"Miyazaki\",\n    \"Ramallah\",\n    \"Ensenada\",\n    \"El Paso\",\n    \"Jerusalem\",\n    \"Ciudad Juárez\",\n    \"Amritsar\",\n    \"Marrakech\",\n    \"Kandahar\",\n    \"Kagoshima\",\n    \"Lahore\",\n    \"Gaza\",\n    \"Faisalabad\",\n    \"Port Said\",\n    \"Alexandria\",\n    \"Shanghai\",\n    \"Shimla\",\n    \"Ludhiana\",\n    \"Chandigarh\",\n    \"Mobile\",\n    \"Chengdu\",\n    \"Wuhan\",\n    \"Basra\",\n    \"Agadir\",\n    \"Jacksonville\",\n    \"Austin\",\n    \"Hangzhou\",\n    \"Multan\",\n    \"Cairo\",\n    \"New Orleans\",\n    \"Suez\",\n    \"Houston\",\n    \"Lhasa\",\n    \"Chongqing\",\n    \"Eilat\",\n    \"San Antonio\",\n    \"Kuwait City\",\n    \"Shigatse\",\n    \"Hermosillo\",\n    \"Chihuahua\",\n    \"New Delhi\",\n    \"Santa Cruz de Tenerife\",\n    \"Orlando\",\n    \"Las Palmas de Gran Canaria\",\n    \"Tampa\",\n    \"Corpus Christi\",\n    \"Maspalomas\",\n    \"Kathmandu\",\n    \"Dibrugarh\",\n    \"Thimphu\",\n    \"Gangtok\",\n    \"Agra\",\n    \"El Aaiún\",\n    \"Sabha\",\n    \"Jaipur\",\n    \"Lucknow\",\n    \"Siliguri\",\n    \"Tezpur\",\n    \"Kanpur\",\n    \"Dammam\",\n    \"Naha\",\n    \"Manama\",\n    \"Guwahati\",\n    \"Brownsville\",\n    \"Miami\",\n    \"Luxor\",\n    \"Monterrey\",\n    \"Patna\",\n    \"Shillong\",\n    \"Torreón\",\n    \"Kulpahar\",\n    \"Doha\",\n    \"Dubai\",\n    \"Hyderabad\",\n    \"Nassau\",\n    \"Kunming\",\n    \"Taipei\",\n    \"Karachi\",\n    \"Culiacán\",\n    \"Riyadh\",\n    \"Key West\",\n    \"Medina\",\n    \"Abu Dhabi\",\n    \"Al Ain\",\n    \"Taichung\",\n    \"Durango\",\n    \"Agartala\",\n    \"Dhaka\",\n    \"Muscat\",\n    \"Havana\",\n    \"Guangzhou\",\n    \"Ahmedabad\",\n    \"Dongguan\",\n    \"Tainan\",\n    \"Cabo San Lucas\",\n    \"Nanning\",\n    \"Kaohsiung\",\n    \"Kolkata (Calcutta)\",\n    \"Shenzhen\",\n    \"Chittagong\",\n    \"Hong Kong\",\n    \"Tampico\",\n    \"San Luis Potosí\",\n    \"Aguascalientes\",\n    \"Jeddah\",\n    \"Cockburn Town\",\n    \"Mecca\",\n    \"Honolulu\",\n    \"Chhattisgarh\",\n    \"Cancún\",\n    \"Surat\",\n    \"Nagpur\",\n    \"León\",\n    \"Hanoi\",\n    \"Mérida\",\n    \"Hai Phong\",\n    \"Zapopan\",\n    \"Puerto Vallarta\",\n    \"Guadalajara\",\n    \"Querétaro\",\n    \"Haikou\",\n    \"Santiago de Cuba\",\n    \"Chiang Rai\",\n    \"Naypyidaw\",\n    \"Hilo\",\n    \"George Town\",\n    \"Veracruz\",\n    \"Puebla\",\n    \"Mumbai\",\n    \"Chiang Mai\",\n    \"Port-au-Prince\",\n    \"Pune\",\n    \"Santo Domingo\",\n    \"San Juan\",\n    \"Road Town\",\n    \"Charlotte Amalie\",\n    \"The Valley\",\n    \"Nouakchott\",\n    \"Kingston\",\n    \"Vientiane\",\n    \"Visakhapatnam\",\n    \"Belize City\",\n    \"Udon Thani\",\n    \"Hyderabad\",\n    \"Basseterre\",\n    \"Belmopan\",\n    \"St. John's\",\n    \"Salalah\",\n    \"Acapulco\",\n    \"Yangon\",\n    \"Timbuktu\",\n    \"Huế\",\n    \"Khon Kaen\",\n    \"Da Nang\",\n    \"Basse-Terre\",\n    \"Omdurman\",\n    \"Khartoum\",\n    \"Sana'a\",\n    \"Asmara\",\n    \"Roseau\",\n    \"Saipan\",\n    \"Son My\",\n    \"Nakhon Ratchasima\",\n    \"Praia\",\n    \"Tapachula\",\n    \"Quetzaltenango\",\n    \"Thiès\",\n    \"Dakar\",\n    \"Quezon City\",\n    \"Guatemala City\",\n    \"Fort-de-France\",\n    \"Manila\",\n    \"Makati\",\n    \"Ayutthaya\",\n    \"Tegucigalpa\",\n    \"Castries\",\n    \"Bangkok\",\n    \"San Salvador\",\n    \"Niamey\",\n    \"Dededo\",\n    \"Hagåtña\",\n    \"Banjul\",\n    \"Serekunda\",\n    \"Siem Reap\",\n    \"Brikama\",\n    \"Kingstown\",\n    \"Bridgetown\",\n    \"Chennai (Madras)\",\n    \"Bangalore\",\n    \"Pattaya\",\n    \"Koulikoro\",\n    \"Bamako\",\n    \"Chinandega\",\n    \"Oranjestad\",\n    \"Ouagadougou\",\n    \"Managua\",\n    \"Willemstad\",\n    \"N'Djamena\",\n    \"St. George's\",\n    \"Kano\",\n    \"Bissau\",\n    \"Port Blair\",\n    \"Djibouti\",\n    \"Phnom Penh\",\n    \"Bobo-Dioulasso\",\n    \"Barranquilla\",\n    \"Ho Chi Minh City\",\n    \"Iloilo City\",\n    \"Port of Spain\",\n    \"Maracaibo\",\n    \"Liberia\",\n    \"Caracas\",\n    \"Chaguanas\",\n    \"Cartagena\",\n    \"San Fernando\",\n    \"Cebu City\",\n    \"Maracay\",\n    \"Valencia\",\n    \"Alajuela\",\n    \"Limón\",\n    \"Jaffna\",\n    \"Hargeisa\",\n    \"Puntarenas\",\n    \"Kochi\",\n    \"San José\",\n    \"Tagbilaran\",\n    \"Conakry\",\n    \"Tamale\",\n    \"Surat Thani\",\n    \"Abuja\",\n    \"Addis Ababa\",\n    \"Panama City\",\n    \"Mérida\",\n    \"Moundou\",\n    \"Trivandrum\",\n    \"Freetown\",\n    \"Ciudad Bolívar\",\n    \"Cúcuta\",\n    \"Phuket\",\n    \"San Cristóbal\",\n    \"Nzérékoré\",\n    \"Batticaloa\",\n    \"Melekeok\",\n    \"Weno\",\n    \"Ibadan\",\n    \"Koror\",\n    \"Kandy\",\n    \"Majuro\",\n    \"Davao City\",\n    \"Hat Yai\",\n    \"Colombo\",\n    \"Palikir\",\n    \"Sri Jayawardenapura-Kotte\",\n    \"Zamboanga City\",\n    \"Yamoussoukro\",\n    \"Georgetown\",\n    \"Kumasi\",\n    \"Porto-Novo\",\n    \"Lagos\",\n    \"Enugu\",\n    \"Cotonou\",\n    \"Benin City\",\n    \"Monrovia\",\n    \"Medellín\",\n    \"Lomé\",\n    \"Kota Bharu\",\n    \"Alor Setar\",\n    \"Kota Kinabalu\",\n    \"Paramaribo\",\n    \"Puerto Ayacucho\",\n    \"Accra\",\n    \"Banda Aceh\",\n    \"George Town\",\n    \"Abidjan\",\n    \"Cayenne\",\n    \"Sekondi-Takoradi\",\n    \"Bandar Seri Begawan\",\n    \"Juba\",\n    \"Port Harcourt\",\n    \"Ipoh\",\n    \"Bogotá\",\n    \"Miri\",\n    \"Bangui\",\n    \"Malé\",\n    \"Douala\",\n    \"Yaoundé\",\n    \"Malabo\",\n    \"Medan\",\n    \"Santiago de Cali\",\n    \"Kuala Lumpur\",\n    \"Boa Vista\",\n    \"Malacca Town\",\n    \"Mogadishu\",\n    \"Kuching\",\n    \"Johor Bahru\",\n    \"South Tarawa\",\n    \"Singapore\",\n    \"Pekanbaru\",\n    \"Libreville\",\n    \"São Tomé\",\n    \"Kampala\",\n    \"Entebbe\",\n    \"Mbandaka\",\n    \"Macapá\",\n    \"Pontianak\",\n    \"Quito\",\n    \"Kismayo\",\n    \"Yaren District\",\n    \"Padang\",\n    \"Balikpapan\",\n    \"Nairobi\",\n    \"Belém\",\n    \"Kigali\",\n    \"Guayaquil\",\n    \"Mwanza\",\n    \"São Luís\",\n    \"Jayapura\",\n    \"Palembang\",\n    \"Manaus\",\n    \"Bujumbura\",\n    \"Sobral\",\n    \"Ambon\",\n    \"Fortaleza\",\n    \"Iquitos\",\n    \"Fernando de Noronha\",\n    \"Mombasa\",\n    \"Brazzaville\",\n    \"Kinshasa\",\n    \"Victoria\",\n    \"Teresina\",\n    \"Makassar\",\n    \"Imperatriz\",\n    \"Natal\",\n    \"Zanzibar City\",\n    \"Dodoma\",\n    \"Jakarta\",\n    \"Bogor\",\n    \"Dar es Salaam\",\n    \"Bandung\",\n    \"Semarang\",\n    \"João Pessoa\",\n    \"Juazeiro do Norte\",\n    \"Campina Grande\",\n    \"Surabaya\",\n    \"Yogyakarta\",\n    \"Malang\",\n    \"Recife\",\n    \"Trujillo\",\n    \"Caruaru\",\n    \"Funafuti\",\n    \"Dili\",\n    \"Denpasar\",\n    \"Porto Velho\",\n    \"Luanda\",\n    \"Garanhuns\",\n    \"Nukulaelae\",\n    \"Petrolina\",\n    \"Honiara\",\n    \"Port Moresby\",\n    \"Maceió\",\n    \"Rio Branco\",\n    \"Aracaju\",\n    \"Palmas\",\n    \"Lubumbashi\",\n    \"Moroni\",\n    \"Sinop\",\n    \"Lima\",\n    \"Darwin\",\n    \"Huambo\",\n    \"Mamoudzou\",\n    \"Ndola\",\n    \"Salvador\",\n    \"Ayacucho\",\n    \"Mata-Utu\",\n    \"Cusco\",\n    \"Apia\",\n    \"Lilongwe\",\n    \"Pago Pago\",\n    \"Ilhéus\",\n    \"Lusaka\",\n    \"Cuiabá\",\n    \"Blantyre\",\n    \"Brasília\",\n    \"Jamestown\",\n    \"Arequipa\",\n    \"Labasa\",\n    \"Rabi Island\",\n    \"La Paz\",\n    \"Goiânia\",\n    \"Cairns\",\n    \"Papeete\",\n    \"Port Vila\",\n    \"Santa Cruz de la Sierra\",\n    \"Livingstone\",\n    \"Harare\",\n    \"Suva\",\n    \"Arica\",\n    \"Governador Valadares\",\n    \"Uberlândia\",\n    \"Antananarivo\",\n    \"Mutare\",\n    \"Sucre\",\n    \"Alofi\",\n    \"Townsville\",\n    \"Gweru\",\n    \"Belo Horizonte\",\n    \"Port Louis\",\n    \"Bulawayo\",\n    \"Iquique\",\n    \"Port Hedland\",\n    \"Vitória\",\n    \"Campo Grande\",\n    \"São José do Rio Preto\",\n    \"Saint-Denis\",\n    \"Nukuʻalofa\",\n    \"Francistown\",\n    \"Ribeirão Preto\",\n    \"Avarua\",\n    \"Juiz de Fora\",\n    \"Poços de Caldas\",\n    \"Araraquara\",\n    \"Nouméa\",\n    \"Bauru\",\n    \"Calama\",\n    \"Windhoek\",\n    \"Assis\",\n    \"Campinas\",\n    \"Rio de Janeiro\",\n    \"São José dos Campos\",\n    \"Rockhampton\",\n    \"São Paulo\",\n    \"Antofagasta\",\n    \"Polokwane\",\n    \"Gaborone\",\n    \"Salta\",\n    \"Adamstown\",\n    \"Asunción\",\n    \"Curitiba\",\n    \"Nelspruit\",\n    \"Ciudad del Este\",\n    \"Pretoria\",\n    \"Mafikeng\",\n    \"Maputo\",\n    \"Johannesburg\",\n    \"Mbabane\",\n    \"Lobamba\",\n    \"Manzini\",\n    \"San Miguel de Tucumán\",\n    \"Hanga Roa\",\n    \"Copiapó\",\n    \"Brisbane\",\n    \"Corrientes\",\n    \"Florianópolis\",\n    \"Gold Coast\",\n    \"Kimberley\",\n    \"Kingston\",\n    \"Bloemfontein\",\n    \"Maseru\",\n    \"Pietermaritzburg\",\n    \"Durban\",\n    \"La Serena\",\n    \"Córdoba\",\n    \"Santa Fe\",\n    \"Pelotas\",\n    \"Perth\",\n    \"San Juan\",\n    \"Mandurah\",\n    \"Bhisho\",\n    \"Mendoza\",\n    \"Newcastle\",\n    \"Rosario\",\n    \"Viña del Mar\",\n    \"Valparaíso\",\n    \"Santiago\",\n    \"Chuí\",\n    \"Sydney\",\n    \"Cape Town\",\n    \"Port Elizabeth\",\n    \"Wollongong\",\n    \"Buenos Aires\",\n    \"Montevideo\",\n    \"Adelaide\",\n    \"Canberra\",\n    \"Concepción\",\n    \"Auckland\",\n    \"Edinburgh of the Seven Seas\",\n    \"Hamilton\",\n    \"Melbourne\",\n    \"Mar del Plata\",\n    \"Geelong\",\n    \"Bahía Blanca\",\n    \"Temuco\",\n    \"Neuquén\",\n    \"Hastings\",\n    \"Valdivia\",\n    \"San Carlos de Bariloche\",\n    \"Nelson\",\n    \"Wellington\",\n    \"Puerto Montt\",\n    \"Launceston, Tasmania\",\n    \"Hobart\",\n    \"Trelew\",\n    \"Christchurch\",\n    \"Waitangi\",\n    \"Puerto Aisén\",\n    \"Coihaique\",\n    \"Comodoro Rivadavia\",\n    \"Dunedin\",\n    \"Invercargill\",\n    \"Río Gallegos\",\n    \"Stanley\",\n    \"Punta Arenas\",\n    \"Grytviken\",\n    \"Ushuaia\",\n    \"Puerto Williams\",\n    \"Puerto Toro\",\n    \"Villa Las Estrellas\",\n    \"Esperanza\",\n    \"Rothera\",\n    \"Concordia\"\n];\n","import $bdjGp$base64js from \"base64-js\";\nimport $bdjGp$unicodetrie from \"unicode-trie\";\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n\nvar $f4087201da764553$exports = {};\n$f4087201da764553$exports = JSON.parse('{\"categories\":[\"Cc\",\"Zs\",\"Po\",\"Sc\",\"Ps\",\"Pe\",\"Sm\",\"Pd\",\"Nd\",\"Lu\",\"Sk\",\"Pc\",\"Ll\",\"So\",\"Lo\",\"Pi\",\"Cf\",\"No\",\"Pf\",\"Lt\",\"Lm\",\"Mn\",\"Me\",\"Mc\",\"Nl\",\"Zl\",\"Zp\",\"Cs\",\"Co\"],\"combiningClasses\":[\"Not_Reordered\",\"Above\",\"Above_Right\",\"Below\",\"Attached_Above_Right\",\"Attached_Below\",\"Overlay\",\"Iota_Subscript\",\"Double_Below\",\"Double_Above\",\"Below_Right\",\"Above_Left\",\"CCC10\",\"CCC11\",\"CCC12\",\"CCC13\",\"CCC14\",\"CCC15\",\"CCC16\",\"CCC17\",\"CCC18\",\"CCC19\",\"CCC20\",\"CCC21\",\"CCC22\",\"CCC23\",\"CCC24\",\"CCC25\",\"CCC30\",\"CCC31\",\"CCC32\",\"CCC27\",\"CCC28\",\"CCC29\",\"CCC33\",\"CCC34\",\"CCC35\",\"CCC36\",\"Nukta\",\"Virama\",\"CCC84\",\"CCC91\",\"CCC103\",\"CCC107\",\"CCC118\",\"CCC122\",\"CCC129\",\"CCC130\",\"CCC132\",\"Attached_Above\",\"Below_Left\",\"Left\",\"Kana_Voicing\",\"CCC26\",\"Right\"],\"scripts\":[\"Common\",\"Latin\",\"Bopomofo\",\"Inherited\",\"Greek\",\"Coptic\",\"Cyrillic\",\"Armenian\",\"Hebrew\",\"Arabic\",\"Syriac\",\"Thaana\",\"Nko\",\"Samaritan\",\"Mandaic\",\"Devanagari\",\"Bengali\",\"Gurmukhi\",\"Gujarati\",\"Oriya\",\"Tamil\",\"Telugu\",\"Kannada\",\"Malayalam\",\"Sinhala\",\"Thai\",\"Lao\",\"Tibetan\",\"Myanmar\",\"Georgian\",\"Hangul\",\"Ethiopic\",\"Cherokee\",\"Canadian_Aboriginal\",\"Ogham\",\"Runic\",\"Tagalog\",\"Hanunoo\",\"Buhid\",\"Tagbanwa\",\"Khmer\",\"Mongolian\",\"Limbu\",\"Tai_Le\",\"New_Tai_Lue\",\"Buginese\",\"Tai_Tham\",\"Balinese\",\"Sundanese\",\"Batak\",\"Lepcha\",\"Ol_Chiki\",\"Braille\",\"Glagolitic\",\"Tifinagh\",\"Han\",\"Hiragana\",\"Katakana\",\"Yi\",\"Lisu\",\"Vai\",\"Bamum\",\"Syloti_Nagri\",\"Phags_Pa\",\"Saurashtra\",\"Kayah_Li\",\"Rejang\",\"Javanese\",\"Cham\",\"Tai_Viet\",\"Meetei_Mayek\",\"null\",\"Linear_B\",\"Lycian\",\"Carian\",\"Old_Italic\",\"Gothic\",\"Old_Permic\",\"Ugaritic\",\"Old_Persian\",\"Deseret\",\"Shavian\",\"Osmanya\",\"Osage\",\"Elbasan\",\"Caucasian_Albanian\",\"Linear_A\",\"Cypriot\",\"Imperial_Aramaic\",\"Palmyrene\",\"Nabataean\",\"Hatran\",\"Phoenician\",\"Lydian\",\"Meroitic_Hieroglyphs\",\"Meroitic_Cursive\",\"Kharoshthi\",\"Old_South_Arabian\",\"Old_North_Arabian\",\"Manichaean\",\"Avestan\",\"Inscriptional_Parthian\",\"Inscriptional_Pahlavi\",\"Psalter_Pahlavi\",\"Old_Turkic\",\"Old_Hungarian\",\"Hanifi_Rohingya\",\"Old_Sogdian\",\"Sogdian\",\"Elymaic\",\"Brahmi\",\"Kaithi\",\"Sora_Sompeng\",\"Chakma\",\"Mahajani\",\"Sharada\",\"Khojki\",\"Multani\",\"Khudawadi\",\"Grantha\",\"Newa\",\"Tirhuta\",\"Siddham\",\"Modi\",\"Takri\",\"Ahom\",\"Dogra\",\"Warang_Citi\",\"Nandinagari\",\"Zanabazar_Square\",\"Soyombo\",\"Pau_Cin_Hau\",\"Bhaiksuki\",\"Marchen\",\"Masaram_Gondi\",\"Gunjala_Gondi\",\"Makasar\",\"Cuneiform\",\"Egyptian_Hieroglyphs\",\"Anatolian_Hieroglyphs\",\"Mro\",\"Bassa_Vah\",\"Pahawh_Hmong\",\"Medefaidrin\",\"Miao\",\"Tangut\",\"Nushu\",\"Duployan\",\"SignWriting\",\"Nyiakeng_Puachue_Hmong\",\"Wancho\",\"Mende_Kikakui\",\"Adlam\"],\"eaw\":[\"N\",\"Na\",\"A\",\"W\",\"H\",\"F\"]}');\n\n\nconst $747425b437e121da$var$trie = new (0, $bdjGp$unicodetrie)((0, $bdjGp$base64js).toByteArray(\"\"));\nconst $747425b437e121da$var$log2 = Math.log2 || ((n)=>Math.log(n) / Math.LN2);\nconst $747425b437e121da$var$bits = (n)=>$747425b437e121da$var$log2(n) + 1 | 0;\n// compute the number of bits stored for each field\nconst $747425b437e121da$var$CATEGORY_BITS = $747425b437e121da$var$bits((0, (/*@__PURE__*/$parcel$interopDefault($f4087201da764553$exports))).categories.length - 1);\nconst $747425b437e121da$var$COMBINING_BITS = $747425b437e121da$var$bits((0, (/*@__PURE__*/$parcel$interopDefault($f4087201da764553$exports))).combiningClasses.length - 1);\nconst $747425b437e121da$var$SCRIPT_BITS = $747425b437e121da$var$bits((0, (/*@__PURE__*/$parcel$interopDefault($f4087201da764553$exports))).scripts.length - 1);\nconst $747425b437e121da$var$EAW_BITS = $747425b437e121da$var$bits((0, (/*@__PURE__*/$parcel$interopDefault($f4087201da764553$exports))).eaw.length - 1);\nconst $747425b437e121da$var$NUMBER_BITS = 10;\n// compute shift and mask values for each field\nconst $747425b437e121da$var$CATEGORY_SHIFT = $747425b437e121da$var$COMBINING_BITS + $747425b437e121da$var$SCRIPT_BITS + $747425b437e121da$var$EAW_BITS + $747425b437e121da$var$NUMBER_BITS;\nconst $747425b437e121da$var$COMBINING_SHIFT = $747425b437e121da$var$SCRIPT_BITS + $747425b437e121da$var$EAW_BITS + $747425b437e121da$var$NUMBER_BITS;\nconst $747425b437e121da$var$SCRIPT_SHIFT = $747425b437e121da$var$EAW_BITS + $747425b437e121da$var$NUMBER_BITS;\nconst $747425b437e121da$var$EAW_SHIFT = $747425b437e121da$var$NUMBER_BITS;\nconst $747425b437e121da$var$CATEGORY_MASK = (1 << $747425b437e121da$var$CATEGORY_BITS) - 1;\nconst $747425b437e121da$var$COMBINING_MASK = (1 << $747425b437e121da$var$COMBINING_BITS) - 1;\nconst $747425b437e121da$var$SCRIPT_MASK = (1 << $747425b437e121da$var$SCRIPT_BITS) - 1;\nconst $747425b437e121da$var$EAW_MASK = (1 << $747425b437e121da$var$EAW_BITS) - 1;\nconst $747425b437e121da$var$NUMBER_MASK = (1 << $747425b437e121da$var$NUMBER_BITS) - 1;\nfunction $747425b437e121da$export$410364bbb673ddbc(codePoint) {\n    const val = $747425b437e121da$var$trie.get(codePoint);\n    return (0, (/*@__PURE__*/$parcel$interopDefault($f4087201da764553$exports))).categories[val >> $747425b437e121da$var$CATEGORY_SHIFT & $747425b437e121da$var$CATEGORY_MASK];\n}\nfunction $747425b437e121da$export$c03b919c6651ed55(codePoint) {\n    const val = $747425b437e121da$var$trie.get(codePoint);\n    return (0, (/*@__PURE__*/$parcel$interopDefault($f4087201da764553$exports))).combiningClasses[val >> $747425b437e121da$var$COMBINING_SHIFT & $747425b437e121da$var$COMBINING_MASK];\n}\nfunction $747425b437e121da$export$941569448d136665(codePoint) {\n    const val = $747425b437e121da$var$trie.get(codePoint);\n    return (0, (/*@__PURE__*/$parcel$interopDefault($f4087201da764553$exports))).scripts[val >> $747425b437e121da$var$SCRIPT_SHIFT & $747425b437e121da$var$SCRIPT_MASK];\n}\nfunction $747425b437e121da$export$92f6187db8ca6d26(codePoint) {\n    const val = $747425b437e121da$var$trie.get(codePoint);\n    return (0, (/*@__PURE__*/$parcel$interopDefault($f4087201da764553$exports))).eaw[val >> $747425b437e121da$var$EAW_SHIFT & $747425b437e121da$var$EAW_MASK];\n}\nfunction $747425b437e121da$export$7d1258ebb7625a0d(codePoint) {\n    let val = $747425b437e121da$var$trie.get(codePoint);\n    let num = val & $747425b437e121da$var$NUMBER_MASK;\n    if (num === 0) return null;\n    else if (num <= 50) return num - 1;\n    else if (num < 0x1e0) {\n        const numerator = (num >> 4) - 12;\n        const denominator = (num & 0xf) + 1;\n        return numerator / denominator;\n    } else if (num < 0x300) {\n        val = (num >> 5) - 14;\n        let exp = (num & 0x1f) + 2;\n        while(exp > 0){\n            val *= 10;\n            exp--;\n        }\n        return val;\n    } else {\n        val = (num >> 2) - 0xbf;\n        let exp = (num & 3) + 1;\n        while(exp > 0){\n            val *= 60;\n            exp--;\n        }\n        return val;\n    }\n}\nfunction $747425b437e121da$export$52c8ea63abd07594(codePoint) {\n    const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);\n    return category === \"Lu\" || category === \"Ll\" || category === \"Lt\" || category === \"Lm\" || category === \"Lo\" || category === \"Nl\";\n}\nfunction $747425b437e121da$export$727d9dbc4fbb948f(codePoint) {\n    return $747425b437e121da$export$410364bbb673ddbc(codePoint) === \"Nd\";\n}\nfunction $747425b437e121da$export$a5b49f4dc6a07d2c(codePoint) {\n    const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);\n    return category === \"Pc\" || category === \"Pd\" || category === \"Pe\" || category === \"Pf\" || category === \"Pi\" || category === \"Po\" || category === \"Ps\";\n}\nfunction $747425b437e121da$export$7b6804e8df61fcf5(codePoint) {\n    return $747425b437e121da$export$410364bbb673ddbc(codePoint) === \"Ll\";\n}\nfunction $747425b437e121da$export$aebd617640818cda(codePoint) {\n    return $747425b437e121da$export$410364bbb673ddbc(codePoint) === \"Lu\";\n}\nfunction $747425b437e121da$export$de8b4ee23b2cf823(codePoint) {\n    return $747425b437e121da$export$410364bbb673ddbc(codePoint) === \"Lt\";\n}\nfunction $747425b437e121da$export$3c52dd84024ae72c(codePoint) {\n    const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);\n    return category === \"Zs\" || category === \"Zl\" || category === \"Zp\";\n}\nfunction $747425b437e121da$export$a11bdcffe109e74b(codePoint) {\n    const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);\n    return category === \"Nd\" || category === \"No\" || category === \"Nl\" || category === \"Lu\" || category === \"Ll\" || category === \"Lt\" || category === \"Lm\" || category === \"Lo\" || category === \"Me\" || category === \"Mc\";\n}\nfunction $747425b437e121da$export$e33ad6871e762338(codePoint) {\n    const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);\n    return category === \"Mn\" || category === \"Me\" || category === \"Mc\";\n}\nvar // Backwards compatibility.\n$747425b437e121da$export$2e2bcd8739ae039 = {\n    getCategory: $747425b437e121da$export$410364bbb673ddbc,\n    getCombiningClass: $747425b437e121da$export$c03b919c6651ed55,\n    getScript: $747425b437e121da$export$941569448d136665,\n    getEastAsianWidth: $747425b437e121da$export$92f6187db8ca6d26,\n    getNumericValue: $747425b437e121da$export$7d1258ebb7625a0d,\n    isAlphabetic: $747425b437e121da$export$52c8ea63abd07594,\n    isDigit: $747425b437e121da$export$727d9dbc4fbb948f,\n    isPunctuation: $747425b437e121da$export$a5b49f4dc6a07d2c,\n    isLowerCase: $747425b437e121da$export$7b6804e8df61fcf5,\n    isUpperCase: $747425b437e121da$export$aebd617640818cda,\n    isTitleCase: $747425b437e121da$export$de8b4ee23b2cf823,\n    isWhiteSpace: $747425b437e121da$export$3c52dd84024ae72c,\n    isBaseForm: $747425b437e121da$export$a11bdcffe109e74b,\n    isMark: $747425b437e121da$export$e33ad6871e762338\n};\n\n\nexport {$747425b437e121da$export$410364bbb673ddbc as getCategory, $747425b437e121da$export$c03b919c6651ed55 as getCombiningClass, $747425b437e121da$export$941569448d136665 as getScript, $747425b437e121da$export$92f6187db8ca6d26 as getEastAsianWidth, $747425b437e121da$export$7d1258ebb7625a0d as getNumericValue, $747425b437e121da$export$52c8ea63abd07594 as isAlphabetic, $747425b437e121da$export$727d9dbc4fbb948f as isDigit, $747425b437e121da$export$a5b49f4dc6a07d2c as isPunctuation, $747425b437e121da$export$7b6804e8df61fcf5 as isLowerCase, $747425b437e121da$export$aebd617640818cda as isUpperCase, $747425b437e121da$export$de8b4ee23b2cf823 as isTitleCase, $747425b437e121da$export$3c52dd84024ae72c as isWhiteSpace, $747425b437e121da$export$a11bdcffe109e74b as isBaseForm, $747425b437e121da$export$e33ad6871e762338 as isMark, $747425b437e121da$export$2e2bcd8739ae039 as default};\n//# sourceMappingURL=module.mjs.map\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { type Ref } from \"./input/JSONSchemaInput\";\nimport { type StringMap } from \"./support/Support\";\n\nexport type ErrorProperties =\n    | { kind: \"InternalError\"; properties: { message: string } }\n\n    // Misc\n    | {\n          kind: \"MiscJSONParseError\";\n          properties: { address: string; description: string; message: string };\n      }\n    | { kind: \"MiscReadError\"; properties: { fileOrURL: string; message: string } }\n    | { kind: \"MiscUnicodeHighSurrogateWithoutLowSurrogate\"; properties: {} }\n    | { kind: \"MiscInvalidMinMaxConstraint\"; properties: { max: number; min: number } }\n\n    // Inference\n    | { kind: \"InferenceJSONReferenceNotRooted\"; properties: { reference: string } }\n    | { kind: \"InferenceJSONReferenceToUnion\"; properties: { reference: string } }\n    | { kind: \"InferenceJSONReferenceWrongProperty\"; properties: { reference: string } }\n    | { kind: \"InferenceJSONReferenceInvalidArrayIndex\"; properties: { reference: string } }\n\n    // JSON Schema input\n    | { kind: \"SchemaArrayIsInvalidSchema\"; properties: { ref: Ref } }\n    | { kind: \"SchemaNullIsInvalidSchema\"; properties: { ref: Ref } }\n    | { kind: \"SchemaRefMustBeString\"; properties: { actual: string; ref: Ref } }\n    | { kind: \"SchemaAdditionalTypesForbidRequired\"; properties: { ref: Ref } }\n    | { kind: \"SchemaNoTypeSpecified\"; properties: { ref: Ref } }\n    | { kind: \"SchemaInvalidType\"; properties: { ref: Ref; type: string } }\n    | { kind: \"SchemaFalseNotSupported\"; properties: { ref: Ref } }\n    | { kind: \"SchemaInvalidJSONSchemaType\"; properties: { ref: Ref; type: string } }\n    | { kind: \"SchemaRequiredMustBeStringOrStringArray\"; properties: { actual: any; ref: Ref } }\n    | { kind: \"SchemaRequiredElementMustBeString\"; properties: { element: any; ref: Ref } }\n    | { kind: \"SchemaTypeMustBeStringOrStringArray\"; properties: { actual: any } }\n    | { kind: \"SchemaTypeElementMustBeString\"; properties: { element: any; ref: Ref } }\n    | { kind: \"SchemaArrayItemsMustBeStringOrArray\"; properties: { actual: any; ref: Ref } }\n    | { kind: \"SchemaIDMustHaveAddress\"; properties: { id: string; ref: Ref } }\n    | { kind: \"SchemaWrongAccessorEntryArrayLength\"; properties: { operation: string; ref: Ref } }\n    | {\n          kind: \"SchemaSetOperationCasesIsNotArray\";\n          properties: { cases: any; operation: string; ref: Ref };\n      }\n    | { kind: \"SchemaMoreThanOneUnionMemberName\"; properties: { names: string[] } }\n    | { kind: \"SchemaCannotGetTypesFromBoolean\"; properties: { ref: string } }\n    | { kind: \"SchemaCannotIndexArrayWithNonNumber\"; properties: { actual: string; ref: Ref } }\n    | { kind: \"SchemaIndexNotInArray\"; properties: { index: number; ref: Ref } }\n    | { kind: \"SchemaKeyNotInObject\"; properties: { key: string; ref: Ref } }\n    | { kind: \"SchemaFetchError\"; properties: { address: string; base: Ref } }\n    | { kind: \"SchemaFetchErrorTopLevel\"; properties: { address: string } }\n    | { kind: \"SchemaFetchErrorAdditional\"; properties: { address: string } }\n\n    // GraphQL input\n    | { kind: \"GraphQLNoQueriesDefined\"; properties: {} }\n\n    // Driver\n    | { kind: \"DriverUnknownSourceLanguage\"; properties: { lang: string } }\n    | { kind: \"DriverUnknownOutputLanguage\"; properties: { lang: string } }\n    | { kind: \"DriverMoreThanOneInputGiven\"; properties: { topLevel: string } }\n    | { kind: \"DriverCannotInferNameForSchema\"; properties: { uri: string } }\n    | { kind: \"DriverNoGraphQLQueryGiven\"; properties: {} }\n    | { kind: \"DriverNoGraphQLSchemaInDir\"; properties: { dir: string } }\n    | { kind: \"DriverMoreThanOneGraphQLSchemaInDir\"; properties: { dir: string } }\n    | { kind: \"DriverSourceLangMustBeGraphQL\"; properties: {} }\n    | { kind: \"DriverGraphQLSchemaNeeded\"; properties: {} }\n    | { kind: \"DriverInputFileDoesNotExist\"; properties: { filename: string } }\n    | { kind: \"DriverCannotMixJSONWithOtherSamples\"; properties: { dir: string } }\n    | { kind: \"DriverCannotMixNonJSONInputs\"; properties: { dir: string } }\n    | { kind: \"DriverUnknownDebugOption\"; properties: { option: string } }\n    | { kind: \"DriverNoLanguageOrExtension\"; properties: {} }\n    | { kind: \"DriverCLIOptionParsingFailed\"; properties: { message: string } }\n\n    // IR\n    | { kind: \"IRNoForwardDeclarableTypeInCycle\"; properties: {} }\n    | { kind: \"IRTypeAttributesNotPropagated\"; properties: { count: number; indexes: number[] } }\n    | { kind: \"IRNoEmptyUnions\"; properties: {} }\n\n    // Rendering\n    | { kind: \"RendererUnknownOptionValue\"; properties: { name: string; value: string } }\n\n    // TypeScript input\n    | { kind: \"TypeScriptCompilerError\"; properties: { message: string } };\n\nexport type ErrorKinds = ErrorProperties extends { kind: infer K } ? K : never;\n\ntype ErrorMessages = { readonly [K in ErrorKinds]: string };\n\nconst errorMessages: ErrorMessages = {\n    InternalError: \"Internal error: ${message}\",\n\n    // Misc\n    MiscJSONParseError: \"Syntax error in ${description} JSON ${address}: ${message}\",\n    MiscReadError: \"Cannot read from file or URL ${fileOrURL}: ${message}\",\n    MiscUnicodeHighSurrogateWithoutLowSurrogate: \"Malformed unicode: High surrogate not followed by low surrogate\",\n    MiscInvalidMinMaxConstraint: \"Invalid min-max constraint: ${min}-${max}\",\n\n    // Inference\n    InferenceJSONReferenceNotRooted: \"JSON reference doesn't start with '#/': ${reference}\",\n    InferenceJSONReferenceToUnion: \"JSON reference points to a union type: ${reference}\",\n    InferenceJSONReferenceWrongProperty: \"JSON reference points to a non-existant property: ${reference}\",\n    InferenceJSONReferenceInvalidArrayIndex: \"JSON reference uses invalid array index: ${reference}\",\n\n    // JSON Schema input\n    SchemaArrayIsInvalidSchema: \"An array is not a valid JSON Schema at ${ref}\",\n    SchemaNullIsInvalidSchema: \"null is not a valid JSON Schema at ${ref}\",\n    SchemaRefMustBeString: \"$ref must be a string, but is an ${actual} at ${ref}\",\n    SchemaAdditionalTypesForbidRequired:\n        \"Can't have non-specified required properties but forbidden additionalTypes at ${ref}\",\n    SchemaNoTypeSpecified: \"JSON Schema must specify at least one type at ${ref}\",\n    SchemaInvalidType: \"Invalid type ${type} in JSON Schema at ${ref}\",\n    SchemaFalseNotSupported: 'Schema \"false\" is not supported at ${ref}',\n    SchemaInvalidJSONSchemaType: \"Value of type ${type} is not valid JSON Schema at ${ref}\",\n    SchemaRequiredMustBeStringOrStringArray:\n        \"`required` must be string or array of strings, but is ${actual} at ${ref}\",\n    SchemaRequiredElementMustBeString: \"`required` must contain only strings, but it has ${element}, at ${ref}\",\n    SchemaTypeMustBeStringOrStringArray: \"`type` must be string or array of strings, but is ${actual}\",\n    SchemaTypeElementMustBeString: \"`type` must contain only strings, but it has ${element}\",\n    SchemaArrayItemsMustBeStringOrArray: \"Array items must be an array or an object, but is ${actual}\",\n    SchemaIDMustHaveAddress: \"$id ${id} doesn't have an address at ${ref}\",\n    SchemaWrongAccessorEntryArrayLength:\n        \"Accessor entry array must have the same number of entries as the ${operation} at ${ref}\",\n    SchemaSetOperationCasesIsNotArray: \"${operation} cases must be an array, but is ${cases}, at ${ref}\",\n    SchemaMoreThanOneUnionMemberName: \"More than one name given for union member: ${names}\",\n    SchemaCannotGetTypesFromBoolean:\n        \"Schema value to get top-level types from must be an object, but is boolean, at ${ref}\",\n    SchemaCannotIndexArrayWithNonNumber:\n        \"Trying to index array in schema with key that is not a number, but is ${actual} at ${ref}\",\n    SchemaIndexNotInArray: \"Index ${index} out of range of schema array at ${ref}\",\n    SchemaKeyNotInObject: \"Key ${key} not in schema object at ${ref}\",\n    SchemaFetchError: \"Could not fetch schema ${address}, referred to from ${base}\",\n    SchemaFetchErrorTopLevel: \"Could not fetch top-level schema ${address}\",\n    SchemaFetchErrorAdditional: \"Could not fetch additional schema ${address}\",\n\n    // GraphQL input\n    GraphQLNoQueriesDefined: \"GraphQL file doesn't have any queries defined.\",\n\n    // Driver\n    DriverUnknownSourceLanguage: \"Unknown source language ${lang}\",\n    DriverUnknownOutputLanguage: \"Unknown output language ${lang}\",\n    DriverMoreThanOneInputGiven: \"More than one input given for top-level ${topLevel}\",\n    DriverCannotInferNameForSchema: \"Cannot infer name for schema ${uri}\",\n    DriverNoGraphQLQueryGiven: \"Please specify at least one GraphQL query as input\",\n    DriverNoGraphQLSchemaInDir: \"No GraphQL schema in ${dir}\",\n    DriverMoreThanOneGraphQLSchemaInDir: \"More than one GraphQL schema in ${dir}\",\n    DriverSourceLangMustBeGraphQL: \"If a GraphQL schema is specified, the source language must be GraphQL\",\n    DriverGraphQLSchemaNeeded: \"Please specify a GraphQL schema with --graphql-schema or --graphql-introspect\",\n    DriverInputFileDoesNotExist: \"Input file ${filename} does not exist\",\n    DriverCannotMixJSONWithOtherSamples:\n        \"Cannot mix JSON samples with JSON Schems, GraphQL, or TypeScript in input subdirectory ${dir}\",\n    DriverCannotMixNonJSONInputs: \"Cannot mix JSON Schema, GraphQL, and TypeScript in an input subdirectory ${dir}\",\n    DriverUnknownDebugOption: \"Unknown debug option ${option}\",\n    DriverNoLanguageOrExtension: \"Please specify a language (--lang) or an output file extension\",\n    DriverCLIOptionParsingFailed: \"Option parsing failed: ${message}\",\n\n    // IR\n    IRNoForwardDeclarableTypeInCycle:\n        \"Cannot resolve cycle because it doesn't contain types that can be forward declared\",\n    IRTypeAttributesNotPropagated:\n        \"Type attributes for ${count} types were not carried over to the new graph: ${indexes}\",\n    IRNoEmptyUnions: \"Trying to make an empty union - do you have an impossible type in your schema?\",\n\n    // Rendering\n    RendererUnknownOptionValue: \"Unknown value ${value} for option ${name}\",\n\n    // TypeScript input\n    TypeScriptCompilerError: \"TypeScript error: ${message}\"\n};\n\nexport type ErrorPropertiesForName<K> =\n    Extract<ErrorProperties, { kind: K }> extends { properties: infer P } ? P : never;\n\nexport class QuickTypeError extends Error {\n    public constructor(\n        public readonly errorMessage: string,\n        public readonly messageName: string,\n        public userMessage: string,\n        public readonly properties: StringMap\n    ) {\n        super(userMessage);\n    }\n}\n\nexport function messageError<N extends ErrorKinds>(kind: N, properties: ErrorPropertiesForName<N>): never {\n    const message = errorMessages[kind];\n    let userMessage: string = message;\n    const propertiesMap = properties as StringMap;\n\n    for (const name of Object.getOwnPropertyNames(propertiesMap)) {\n        let value = propertiesMap[name];\n        if (typeof value === \"object\" && typeof value.toString === \"function\") {\n            value = value.toString();\n        } else if (typeof value.message === \"string\") {\n            value = value.message;\n        } else if (typeof value !== \"string\") {\n            value = JSON.stringify(value);\n        }\n\n        userMessage = userMessage.replace(\"${\" + name + \"}\", value);\n    }\n\n    throw new QuickTypeError(message, kind, userMessage, propertiesMap);\n}\n\nexport function messageAssert<N extends ErrorKinds>(\n    assertion: boolean,\n    kind: N,\n    properties: ErrorPropertiesForName<N>\n): void {\n    if (assertion) return;\n    return messageError(kind, properties);\n}\n","/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.7';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = typeof btoa === 'function' ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = typeof atob === 'function' ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n","const ALIAS = Symbol.for('yaml.alias');\nconst DOC = Symbol.for('yaml.document');\nconst MAP = Symbol.for('yaml.map');\nconst PAIR = Symbol.for('yaml.pair');\nconst SCALAR = Symbol.for('yaml.scalar');\nconst SEQ = Symbol.for('yaml.seq');\nconst NODE_TYPE = Symbol.for('yaml.node.type');\nconst isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n            case MAP:\n            case SEQ:\n                return true;\n        }\n    return false;\n}\nfunction isNode(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n            case ALIAS:\n            case MAP:\n            case SCALAR:\n            case SEQ:\n                return true;\n        }\n    return false;\n}\nconst hasAnchor = (node) => (isScalar(node) || isCollection(node)) && !!node.anchor;\n\nexport { ALIAS, DOC, MAP, NODE_TYPE, PAIR, SCALAR, SEQ, hasAnchor, isAlias, isCollection, isDocument, isMap, isNode, isPair, isScalar, isSeq };\n","import { isDocument, isNode, isPair, isCollection, isMap, isSeq, isScalar, isAlias } from './nodes/identity.js';\n\nconst BREAK = Symbol('break visit');\nconst SKIP = Symbol('skip children');\nconst REMOVE = Symbol('remove node');\n/**\n * Apply a visitor to an AST node or document.\n *\n * Walks through the tree (depth-first) starting from `node`, calling a\n * `visitor` function with three arguments:\n *   - `key`: For sequence values and map `Pair`, the node's index in the\n *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.\n *     `null` for the root node.\n *   - `node`: The current node.\n *   - `path`: The ancestry of the current node.\n *\n * The return value of the visitor may be used to control the traversal:\n *   - `undefined` (default): Do nothing and continue\n *   - `visit.SKIP`: Do not visit the children of this node, continue with next\n *     sibling\n *   - `visit.BREAK`: Terminate traversal completely\n *   - `visit.REMOVE`: Remove the current node, then continue with the next one\n *   - `Node`: Replace the current node, then continue by visiting it\n *   - `number`: While iterating the items of a sequence or map, set the index\n *     of the next step. This is useful especially if the index of the current\n *     node has changed.\n *\n * If `visitor` is a single function, it will be called with all values\n * encountered in the tree, including e.g. `null` values. Alternatively,\n * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,\n * `Alias` and `Scalar` node. To define the same visitor function for more than\n * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)\n * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most\n * specific defined one will be used for each node.\n */\nfunction visit(node, visitor) {\n    const visitor_ = initVisitor(visitor);\n    if (isDocument(node)) {\n        const cd = visit_(null, node.contents, visitor_, Object.freeze([node]));\n        if (cd === REMOVE)\n            node.contents = null;\n    }\n    else\n        visit_(null, node, visitor_, Object.freeze([]));\n}\n// Without the `as symbol` casts, TS declares these in the `visit`\n// namespace using `var`, but then complains about that because\n// `unique symbol` must be `const`.\n/** Terminate visit traversal completely */\nvisit.BREAK = BREAK;\n/** Do not visit the children of the current node */\nvisit.SKIP = SKIP;\n/** Remove the current node */\nvisit.REMOVE = REMOVE;\nfunction visit_(key, node, visitor, path) {\n    const ctrl = callVisitor(key, node, visitor, path);\n    if (isNode(ctrl) || isPair(ctrl)) {\n        replaceNode(key, path, ctrl);\n        return visit_(key, ctrl, visitor, path);\n    }\n    if (typeof ctrl !== 'symbol') {\n        if (isCollection(node)) {\n            path = Object.freeze(path.concat(node));\n            for (let i = 0; i < node.items.length; ++i) {\n                const ci = visit_(i, node.items[i], visitor, path);\n                if (typeof ci === 'number')\n                    i = ci - 1;\n                else if (ci === BREAK)\n                    return BREAK;\n                else if (ci === REMOVE) {\n                    node.items.splice(i, 1);\n                    i -= 1;\n                }\n            }\n        }\n        else if (isPair(node)) {\n            path = Object.freeze(path.concat(node));\n            const ck = visit_('key', node.key, visitor, path);\n            if (ck === BREAK)\n                return BREAK;\n            else if (ck === REMOVE)\n                node.key = null;\n            const cv = visit_('value', node.value, visitor, path);\n            if (cv === BREAK)\n                return BREAK;\n            else if (cv === REMOVE)\n                node.value = null;\n        }\n    }\n    return ctrl;\n}\n/**\n * Apply an async visitor to an AST node or document.\n *\n * Walks through the tree (depth-first) starting from `node`, calling a\n * `visitor` function with three arguments:\n *   - `key`: For sequence values and map `Pair`, the node's index in the\n *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.\n *     `null` for the root node.\n *   - `node`: The current node.\n *   - `path`: The ancestry of the current node.\n *\n * The return value of the visitor may be used to control the traversal:\n *   - `Promise`: Must resolve to one of the following values\n *   - `undefined` (default): Do nothing and continue\n *   - `visit.SKIP`: Do not visit the children of this node, continue with next\n *     sibling\n *   - `visit.BREAK`: Terminate traversal completely\n *   - `visit.REMOVE`: Remove the current node, then continue with the next one\n *   - `Node`: Replace the current node, then continue by visiting it\n *   - `number`: While iterating the items of a sequence or map, set the index\n *     of the next step. This is useful especially if the index of the current\n *     node has changed.\n *\n * If `visitor` is a single function, it will be called with all values\n * encountered in the tree, including e.g. `null` values. Alternatively,\n * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,\n * `Alias` and `Scalar` node. To define the same visitor function for more than\n * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)\n * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most\n * specific defined one will be used for each node.\n */\nasync function visitAsync(node, visitor) {\n    const visitor_ = initVisitor(visitor);\n    if (isDocument(node)) {\n        const cd = await visitAsync_(null, node.contents, visitor_, Object.freeze([node]));\n        if (cd === REMOVE)\n            node.contents = null;\n    }\n    else\n        await visitAsync_(null, node, visitor_, Object.freeze([]));\n}\n// Without the `as symbol` casts, TS declares these in the `visit`\n// namespace using `var`, but then complains about that because\n// `unique symbol` must be `const`.\n/** Terminate visit traversal completely */\nvisitAsync.BREAK = BREAK;\n/** Do not visit the children of the current node */\nvisitAsync.SKIP = SKIP;\n/** Remove the current node */\nvisitAsync.REMOVE = REMOVE;\nasync function visitAsync_(key, node, visitor, path) {\n    const ctrl = await callVisitor(key, node, visitor, path);\n    if (isNode(ctrl) || isPair(ctrl)) {\n        replaceNode(key, path, ctrl);\n        return visitAsync_(key, ctrl, visitor, path);\n    }\n    if (typeof ctrl !== 'symbol') {\n        if (isCollection(node)) {\n            path = Object.freeze(path.concat(node));\n            for (let i = 0; i < node.items.length; ++i) {\n                const ci = await visitAsync_(i, node.items[i], visitor, path);\n                if (typeof ci === 'number')\n                    i = ci - 1;\n                else if (ci === BREAK)\n                    return BREAK;\n                else if (ci === REMOVE) {\n                    node.items.splice(i, 1);\n                    i -= 1;\n                }\n            }\n        }\n        else if (isPair(node)) {\n            path = Object.freeze(path.concat(node));\n            const ck = await visitAsync_('key', node.key, visitor, path);\n            if (ck === BREAK)\n                return BREAK;\n            else if (ck === REMOVE)\n                node.key = null;\n            const cv = await visitAsync_('value', node.value, visitor, path);\n            if (cv === BREAK)\n                return BREAK;\n            else if (cv === REMOVE)\n                node.value = null;\n        }\n    }\n    return ctrl;\n}\nfunction initVisitor(visitor) {\n    if (typeof visitor === 'object' &&\n        (visitor.Collection || visitor.Node || visitor.Value)) {\n        return Object.assign({\n            Alias: visitor.Node,\n            Map: visitor.Node,\n            Scalar: visitor.Node,\n            Seq: visitor.Node\n        }, visitor.Value && {\n            Map: visitor.Value,\n            Scalar: visitor.Value,\n            Seq: visitor.Value\n        }, visitor.Collection && {\n            Map: visitor.Collection,\n            Seq: visitor.Collection\n        }, visitor);\n    }\n    return visitor;\n}\nfunction callVisitor(key, node, visitor, path) {\n    if (typeof visitor === 'function')\n        return visitor(key, node, path);\n    if (isMap(node))\n        return visitor.Map?.(key, node, path);\n    if (isSeq(node))\n        return visitor.Seq?.(key, node, path);\n    if (isPair(node))\n        return visitor.Pair?.(key, node, path);\n    if (isScalar(node))\n        return visitor.Scalar?.(key, node, path);\n    if (isAlias(node))\n        return visitor.Alias?.(key, node, path);\n    return undefined;\n}\nfunction replaceNode(key, path, node) {\n    const parent = path[path.length - 1];\n    if (isCollection(parent)) {\n        parent.items[key] = node;\n    }\n    else if (isPair(parent)) {\n        if (key === 'key')\n            parent.key = node;\n        else\n            parent.value = node;\n    }\n    else if (isDocument(parent)) {\n        parent.contents = node;\n    }\n    else {\n        const pt = isAlias(parent) ? 'alias' : 'scalar';\n        throw new Error(`Cannot replace node with ${pt} parent`);\n    }\n}\n\nexport { visit, visitAsync };\n","import { isNode } from '../nodes/identity.js';\nimport { visit } from '../visit.js';\n\nconst escapeChars = {\n    '!': '%21',\n    ',': '%2C',\n    '[': '%5B',\n    ']': '%5D',\n    '{': '%7B',\n    '}': '%7D'\n};\nconst escapeTagName = (tn) => tn.replace(/[!,[\\]{}]/g, ch => escapeChars[ch]);\nclass Directives {\n    constructor(yaml, tags) {\n        /**\n         * The directives-end/doc-start marker `---`. If `null`, a marker may still be\n         * included in the document's stringified representation.\n         */\n        this.docStart = null;\n        /** The doc-end marker `...`.  */\n        this.docEnd = false;\n        this.yaml = Object.assign({}, Directives.defaultYaml, yaml);\n        this.tags = Object.assign({}, Directives.defaultTags, tags);\n    }\n    clone() {\n        const copy = new Directives(this.yaml, this.tags);\n        copy.docStart = this.docStart;\n        return copy;\n    }\n    /**\n     * During parsing, get a Directives instance for the current document and\n     * update the stream state according to the current version's spec.\n     */\n    atDocument() {\n        const res = new Directives(this.yaml, this.tags);\n        switch (this.yaml.version) {\n            case '1.1':\n                this.atNextDocument = true;\n                break;\n            case '1.2':\n                this.atNextDocument = false;\n                this.yaml = {\n                    explicit: Directives.defaultYaml.explicit,\n                    version: '1.2'\n                };\n                this.tags = Object.assign({}, Directives.defaultTags);\n                break;\n        }\n        return res;\n    }\n    /**\n     * @param onError - May be called even if the action was successful\n     * @returns `true` on success\n     */\n    add(line, onError) {\n        if (this.atNextDocument) {\n            this.yaml = { explicit: Directives.defaultYaml.explicit, version: '1.1' };\n            this.tags = Object.assign({}, Directives.defaultTags);\n            this.atNextDocument = false;\n        }\n        const parts = line.trim().split(/[ \\t]+/);\n        const name = parts.shift();\n        switch (name) {\n            case '%TAG': {\n                if (parts.length !== 2) {\n                    onError(0, '%TAG directive should contain exactly two parts');\n                    if (parts.length < 2)\n                        return false;\n                }\n                const [handle, prefix] = parts;\n                this.tags[handle] = prefix;\n                return true;\n            }\n            case '%YAML': {\n                this.yaml.explicit = true;\n                if (parts.length !== 1) {\n                    onError(0, '%YAML directive should contain exactly one part');\n                    return false;\n                }\n                const [version] = parts;\n                if (version === '1.1' || version === '1.2') {\n                    this.yaml.version = version;\n                    return true;\n                }\n                else {\n                    const isValid = /^\\d+\\.\\d+$/.test(version);\n                    onError(6, `Unsupported YAML version ${version}`, isValid);\n                    return false;\n                }\n            }\n            default:\n                onError(0, `Unknown directive ${name}`, true);\n                return false;\n        }\n    }\n    /**\n     * Resolves a tag, matching handles to those defined in %TAG directives.\n     *\n     * @returns Resolved tag, which may also be the non-specific tag `'!'` or a\n     *   `'!local'` tag, or `null` if unresolvable.\n     */\n    tagName(source, onError) {\n        if (source === '!')\n            return '!'; // non-specific tag\n        if (source[0] !== '!') {\n            onError(`Not a valid tag: ${source}`);\n            return null;\n        }\n        if (source[1] === '<') {\n            const verbatim = source.slice(2, -1);\n            if (verbatim === '!' || verbatim === '!!') {\n                onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);\n                return null;\n            }\n            if (source[source.length - 1] !== '>')\n                onError('Verbatim tags must end with a >');\n            return verbatim;\n        }\n        const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/s);\n        if (!suffix)\n            onError(`The ${source} tag has no suffix`);\n        const prefix = this.tags[handle];\n        if (prefix) {\n            try {\n                return prefix + decodeURIComponent(suffix);\n            }\n            catch (error) {\n                onError(String(error));\n                return null;\n            }\n        }\n        if (handle === '!')\n            return source; // local tag\n        onError(`Could not resolve tag: ${source}`);\n        return null;\n    }\n    /**\n     * Given a fully resolved tag, returns its printable string form,\n     * taking into account current tag prefixes and defaults.\n     */\n    tagString(tag) {\n        for (const [handle, prefix] of Object.entries(this.tags)) {\n            if (tag.startsWith(prefix))\n                return handle + escapeTagName(tag.substring(prefix.length));\n        }\n        return tag[0] === '!' ? tag : `!<${tag}>`;\n    }\n    toString(doc) {\n        const lines = this.yaml.explicit\n            ? [`%YAML ${this.yaml.version || '1.2'}`]\n            : [];\n        const tagEntries = Object.entries(this.tags);\n        let tagNames;\n        if (doc && tagEntries.length > 0 && isNode(doc.contents)) {\n            const tags = {};\n            visit(doc.contents, (_key, node) => {\n                if (isNode(node) && node.tag)\n                    tags[node.tag] = true;\n            });\n            tagNames = Object.keys(tags);\n        }\n        else\n            tagNames = [];\n        for (const [handle, prefix] of tagEntries) {\n            if (handle === '!!' && prefix === 'tag:yaml.org,2002:')\n                continue;\n            if (!doc || tagNames.some(tn => tn.startsWith(prefix)))\n                lines.push(`%TAG ${handle} ${prefix}`);\n        }\n        return lines.join('\\n');\n    }\n}\nDirectives.defaultYaml = { explicit: false, version: '1.2' };\nDirectives.defaultTags = { '!!': 'tag:yaml.org,2002:' };\n\nexport { Directives };\n","import { isScalar, isCollection } from '../nodes/identity.js';\nimport { visit } from '../visit.js';\n\n/**\n * Verify that the input string is a valid anchor.\n *\n * Will throw on errors.\n */\nfunction anchorIsValid(anchor) {\n    if (/[\\x00-\\x19\\s,[\\]{}]/.test(anchor)) {\n        const sa = JSON.stringify(anchor);\n        const msg = `Anchor must not contain whitespace or control characters: ${sa}`;\n        throw new Error(msg);\n    }\n    return true;\n}\nfunction anchorNames(root) {\n    const anchors = new Set();\n    visit(root, {\n        Value(_key, node) {\n            if (node.anchor)\n                anchors.add(node.anchor);\n        }\n    });\n    return anchors;\n}\n/** Find a new anchor name with the given `prefix` and a one-indexed suffix. */\nfunction findNewAnchor(prefix, exclude) {\n    for (let i = 1; true; ++i) {\n        const name = `${prefix}${i}`;\n        if (!exclude.has(name))\n            return name;\n    }\n}\nfunction createNodeAnchors(doc, prefix) {\n    const aliasObjects = [];\n    const sourceObjects = new Map();\n    let prevAnchors = null;\n    return {\n        onAnchor: (source) => {\n            aliasObjects.push(source);\n            if (!prevAnchors)\n                prevAnchors = anchorNames(doc);\n            const anchor = findNewAnchor(prefix, prevAnchors);\n            prevAnchors.add(anchor);\n            return anchor;\n        },\n        /**\n         * With circular references, the source node is only resolved after all\n         * of its child nodes are. This is why anchors are set only after all of\n         * the nodes have been created.\n         */\n        setAnchors: () => {\n            for (const source of aliasObjects) {\n                const ref = sourceObjects.get(source);\n                if (typeof ref === 'object' &&\n                    ref.anchor &&\n                    (isScalar(ref.node) || isCollection(ref.node))) {\n                    ref.node.anchor = ref.anchor;\n                }\n                else {\n                    const error = new Error('Failed to resolve repeated object (this should not happen)');\n                    error.source = source;\n                    throw error;\n                }\n            }\n        },\n        sourceObjects\n    };\n}\n\nexport { anchorIsValid, anchorNames, createNodeAnchors, findNewAnchor };\n","/**\n * Applies the JSON.parse reviver algorithm as defined in the ECMA-262 spec,\n * in section 24.5.1.1 \"Runtime Semantics: InternalizeJSONProperty\" of the\n * 2021 edition: https://tc39.es/ecma262/#sec-json.parse\n *\n * Includes extensions for handling Map and Set objects.\n */\nfunction applyReviver(reviver, obj, key, val) {\n    if (val && typeof val === 'object') {\n        if (Array.isArray(val)) {\n            for (let i = 0, len = val.length; i < len; ++i) {\n                const v0 = val[i];\n                const v1 = applyReviver(reviver, val, String(i), v0);\n                if (v1 === undefined)\n                    delete val[i];\n                else if (v1 !== v0)\n                    val[i] = v1;\n            }\n        }\n        else if (val instanceof Map) {\n            for (const k of Array.from(val.keys())) {\n                const v0 = val.get(k);\n                const v1 = applyReviver(reviver, val, k, v0);\n                if (v1 === undefined)\n                    val.delete(k);\n                else if (v1 !== v0)\n                    val.set(k, v1);\n            }\n        }\n        else if (val instanceof Set) {\n            for (const v0 of Array.from(val)) {\n                const v1 = applyReviver(reviver, val, v0, v0);\n                if (v1 === undefined)\n                    val.delete(v0);\n                else if (v1 !== v0) {\n                    val.delete(v0);\n                    val.add(v1);\n                }\n            }\n        }\n        else {\n            for (const [k, v0] of Object.entries(val)) {\n                const v1 = applyReviver(reviver, val, k, v0);\n                if (v1 === undefined)\n                    delete val[k];\n                else if (v1 !== v0)\n                    val[k] = v1;\n            }\n        }\n    }\n    return reviver.call(obj, key, val);\n}\n\nexport { applyReviver };\n","import { hasAnchor } from './identity.js';\n\n/**\n * Recursively convert any node or its contents to native JavaScript\n *\n * @param value - The input value\n * @param arg - If `value` defines a `toJSON()` method, use this\n *   as its first argument\n * @param ctx - Conversion context, originally set in Document#toJS(). If\n *   `{ keep: true }` is not set, output should be suitable for JSON\n *   stringification.\n */\nfunction toJS(value, arg, ctx) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    if (Array.isArray(value))\n        return value.map((v, i) => toJS(v, String(i), ctx));\n    if (value && typeof value.toJSON === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        if (!ctx || !hasAnchor(value))\n            return value.toJSON(arg, ctx);\n        const data = { aliasCount: 0, count: 1, res: undefined };\n        ctx.anchors.set(value, data);\n        ctx.onCreate = res => {\n            data.res = res;\n            delete ctx.onCreate;\n        };\n        const res = value.toJSON(arg, ctx);\n        if (ctx.onCreate)\n            ctx.onCreate(res);\n        return res;\n    }\n    if (typeof value === 'bigint' && !ctx?.keep)\n        return Number(value);\n    return value;\n}\n\nexport { toJS };\n","import { applyReviver } from '../doc/applyReviver.js';\nimport { NODE_TYPE, isDocument } from './identity.js';\nimport { toJS } from './toJS.js';\n\nclass NodeBase {\n    constructor(type) {\n        Object.defineProperty(this, NODE_TYPE, { value: type });\n    }\n    /** Create a copy of this node.  */\n    clone() {\n        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));\n        if (this.range)\n            copy.range = this.range.slice();\n        return copy;\n    }\n    /** A plain JavaScript representation of this node. */\n    toJS(doc, { mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {\n        if (!isDocument(doc))\n            throw new TypeError('A document argument is required');\n        const ctx = {\n            anchors: new Map(),\n            doc,\n            keep: true,\n            mapAsMap: mapAsMap === true,\n            mapKeyWarned: false,\n            maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100\n        };\n        const res = toJS(this, '', ctx);\n        if (typeof onAnchor === 'function')\n            for (const { count, res } of ctx.anchors.values())\n                onAnchor(res, count);\n        return typeof reviver === 'function'\n            ? applyReviver(reviver, { '': res }, '', res)\n            : res;\n    }\n}\n\nexport { NodeBase };\n","import { anchorIsValid } from '../doc/anchors.js';\nimport { visit } from '../visit.js';\nimport { ALIAS, isAlias, isCollection, isPair } from './identity.js';\nimport { NodeBase } from './Node.js';\nimport { toJS } from './toJS.js';\n\nclass Alias extends NodeBase {\n    constructor(source) {\n        super(ALIAS);\n        this.source = source;\n        Object.defineProperty(this, 'tag', {\n            set() {\n                throw new Error('Alias nodes cannot have tags');\n            }\n        });\n    }\n    /**\n     * Resolve the value of this alias within `doc`, finding the last\n     * instance of the `source` anchor before this node.\n     */\n    resolve(doc) {\n        let found = undefined;\n        visit(doc, {\n            Node: (_key, node) => {\n                if (node === this)\n                    return visit.BREAK;\n                if (node.anchor === this.source)\n                    found = node;\n            }\n        });\n        return found;\n    }\n    toJSON(_arg, ctx) {\n        if (!ctx)\n            return { source: this.source };\n        const { anchors, doc, maxAliasCount } = ctx;\n        const source = this.resolve(doc);\n        if (!source) {\n            const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;\n            throw new ReferenceError(msg);\n        }\n        let data = anchors.get(source);\n        if (!data) {\n            // Resolve anchors for Node.prototype.toJS()\n            toJS(source, null, ctx);\n            data = anchors.get(source);\n        }\n        /* istanbul ignore if */\n        if (!data || data.res === undefined) {\n            const msg = 'This should not happen: Alias anchor was not resolved?';\n            throw new ReferenceError(msg);\n        }\n        if (maxAliasCount >= 0) {\n            data.count += 1;\n            if (data.aliasCount === 0)\n                data.aliasCount = getAliasCount(doc, source, anchors);\n            if (data.count * data.aliasCount > maxAliasCount) {\n                const msg = 'Excessive alias count indicates a resource exhaustion attack';\n                throw new ReferenceError(msg);\n            }\n        }\n        return data.res;\n    }\n    toString(ctx, _onComment, _onChompKeep) {\n        const src = `*${this.source}`;\n        if (ctx) {\n            anchorIsValid(this.source);\n            if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {\n                const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;\n                throw new Error(msg);\n            }\n            if (ctx.implicitKey)\n                return `${src} `;\n        }\n        return src;\n    }\n}\nfunction getAliasCount(doc, node, anchors) {\n    if (isAlias(node)) {\n        const source = node.resolve(doc);\n        const anchor = anchors && source && anchors.get(source);\n        return anchor ? anchor.count * anchor.aliasCount : 0;\n    }\n    else if (isCollection(node)) {\n        let count = 0;\n        for (const item of node.items) {\n            const c = getAliasCount(doc, item, anchors);\n            if (c > count)\n                count = c;\n        }\n        return count;\n    }\n    else if (isPair(node)) {\n        const kc = getAliasCount(doc, node.key, anchors);\n        const vc = getAliasCount(doc, node.value, anchors);\n        return Math.max(kc, vc);\n    }\n    return 1;\n}\n\nexport { Alias };\n","import { SCALAR } from './identity.js';\nimport { NodeBase } from './Node.js';\nimport { toJS } from './toJS.js';\n\nconst isScalarValue = (value) => !value || (typeof value !== 'function' && typeof value !== 'object');\nclass Scalar extends NodeBase {\n    constructor(value) {\n        super(SCALAR);\n        this.value = value;\n    }\n    toJSON(arg, ctx) {\n        return ctx?.keep ? this.value : toJS(this.value, arg, ctx);\n    }\n    toString() {\n        return String(this.value);\n    }\n}\nScalar.BLOCK_FOLDED = 'BLOCK_FOLDED';\nScalar.BLOCK_LITERAL = 'BLOCK_LITERAL';\nScalar.PLAIN = 'PLAIN';\nScalar.QUOTE_DOUBLE = 'QUOTE_DOUBLE';\nScalar.QUOTE_SINGLE = 'QUOTE_SINGLE';\n\nexport { Scalar, isScalarValue };\n","import { Alias } from '../nodes/Alias.js';\nimport { isNode, isPair, MAP, SEQ, isDocument } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\n\nconst defaultTagPrefix = 'tag:yaml.org,2002:';\nfunction findTagObject(value, tagName, tags) {\n    if (tagName) {\n        const match = tags.filter(t => t.tag === tagName);\n        const tagObj = match.find(t => !t.format) ?? match[0];\n        if (!tagObj)\n            throw new Error(`Tag ${tagName} not found`);\n        return tagObj;\n    }\n    return tags.find(t => t.identify?.(value) && !t.format);\n}\nfunction createNode(value, tagName, ctx) {\n    if (isDocument(value))\n        value = value.contents;\n    if (isNode(value))\n        return value;\n    if (isPair(value)) {\n        const map = ctx.schema[MAP].createNode?.(ctx.schema, null, ctx);\n        map.items.push(value);\n        return map;\n    }\n    if (value instanceof String ||\n        value instanceof Number ||\n        value instanceof Boolean ||\n        (typeof BigInt !== 'undefined' && value instanceof BigInt) // not supported everywhere\n    ) {\n        // https://tc39.es/ecma262/#sec-serializejsonproperty\n        value = value.valueOf();\n    }\n    const { aliasDuplicateObjects, onAnchor, onTagObj, schema, sourceObjects } = ctx;\n    // Detect duplicate references to the same object & use Alias nodes for all\n    // after first. The `ref` wrapper allows for circular references to resolve.\n    let ref = undefined;\n    if (aliasDuplicateObjects && value && typeof value === 'object') {\n        ref = sourceObjects.get(value);\n        if (ref) {\n            if (!ref.anchor)\n                ref.anchor = onAnchor(value);\n            return new Alias(ref.anchor);\n        }\n        else {\n            ref = { anchor: null, node: null };\n            sourceObjects.set(value, ref);\n        }\n    }\n    if (tagName?.startsWith('!!'))\n        tagName = defaultTagPrefix + tagName.slice(2);\n    let tagObj = findTagObject(value, tagName, schema.tags);\n    if (!tagObj) {\n        if (value && typeof value.toJSON === 'function') {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n            value = value.toJSON();\n        }\n        if (!value || typeof value !== 'object') {\n            const node = new Scalar(value);\n            if (ref)\n                ref.node = node;\n            return node;\n        }\n        tagObj =\n            value instanceof Map\n                ? schema[MAP]\n                : Symbol.iterator in Object(value)\n                    ? schema[SEQ]\n                    : schema[MAP];\n    }\n    if (onTagObj) {\n        onTagObj(tagObj);\n        delete ctx.onTagObj;\n    }\n    const node = tagObj?.createNode\n        ? tagObj.createNode(ctx.schema, value, ctx)\n        : typeof tagObj?.nodeClass?.from === 'function'\n            ? tagObj.nodeClass.from(ctx.schema, value, ctx)\n            : new Scalar(value);\n    if (tagName)\n        node.tag = tagName;\n    else if (!tagObj.default)\n        node.tag = tagObj.tag;\n    if (ref)\n        ref.node = node;\n    return node;\n}\n\nexport { createNode };\n","import { createNode } from '../doc/createNode.js';\nimport { isNode, isPair, isCollection, isScalar } from './identity.js';\nimport { NodeBase } from './Node.js';\n\nfunction collectionFromPath(schema, path, value) {\n    let v = value;\n    for (let i = path.length - 1; i >= 0; --i) {\n        const k = path[i];\n        if (typeof k === 'number' && Number.isInteger(k) && k >= 0) {\n            const a = [];\n            a[k] = v;\n            v = a;\n        }\n        else {\n            v = new Map([[k, v]]);\n        }\n    }\n    return createNode(v, undefined, {\n        aliasDuplicateObjects: false,\n        keepUndefined: false,\n        onAnchor: () => {\n            throw new Error('This should not happen, please report a bug.');\n        },\n        schema,\n        sourceObjects: new Map()\n    });\n}\n// Type guard is intentionally a little wrong so as to be more useful,\n// as it does not cover untypable empty non-string iterables (e.g. []).\nconst isEmptyPath = (path) => path == null ||\n    (typeof path === 'object' && !!path[Symbol.iterator]().next().done);\nclass Collection extends NodeBase {\n    constructor(type, schema) {\n        super(type);\n        Object.defineProperty(this, 'schema', {\n            value: schema,\n            configurable: true,\n            enumerable: false,\n            writable: true\n        });\n    }\n    /**\n     * Create a copy of this collection.\n     *\n     * @param schema - If defined, overwrites the original's schema\n     */\n    clone(schema) {\n        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));\n        if (schema)\n            copy.schema = schema;\n        copy.items = copy.items.map(it => isNode(it) || isPair(it) ? it.clone(schema) : it);\n        if (this.range)\n            copy.range = this.range.slice();\n        return copy;\n    }\n    /**\n     * Adds a value to the collection. For `!!map` and `!!omap` the value must\n     * be a Pair instance or a `{ key, value }` object, which may not have a key\n     * that already exists in the map.\n     */\n    addIn(path, value) {\n        if (isEmptyPath(path))\n            this.add(value);\n        else {\n            const [key, ...rest] = path;\n            const node = this.get(key, true);\n            if (isCollection(node))\n                node.addIn(rest, value);\n            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n    /**\n     * Removes a value from the collection.\n     * @returns `true` if the item was found and removed.\n     */\n    deleteIn(path) {\n        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.delete(key);\n        const node = this.get(key, true);\n        if (isCollection(node))\n            return node.deleteIn(rest);\n        else\n            throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n    }\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    getIn(path, keepScalar) {\n        const [key, ...rest] = path;\n        const node = this.get(key, true);\n        if (rest.length === 0)\n            return !keepScalar && isScalar(node) ? node.value : node;\n        else\n            return isCollection(node) ? node.getIn(rest, keepScalar) : undefined;\n    }\n    hasAllNullValues(allowScalar) {\n        return this.items.every(node => {\n            if (!isPair(node))\n                return false;\n            const n = node.value;\n            return (n == null ||\n                (allowScalar &&\n                    isScalar(n) &&\n                    n.value == null &&\n                    !n.commentBefore &&\n                    !n.comment &&\n                    !n.tag));\n        });\n    }\n    /**\n     * Checks if the collection includes a value with the key `key`.\n     */\n    hasIn(path) {\n        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.has(key);\n        const node = this.get(key, true);\n        return isCollection(node) ? node.hasIn(rest) : false;\n    }\n    /**\n     * Sets a value in this collection. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    setIn(path, value) {\n        const [key, ...rest] = path;\n        if (rest.length === 0) {\n            this.set(key, value);\n        }\n        else {\n            const node = this.get(key, true);\n            if (isCollection(node))\n                node.setIn(rest, value);\n            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n}\nCollection.maxFlowStringSingleLineLength = 60;\n\nexport { Collection, collectionFromPath, isEmptyPath };\n","/**\n * Stringifies a comment.\n *\n * Empty comment lines are left empty,\n * lines consisting of a single space are replaced by `#`,\n * and all other lines are prefixed with a `#`.\n */\nconst stringifyComment = (str) => str.replace(/^(?!$)(?: $)?/gm, '#');\nfunction indentComment(comment, indent) {\n    if (/^\\n+$/.test(comment))\n        return comment.substring(1);\n    return indent ? comment.replace(/^(?! *$)/gm, indent) : comment;\n}\nconst lineComment = (str, indent, comment) => str.endsWith('\\n')\n    ? indentComment(comment, indent)\n    : comment.includes('\\n')\n        ? '\\n' + indentComment(comment, indent)\n        : (str.endsWith(' ') ? '' : ' ') + comment;\n\nexport { indentComment, lineComment, stringifyComment };\n","const FOLD_FLOW = 'flow';\nconst FOLD_BLOCK = 'block';\nconst FOLD_QUOTED = 'quoted';\n/**\n * Tries to keep input at up to `lineWidth` characters, splitting only on spaces\n * not followed by newlines or spaces unless `mode` is `'quoted'`. Lines are\n * terminated with `\\n` and started with `indent`.\n */\nfunction foldFlowLines(text, indent, mode = 'flow', { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow } = {}) {\n    if (!lineWidth || lineWidth < 0)\n        return text;\n    const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);\n    if (text.length <= endStep)\n        return text;\n    const folds = [];\n    const escapedFolds = {};\n    let end = lineWidth - indent.length;\n    if (typeof indentAtStart === 'number') {\n        if (indentAtStart > lineWidth - Math.max(2, minContentWidth))\n            folds.push(0);\n        else\n            end = lineWidth - indentAtStart;\n    }\n    let split = undefined;\n    let prev = undefined;\n    let overflow = false;\n    let i = -1;\n    let escStart = -1;\n    let escEnd = -1;\n    if (mode === FOLD_BLOCK) {\n        i = consumeMoreIndentedLines(text, i, indent.length);\n        if (i !== -1)\n            end = i + endStep;\n    }\n    for (let ch; (ch = text[(i += 1)]);) {\n        if (mode === FOLD_QUOTED && ch === '\\\\') {\n            escStart = i;\n            switch (text[i + 1]) {\n                case 'x':\n                    i += 3;\n                    break;\n                case 'u':\n                    i += 5;\n                    break;\n                case 'U':\n                    i += 9;\n                    break;\n                default:\n                    i += 1;\n            }\n            escEnd = i;\n        }\n        if (ch === '\\n') {\n            if (mode === FOLD_BLOCK)\n                i = consumeMoreIndentedLines(text, i, indent.length);\n            end = i + indent.length + endStep;\n            split = undefined;\n        }\n        else {\n            if (ch === ' ' &&\n                prev &&\n                prev !== ' ' &&\n                prev !== '\\n' &&\n                prev !== '\\t') {\n                // space surrounded by non-space can be replaced with newline + indent\n                const next = text[i + 1];\n                if (next && next !== ' ' && next !== '\\n' && next !== '\\t')\n                    split = i;\n            }\n            if (i >= end) {\n                if (split) {\n                    folds.push(split);\n                    end = split + endStep;\n                    split = undefined;\n                }\n                else if (mode === FOLD_QUOTED) {\n                    // white-space collected at end may stretch past lineWidth\n                    while (prev === ' ' || prev === '\\t') {\n                        prev = ch;\n                        ch = text[(i += 1)];\n                        overflow = true;\n                    }\n                    // Account for newline escape, but don't break preceding escape\n                    const j = i > escEnd + 1 ? i - 2 : escStart - 1;\n                    // Bail out if lineWidth & minContentWidth are shorter than an escape string\n                    if (escapedFolds[j])\n                        return text;\n                    folds.push(j);\n                    escapedFolds[j] = true;\n                    end = j + endStep;\n                    split = undefined;\n                }\n                else {\n                    overflow = true;\n                }\n            }\n        }\n        prev = ch;\n    }\n    if (overflow && onOverflow)\n        onOverflow();\n    if (folds.length === 0)\n        return text;\n    if (onFold)\n        onFold();\n    let res = text.slice(0, folds[0]);\n    for (let i = 0; i < folds.length; ++i) {\n        const fold = folds[i];\n        const end = folds[i + 1] || text.length;\n        if (fold === 0)\n            res = `\\n${indent}${text.slice(0, end)}`;\n        else {\n            if (mode === FOLD_QUOTED && escapedFolds[fold])\n                res += `${text[fold]}\\\\`;\n            res += `\\n${indent}${text.slice(fold + 1, end)}`;\n        }\n    }\n    return res;\n}\n/**\n * Presumes `i + 1` is at the start of a line\n * @returns index of last newline in more-indented block\n */\nfunction consumeMoreIndentedLines(text, i, indent) {\n    let end = i;\n    let start = i + 1;\n    let ch = text[start];\n    while (ch === ' ' || ch === '\\t') {\n        if (i < start + indent) {\n            ch = text[++i];\n        }\n        else {\n            do {\n                ch = text[++i];\n            } while (ch && ch !== '\\n');\n            end = i;\n            start = i + 1;\n            ch = text[start];\n        }\n    }\n    return end;\n}\n\nexport { FOLD_BLOCK, FOLD_FLOW, FOLD_QUOTED, foldFlowLines };\n","import { Scalar } from '../nodes/Scalar.js';\nimport { foldFlowLines, FOLD_QUOTED, FOLD_FLOW, FOLD_BLOCK } from './foldFlowLines.js';\n\nconst getFoldOptions = (ctx, isBlock) => ({\n    indentAtStart: isBlock ? ctx.indent.length : ctx.indentAtStart,\n    lineWidth: ctx.options.lineWidth,\n    minContentWidth: ctx.options.minContentWidth\n});\n// Also checks for lines starting with %, as parsing the output as YAML 1.1 will\n// presume that's starting a new document.\nconst containsDocumentMarker = (str) => /^(%|---|\\.\\.\\.)/m.test(str);\nfunction lineLengthOverLimit(str, lineWidth, indentLength) {\n    if (!lineWidth || lineWidth < 0)\n        return false;\n    const limit = lineWidth - indentLength;\n    const strLen = str.length;\n    if (strLen <= limit)\n        return false;\n    for (let i = 0, start = 0; i < strLen; ++i) {\n        if (str[i] === '\\n') {\n            if (i - start > limit)\n                return true;\n            start = i + 1;\n            if (strLen - start <= limit)\n                return false;\n        }\n    }\n    return true;\n}\nfunction doubleQuotedString(value, ctx) {\n    const json = JSON.stringify(value);\n    if (ctx.options.doubleQuotedAsJSON)\n        return json;\n    const { implicitKey } = ctx;\n    const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;\n    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n    let str = '';\n    let start = 0;\n    for (let i = 0, ch = json[i]; ch; ch = json[++i]) {\n        if (ch === ' ' && json[i + 1] === '\\\\' && json[i + 2] === 'n') {\n            // space before newline needs to be escaped to not be folded\n            str += json.slice(start, i) + '\\\\ ';\n            i += 1;\n            start = i;\n            ch = '\\\\';\n        }\n        if (ch === '\\\\')\n            switch (json[i + 1]) {\n                case 'u':\n                    {\n                        str += json.slice(start, i);\n                        const code = json.substr(i + 2, 4);\n                        switch (code) {\n                            case '0000':\n                                str += '\\\\0';\n                                break;\n                            case '0007':\n                                str += '\\\\a';\n                                break;\n                            case '000b':\n                                str += '\\\\v';\n                                break;\n                            case '001b':\n                                str += '\\\\e';\n                                break;\n                            case '0085':\n                                str += '\\\\N';\n                                break;\n                            case '00a0':\n                                str += '\\\\_';\n                                break;\n                            case '2028':\n                                str += '\\\\L';\n                                break;\n                            case '2029':\n                                str += '\\\\P';\n                                break;\n                            default:\n                                if (code.substr(0, 2) === '00')\n                                    str += '\\\\x' + code.substr(2);\n                                else\n                                    str += json.substr(i, 6);\n                        }\n                        i += 5;\n                        start = i + 1;\n                    }\n                    break;\n                case 'n':\n                    if (implicitKey ||\n                        json[i + 2] === '\"' ||\n                        json.length < minMultiLineLength) {\n                        i += 1;\n                    }\n                    else {\n                        // folding will eat first newline\n                        str += json.slice(start, i) + '\\n\\n';\n                        while (json[i + 2] === '\\\\' &&\n                            json[i + 3] === 'n' &&\n                            json[i + 4] !== '\"') {\n                            str += '\\n';\n                            i += 2;\n                        }\n                        str += indent;\n                        // space after newline needs to be escaped to not be folded\n                        if (json[i + 2] === ' ')\n                            str += '\\\\';\n                        i += 1;\n                        start = i + 1;\n                    }\n                    break;\n                default:\n                    i += 1;\n            }\n    }\n    str = start ? str + json.slice(start) : json;\n    return implicitKey\n        ? str\n        : foldFlowLines(str, indent, FOLD_QUOTED, getFoldOptions(ctx, false));\n}\nfunction singleQuotedString(value, ctx) {\n    if (ctx.options.singleQuote === false ||\n        (ctx.implicitKey && value.includes('\\n')) ||\n        /[ \\t]\\n|\\n[ \\t]/.test(value) // single quoted string can't have leading or trailing whitespace around newline\n    )\n        return doubleQuotedString(value, ctx);\n    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n    const res = \"'\" + value.replace(/'/g, \"''\").replace(/\\n+/g, `$&\\n${indent}`) + \"'\";\n    return ctx.implicitKey\n        ? res\n        : foldFlowLines(res, indent, FOLD_FLOW, getFoldOptions(ctx, false));\n}\nfunction quotedString(value, ctx) {\n    const { singleQuote } = ctx.options;\n    let qs;\n    if (singleQuote === false)\n        qs = doubleQuotedString;\n    else {\n        const hasDouble = value.includes('\"');\n        const hasSingle = value.includes(\"'\");\n        if (hasDouble && !hasSingle)\n            qs = singleQuotedString;\n        else if (hasSingle && !hasDouble)\n            qs = doubleQuotedString;\n        else\n            qs = singleQuote ? singleQuotedString : doubleQuotedString;\n    }\n    return qs(value, ctx);\n}\n// The negative lookbehind avoids a polynomial search,\n// but isn't supported yet on Safari: https://caniuse.com/js-regexp-lookbehind\nlet blockEndNewlines;\ntry {\n    blockEndNewlines = new RegExp('(^|(?<!\\n))\\n+(?!\\n|$)', 'g');\n}\ncatch {\n    blockEndNewlines = /\\n+(?!\\n|$)/g;\n}\nfunction blockString({ comment, type, value }, ctx, onComment, onChompKeep) {\n    const { blockQuote, commentString, lineWidth } = ctx.options;\n    // 1. Block can't end in whitespace unless the last line is non-empty.\n    // 2. Strings consisting of only whitespace are best rendered explicitly.\n    if (!blockQuote || /\\n[\\t ]+$/.test(value) || /^\\s*$/.test(value)) {\n        return quotedString(value, ctx);\n    }\n    const indent = ctx.indent ||\n        (ctx.forceBlockIndent || containsDocumentMarker(value) ? '  ' : '');\n    const literal = blockQuote === 'literal'\n        ? true\n        : blockQuote === 'folded' || type === Scalar.BLOCK_FOLDED\n            ? false\n            : type === Scalar.BLOCK_LITERAL\n                ? true\n                : !lineLengthOverLimit(value, lineWidth, indent.length);\n    if (!value)\n        return literal ? '|\\n' : '>\\n';\n    // determine chomping from whitespace at value end\n    let chomp;\n    let endStart;\n    for (endStart = value.length; endStart > 0; --endStart) {\n        const ch = value[endStart - 1];\n        if (ch !== '\\n' && ch !== '\\t' && ch !== ' ')\n            break;\n    }\n    let end = value.substring(endStart);\n    const endNlPos = end.indexOf('\\n');\n    if (endNlPos === -1) {\n        chomp = '-'; // strip\n    }\n    else if (value === end || endNlPos !== end.length - 1) {\n        chomp = '+'; // keep\n        if (onChompKeep)\n            onChompKeep();\n    }\n    else {\n        chomp = ''; // clip\n    }\n    if (end) {\n        value = value.slice(0, -end.length);\n        if (end[end.length - 1] === '\\n')\n            end = end.slice(0, -1);\n        end = end.replace(blockEndNewlines, `$&${indent}`);\n    }\n    // determine indent indicator from whitespace at value start\n    let startWithSpace = false;\n    let startEnd;\n    let startNlPos = -1;\n    for (startEnd = 0; startEnd < value.length; ++startEnd) {\n        const ch = value[startEnd];\n        if (ch === ' ')\n            startWithSpace = true;\n        else if (ch === '\\n')\n            startNlPos = startEnd;\n        else\n            break;\n    }\n    let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);\n    if (start) {\n        value = value.substring(start.length);\n        start = start.replace(/\\n+/g, `$&${indent}`);\n    }\n    const indentSize = indent ? '2' : '1'; // root is at -1\n    let header = (literal ? '|' : '>') + (startWithSpace ? indentSize : '') + chomp;\n    if (comment) {\n        header += ' ' + commentString(comment.replace(/ ?[\\r\\n]+/g, ' '));\n        if (onComment)\n            onComment();\n    }\n    if (literal) {\n        value = value.replace(/\\n+/g, `$&${indent}`);\n        return `${header}\\n${indent}${start}${value}${end}`;\n    }\n    value = value\n        .replace(/\\n+/g, '\\n$&')\n        .replace(/(?:^|\\n)([\\t ].*)(?:([\\n\\t ]*)\\n(?![\\n\\t ]))?/g, '$1$2') // more-indented lines aren't folded\n        //                ^ more-ind. ^ empty     ^ capture next empty lines only at end of indent\n        .replace(/\\n+/g, `$&${indent}`);\n    const body = foldFlowLines(`${start}${value}${end}`, indent, FOLD_BLOCK, getFoldOptions(ctx, true));\n    return `${header}\\n${indent}${body}`;\n}\nfunction plainString(item, ctx, onComment, onChompKeep) {\n    const { type, value } = item;\n    const { actualString, implicitKey, indent, indentStep, inFlow } = ctx;\n    if ((implicitKey && value.includes('\\n')) ||\n        (inFlow && /[[\\]{},]/.test(value))) {\n        return quotedString(value, ctx);\n    }\n    if (!value ||\n        /^[\\n\\t ,[\\]{}#&*!|>'\"%@`]|^[?-]$|^[?-][ \\t]|[\\n:][ \\t]|[ \\t]\\n|[\\n\\t ]#|[\\n\\t :]$/.test(value)) {\n        // not allowed:\n        // - empty string, '-' or '?'\n        // - start with an indicator character (except [?:-]) or /[?-] /\n        // - '\\n ', ': ' or ' \\n' anywhere\n        // - '#' not preceded by a non-space char\n        // - end with ' ' or ':'\n        return implicitKey || inFlow || !value.includes('\\n')\n            ? quotedString(value, ctx)\n            : blockString(item, ctx, onComment, onChompKeep);\n    }\n    if (!implicitKey &&\n        !inFlow &&\n        type !== Scalar.PLAIN &&\n        value.includes('\\n')) {\n        // Where allowed & type not set explicitly, prefer block style for multiline strings\n        return blockString(item, ctx, onComment, onChompKeep);\n    }\n    if (containsDocumentMarker(value)) {\n        if (indent === '') {\n            ctx.forceBlockIndent = true;\n            return blockString(item, ctx, onComment, onChompKeep);\n        }\n        else if (implicitKey && indent === indentStep) {\n            return quotedString(value, ctx);\n        }\n    }\n    const str = value.replace(/\\n+/g, `$&\\n${indent}`);\n    // Verify that output will be parsed as a string, as e.g. plain numbers and\n    // booleans get parsed with those types in v1.2 (e.g. '42', 'true' & '0.9e-3'),\n    // and others in v1.1.\n    if (actualString) {\n        const test = (tag) => tag.default && tag.tag !== 'tag:yaml.org,2002:str' && tag.test?.test(str);\n        const { compat, tags } = ctx.doc.schema;\n        if (tags.some(test) || compat?.some(test))\n            return quotedString(value, ctx);\n    }\n    return implicitKey\n        ? str\n        : foldFlowLines(str, indent, FOLD_FLOW, getFoldOptions(ctx, false));\n}\nfunction stringifyString(item, ctx, onComment, onChompKeep) {\n    const { implicitKey, inFlow } = ctx;\n    const ss = typeof item.value === 'string'\n        ? item\n        : Object.assign({}, item, { value: String(item.value) });\n    let { type } = item;\n    if (type !== Scalar.QUOTE_DOUBLE) {\n        // force double quotes on control characters & unpaired surrogates\n        if (/[\\x00-\\x08\\x0b-\\x1f\\x7f-\\x9f\\u{D800}-\\u{DFFF}]/u.test(ss.value))\n            type = Scalar.QUOTE_DOUBLE;\n    }\n    const _stringify = (_type) => {\n        switch (_type) {\n            case Scalar.BLOCK_FOLDED:\n            case Scalar.BLOCK_LITERAL:\n                return implicitKey || inFlow\n                    ? quotedString(ss.value, ctx) // blocks are not valid inside flow containers\n                    : blockString(ss, ctx, onComment, onChompKeep);\n            case Scalar.QUOTE_DOUBLE:\n                return doubleQuotedString(ss.value, ctx);\n            case Scalar.QUOTE_SINGLE:\n                return singleQuotedString(ss.value, ctx);\n            case Scalar.PLAIN:\n                return plainString(ss, ctx, onComment, onChompKeep);\n            default:\n                return null;\n        }\n    };\n    let res = _stringify(type);\n    if (res === null) {\n        const { defaultKeyType, defaultStringType } = ctx.options;\n        const t = (implicitKey && defaultKeyType) || defaultStringType;\n        res = _stringify(t);\n        if (res === null)\n            throw new Error(`Unsupported default string type ${t}`);\n    }\n    return res;\n}\n\nexport { stringifyString };\n","import { anchorIsValid } from '../doc/anchors.js';\nimport { isPair, isAlias, isNode, isScalar, isCollection } from '../nodes/identity.js';\nimport { stringifyComment } from './stringifyComment.js';\nimport { stringifyString } from './stringifyString.js';\n\nfunction createStringifyContext(doc, options) {\n    const opt = Object.assign({\n        blockQuote: true,\n        commentString: stringifyComment,\n        defaultKeyType: null,\n        defaultStringType: 'PLAIN',\n        directives: null,\n        doubleQuotedAsJSON: false,\n        doubleQuotedMinMultiLineLength: 40,\n        falseStr: 'false',\n        flowCollectionPadding: true,\n        indentSeq: true,\n        lineWidth: 80,\n        minContentWidth: 20,\n        nullStr: 'null',\n        simpleKeys: false,\n        singleQuote: null,\n        trueStr: 'true',\n        verifyAliasOrder: true\n    }, doc.schema.toStringOptions, options);\n    let inFlow;\n    switch (opt.collectionStyle) {\n        case 'block':\n            inFlow = false;\n            break;\n        case 'flow':\n            inFlow = true;\n            break;\n        default:\n            inFlow = null;\n    }\n    return {\n        anchors: new Set(),\n        doc,\n        flowCollectionPadding: opt.flowCollectionPadding ? ' ' : '',\n        indent: '',\n        indentStep: typeof opt.indent === 'number' ? ' '.repeat(opt.indent) : '  ',\n        inFlow,\n        options: opt\n    };\n}\nfunction getTagObject(tags, item) {\n    if (item.tag) {\n        const match = tags.filter(t => t.tag === item.tag);\n        if (match.length > 0)\n            return match.find(t => t.format === item.format) ?? match[0];\n    }\n    let tagObj = undefined;\n    let obj;\n    if (isScalar(item)) {\n        obj = item.value;\n        const match = tags.filter(t => t.identify?.(obj));\n        tagObj =\n            match.find(t => t.format === item.format) ?? match.find(t => !t.format);\n    }\n    else {\n        obj = item;\n        tagObj = tags.find(t => t.nodeClass && obj instanceof t.nodeClass);\n    }\n    if (!tagObj) {\n        const name = obj?.constructor?.name ?? typeof obj;\n        throw new Error(`Tag not resolved for ${name} value`);\n    }\n    return tagObj;\n}\n// needs to be called before value stringifier to allow for circular anchor refs\nfunction stringifyProps(node, tagObj, { anchors, doc }) {\n    if (!doc.directives)\n        return '';\n    const props = [];\n    const anchor = (isScalar(node) || isCollection(node)) && node.anchor;\n    if (anchor && anchorIsValid(anchor)) {\n        anchors.add(anchor);\n        props.push(`&${anchor}`);\n    }\n    const tag = node.tag ? node.tag : tagObj.default ? null : tagObj.tag;\n    if (tag)\n        props.push(doc.directives.tagString(tag));\n    return props.join(' ');\n}\nfunction stringify(item, ctx, onComment, onChompKeep) {\n    if (isPair(item))\n        return item.toString(ctx, onComment, onChompKeep);\n    if (isAlias(item)) {\n        if (ctx.doc.directives)\n            return item.toString(ctx);\n        if (ctx.resolvedAliases?.has(item)) {\n            throw new TypeError(`Cannot stringify circular structure without alias nodes`);\n        }\n        else {\n            if (ctx.resolvedAliases)\n                ctx.resolvedAliases.add(item);\n            else\n                ctx.resolvedAliases = new Set([item]);\n            item = item.resolve(ctx.doc);\n        }\n    }\n    let tagObj = undefined;\n    const node = isNode(item)\n        ? item\n        : ctx.doc.createNode(item, { onTagObj: o => (tagObj = o) });\n    if (!tagObj)\n        tagObj = getTagObject(ctx.doc.schema.tags, node);\n    const props = stringifyProps(node, tagObj, ctx);\n    if (props.length > 0)\n        ctx.indentAtStart = (ctx.indentAtStart ?? 0) + props.length + 1;\n    const str = typeof tagObj.stringify === 'function'\n        ? tagObj.stringify(node, ctx, onComment, onChompKeep)\n        : isScalar(node)\n            ? stringifyString(node, ctx, onComment, onChompKeep)\n            : node.toString(ctx, onComment, onChompKeep);\n    if (!props)\n        return str;\n    return isScalar(node) || str[0] === '{' || str[0] === '['\n        ? `${props} ${str}`\n        : `${props}\\n${ctx.indent}${str}`;\n}\n\nexport { createStringifyContext, stringify };\n","import { isCollection, isNode, isScalar, isSeq } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\nimport { stringify } from './stringify.js';\nimport { lineComment, indentComment } from './stringifyComment.js';\n\nfunction stringifyPair({ key, value }, ctx, onComment, onChompKeep) {\n    const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;\n    let keyComment = (isNode(key) && key.comment) || null;\n    if (simpleKeys) {\n        if (keyComment) {\n            throw new Error('With simple keys, key nodes cannot have comments');\n        }\n        if (isCollection(key)) {\n            const msg = 'With simple keys, collection cannot be used as a key value';\n            throw new Error(msg);\n        }\n    }\n    let explicitKey = !simpleKeys &&\n        (!key ||\n            (keyComment && value == null && !ctx.inFlow) ||\n            isCollection(key) ||\n            (isScalar(key)\n                ? key.type === Scalar.BLOCK_FOLDED || key.type === Scalar.BLOCK_LITERAL\n                : typeof key === 'object'));\n    ctx = Object.assign({}, ctx, {\n        allNullValues: false,\n        implicitKey: !explicitKey && (simpleKeys || !allNullValues),\n        indent: indent + indentStep\n    });\n    let keyCommentDone = false;\n    let chompKeep = false;\n    let str = stringify(key, ctx, () => (keyCommentDone = true), () => (chompKeep = true));\n    if (!explicitKey && !ctx.inFlow && str.length > 1024) {\n        if (simpleKeys)\n            throw new Error('With simple keys, single line scalar must not span more than 1024 characters');\n        explicitKey = true;\n    }\n    if (ctx.inFlow) {\n        if (allNullValues || value == null) {\n            if (keyCommentDone && onComment)\n                onComment();\n            return str === '' ? '?' : explicitKey ? `? ${str}` : str;\n        }\n    }\n    else if ((allNullValues && !simpleKeys) || (value == null && explicitKey)) {\n        str = `? ${str}`;\n        if (keyComment && !keyCommentDone) {\n            str += lineComment(str, ctx.indent, commentString(keyComment));\n        }\n        else if (chompKeep && onChompKeep)\n            onChompKeep();\n        return str;\n    }\n    if (keyCommentDone)\n        keyComment = null;\n    if (explicitKey) {\n        if (keyComment)\n            str += lineComment(str, ctx.indent, commentString(keyComment));\n        str = `? ${str}\\n${indent}:`;\n    }\n    else {\n        str = `${str}:`;\n        if (keyComment)\n            str += lineComment(str, ctx.indent, commentString(keyComment));\n    }\n    let vsb, vcb, valueComment;\n    if (isNode(value)) {\n        vsb = !!value.spaceBefore;\n        vcb = value.commentBefore;\n        valueComment = value.comment;\n    }\n    else {\n        vsb = false;\n        vcb = null;\n        valueComment = null;\n        if (value && typeof value === 'object')\n            value = doc.createNode(value);\n    }\n    ctx.implicitKey = false;\n    if (!explicitKey && !keyComment && isScalar(value))\n        ctx.indentAtStart = str.length + 1;\n    chompKeep = false;\n    if (!indentSeq &&\n        indentStep.length >= 2 &&\n        !ctx.inFlow &&\n        !explicitKey &&\n        isSeq(value) &&\n        !value.flow &&\n        !value.tag &&\n        !value.anchor) {\n        // If indentSeq === false, consider '- ' as part of indentation where possible\n        ctx.indent = ctx.indent.substring(2);\n    }\n    let valueCommentDone = false;\n    const valueStr = stringify(value, ctx, () => (valueCommentDone = true), () => (chompKeep = true));\n    let ws = ' ';\n    if (keyComment || vsb || vcb) {\n        ws = vsb ? '\\n' : '';\n        if (vcb) {\n            const cs = commentString(vcb);\n            ws += `\\n${indentComment(cs, ctx.indent)}`;\n        }\n        if (valueStr === '' && !ctx.inFlow) {\n            if (ws === '\\n')\n                ws = '\\n\\n';\n        }\n        else {\n            ws += `\\n${ctx.indent}`;\n        }\n    }\n    else if (!explicitKey && isCollection(value)) {\n        const vs0 = valueStr[0];\n        const nl0 = valueStr.indexOf('\\n');\n        const hasNewline = nl0 !== -1;\n        const flow = ctx.inFlow ?? value.flow ?? value.items.length === 0;\n        if (hasNewline || !flow) {\n            let hasPropsLine = false;\n            if (hasNewline && (vs0 === '&' || vs0 === '!')) {\n                let sp0 = valueStr.indexOf(' ');\n                if (vs0 === '&' &&\n                    sp0 !== -1 &&\n                    sp0 < nl0 &&\n                    valueStr[sp0 + 1] === '!') {\n                    sp0 = valueStr.indexOf(' ', sp0 + 1);\n                }\n                if (sp0 === -1 || nl0 < sp0)\n                    hasPropsLine = true;\n            }\n            if (!hasPropsLine)\n                ws = `\\n${ctx.indent}`;\n        }\n    }\n    else if (valueStr === '' || valueStr[0] === '\\n') {\n        ws = '';\n    }\n    str += ws + valueStr;\n    if (ctx.inFlow) {\n        if (valueCommentDone && onComment)\n            onComment();\n    }\n    else if (valueComment && !valueCommentDone) {\n        str += lineComment(str, ctx.indent, commentString(valueComment));\n    }\n    else if (chompKeep && onChompKeep) {\n        onChompKeep();\n    }\n    return str;\n}\n\nexport { stringifyPair };\n","function debug(logLevel, ...messages) {\n    if (logLevel === 'debug')\n        console.log(...messages);\n}\nfunction warn(logLevel, warning) {\n    if (logLevel === 'debug' || logLevel === 'warn') {\n        // https://github.com/typescript-eslint/typescript-eslint/issues/7478\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n        if (typeof process !== 'undefined' && process.emitWarning)\n            process.emitWarning(warning);\n        else\n            console.warn(warning);\n    }\n}\n\nexport { debug, warn };\n","import { warn } from '../log.js';\nimport { createStringifyContext } from '../stringify/stringify.js';\nimport { isAlias, isSeq, isScalar, isMap, isNode } from './identity.js';\nimport { Scalar } from './Scalar.js';\nimport { toJS } from './toJS.js';\n\nconst MERGE_KEY = '<<';\nfunction addPairToJSMap(ctx, map, { key, value }) {\n    if (ctx?.doc.schema.merge && isMergeKey(key)) {\n        value = isAlias(value) ? value.resolve(ctx.doc) : value;\n        if (isSeq(value))\n            for (const it of value.items)\n                mergeToJSMap(ctx, map, it);\n        else if (Array.isArray(value))\n            for (const it of value)\n                mergeToJSMap(ctx, map, it);\n        else\n            mergeToJSMap(ctx, map, value);\n    }\n    else {\n        const jsKey = toJS(key, '', ctx);\n        if (map instanceof Map) {\n            map.set(jsKey, toJS(value, jsKey, ctx));\n        }\n        else if (map instanceof Set) {\n            map.add(jsKey);\n        }\n        else {\n            const stringKey = stringifyKey(key, jsKey, ctx);\n            const jsValue = toJS(value, stringKey, ctx);\n            if (stringKey in map)\n                Object.defineProperty(map, stringKey, {\n                    value: jsValue,\n                    writable: true,\n                    enumerable: true,\n                    configurable: true\n                });\n            else\n                map[stringKey] = jsValue;\n        }\n    }\n    return map;\n}\nconst isMergeKey = (key) => key === MERGE_KEY ||\n    (isScalar(key) &&\n        key.value === MERGE_KEY &&\n        (!key.type || key.type === Scalar.PLAIN));\n// If the value associated with a merge key is a single mapping node, each of\n// its key/value pairs is inserted into the current mapping, unless the key\n// already exists in it. If the value associated with the merge key is a\n// sequence, then this sequence is expected to contain mapping nodes and each\n// of these nodes is merged in turn according to its order in the sequence.\n// Keys in mapping nodes earlier in the sequence override keys specified in\n// later mapping nodes. -- http://yaml.org/type/merge.html\nfunction mergeToJSMap(ctx, map, value) {\n    const source = ctx && isAlias(value) ? value.resolve(ctx.doc) : value;\n    if (!isMap(source))\n        throw new Error('Merge sources must be maps or map aliases');\n    const srcMap = source.toJSON(null, ctx, Map);\n    for (const [key, value] of srcMap) {\n        if (map instanceof Map) {\n            if (!map.has(key))\n                map.set(key, value);\n        }\n        else if (map instanceof Set) {\n            map.add(key);\n        }\n        else if (!Object.prototype.hasOwnProperty.call(map, key)) {\n            Object.defineProperty(map, key, {\n                value,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n        }\n    }\n    return map;\n}\nfunction stringifyKey(key, jsKey, ctx) {\n    if (jsKey === null)\n        return '';\n    if (typeof jsKey !== 'object')\n        return String(jsKey);\n    if (isNode(key) && ctx?.doc) {\n        const strCtx = createStringifyContext(ctx.doc, {});\n        strCtx.anchors = new Set();\n        for (const node of ctx.anchors.keys())\n            strCtx.anchors.add(node.anchor);\n        strCtx.inFlow = true;\n        strCtx.inStringifyKey = true;\n        const strKey = key.toString(strCtx);\n        if (!ctx.mapKeyWarned) {\n            let jsonStr = JSON.stringify(strKey);\n            if (jsonStr.length > 40)\n                jsonStr = jsonStr.substring(0, 36) + '...\"';\n            warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);\n            ctx.mapKeyWarned = true;\n        }\n        return strKey;\n    }\n    return JSON.stringify(jsKey);\n}\n\nexport { addPairToJSMap };\n","import { createNode } from '../doc/createNode.js';\nimport { stringifyPair } from '../stringify/stringifyPair.js';\nimport { addPairToJSMap } from './addPairToJSMap.js';\nimport { NODE_TYPE, PAIR, isNode } from './identity.js';\n\nfunction createPair(key, value, ctx) {\n    const k = createNode(key, undefined, ctx);\n    const v = createNode(value, undefined, ctx);\n    return new Pair(k, v);\n}\nclass Pair {\n    constructor(key, value = null) {\n        Object.defineProperty(this, NODE_TYPE, { value: PAIR });\n        this.key = key;\n        this.value = value;\n    }\n    clone(schema) {\n        let { key, value } = this;\n        if (isNode(key))\n            key = key.clone(schema);\n        if (isNode(value))\n            value = value.clone(schema);\n        return new Pair(key, value);\n    }\n    toJSON(_, ctx) {\n        const pair = ctx?.mapAsMap ? new Map() : {};\n        return addPairToJSMap(ctx, pair, this);\n    }\n    toString(ctx, onComment, onChompKeep) {\n        return ctx?.doc\n            ? stringifyPair(this, ctx, onComment, onChompKeep)\n            : JSON.stringify(this);\n    }\n}\n\nexport { Pair, createPair };\n","import { isNode, isPair } from '../nodes/identity.js';\nimport { stringify } from './stringify.js';\nimport { lineComment, indentComment } from './stringifyComment.js';\n\nfunction stringifyCollection(collection, ctx, options) {\n    const flow = ctx.inFlow ?? collection.flow;\n    const stringify = flow ? stringifyFlowCollection : stringifyBlockCollection;\n    return stringify(collection, ctx, options);\n}\nfunction stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {\n    const { indent, options: { commentString } } = ctx;\n    const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });\n    let chompKeep = false; // flag for the preceding node's status\n    const lines = [];\n    for (let i = 0; i < items.length; ++i) {\n        const item = items[i];\n        let comment = null;\n        if (isNode(item)) {\n            if (!chompKeep && item.spaceBefore)\n                lines.push('');\n            addCommentBefore(ctx, lines, item.commentBefore, chompKeep);\n            if (item.comment)\n                comment = item.comment;\n        }\n        else if (isPair(item)) {\n            const ik = isNode(item.key) ? item.key : null;\n            if (ik) {\n                if (!chompKeep && ik.spaceBefore)\n                    lines.push('');\n                addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);\n            }\n        }\n        chompKeep = false;\n        let str = stringify(item, itemCtx, () => (comment = null), () => (chompKeep = true));\n        if (comment)\n            str += lineComment(str, itemIndent, commentString(comment));\n        if (chompKeep && comment)\n            chompKeep = false;\n        lines.push(blockItemPrefix + str);\n    }\n    let str;\n    if (lines.length === 0) {\n        str = flowChars.start + flowChars.end;\n    }\n    else {\n        str = lines[0];\n        for (let i = 1; i < lines.length; ++i) {\n            const line = lines[i];\n            str += line ? `\\n${indent}${line}` : '\\n';\n        }\n    }\n    if (comment) {\n        str += '\\n' + indentComment(commentString(comment), indent);\n        if (onComment)\n            onComment();\n    }\n    else if (chompKeep && onChompKeep)\n        onChompKeep();\n    return str;\n}\nfunction stringifyFlowCollection({ items }, ctx, { flowChars, itemIndent }) {\n    const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;\n    itemIndent += indentStep;\n    const itemCtx = Object.assign({}, ctx, {\n        indent: itemIndent,\n        inFlow: true,\n        type: null\n    });\n    let reqNewline = false;\n    let linesAtValue = 0;\n    const lines = [];\n    for (let i = 0; i < items.length; ++i) {\n        const item = items[i];\n        let comment = null;\n        if (isNode(item)) {\n            if (item.spaceBefore)\n                lines.push('');\n            addCommentBefore(ctx, lines, item.commentBefore, false);\n            if (item.comment)\n                comment = item.comment;\n        }\n        else if (isPair(item)) {\n            const ik = isNode(item.key) ? item.key : null;\n            if (ik) {\n                if (ik.spaceBefore)\n                    lines.push('');\n                addCommentBefore(ctx, lines, ik.commentBefore, false);\n                if (ik.comment)\n                    reqNewline = true;\n            }\n            const iv = isNode(item.value) ? item.value : null;\n            if (iv) {\n                if (iv.comment)\n                    comment = iv.comment;\n                if (iv.commentBefore)\n                    reqNewline = true;\n            }\n            else if (item.value == null && ik?.comment) {\n                comment = ik.comment;\n            }\n        }\n        if (comment)\n            reqNewline = true;\n        let str = stringify(item, itemCtx, () => (comment = null));\n        if (i < items.length - 1)\n            str += ',';\n        if (comment)\n            str += lineComment(str, itemIndent, commentString(comment));\n        if (!reqNewline && (lines.length > linesAtValue || str.includes('\\n')))\n            reqNewline = true;\n        lines.push(str);\n        linesAtValue = lines.length;\n    }\n    const { start, end } = flowChars;\n    if (lines.length === 0) {\n        return start + end;\n    }\n    else {\n        if (!reqNewline) {\n            const len = lines.reduce((sum, line) => sum + line.length + 2, 2);\n            reqNewline = ctx.options.lineWidth > 0 && len > ctx.options.lineWidth;\n        }\n        if (reqNewline) {\n            let str = start;\n            for (const line of lines)\n                str += line ? `\\n${indentStep}${indent}${line}` : '\\n';\n            return `${str}\\n${indent}${end}`;\n        }\n        else {\n            return `${start}${fcPadding}${lines.join(' ')}${fcPadding}${end}`;\n        }\n    }\n}\nfunction addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {\n    if (comment && chompKeep)\n        comment = comment.replace(/^\\n+/, '');\n    if (comment) {\n        const ic = indentComment(commentString(comment), indent);\n        lines.push(ic.trimStart()); // Avoid double indent on first line\n    }\n}\n\nexport { stringifyCollection };\n","import { stringifyCollection } from '../stringify/stringifyCollection.js';\nimport { addPairToJSMap } from './addPairToJSMap.js';\nimport { Collection } from './Collection.js';\nimport { isPair, isScalar, MAP } from './identity.js';\nimport { Pair, createPair } from './Pair.js';\nimport { isScalarValue } from './Scalar.js';\n\nfunction findPair(items, key) {\n    const k = isScalar(key) ? key.value : key;\n    for (const it of items) {\n        if (isPair(it)) {\n            if (it.key === key || it.key === k)\n                return it;\n            if (isScalar(it.key) && it.key.value === k)\n                return it;\n        }\n    }\n    return undefined;\n}\nclass YAMLMap extends Collection {\n    static get tagName() {\n        return 'tag:yaml.org,2002:map';\n    }\n    constructor(schema) {\n        super(MAP, schema);\n        this.items = [];\n    }\n    /**\n     * A generic collection parsing method that can be extended\n     * to other node classes that inherit from YAMLMap\n     */\n    static from(schema, obj, ctx) {\n        const { keepUndefined, replacer } = ctx;\n        const map = new this(schema);\n        const add = (key, value) => {\n            if (typeof replacer === 'function')\n                value = replacer.call(obj, key, value);\n            else if (Array.isArray(replacer) && !replacer.includes(key))\n                return;\n            if (value !== undefined || keepUndefined)\n                map.items.push(createPair(key, value, ctx));\n        };\n        if (obj instanceof Map) {\n            for (const [key, value] of obj)\n                add(key, value);\n        }\n        else if (obj && typeof obj === 'object') {\n            for (const key of Object.keys(obj))\n                add(key, obj[key]);\n        }\n        if (typeof schema.sortMapEntries === 'function') {\n            map.items.sort(schema.sortMapEntries);\n        }\n        return map;\n    }\n    /**\n     * Adds a value to the collection.\n     *\n     * @param overwrite - If not set `true`, using a key that is already in the\n     *   collection will throw. Otherwise, overwrites the previous value.\n     */\n    add(pair, overwrite) {\n        let _pair;\n        if (isPair(pair))\n            _pair = pair;\n        else if (!pair || typeof pair !== 'object' || !('key' in pair)) {\n            // In TypeScript, this never happens.\n            _pair = new Pair(pair, pair?.value);\n        }\n        else\n            _pair = new Pair(pair.key, pair.value);\n        const prev = findPair(this.items, _pair.key);\n        const sortEntries = this.schema?.sortMapEntries;\n        if (prev) {\n            if (!overwrite)\n                throw new Error(`Key ${_pair.key} already set`);\n            // For scalars, keep the old node & its comments and anchors\n            if (isScalar(prev.value) && isScalarValue(_pair.value))\n                prev.value.value = _pair.value;\n            else\n                prev.value = _pair.value;\n        }\n        else if (sortEntries) {\n            const i = this.items.findIndex(item => sortEntries(_pair, item) < 0);\n            if (i === -1)\n                this.items.push(_pair);\n            else\n                this.items.splice(i, 0, _pair);\n        }\n        else {\n            this.items.push(_pair);\n        }\n    }\n    delete(key) {\n        const it = findPair(this.items, key);\n        if (!it)\n            return false;\n        const del = this.items.splice(this.items.indexOf(it), 1);\n        return del.length > 0;\n    }\n    get(key, keepScalar) {\n        const it = findPair(this.items, key);\n        const node = it?.value;\n        return (!keepScalar && isScalar(node) ? node.value : node) ?? undefined;\n    }\n    has(key) {\n        return !!findPair(this.items, key);\n    }\n    set(key, value) {\n        this.add(new Pair(key, value), true);\n    }\n    /**\n     * @param ctx - Conversion context, originally set in Document#toJS()\n     * @param {Class} Type - If set, forces the returned collection type\n     * @returns Instance of Type, Map, or Object\n     */\n    toJSON(_, ctx, Type) {\n        const map = Type ? new Type() : ctx?.mapAsMap ? new Map() : {};\n        if (ctx?.onCreate)\n            ctx.onCreate(map);\n        for (const item of this.items)\n            addPairToJSMap(ctx, map, item);\n        return map;\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        for (const item of this.items) {\n            if (!isPair(item))\n                throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);\n        }\n        if (!ctx.allNullValues && this.hasAllNullValues(false))\n            ctx = Object.assign({}, ctx, { allNullValues: true });\n        return stringifyCollection(this, ctx, {\n            blockItemPrefix: '',\n            flowChars: { start: '{', end: '}' },\n            itemIndent: ctx.indent || '',\n            onChompKeep,\n            onComment\n        });\n    }\n}\n\nexport { YAMLMap, findPair };\n","import { isMap } from '../../nodes/identity.js';\nimport { YAMLMap } from '../../nodes/YAMLMap.js';\n\nconst map = {\n    collection: 'map',\n    default: true,\n    nodeClass: YAMLMap,\n    tag: 'tag:yaml.org,2002:map',\n    resolve(map, onError) {\n        if (!isMap(map))\n            onError('Expected a mapping for this tag');\n        return map;\n    },\n    createNode: (schema, obj, ctx) => YAMLMap.from(schema, obj, ctx)\n};\n\nexport { map };\n","import { createNode } from '../doc/createNode.js';\nimport { stringifyCollection } from '../stringify/stringifyCollection.js';\nimport { Collection } from './Collection.js';\nimport { SEQ, isScalar } from './identity.js';\nimport { isScalarValue } from './Scalar.js';\nimport { toJS } from './toJS.js';\n\nclass YAMLSeq extends Collection {\n    static get tagName() {\n        return 'tag:yaml.org,2002:seq';\n    }\n    constructor(schema) {\n        super(SEQ, schema);\n        this.items = [];\n    }\n    add(value) {\n        this.items.push(value);\n    }\n    /**\n     * Removes a value from the collection.\n     *\n     * `key` must contain a representation of an integer for this to succeed.\n     * It may be wrapped in a `Scalar`.\n     *\n     * @returns `true` if the item was found and removed.\n     */\n    delete(key) {\n        const idx = asItemIndex(key);\n        if (typeof idx !== 'number')\n            return false;\n        const del = this.items.splice(idx, 1);\n        return del.length > 0;\n    }\n    get(key, keepScalar) {\n        const idx = asItemIndex(key);\n        if (typeof idx !== 'number')\n            return undefined;\n        const it = this.items[idx];\n        return !keepScalar && isScalar(it) ? it.value : it;\n    }\n    /**\n     * Checks if the collection includes a value with the key `key`.\n     *\n     * `key` must contain a representation of an integer for this to succeed.\n     * It may be wrapped in a `Scalar`.\n     */\n    has(key) {\n        const idx = asItemIndex(key);\n        return typeof idx === 'number' && idx < this.items.length;\n    }\n    /**\n     * Sets a value in this collection. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     *\n     * If `key` does not contain a representation of an integer, this will throw.\n     * It may be wrapped in a `Scalar`.\n     */\n    set(key, value) {\n        const idx = asItemIndex(key);\n        if (typeof idx !== 'number')\n            throw new Error(`Expected a valid index, not ${key}.`);\n        const prev = this.items[idx];\n        if (isScalar(prev) && isScalarValue(value))\n            prev.value = value;\n        else\n            this.items[idx] = value;\n    }\n    toJSON(_, ctx) {\n        const seq = [];\n        if (ctx?.onCreate)\n            ctx.onCreate(seq);\n        let i = 0;\n        for (const item of this.items)\n            seq.push(toJS(item, String(i++), ctx));\n        return seq;\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        return stringifyCollection(this, ctx, {\n            blockItemPrefix: '- ',\n            flowChars: { start: '[', end: ']' },\n            itemIndent: (ctx.indent || '') + '  ',\n            onChompKeep,\n            onComment\n        });\n    }\n    static from(schema, obj, ctx) {\n        const { replacer } = ctx;\n        const seq = new this(schema);\n        if (obj && Symbol.iterator in Object(obj)) {\n            let i = 0;\n            for (let it of obj) {\n                if (typeof replacer === 'function') {\n                    const key = obj instanceof Set ? it : String(i++);\n                    it = replacer.call(obj, key, it);\n                }\n                seq.items.push(createNode(it, undefined, ctx));\n            }\n        }\n        return seq;\n    }\n}\nfunction asItemIndex(key) {\n    let idx = isScalar(key) ? key.value : key;\n    if (idx && typeof idx === 'string')\n        idx = Number(idx);\n    return typeof idx === 'number' && Number.isInteger(idx) && idx >= 0\n        ? idx\n        : null;\n}\n\nexport { YAMLSeq };\n","import { isSeq } from '../../nodes/identity.js';\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\n\nconst seq = {\n    collection: 'seq',\n    default: true,\n    nodeClass: YAMLSeq,\n    tag: 'tag:yaml.org,2002:seq',\n    resolve(seq, onError) {\n        if (!isSeq(seq))\n            onError('Expected a sequence for this tag');\n        return seq;\n    },\n    createNode: (schema, obj, ctx) => YAMLSeq.from(schema, obj, ctx)\n};\n\nexport { seq };\n","import { stringifyString } from '../../stringify/stringifyString.js';\n\nconst string = {\n    identify: value => typeof value === 'string',\n    default: true,\n    tag: 'tag:yaml.org,2002:str',\n    resolve: str => str,\n    stringify(item, ctx, onComment, onChompKeep) {\n        ctx = Object.assign({ actualString: true }, ctx);\n        return stringifyString(item, ctx, onComment, onChompKeep);\n    }\n};\n\nexport { string };\n","import { Scalar } from '../../nodes/Scalar.js';\n\nconst nullTag = {\n    identify: value => value == null,\n    createNode: () => new Scalar(null),\n    default: true,\n    tag: 'tag:yaml.org,2002:null',\n    test: /^(?:~|[Nn]ull|NULL)?$/,\n    resolve: () => new Scalar(null),\n    stringify: ({ source }, ctx) => typeof source === 'string' && nullTag.test.test(source)\n        ? source\n        : ctx.options.nullStr\n};\n\nexport { nullTag };\n","import { Scalar } from '../../nodes/Scalar.js';\n\nconst boolTag = {\n    identify: value => typeof value === 'boolean',\n    default: true,\n    tag: 'tag:yaml.org,2002:bool',\n    test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,\n    resolve: str => new Scalar(str[0] === 't' || str[0] === 'T'),\n    stringify({ source, value }, ctx) {\n        if (source && boolTag.test.test(source)) {\n            const sv = source[0] === 't' || source[0] === 'T';\n            if (value === sv)\n                return source;\n        }\n        return value ? ctx.options.trueStr : ctx.options.falseStr;\n    }\n};\n\nexport { boolTag };\n","function stringifyNumber({ format, minFractionDigits, tag, value }) {\n    if (typeof value === 'bigint')\n        return String(value);\n    const num = typeof value === 'number' ? value : Number(value);\n    if (!isFinite(num))\n        return isNaN(num) ? '.nan' : num < 0 ? '-.inf' : '.inf';\n    let n = JSON.stringify(value);\n    if (!format &&\n        minFractionDigits &&\n        (!tag || tag === 'tag:yaml.org,2002:float') &&\n        /^\\d/.test(n)) {\n        let i = n.indexOf('.');\n        if (i < 0) {\n            i = n.length;\n            n += '.';\n        }\n        let d = minFractionDigits - (n.length - i - 1);\n        while (d-- > 0)\n            n += '0';\n    }\n    return n;\n}\n\nexport { stringifyNumber };\n","import { Scalar } from '../../nodes/Scalar.js';\nimport { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst floatNaN = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^(?:[-+]?\\.(?:inf|Inf|INF|nan|NaN|NAN))$/,\n    resolve: str => str.slice(-3).toLowerCase() === 'nan'\n        ? NaN\n        : str[0] === '-'\n            ? Number.NEGATIVE_INFINITY\n            : Number.POSITIVE_INFINITY,\n    stringify: stringifyNumber\n};\nconst floatExp = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'EXP',\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)[eE][-+]?[0-9]+$/,\n    resolve: str => parseFloat(str),\n    stringify(node) {\n        const num = Number(node.value);\n        return isFinite(num) ? num.toExponential() : stringifyNumber(node);\n    }\n};\nconst float = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+\\.[0-9]*)$/,\n    resolve(str) {\n        const node = new Scalar(parseFloat(str));\n        const dot = str.indexOf('.');\n        if (dot !== -1 && str[str.length - 1] === '0')\n            node.minFractionDigits = str.length - dot - 1;\n        return node;\n    },\n    stringify: stringifyNumber\n};\n\nexport { float, floatExp, floatNaN };\n","import { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);\nconst intResolve = (str, offset, radix, { intAsBigInt }) => (intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix));\nfunction intStringify(node, radix, prefix) {\n    const { value } = node;\n    if (intIdentify(value) && value >= 0)\n        return prefix + value.toString(radix);\n    return stringifyNumber(node);\n}\nconst intOct = {\n    identify: value => intIdentify(value) && value >= 0,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'OCT',\n    test: /^0o[0-7]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),\n    stringify: node => intStringify(node, 8, '0o')\n};\nconst int = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    test: /^[-+]?[0-9]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),\n    stringify: stringifyNumber\n};\nconst intHex = {\n    identify: value => intIdentify(value) && value >= 0,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'HEX',\n    test: /^0x[0-9a-fA-F]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n    stringify: node => intStringify(node, 16, '0x')\n};\n\nexport { int, intHex, intOct };\n","import { map } from '../common/map.js';\nimport { nullTag } from '../common/null.js';\nimport { seq } from '../common/seq.js';\nimport { string } from '../common/string.js';\nimport { boolTag } from './bool.js';\nimport { floatNaN, floatExp, float } from './float.js';\nimport { intOct, int, intHex } from './int.js';\n\nconst schema = [\n    map,\n    seq,\n    string,\n    nullTag,\n    boolTag,\n    intOct,\n    int,\n    intHex,\n    floatNaN,\n    floatExp,\n    float\n];\n\nexport { schema };\n","import { Scalar } from '../../nodes/Scalar.js';\nimport { map } from '../common/map.js';\nimport { seq } from '../common/seq.js';\n\nfunction intIdentify(value) {\n    return typeof value === 'bigint' || Number.isInteger(value);\n}\nconst stringifyJSON = ({ value }) => JSON.stringify(value);\nconst jsonScalars = [\n    {\n        identify: value => typeof value === 'string',\n        default: true,\n        tag: 'tag:yaml.org,2002:str',\n        resolve: str => str,\n        stringify: stringifyJSON\n    },\n    {\n        identify: value => value == null,\n        createNode: () => new Scalar(null),\n        default: true,\n        tag: 'tag:yaml.org,2002:null',\n        test: /^null$/,\n        resolve: () => null,\n        stringify: stringifyJSON\n    },\n    {\n        identify: value => typeof value === 'boolean',\n        default: true,\n        tag: 'tag:yaml.org,2002:bool',\n        test: /^true|false$/,\n        resolve: str => str === 'true',\n        stringify: stringifyJSON\n    },\n    {\n        identify: intIdentify,\n        default: true,\n        tag: 'tag:yaml.org,2002:int',\n        test: /^-?(?:0|[1-9][0-9]*)$/,\n        resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),\n        stringify: ({ value }) => intIdentify(value) ? value.toString() : JSON.stringify(value)\n    },\n    {\n        identify: value => typeof value === 'number',\n        default: true,\n        tag: 'tag:yaml.org,2002:float',\n        test: /^-?(?:0|[1-9][0-9]*)(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,\n        resolve: str => parseFloat(str),\n        stringify: stringifyJSON\n    }\n];\nconst jsonError = {\n    default: true,\n    tag: '',\n    test: /^/,\n    resolve(str, onError) {\n        onError(`Unresolved plain scalar ${JSON.stringify(str)}`);\n        return str;\n    }\n};\nconst schema = [map, seq].concat(jsonScalars, jsonError);\n\nexport { schema };\n","import { Scalar } from '../../nodes/Scalar.js';\nimport { stringifyString } from '../../stringify/stringifyString.js';\n\nconst binary = {\n    identify: value => value instanceof Uint8Array, // Buffer inherits from Uint8Array\n    default: false,\n    tag: 'tag:yaml.org,2002:binary',\n    /**\n     * Returns a Buffer in node and an Uint8Array in browsers\n     *\n     * To use the resulting buffer as an image, you'll want to do something like:\n     *\n     *   const blob = new Blob([buffer], { type: 'image/jpeg' })\n     *   document.querySelector('#photo').src = URL.createObjectURL(blob)\n     */\n    resolve(src, onError) {\n        if (typeof Buffer === 'function') {\n            return Buffer.from(src, 'base64');\n        }\n        else if (typeof atob === 'function') {\n            // On IE 11, atob() can't handle newlines\n            const str = atob(src.replace(/[\\n\\r]/g, ''));\n            const buffer = new Uint8Array(str.length);\n            for (let i = 0; i < str.length; ++i)\n                buffer[i] = str.charCodeAt(i);\n            return buffer;\n        }\n        else {\n            onError('This environment does not support reading binary tags; either Buffer or atob is required');\n            return src;\n        }\n    },\n    stringify({ comment, type, value }, ctx, onComment, onChompKeep) {\n        const buf = value; // checked earlier by binary.identify()\n        let str;\n        if (typeof Buffer === 'function') {\n            str =\n                buf instanceof Buffer\n                    ? buf.toString('base64')\n                    : Buffer.from(buf.buffer).toString('base64');\n        }\n        else if (typeof btoa === 'function') {\n            let s = '';\n            for (let i = 0; i < buf.length; ++i)\n                s += String.fromCharCode(buf[i]);\n            str = btoa(s);\n        }\n        else {\n            throw new Error('This environment does not support writing binary tags; either Buffer or btoa is required');\n        }\n        if (!type)\n            type = Scalar.BLOCK_LITERAL;\n        if (type !== Scalar.QUOTE_DOUBLE) {\n            const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);\n            const n = Math.ceil(str.length / lineWidth);\n            const lines = new Array(n);\n            for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {\n                lines[i] = str.substr(o, lineWidth);\n            }\n            str = lines.join(type === Scalar.BLOCK_LITERAL ? '\\n' : ' ');\n        }\n        return stringifyString({ comment, type, value: str }, ctx, onComment, onChompKeep);\n    }\n};\n\nexport { binary };\n","import { isSeq, isPair, isMap } from '../../nodes/identity.js';\nimport { Pair, createPair } from '../../nodes/Pair.js';\nimport { Scalar } from '../../nodes/Scalar.js';\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\n\nfunction resolvePairs(seq, onError) {\n    if (isSeq(seq)) {\n        for (let i = 0; i < seq.items.length; ++i) {\n            let item = seq.items[i];\n            if (isPair(item))\n                continue;\n            else if (isMap(item)) {\n                if (item.items.length > 1)\n                    onError('Each pair must have its own sequence indicator');\n                const pair = item.items[0] || new Pair(new Scalar(null));\n                if (item.commentBefore)\n                    pair.key.commentBefore = pair.key.commentBefore\n                        ? `${item.commentBefore}\\n${pair.key.commentBefore}`\n                        : item.commentBefore;\n                if (item.comment) {\n                    const cn = pair.value ?? pair.key;\n                    cn.comment = cn.comment\n                        ? `${item.comment}\\n${cn.comment}`\n                        : item.comment;\n                }\n                item = pair;\n            }\n            seq.items[i] = isPair(item) ? item : new Pair(item);\n        }\n    }\n    else\n        onError('Expected a sequence for this tag');\n    return seq;\n}\nfunction createPairs(schema, iterable, ctx) {\n    const { replacer } = ctx;\n    const pairs = new YAMLSeq(schema);\n    pairs.tag = 'tag:yaml.org,2002:pairs';\n    let i = 0;\n    if (iterable && Symbol.iterator in Object(iterable))\n        for (let it of iterable) {\n            if (typeof replacer === 'function')\n                it = replacer.call(iterable, String(i++), it);\n            let key, value;\n            if (Array.isArray(it)) {\n                if (it.length === 2) {\n                    key = it[0];\n                    value = it[1];\n                }\n                else\n                    throw new TypeError(`Expected [key, value] tuple: ${it}`);\n            }\n            else if (it && it instanceof Object) {\n                const keys = Object.keys(it);\n                if (keys.length === 1) {\n                    key = keys[0];\n                    value = it[key];\n                }\n                else {\n                    throw new TypeError(`Expected tuple with one key, not ${keys.length} keys`);\n                }\n            }\n            else {\n                key = it;\n            }\n            pairs.items.push(createPair(key, value, ctx));\n        }\n    return pairs;\n}\nconst pairs = {\n    collection: 'seq',\n    default: false,\n    tag: 'tag:yaml.org,2002:pairs',\n    resolve: resolvePairs,\n    createNode: createPairs\n};\n\nexport { createPairs, pairs, resolvePairs };\n","import { isScalar, isPair } from '../../nodes/identity.js';\nimport { toJS } from '../../nodes/toJS.js';\nimport { YAMLMap } from '../../nodes/YAMLMap.js';\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\nimport { resolvePairs, createPairs } from './pairs.js';\n\nclass YAMLOMap extends YAMLSeq {\n    constructor() {\n        super();\n        this.add = YAMLMap.prototype.add.bind(this);\n        this.delete = YAMLMap.prototype.delete.bind(this);\n        this.get = YAMLMap.prototype.get.bind(this);\n        this.has = YAMLMap.prototype.has.bind(this);\n        this.set = YAMLMap.prototype.set.bind(this);\n        this.tag = YAMLOMap.tag;\n    }\n    /**\n     * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,\n     * but TypeScript won't allow widening the signature of a child method.\n     */\n    toJSON(_, ctx) {\n        if (!ctx)\n            return super.toJSON(_);\n        const map = new Map();\n        if (ctx?.onCreate)\n            ctx.onCreate(map);\n        for (const pair of this.items) {\n            let key, value;\n            if (isPair(pair)) {\n                key = toJS(pair.key, '', ctx);\n                value = toJS(pair.value, key, ctx);\n            }\n            else {\n                key = toJS(pair, '', ctx);\n            }\n            if (map.has(key))\n                throw new Error('Ordered maps must not include duplicate keys');\n            map.set(key, value);\n        }\n        return map;\n    }\n    static from(schema, iterable, ctx) {\n        const pairs = createPairs(schema, iterable, ctx);\n        const omap = new this();\n        omap.items = pairs.items;\n        return omap;\n    }\n}\nYAMLOMap.tag = 'tag:yaml.org,2002:omap';\nconst omap = {\n    collection: 'seq',\n    identify: value => value instanceof Map,\n    nodeClass: YAMLOMap,\n    default: false,\n    tag: 'tag:yaml.org,2002:omap',\n    resolve(seq, onError) {\n        const pairs = resolvePairs(seq, onError);\n        const seenKeys = [];\n        for (const { key } of pairs.items) {\n            if (isScalar(key)) {\n                if (seenKeys.includes(key.value)) {\n                    onError(`Ordered maps must not include duplicate keys: ${key.value}`);\n                }\n                else {\n                    seenKeys.push(key.value);\n                }\n            }\n        }\n        return Object.assign(new YAMLOMap(), pairs);\n    },\n    createNode: (schema, iterable, ctx) => YAMLOMap.from(schema, iterable, ctx)\n};\n\nexport { YAMLOMap, omap };\n","import { Scalar } from '../../nodes/Scalar.js';\n\nfunction boolStringify({ value, source }, ctx) {\n    const boolObj = value ? trueTag : falseTag;\n    if (source && boolObj.test.test(source))\n        return source;\n    return value ? ctx.options.trueStr : ctx.options.falseStr;\n}\nconst trueTag = {\n    identify: value => value === true,\n    default: true,\n    tag: 'tag:yaml.org,2002:bool',\n    test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,\n    resolve: () => new Scalar(true),\n    stringify: boolStringify\n};\nconst falseTag = {\n    identify: value => value === false,\n    default: true,\n    tag: 'tag:yaml.org,2002:bool',\n    test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,\n    resolve: () => new Scalar(false),\n    stringify: boolStringify\n};\n\nexport { falseTag, trueTag };\n","import { Scalar } from '../../nodes/Scalar.js';\nimport { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst floatNaN = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?\\.(?:inf|Inf|INF|nan|NaN|NAN)$/,\n    resolve: (str) => str.slice(-3).toLowerCase() === 'nan'\n        ? NaN\n        : str[0] === '-'\n            ? Number.NEGATIVE_INFINITY\n            : Number.POSITIVE_INFINITY,\n    stringify: stringifyNumber\n};\nconst floatExp = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'EXP',\n    test: /^[-+]?(?:[0-9][0-9_]*)?(?:\\.[0-9_]*)?[eE][-+]?[0-9]+$/,\n    resolve: (str) => parseFloat(str.replace(/_/g, '')),\n    stringify(node) {\n        const num = Number(node.value);\n        return isFinite(num) ? num.toExponential() : stringifyNumber(node);\n    }\n};\nconst float = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:[0-9][0-9_]*)?\\.[0-9_]*$/,\n    resolve(str) {\n        const node = new Scalar(parseFloat(str.replace(/_/g, '')));\n        const dot = str.indexOf('.');\n        if (dot !== -1) {\n            const f = str.substring(dot + 1).replace(/_/g, '');\n            if (f[f.length - 1] === '0')\n                node.minFractionDigits = f.length;\n        }\n        return node;\n    },\n    stringify: stringifyNumber\n};\n\nexport { float, floatExp, floatNaN };\n","import { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);\nfunction intResolve(str, offset, radix, { intAsBigInt }) {\n    const sign = str[0];\n    if (sign === '-' || sign === '+')\n        offset += 1;\n    str = str.substring(offset).replace(/_/g, '');\n    if (intAsBigInt) {\n        switch (radix) {\n            case 2:\n                str = `0b${str}`;\n                break;\n            case 8:\n                str = `0o${str}`;\n                break;\n            case 16:\n                str = `0x${str}`;\n                break;\n        }\n        const n = BigInt(str);\n        return sign === '-' ? BigInt(-1) * n : n;\n    }\n    const n = parseInt(str, radix);\n    return sign === '-' ? -1 * n : n;\n}\nfunction intStringify(node, radix, prefix) {\n    const { value } = node;\n    if (intIdentify(value)) {\n        const str = value.toString(radix);\n        return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;\n    }\n    return stringifyNumber(node);\n}\nconst intBin = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'BIN',\n    test: /^[-+]?0b[0-1_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),\n    stringify: node => intStringify(node, 2, '0b')\n};\nconst intOct = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'OCT',\n    test: /^[-+]?0[0-7_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),\n    stringify: node => intStringify(node, 8, '0')\n};\nconst int = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    test: /^[-+]?[0-9][0-9_]*$/,\n    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),\n    stringify: stringifyNumber\n};\nconst intHex = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'HEX',\n    test: /^[-+]?0x[0-9a-fA-F_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n    stringify: node => intStringify(node, 16, '0x')\n};\n\nexport { int, intBin, intHex, intOct };\n","import { isMap, isPair, isScalar } from '../../nodes/identity.js';\nimport { Pair, createPair } from '../../nodes/Pair.js';\nimport { YAMLMap, findPair } from '../../nodes/YAMLMap.js';\n\nclass YAMLSet extends YAMLMap {\n    constructor(schema) {\n        super(schema);\n        this.tag = YAMLSet.tag;\n    }\n    add(key) {\n        let pair;\n        if (isPair(key))\n            pair = key;\n        else if (key &&\n            typeof key === 'object' &&\n            'key' in key &&\n            'value' in key &&\n            key.value === null)\n            pair = new Pair(key.key, null);\n        else\n            pair = new Pair(key, null);\n        const prev = findPair(this.items, pair.key);\n        if (!prev)\n            this.items.push(pair);\n    }\n    /**\n     * If `keepPair` is `true`, returns the Pair matching `key`.\n     * Otherwise, returns the value of that Pair's key.\n     */\n    get(key, keepPair) {\n        const pair = findPair(this.items, key);\n        return !keepPair && isPair(pair)\n            ? isScalar(pair.key)\n                ? pair.key.value\n                : pair.key\n            : pair;\n    }\n    set(key, value) {\n        if (typeof value !== 'boolean')\n            throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);\n        const prev = findPair(this.items, key);\n        if (prev && !value) {\n            this.items.splice(this.items.indexOf(prev), 1);\n        }\n        else if (!prev && value) {\n            this.items.push(new Pair(key));\n        }\n    }\n    toJSON(_, ctx) {\n        return super.toJSON(_, ctx, Set);\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        if (this.hasAllNullValues(true))\n            return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);\n        else\n            throw new Error('Set items must all have null values');\n    }\n    static from(schema, iterable, ctx) {\n        const { replacer } = ctx;\n        const set = new this(schema);\n        if (iterable && Symbol.iterator in Object(iterable))\n            for (let value of iterable) {\n                if (typeof replacer === 'function')\n                    value = replacer.call(iterable, value, value);\n                set.items.push(createPair(value, null, ctx));\n            }\n        return set;\n    }\n}\nYAMLSet.tag = 'tag:yaml.org,2002:set';\nconst set = {\n    collection: 'map',\n    identify: value => value instanceof Set,\n    nodeClass: YAMLSet,\n    default: false,\n    tag: 'tag:yaml.org,2002:set',\n    createNode: (schema, iterable, ctx) => YAMLSet.from(schema, iterable, ctx),\n    resolve(map, onError) {\n        if (isMap(map)) {\n            if (map.hasAllNullValues(true))\n                return Object.assign(new YAMLSet(), map);\n            else\n                onError('Set items must all have null values');\n        }\n        else\n            onError('Expected a mapping for this tag');\n        return map;\n    }\n};\n\nexport { YAMLSet, set };\n","import { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\n/** Internal types handle bigint as number, because TS can't figure it out. */\nfunction parseSexagesimal(str, asBigInt) {\n    const sign = str[0];\n    const parts = sign === '-' || sign === '+' ? str.substring(1) : str;\n    const num = (n) => asBigInt ? BigInt(n) : Number(n);\n    const res = parts\n        .replace(/_/g, '')\n        .split(':')\n        .reduce((res, p) => res * num(60) + num(p), num(0));\n    return (sign === '-' ? num(-1) * res : res);\n}\n/**\n * hhhh:mm:ss.sss\n *\n * Internal types handle bigint as number, because TS can't figure it out.\n */\nfunction stringifySexagesimal(node) {\n    let { value } = node;\n    let num = (n) => n;\n    if (typeof value === 'bigint')\n        num = n => BigInt(n);\n    else if (isNaN(value) || !isFinite(value))\n        return stringifyNumber(node);\n    let sign = '';\n    if (value < 0) {\n        sign = '-';\n        value *= num(-1);\n    }\n    const _60 = num(60);\n    const parts = [value % _60]; // seconds, including ms\n    if (value < 60) {\n        parts.unshift(0); // at least one : is required\n    }\n    else {\n        value = (value - parts[0]) / _60;\n        parts.unshift(value % _60); // minutes\n        if (value >= 60) {\n            value = (value - parts[0]) / _60;\n            parts.unshift(value); // hours\n        }\n    }\n    return (sign +\n        parts\n            .map(n => String(n).padStart(2, '0'))\n            .join(':')\n            .replace(/000000\\d*$/, '') // % 60 may introduce error\n    );\n}\nconst intTime = {\n    identify: value => typeof value === 'bigint' || Number.isInteger(value),\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'TIME',\n    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,\n    resolve: (str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt),\n    stringify: stringifySexagesimal\n};\nconst floatTime = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'TIME',\n    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*$/,\n    resolve: str => parseSexagesimal(str, false),\n    stringify: stringifySexagesimal\n};\nconst timestamp = {\n    identify: value => value instanceof Date,\n    default: true,\n    tag: 'tag:yaml.org,2002:timestamp',\n    // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part\n    // may be omitted altogether, resulting in a date format. In such a case, the time part is\n    // assumed to be 00:00:00Z (start of day, UTC).\n    test: RegExp('^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' + // YYYY-Mm-Dd\n        '(?:' + // time is optional\n        '(?:t|T|[ \\\\t]+)' + // t | T | whitespace\n        '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\\\.[0-9]+)?)' + // Hh:Mm:Ss(.ss)?\n        '(?:[ \\\\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' + // Z | +5 | -03:30\n        ')?$'),\n    resolve(str) {\n        const match = str.match(timestamp.test);\n        if (!match)\n            throw new Error('!!timestamp expects a date, starting with yyyy-mm-dd');\n        const [, year, month, day, hour, minute, second] = match.map(Number);\n        const millisec = match[7] ? Number((match[7] + '00').substr(1, 3)) : 0;\n        let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);\n        const tz = match[8];\n        if (tz && tz !== 'Z') {\n            let d = parseSexagesimal(tz, false);\n            if (Math.abs(d) < 30)\n                d *= 60;\n            date -= 60000 * d;\n        }\n        return new Date(date);\n    },\n    stringify: ({ value }) => value.toISOString().replace(/((T00:00)?:00)?\\.000Z$/, '')\n};\n\nexport { floatTime, intTime, timestamp };\n","import { map } from '../common/map.js';\nimport { nullTag } from '../common/null.js';\nimport { seq } from '../common/seq.js';\nimport { string } from '../common/string.js';\nimport { binary } from './binary.js';\nimport { trueTag, falseTag } from './bool.js';\nimport { floatNaN, floatExp, float } from './float.js';\nimport { intBin, intOct, int, intHex } from './int.js';\nimport { omap } from './omap.js';\nimport { pairs } from './pairs.js';\nimport { set } from './set.js';\nimport { intTime, floatTime, timestamp } from './timestamp.js';\n\nconst schema = [\n    map,\n    seq,\n    string,\n    nullTag,\n    trueTag,\n    falseTag,\n    intBin,\n    intOct,\n    int,\n    intHex,\n    floatNaN,\n    floatExp,\n    float,\n    binary,\n    omap,\n    pairs,\n    set,\n    intTime,\n    floatTime,\n    timestamp\n];\n\nexport { schema };\n","import { map } from './common/map.js';\nimport { nullTag } from './common/null.js';\nimport { seq } from './common/seq.js';\nimport { string } from './common/string.js';\nimport { boolTag } from './core/bool.js';\nimport { float, floatExp, floatNaN } from './core/float.js';\nimport { int, intHex, intOct } from './core/int.js';\nimport { schema } from './core/schema.js';\nimport { schema as schema$1 } from './json/schema.js';\nimport { binary } from './yaml-1.1/binary.js';\nimport { omap } from './yaml-1.1/omap.js';\nimport { pairs } from './yaml-1.1/pairs.js';\nimport { schema as schema$2 } from './yaml-1.1/schema.js';\nimport { set } from './yaml-1.1/set.js';\nimport { timestamp, floatTime, intTime } from './yaml-1.1/timestamp.js';\n\nconst schemas = new Map([\n    ['core', schema],\n    ['failsafe', [map, seq, string]],\n    ['json', schema$1],\n    ['yaml11', schema$2],\n    ['yaml-1.1', schema$2]\n]);\nconst tagsByName = {\n    binary,\n    bool: boolTag,\n    float,\n    floatExp,\n    floatNaN,\n    floatTime,\n    int,\n    intHex,\n    intOct,\n    intTime,\n    map,\n    null: nullTag,\n    omap,\n    pairs,\n    seq,\n    set,\n    timestamp\n};\nconst coreKnownTags = {\n    'tag:yaml.org,2002:binary': binary,\n    'tag:yaml.org,2002:omap': omap,\n    'tag:yaml.org,2002:pairs': pairs,\n    'tag:yaml.org,2002:set': set,\n    'tag:yaml.org,2002:timestamp': timestamp\n};\nfunction getTags(customTags, schemaName) {\n    let tags = schemas.get(schemaName);\n    if (!tags) {\n        if (Array.isArray(customTags))\n            tags = [];\n        else {\n            const keys = Array.from(schemas.keys())\n                .filter(key => key !== 'yaml11')\n                .map(key => JSON.stringify(key))\n                .join(', ');\n            throw new Error(`Unknown schema \"${schemaName}\"; use one of ${keys} or define customTags array`);\n        }\n    }\n    if (Array.isArray(customTags)) {\n        for (const tag of customTags)\n            tags = tags.concat(tag);\n    }\n    else if (typeof customTags === 'function') {\n        tags = customTags(tags.slice());\n    }\n    return tags.map(tag => {\n        if (typeof tag !== 'string')\n            return tag;\n        const tagObj = tagsByName[tag];\n        if (tagObj)\n            return tagObj;\n        const keys = Object.keys(tagsByName)\n            .map(key => JSON.stringify(key))\n            .join(', ');\n        throw new Error(`Unknown custom tag \"${tag}\"; use one of ${keys}`);\n    });\n}\n\nexport { coreKnownTags, getTags };\n","import { MAP, SCALAR, SEQ } from '../nodes/identity.js';\nimport { map } from './common/map.js';\nimport { seq } from './common/seq.js';\nimport { string } from './common/string.js';\nimport { getTags, coreKnownTags } from './tags.js';\n\nconst sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;\nclass Schema {\n    constructor({ compat, customTags, merge, resolveKnownTags, schema, sortMapEntries, toStringDefaults }) {\n        this.compat = Array.isArray(compat)\n            ? getTags(compat, 'compat')\n            : compat\n                ? getTags(null, compat)\n                : null;\n        this.merge = !!merge;\n        this.name = (typeof schema === 'string' && schema) || 'core';\n        this.knownTags = resolveKnownTags ? coreKnownTags : {};\n        this.tags = getTags(customTags, this.name);\n        this.toStringOptions = toStringDefaults ?? null;\n        Object.defineProperty(this, MAP, { value: map });\n        Object.defineProperty(this, SCALAR, { value: string });\n        Object.defineProperty(this, SEQ, { value: seq });\n        // Used by createMap()\n        this.sortMapEntries =\n            typeof sortMapEntries === 'function'\n                ? sortMapEntries\n                : sortMapEntries === true\n                    ? sortMapEntriesByKey\n                    : null;\n    }\n    clone() {\n        const copy = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));\n        copy.tags = this.tags.slice();\n        return copy;\n    }\n}\n\nexport { Schema };\n","import { isNode } from '../nodes/identity.js';\nimport { createStringifyContext, stringify } from './stringify.js';\nimport { indentComment, lineComment } from './stringifyComment.js';\n\nfunction stringifyDocument(doc, options) {\n    const lines = [];\n    let hasDirectives = options.directives === true;\n    if (options.directives !== false && doc.directives) {\n        const dir = doc.directives.toString(doc);\n        if (dir) {\n            lines.push(dir);\n            hasDirectives = true;\n        }\n        else if (doc.directives.docStart)\n            hasDirectives = true;\n    }\n    if (hasDirectives)\n        lines.push('---');\n    const ctx = createStringifyContext(doc, options);\n    const { commentString } = ctx.options;\n    if (doc.commentBefore) {\n        if (lines.length !== 1)\n            lines.unshift('');\n        const cs = commentString(doc.commentBefore);\n        lines.unshift(indentComment(cs, ''));\n    }\n    let chompKeep = false;\n    let contentComment = null;\n    if (doc.contents) {\n        if (isNode(doc.contents)) {\n            if (doc.contents.spaceBefore && hasDirectives)\n                lines.push('');\n            if (doc.contents.commentBefore) {\n                const cs = commentString(doc.contents.commentBefore);\n                lines.push(indentComment(cs, ''));\n            }\n            // top-level block scalars need to be indented if followed by a comment\n            ctx.forceBlockIndent = !!doc.comment;\n            contentComment = doc.contents.comment;\n        }\n        const onChompKeep = contentComment ? undefined : () => (chompKeep = true);\n        let body = stringify(doc.contents, ctx, () => (contentComment = null), onChompKeep);\n        if (contentComment)\n            body += lineComment(body, '', commentString(contentComment));\n        if ((body[0] === '|' || body[0] === '>') &&\n            lines[lines.length - 1] === '---') {\n            // Top-level block scalars with a preceding doc marker ought to use the\n            // same line for their header.\n            lines[lines.length - 1] = `--- ${body}`;\n        }\n        else\n            lines.push(body);\n    }\n    else {\n        lines.push(stringify(doc.contents, ctx));\n    }\n    if (doc.directives?.docEnd) {\n        if (doc.comment) {\n            const cs = commentString(doc.comment);\n            if (cs.includes('\\n')) {\n                lines.push('...');\n                lines.push(indentComment(cs, ''));\n            }\n            else {\n                lines.push(`... ${cs}`);\n            }\n        }\n        else {\n            lines.push('...');\n        }\n    }\n    else {\n        let dc = doc.comment;\n        if (dc && chompKeep)\n            dc = dc.replace(/^\\n+/, '');\n        if (dc) {\n            if ((!chompKeep || contentComment) && lines[lines.length - 1] !== '')\n                lines.push('');\n            lines.push(indentComment(commentString(dc), ''));\n        }\n    }\n    return lines.join('\\n') + '\\n';\n}\n\nexport { stringifyDocument };\n","import { Alias } from '../nodes/Alias.js';\nimport { isEmptyPath, collectionFromPath } from '../nodes/Collection.js';\nimport { NODE_TYPE, DOC, isNode, isCollection, isScalar } from '../nodes/identity.js';\nimport { Pair } from '../nodes/Pair.js';\nimport { toJS } from '../nodes/toJS.js';\nimport { Schema } from '../schema/Schema.js';\nimport { stringifyDocument } from '../stringify/stringifyDocument.js';\nimport { anchorNames, findNewAnchor, createNodeAnchors } from './anchors.js';\nimport { applyReviver } from './applyReviver.js';\nimport { createNode } from './createNode.js';\nimport { Directives } from './directives.js';\n\nclass Document {\n    constructor(value, replacer, options) {\n        /** A comment before this Document */\n        this.commentBefore = null;\n        /** A comment immediately after this Document */\n        this.comment = null;\n        /** Errors encountered during parsing. */\n        this.errors = [];\n        /** Warnings encountered during parsing. */\n        this.warnings = [];\n        Object.defineProperty(this, NODE_TYPE, { value: DOC });\n        let _replacer = null;\n        if (typeof replacer === 'function' || Array.isArray(replacer)) {\n            _replacer = replacer;\n        }\n        else if (options === undefined && replacer) {\n            options = replacer;\n            replacer = undefined;\n        }\n        const opt = Object.assign({\n            intAsBigInt: false,\n            keepSourceTokens: false,\n            logLevel: 'warn',\n            prettyErrors: true,\n            strict: true,\n            uniqueKeys: true,\n            version: '1.2'\n        }, options);\n        this.options = opt;\n        let { version } = opt;\n        if (options?._directives) {\n            this.directives = options._directives.atDocument();\n            if (this.directives.yaml.explicit)\n                version = this.directives.yaml.version;\n        }\n        else\n            this.directives = new Directives({ version });\n        this.setSchema(version, options);\n        // @ts-expect-error We can't really know that this matches Contents.\n        this.contents =\n            value === undefined ? null : this.createNode(value, _replacer, options);\n    }\n    /**\n     * Create a deep copy of this Document and its contents.\n     *\n     * Custom Node values that inherit from `Object` still refer to their original instances.\n     */\n    clone() {\n        const copy = Object.create(Document.prototype, {\n            [NODE_TYPE]: { value: DOC }\n        });\n        copy.commentBefore = this.commentBefore;\n        copy.comment = this.comment;\n        copy.errors = this.errors.slice();\n        copy.warnings = this.warnings.slice();\n        copy.options = Object.assign({}, this.options);\n        if (this.directives)\n            copy.directives = this.directives.clone();\n        copy.schema = this.schema.clone();\n        // @ts-expect-error We can't really know that this matches Contents.\n        copy.contents = isNode(this.contents)\n            ? this.contents.clone(copy.schema)\n            : this.contents;\n        if (this.range)\n            copy.range = this.range.slice();\n        return copy;\n    }\n    /** Adds a value to the document. */\n    add(value) {\n        if (assertCollection(this.contents))\n            this.contents.add(value);\n    }\n    /** Adds a value to the document. */\n    addIn(path, value) {\n        if (assertCollection(this.contents))\n            this.contents.addIn(path, value);\n    }\n    /**\n     * Create a new `Alias` node, ensuring that the target `node` has the required anchor.\n     *\n     * If `node` already has an anchor, `name` is ignored.\n     * Otherwise, the `node.anchor` value will be set to `name`,\n     * or if an anchor with that name is already present in the document,\n     * `name` will be used as a prefix for a new unique anchor.\n     * If `name` is undefined, the generated anchor will use 'a' as a prefix.\n     */\n    createAlias(node, name) {\n        if (!node.anchor) {\n            const prev = anchorNames(this);\n            node.anchor =\n                // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n                !name || prev.has(name) ? findNewAnchor(name || 'a', prev) : name;\n        }\n        return new Alias(node.anchor);\n    }\n    createNode(value, replacer, options) {\n        let _replacer = undefined;\n        if (typeof replacer === 'function') {\n            value = replacer.call({ '': value }, '', value);\n            _replacer = replacer;\n        }\n        else if (Array.isArray(replacer)) {\n            const keyToStr = (v) => typeof v === 'number' || v instanceof String || v instanceof Number;\n            const asStr = replacer.filter(keyToStr).map(String);\n            if (asStr.length > 0)\n                replacer = replacer.concat(asStr);\n            _replacer = replacer;\n        }\n        else if (options === undefined && replacer) {\n            options = replacer;\n            replacer = undefined;\n        }\n        const { aliasDuplicateObjects, anchorPrefix, flow, keepUndefined, onTagObj, tag } = options ?? {};\n        const { onAnchor, setAnchors, sourceObjects } = createNodeAnchors(this, \n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        anchorPrefix || 'a');\n        const ctx = {\n            aliasDuplicateObjects: aliasDuplicateObjects ?? true,\n            keepUndefined: keepUndefined ?? false,\n            onAnchor,\n            onTagObj,\n            replacer: _replacer,\n            schema: this.schema,\n            sourceObjects\n        };\n        const node = createNode(value, tag, ctx);\n        if (flow && isCollection(node))\n            node.flow = true;\n        setAnchors();\n        return node;\n    }\n    /**\n     * Convert a key and a value into a `Pair` using the current schema,\n     * recursively wrapping all values as `Scalar` or `Collection` nodes.\n     */\n    createPair(key, value, options = {}) {\n        const k = this.createNode(key, null, options);\n        const v = this.createNode(value, null, options);\n        return new Pair(k, v);\n    }\n    /**\n     * Removes a value from the document.\n     * @returns `true` if the item was found and removed.\n     */\n    delete(key) {\n        return assertCollection(this.contents) ? this.contents.delete(key) : false;\n    }\n    /**\n     * Removes a value from the document.\n     * @returns `true` if the item was found and removed.\n     */\n    deleteIn(path) {\n        if (isEmptyPath(path)) {\n            if (this.contents == null)\n                return false;\n            // @ts-expect-error Presumed impossible if Strict extends false\n            this.contents = null;\n            return true;\n        }\n        return assertCollection(this.contents)\n            ? this.contents.deleteIn(path)\n            : false;\n    }\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    get(key, keepScalar) {\n        return isCollection(this.contents)\n            ? this.contents.get(key, keepScalar)\n            : undefined;\n    }\n    /**\n     * Returns item at `path`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    getIn(path, keepScalar) {\n        if (isEmptyPath(path))\n            return !keepScalar && isScalar(this.contents)\n                ? this.contents.value\n                : this.contents;\n        return isCollection(this.contents)\n            ? this.contents.getIn(path, keepScalar)\n            : undefined;\n    }\n    /**\n     * Checks if the document includes a value with the key `key`.\n     */\n    has(key) {\n        return isCollection(this.contents) ? this.contents.has(key) : false;\n    }\n    /**\n     * Checks if the document includes a value at `path`.\n     */\n    hasIn(path) {\n        if (isEmptyPath(path))\n            return this.contents !== undefined;\n        return isCollection(this.contents) ? this.contents.hasIn(path) : false;\n    }\n    /**\n     * Sets a value in this document. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    set(key, value) {\n        if (this.contents == null) {\n            // @ts-expect-error We can't really know that this matches Contents.\n            this.contents = collectionFromPath(this.schema, [key], value);\n        }\n        else if (assertCollection(this.contents)) {\n            this.contents.set(key, value);\n        }\n    }\n    /**\n     * Sets a value in this document. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    setIn(path, value) {\n        if (isEmptyPath(path)) {\n            // @ts-expect-error We can't really know that this matches Contents.\n            this.contents = value;\n        }\n        else if (this.contents == null) {\n            // @ts-expect-error We can't really know that this matches Contents.\n            this.contents = collectionFromPath(this.schema, Array.from(path), value);\n        }\n        else if (assertCollection(this.contents)) {\n            this.contents.setIn(path, value);\n        }\n    }\n    /**\n     * Change the YAML version and schema used by the document.\n     * A `null` version disables support for directives, explicit tags, anchors, and aliases.\n     * It also requires the `schema` option to be given as a `Schema` instance value.\n     *\n     * Overrides all previously set schema options.\n     */\n    setSchema(version, options = {}) {\n        if (typeof version === 'number')\n            version = String(version);\n        let opt;\n        switch (version) {\n            case '1.1':\n                if (this.directives)\n                    this.directives.yaml.version = '1.1';\n                else\n                    this.directives = new Directives({ version: '1.1' });\n                opt = { merge: true, resolveKnownTags: false, schema: 'yaml-1.1' };\n                break;\n            case '1.2':\n            case 'next':\n                if (this.directives)\n                    this.directives.yaml.version = version;\n                else\n                    this.directives = new Directives({ version });\n                opt = { merge: false, resolveKnownTags: true, schema: 'core' };\n                break;\n            case null:\n                if (this.directives)\n                    delete this.directives;\n                opt = null;\n                break;\n            default: {\n                const sv = JSON.stringify(version);\n                throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${sv}`);\n            }\n        }\n        // Not using `instanceof Schema` to allow for duck typing\n        if (options.schema instanceof Object)\n            this.schema = options.schema;\n        else if (opt)\n            this.schema = new Schema(Object.assign(opt, options));\n        else\n            throw new Error(`With a null YAML version, the { schema: Schema } option is required`);\n    }\n    // json & jsonArg are only used from toJSON()\n    toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {\n        const ctx = {\n            anchors: new Map(),\n            doc: this,\n            keep: !json,\n            mapAsMap: mapAsMap === true,\n            mapKeyWarned: false,\n            maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100\n        };\n        const res = toJS(this.contents, jsonArg ?? '', ctx);\n        if (typeof onAnchor === 'function')\n            for (const { count, res } of ctx.anchors.values())\n                onAnchor(res, count);\n        return typeof reviver === 'function'\n            ? applyReviver(reviver, { '': res }, '', res)\n            : res;\n    }\n    /**\n     * A JSON representation of the document `contents`.\n     *\n     * @param jsonArg Used by `JSON.stringify` to indicate the array index or\n     *   property name.\n     */\n    toJSON(jsonArg, onAnchor) {\n        return this.toJS({ json: true, jsonArg, mapAsMap: false, onAnchor });\n    }\n    /** A YAML representation of the document. */\n    toString(options = {}) {\n        if (this.errors.length > 0)\n            throw new Error('Document with errors cannot be stringified');\n        if ('indent' in options &&\n            (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {\n            const s = JSON.stringify(options.indent);\n            throw new Error(`\"indent\" option must be a positive integer, not ${s}`);\n        }\n        return stringifyDocument(this, options);\n    }\n}\nfunction assertCollection(contents) {\n    if (isCollection(contents))\n        return true;\n    throw new Error('Expected a YAML collection as document contents');\n}\n\nexport { Document };\n","class YAMLError extends Error {\n    constructor(name, pos, code, message) {\n        super();\n        this.name = name;\n        this.code = code;\n        this.message = message;\n        this.pos = pos;\n    }\n}\nclass YAMLParseError extends YAMLError {\n    constructor(pos, code, message) {\n        super('YAMLParseError', pos, code, message);\n    }\n}\nclass YAMLWarning extends YAMLError {\n    constructor(pos, code, message) {\n        super('YAMLWarning', pos, code, message);\n    }\n}\nconst prettifyError = (src, lc) => (error) => {\n    if (error.pos[0] === -1)\n        return;\n    error.linePos = error.pos.map(pos => lc.linePos(pos));\n    const { line, col } = error.linePos[0];\n    error.message += ` at line ${line}, column ${col}`;\n    let ci = col - 1;\n    let lineStr = src\n        .substring(lc.lineStarts[line - 1], lc.lineStarts[line])\n        .replace(/[\\n\\r]+$/, '');\n    // Trim to max 80 chars, keeping col position near the middle\n    if (ci >= 60 && lineStr.length > 80) {\n        const trimStart = Math.min(ci - 39, lineStr.length - 79);\n        lineStr = '…' + lineStr.substring(trimStart);\n        ci -= trimStart - 1;\n    }\n    if (lineStr.length > 80)\n        lineStr = lineStr.substring(0, 79) + '…';\n    // Include previous line in context if pointing at line start\n    if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {\n        // Regexp won't match if start is trimmed\n        let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);\n        if (prev.length > 80)\n            prev = prev.substring(0, 79) + '…\\n';\n        lineStr = prev + lineStr;\n    }\n    if (/[^ ]/.test(lineStr)) {\n        let count = 1;\n        const end = error.linePos[1];\n        if (end && end.line === line && end.col > col) {\n            count = Math.max(1, Math.min(end.col - col, 80 - ci));\n        }\n        const pointer = ' '.repeat(ci) + '^'.repeat(count);\n        error.message += `:\\n\\n${lineStr}\\n${pointer}\\n`;\n    }\n};\n\nexport { YAMLError, YAMLParseError, YAMLWarning, prettifyError };\n","function resolveProps(tokens, { flow, indicator, next, offset, onError, startOnNewline }) {\n    let spaceBefore = false;\n    let atNewline = startOnNewline;\n    let hasSpace = startOnNewline;\n    let comment = '';\n    let commentSep = '';\n    let hasNewline = false;\n    let hasNewlineAfterProp = false;\n    let reqSpace = false;\n    let anchor = null;\n    let tag = null;\n    let comma = null;\n    let found = null;\n    let start = null;\n    for (const token of tokens) {\n        if (reqSpace) {\n            if (token.type !== 'space' &&\n                token.type !== 'newline' &&\n                token.type !== 'comma')\n                onError(token.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');\n            reqSpace = false;\n        }\n        switch (token.type) {\n            case 'space':\n                // At the doc level, tabs at line start may be parsed\n                // as leading white space rather than indentation.\n                // In a flow collection, only the parser handles indent.\n                if (!flow &&\n                    atNewline &&\n                    indicator !== 'doc-start' &&\n                    token.source[0] === '\\t')\n                    onError(token, 'TAB_AS_INDENT', 'Tabs are not allowed as indentation');\n                hasSpace = true;\n                break;\n            case 'comment': {\n                if (!hasSpace)\n                    onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');\n                const cb = token.source.substring(1) || ' ';\n                if (!comment)\n                    comment = cb;\n                else\n                    comment += commentSep + cb;\n                commentSep = '';\n                atNewline = false;\n                break;\n            }\n            case 'newline':\n                if (atNewline) {\n                    if (comment)\n                        comment += token.source;\n                    else\n                        spaceBefore = true;\n                }\n                else\n                    commentSep += token.source;\n                atNewline = true;\n                hasNewline = true;\n                if (anchor || tag)\n                    hasNewlineAfterProp = true;\n                hasSpace = true;\n                break;\n            case 'anchor':\n                if (anchor)\n                    onError(token, 'MULTIPLE_ANCHORS', 'A node can have at most one anchor');\n                if (token.source.endsWith(':'))\n                    onError(token.offset + token.source.length - 1, 'BAD_ALIAS', 'Anchor ending in : is ambiguous', true);\n                anchor = token;\n                if (start === null)\n                    start = token.offset;\n                atNewline = false;\n                hasSpace = false;\n                reqSpace = true;\n                break;\n            case 'tag': {\n                if (tag)\n                    onError(token, 'MULTIPLE_TAGS', 'A node can have at most one tag');\n                tag = token;\n                if (start === null)\n                    start = token.offset;\n                atNewline = false;\n                hasSpace = false;\n                reqSpace = true;\n                break;\n            }\n            case indicator:\n                // Could here handle preceding comments differently\n                if (anchor || tag)\n                    onError(token, 'BAD_PROP_ORDER', `Anchors and tags must be after the ${token.source} indicator`);\n                if (found)\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.source} in ${flow ?? 'collection'}`);\n                found = token;\n                atNewline = false;\n                hasSpace = false;\n                break;\n            case 'comma':\n                if (flow) {\n                    if (comma)\n                        onError(token, 'UNEXPECTED_TOKEN', `Unexpected , in ${flow}`);\n                    comma = token;\n                    atNewline = false;\n                    hasSpace = false;\n                    break;\n                }\n            // else fallthrough\n            default:\n                onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.type} token`);\n                atNewline = false;\n                hasSpace = false;\n        }\n    }\n    const last = tokens[tokens.length - 1];\n    const end = last ? last.offset + last.source.length : offset;\n    if (reqSpace &&\n        next &&\n        next.type !== 'space' &&\n        next.type !== 'newline' &&\n        next.type !== 'comma' &&\n        (next.type !== 'scalar' || next.source !== ''))\n        onError(next.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');\n    return {\n        comma,\n        found,\n        spaceBefore,\n        comment,\n        hasNewline,\n        hasNewlineAfterProp,\n        anchor,\n        tag,\n        end,\n        start: start ?? end\n    };\n}\n\nexport { resolveProps };\n","function containsNewline(key) {\n    if (!key)\n        return null;\n    switch (key.type) {\n        case 'alias':\n        case 'scalar':\n        case 'double-quoted-scalar':\n        case 'single-quoted-scalar':\n            if (key.source.includes('\\n'))\n                return true;\n            if (key.end)\n                for (const st of key.end)\n                    if (st.type === 'newline')\n                        return true;\n            return false;\n        case 'flow-collection':\n            for (const it of key.items) {\n                for (const st of it.start)\n                    if (st.type === 'newline')\n                        return true;\n                if (it.sep)\n                    for (const st of it.sep)\n                        if (st.type === 'newline')\n                            return true;\n                if (containsNewline(it.key) || containsNewline(it.value))\n                    return true;\n            }\n            return false;\n        default:\n            return true;\n    }\n}\n\nexport { containsNewline };\n","import { containsNewline } from './util-contains-newline.js';\n\nfunction flowIndentCheck(indent, fc, onError) {\n    if (fc?.type === 'flow-collection') {\n        const end = fc.end[0];\n        if (end.indent === indent &&\n            (end.source === ']' || end.source === '}') &&\n            containsNewline(fc)) {\n            const msg = 'Flow end indicator should be more indented than parent';\n            onError(end, 'BAD_INDENT', msg, true);\n        }\n    }\n}\n\nexport { flowIndentCheck };\n","import { isScalar } from '../nodes/identity.js';\n\nfunction mapIncludes(ctx, items, search) {\n    const { uniqueKeys } = ctx.options;\n    if (uniqueKeys === false)\n        return false;\n    const isEqual = typeof uniqueKeys === 'function'\n        ? uniqueKeys\n        : (a, b) => a === b ||\n            (isScalar(a) &&\n                isScalar(b) &&\n                a.value === b.value &&\n                !(a.value === '<<' && ctx.schema.merge));\n    return items.some(pair => isEqual(pair.key, search));\n}\n\nexport { mapIncludes };\n","import { Pair } from '../nodes/Pair.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { resolveProps } from './resolve-props.js';\nimport { containsNewline } from './util-contains-newline.js';\nimport { flowIndentCheck } from './util-flow-indent-check.js';\nimport { mapIncludes } from './util-map-includes.js';\n\nconst startColMsg = 'All mapping items must start at the same column';\nfunction resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError, tag) {\n    const NodeClass = tag?.nodeClass ?? YAMLMap;\n    const map = new NodeClass(ctx.schema);\n    if (ctx.atRoot)\n        ctx.atRoot = false;\n    let offset = bm.offset;\n    let commentEnd = null;\n    for (const collItem of bm.items) {\n        const { start, key, sep, value } = collItem;\n        // key properties\n        const keyProps = resolveProps(start, {\n            indicator: 'explicit-key-ind',\n            next: key ?? sep?.[0],\n            offset,\n            onError,\n            startOnNewline: true\n        });\n        const implicitKey = !keyProps.found;\n        if (implicitKey) {\n            if (key) {\n                if (key.type === 'block-seq')\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'A block sequence may not be used as an implicit map key');\n                else if ('indent' in key && key.indent !== bm.indent)\n                    onError(offset, 'BAD_INDENT', startColMsg);\n            }\n            if (!keyProps.anchor && !keyProps.tag && !sep) {\n                commentEnd = keyProps.end;\n                if (keyProps.comment) {\n                    if (map.comment)\n                        map.comment += '\\n' + keyProps.comment;\n                    else\n                        map.comment = keyProps.comment;\n                }\n                continue;\n            }\n            if (keyProps.hasNewlineAfterProp || containsNewline(key)) {\n                onError(key ?? start[start.length - 1], 'MULTILINE_IMPLICIT_KEY', 'Implicit keys need to be on a single line');\n            }\n        }\n        else if (keyProps.found?.indent !== bm.indent) {\n            onError(offset, 'BAD_INDENT', startColMsg);\n        }\n        // key value\n        const keyStart = keyProps.end;\n        const keyNode = key\n            ? composeNode(ctx, key, keyProps, onError)\n            : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);\n        if (ctx.schema.compat)\n            flowIndentCheck(bm.indent, key, onError);\n        if (mapIncludes(ctx, map.items, keyNode))\n            onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n        // value properties\n        const valueProps = resolveProps(sep ?? [], {\n            indicator: 'map-value-ind',\n            next: value,\n            offset: keyNode.range[2],\n            onError,\n            startOnNewline: !key || key.type === 'block-scalar'\n        });\n        offset = valueProps.end;\n        if (valueProps.found) {\n            if (implicitKey) {\n                if (value?.type === 'block-map' && !valueProps.hasNewline)\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');\n                if (ctx.options.strict &&\n                    keyProps.start < valueProps.found.offset - 1024)\n                    onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');\n            }\n            // value value\n            const valueNode = value\n                ? composeNode(ctx, value, valueProps, onError)\n                : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);\n            if (ctx.schema.compat)\n                flowIndentCheck(bm.indent, value, onError);\n            offset = valueNode.range[2];\n            const pair = new Pair(keyNode, valueNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            map.items.push(pair);\n        }\n        else {\n            // key with no value\n            if (implicitKey)\n                onError(keyNode.range, 'MISSING_CHAR', 'Implicit map keys need to be followed by map values');\n            if (valueProps.comment) {\n                if (keyNode.comment)\n                    keyNode.comment += '\\n' + valueProps.comment;\n                else\n                    keyNode.comment = valueProps.comment;\n            }\n            const pair = new Pair(keyNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            map.items.push(pair);\n        }\n    }\n    if (commentEnd && commentEnd < offset)\n        onError(commentEnd, 'IMPOSSIBLE', 'Map comment with trailing content');\n    map.range = [bm.offset, offset, commentEnd ?? offset];\n    return map;\n}\n\nexport { resolveBlockMap };\n","import { YAMLSeq } from '../nodes/YAMLSeq.js';\nimport { resolveProps } from './resolve-props.js';\nimport { flowIndentCheck } from './util-flow-indent-check.js';\n\nfunction resolveBlockSeq({ composeNode, composeEmptyNode }, ctx, bs, onError, tag) {\n    const NodeClass = tag?.nodeClass ?? YAMLSeq;\n    const seq = new NodeClass(ctx.schema);\n    if (ctx.atRoot)\n        ctx.atRoot = false;\n    let offset = bs.offset;\n    let commentEnd = null;\n    for (const { start, value } of bs.items) {\n        const props = resolveProps(start, {\n            indicator: 'seq-item-ind',\n            next: value,\n            offset,\n            onError,\n            startOnNewline: true\n        });\n        if (!props.found) {\n            if (props.anchor || props.tag || value) {\n                if (value && value.type === 'block-seq')\n                    onError(props.end, 'BAD_INDENT', 'All sequence items must start at the same column');\n                else\n                    onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');\n            }\n            else {\n                commentEnd = props.end;\n                if (props.comment)\n                    seq.comment = props.comment;\n                continue;\n            }\n        }\n        const node = value\n            ? composeNode(ctx, value, props, onError)\n            : composeEmptyNode(ctx, props.end, start, null, props, onError);\n        if (ctx.schema.compat)\n            flowIndentCheck(bs.indent, value, onError);\n        offset = node.range[2];\n        seq.items.push(node);\n    }\n    seq.range = [bs.offset, offset, commentEnd ?? offset];\n    return seq;\n}\n\nexport { resolveBlockSeq };\n","function resolveEnd(end, offset, reqSpace, onError) {\n    let comment = '';\n    if (end) {\n        let hasSpace = false;\n        let sep = '';\n        for (const token of end) {\n            const { source, type } = token;\n            switch (type) {\n                case 'space':\n                    hasSpace = true;\n                    break;\n                case 'comment': {\n                    if (reqSpace && !hasSpace)\n                        onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');\n                    const cb = source.substring(1) || ' ';\n                    if (!comment)\n                        comment = cb;\n                    else\n                        comment += sep + cb;\n                    sep = '';\n                    break;\n                }\n                case 'newline':\n                    if (comment)\n                        sep += source;\n                    hasSpace = true;\n                    break;\n                default:\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);\n            }\n            offset += source.length;\n        }\n    }\n    return { comment, offset };\n}\n\nexport { resolveEnd };\n","import { isPair } from '../nodes/identity.js';\nimport { Pair } from '../nodes/Pair.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { YAMLSeq } from '../nodes/YAMLSeq.js';\nimport { resolveEnd } from './resolve-end.js';\nimport { resolveProps } from './resolve-props.js';\nimport { containsNewline } from './util-contains-newline.js';\nimport { mapIncludes } from './util-map-includes.js';\n\nconst blockMsg = 'Block collections are not allowed within flow collections';\nconst isBlock = (token) => token && (token.type === 'block-map' || token.type === 'block-seq');\nfunction resolveFlowCollection({ composeNode, composeEmptyNode }, ctx, fc, onError, tag) {\n    const isMap = fc.start.source === '{';\n    const fcName = isMap ? 'flow map' : 'flow sequence';\n    const NodeClass = (tag?.nodeClass ?? (isMap ? YAMLMap : YAMLSeq));\n    const coll = new NodeClass(ctx.schema);\n    coll.flow = true;\n    const atRoot = ctx.atRoot;\n    if (atRoot)\n        ctx.atRoot = false;\n    let offset = fc.offset + fc.start.source.length;\n    for (let i = 0; i < fc.items.length; ++i) {\n        const collItem = fc.items[i];\n        const { start, key, sep, value } = collItem;\n        const props = resolveProps(start, {\n            flow: fcName,\n            indicator: 'explicit-key-ind',\n            next: key ?? sep?.[0],\n            offset,\n            onError,\n            startOnNewline: false\n        });\n        if (!props.found) {\n            if (!props.anchor && !props.tag && !sep && !value) {\n                if (i === 0 && props.comma)\n                    onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\n                else if (i < fc.items.length - 1)\n                    onError(props.start, 'UNEXPECTED_TOKEN', `Unexpected empty item in ${fcName}`);\n                if (props.comment) {\n                    if (coll.comment)\n                        coll.comment += '\\n' + props.comment;\n                    else\n                        coll.comment = props.comment;\n                }\n                offset = props.end;\n                continue;\n            }\n            if (!isMap && ctx.options.strict && containsNewline(key))\n                onError(key, // checked by containsNewline()\n                'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n        }\n        if (i === 0) {\n            if (props.comma)\n                onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\n        }\n        else {\n            if (!props.comma)\n                onError(props.start, 'MISSING_CHAR', `Missing , between ${fcName} items`);\n            if (props.comment) {\n                let prevItemComment = '';\n                loop: for (const st of start) {\n                    switch (st.type) {\n                        case 'comma':\n                        case 'space':\n                            break;\n                        case 'comment':\n                            prevItemComment = st.source.substring(1);\n                            break loop;\n                        default:\n                            break loop;\n                    }\n                }\n                if (prevItemComment) {\n                    let prev = coll.items[coll.items.length - 1];\n                    if (isPair(prev))\n                        prev = prev.value ?? prev.key;\n                    if (prev.comment)\n                        prev.comment += '\\n' + prevItemComment;\n                    else\n                        prev.comment = prevItemComment;\n                    props.comment = props.comment.substring(prevItemComment.length + 1);\n                }\n            }\n        }\n        if (!isMap && !sep && !props.found) {\n            // item is a value in a seq\n            // → key & sep are empty, start does not include ? or :\n            const valueNode = value\n                ? composeNode(ctx, value, props, onError)\n                : composeEmptyNode(ctx, props.end, sep, null, props, onError);\n            coll.items.push(valueNode);\n            offset = valueNode.range[2];\n            if (isBlock(value))\n                onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n        }\n        else {\n            // item is a key+value pair\n            // key value\n            const keyStart = props.end;\n            const keyNode = key\n                ? composeNode(ctx, key, props, onError)\n                : composeEmptyNode(ctx, keyStart, start, null, props, onError);\n            if (isBlock(key))\n                onError(keyNode.range, 'BLOCK_IN_FLOW', blockMsg);\n            // value properties\n            const valueProps = resolveProps(sep ?? [], {\n                flow: fcName,\n                indicator: 'map-value-ind',\n                next: value,\n                offset: keyNode.range[2],\n                onError,\n                startOnNewline: false\n            });\n            if (valueProps.found) {\n                if (!isMap && !props.found && ctx.options.strict) {\n                    if (sep)\n                        for (const st of sep) {\n                            if (st === valueProps.found)\n                                break;\n                            if (st.type === 'newline') {\n                                onError(st, 'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n                                break;\n                            }\n                        }\n                    if (props.start < valueProps.found.offset - 1024)\n                        onError(valueProps.found, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key');\n                }\n            }\n            else if (value) {\n                if ('source' in value && value.source && value.source[0] === ':')\n                    onError(value, 'MISSING_CHAR', `Missing space after : in ${fcName}`);\n                else\n                    onError(valueProps.start, 'MISSING_CHAR', `Missing , or : between ${fcName} items`);\n            }\n            // value value\n            const valueNode = value\n                ? composeNode(ctx, value, valueProps, onError)\n                : valueProps.found\n                    ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError)\n                    : null;\n            if (valueNode) {\n                if (isBlock(value))\n                    onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n            }\n            else if (valueProps.comment) {\n                if (keyNode.comment)\n                    keyNode.comment += '\\n' + valueProps.comment;\n                else\n                    keyNode.comment = valueProps.comment;\n            }\n            const pair = new Pair(keyNode, valueNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            if (isMap) {\n                const map = coll;\n                if (mapIncludes(ctx, map.items, keyNode))\n                    onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n                map.items.push(pair);\n            }\n            else {\n                const map = new YAMLMap(ctx.schema);\n                map.flow = true;\n                map.items.push(pair);\n                coll.items.push(map);\n            }\n            offset = valueNode ? valueNode.range[2] : valueProps.end;\n        }\n    }\n    const expectedEnd = isMap ? '}' : ']';\n    const [ce, ...ee] = fc.end;\n    let cePos = offset;\n    if (ce && ce.source === expectedEnd)\n        cePos = ce.offset + ce.source.length;\n    else {\n        const name = fcName[0].toUpperCase() + fcName.substring(1);\n        const msg = atRoot\n            ? `${name} must end with a ${expectedEnd}`\n            : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;\n        onError(offset, atRoot ? 'MISSING_CHAR' : 'BAD_INDENT', msg);\n        if (ce && ce.source.length !== 1)\n            ee.unshift(ce);\n    }\n    if (ee.length > 0) {\n        const end = resolveEnd(ee, cePos, ctx.options.strict, onError);\n        if (end.comment) {\n            if (coll.comment)\n                coll.comment += '\\n' + end.comment;\n            else\n                coll.comment = end.comment;\n        }\n        coll.range = [fc.offset, cePos, end.offset];\n    }\n    else {\n        coll.range = [fc.offset, cePos, cePos];\n    }\n    return coll;\n}\n\nexport { resolveFlowCollection };\n","import { isNode } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { YAMLSeq } from '../nodes/YAMLSeq.js';\nimport { resolveBlockMap } from './resolve-block-map.js';\nimport { resolveBlockSeq } from './resolve-block-seq.js';\nimport { resolveFlowCollection } from './resolve-flow-collection.js';\n\nfunction resolveCollection(CN, ctx, token, onError, tagName, tag) {\n    const coll = token.type === 'block-map'\n        ? resolveBlockMap(CN, ctx, token, onError, tag)\n        : token.type === 'block-seq'\n            ? resolveBlockSeq(CN, ctx, token, onError, tag)\n            : resolveFlowCollection(CN, ctx, token, onError, tag);\n    const Coll = coll.constructor;\n    // If we got a tagName matching the class, or the tag name is '!',\n    // then use the tagName from the node class used to create it.\n    if (tagName === '!' || tagName === Coll.tagName) {\n        coll.tag = Coll.tagName;\n        return coll;\n    }\n    if (tagName)\n        coll.tag = tagName;\n    return coll;\n}\nfunction composeCollection(CN, ctx, token, tagToken, onError) {\n    const tagName = !tagToken\n        ? null\n        : ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg));\n    const expType = token.type === 'block-map'\n        ? 'map'\n        : token.type === 'block-seq'\n            ? 'seq'\n            : token.start.source === '{'\n                ? 'map'\n                : 'seq';\n    // shortcut: check if it's a generic YAMLMap or YAMLSeq\n    // before jumping into the custom tag logic.\n    if (!tagToken ||\n        !tagName ||\n        tagName === '!' ||\n        (tagName === YAMLMap.tagName && expType === 'map') ||\n        (tagName === YAMLSeq.tagName && expType === 'seq') ||\n        !expType) {\n        return resolveCollection(CN, ctx, token, onError, tagName);\n    }\n    let tag = ctx.schema.tags.find(t => t.tag === tagName && t.collection === expType);\n    if (!tag) {\n        const kt = ctx.schema.knownTags[tagName];\n        if (kt && kt.collection === expType) {\n            ctx.schema.tags.push(Object.assign({}, kt, { default: false }));\n            tag = kt;\n        }\n        else {\n            if (kt?.collection) {\n                onError(tagToken, 'BAD_COLLECTION_TYPE', `${kt.tag} used for ${expType} collection, but expects ${kt.collection}`, true);\n            }\n            else {\n                onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, true);\n            }\n            return resolveCollection(CN, ctx, token, onError, tagName);\n        }\n    }\n    const coll = resolveCollection(CN, ctx, token, onError, tagName, tag);\n    const res = tag.resolve?.(coll, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg), ctx.options) ?? coll;\n    const node = isNode(res)\n        ? res\n        : new Scalar(res);\n    node.range = coll.range;\n    node.tag = tagName;\n    if (tag?.format)\n        node.format = tag.format;\n    return node;\n}\n\nexport { composeCollection };\n","import { Scalar } from '../nodes/Scalar.js';\n\nfunction resolveBlockScalar(scalar, strict, onError) {\n    const start = scalar.offset;\n    const header = parseBlockScalarHeader(scalar, strict, onError);\n    if (!header)\n        return { value: '', type: null, comment: '', range: [start, start, start] };\n    const type = header.mode === '>' ? Scalar.BLOCK_FOLDED : Scalar.BLOCK_LITERAL;\n    const lines = scalar.source ? splitLines(scalar.source) : [];\n    // determine the end of content & start of chomping\n    let chompStart = lines.length;\n    for (let i = lines.length - 1; i >= 0; --i) {\n        const content = lines[i][1];\n        if (content === '' || content === '\\r')\n            chompStart = i;\n        else\n            break;\n    }\n    // shortcut for empty contents\n    if (chompStart === 0) {\n        const value = header.chomp === '+' && lines.length > 0\n            ? '\\n'.repeat(Math.max(1, lines.length - 1))\n            : '';\n        let end = start + header.length;\n        if (scalar.source)\n            end += scalar.source.length;\n        return { value, type, comment: header.comment, range: [start, end, end] };\n    }\n    // find the indentation level to trim from start\n    let trimIndent = scalar.indent + header.indent;\n    let offset = scalar.offset + header.length;\n    let contentStart = 0;\n    for (let i = 0; i < chompStart; ++i) {\n        const [indent, content] = lines[i];\n        if (content === '' || content === '\\r') {\n            if (header.indent === 0 && indent.length > trimIndent)\n                trimIndent = indent.length;\n        }\n        else {\n            if (indent.length < trimIndent) {\n                const message = 'Block scalars with more-indented leading empty lines must use an explicit indentation indicator';\n                onError(offset + indent.length, 'MISSING_CHAR', message);\n            }\n            if (header.indent === 0)\n                trimIndent = indent.length;\n            contentStart = i;\n            break;\n        }\n        offset += indent.length + content.length + 1;\n    }\n    // include trailing more-indented empty lines in content\n    for (let i = lines.length - 1; i >= chompStart; --i) {\n        if (lines[i][0].length > trimIndent)\n            chompStart = i + 1;\n    }\n    let value = '';\n    let sep = '';\n    let prevMoreIndented = false;\n    // leading whitespace is kept intact\n    for (let i = 0; i < contentStart; ++i)\n        value += lines[i][0].slice(trimIndent) + '\\n';\n    for (let i = contentStart; i < chompStart; ++i) {\n        let [indent, content] = lines[i];\n        offset += indent.length + content.length + 1;\n        const crlf = content[content.length - 1] === '\\r';\n        if (crlf)\n            content = content.slice(0, -1);\n        /* istanbul ignore if already caught in lexer */\n        if (content && indent.length < trimIndent) {\n            const src = header.indent\n                ? 'explicit indentation indicator'\n                : 'first line';\n            const message = `Block scalar lines must not be less indented than their ${src}`;\n            onError(offset - content.length - (crlf ? 2 : 1), 'BAD_INDENT', message);\n            indent = '';\n        }\n        if (type === Scalar.BLOCK_LITERAL) {\n            value += sep + indent.slice(trimIndent) + content;\n            sep = '\\n';\n        }\n        else if (indent.length > trimIndent || content[0] === '\\t') {\n            // more-indented content within a folded block\n            if (sep === ' ')\n                sep = '\\n';\n            else if (!prevMoreIndented && sep === '\\n')\n                sep = '\\n\\n';\n            value += sep + indent.slice(trimIndent) + content;\n            sep = '\\n';\n            prevMoreIndented = true;\n        }\n        else if (content === '') {\n            // empty line\n            if (sep === '\\n')\n                value += '\\n';\n            else\n                sep = '\\n';\n        }\n        else {\n            value += sep + content;\n            sep = ' ';\n            prevMoreIndented = false;\n        }\n    }\n    switch (header.chomp) {\n        case '-':\n            break;\n        case '+':\n            for (let i = chompStart; i < lines.length; ++i)\n                value += '\\n' + lines[i][0].slice(trimIndent);\n            if (value[value.length - 1] !== '\\n')\n                value += '\\n';\n            break;\n        default:\n            value += '\\n';\n    }\n    const end = start + header.length + scalar.source.length;\n    return { value, type, comment: header.comment, range: [start, end, end] };\n}\nfunction parseBlockScalarHeader({ offset, props }, strict, onError) {\n    /* istanbul ignore if should not happen */\n    if (props[0].type !== 'block-scalar-header') {\n        onError(props[0], 'IMPOSSIBLE', 'Block scalar header not found');\n        return null;\n    }\n    const { source } = props[0];\n    const mode = source[0];\n    let indent = 0;\n    let chomp = '';\n    let error = -1;\n    for (let i = 1; i < source.length; ++i) {\n        const ch = source[i];\n        if (!chomp && (ch === '-' || ch === '+'))\n            chomp = ch;\n        else {\n            const n = Number(ch);\n            if (!indent && n)\n                indent = n;\n            else if (error === -1)\n                error = offset + i;\n        }\n    }\n    if (error !== -1)\n        onError(error, 'UNEXPECTED_TOKEN', `Block scalar header includes extra characters: ${source}`);\n    let hasSpace = false;\n    let comment = '';\n    let length = source.length;\n    for (let i = 1; i < props.length; ++i) {\n        const token = props[i];\n        switch (token.type) {\n            case 'space':\n                hasSpace = true;\n            // fallthrough\n            case 'newline':\n                length += token.source.length;\n                break;\n            case 'comment':\n                if (strict && !hasSpace) {\n                    const message = 'Comments must be separated from other tokens by white space characters';\n                    onError(token, 'MISSING_CHAR', message);\n                }\n                length += token.source.length;\n                comment = token.source.substring(1);\n                break;\n            case 'error':\n                onError(token, 'UNEXPECTED_TOKEN', token.message);\n                length += token.source.length;\n                break;\n            /* istanbul ignore next should not happen */\n            default: {\n                const message = `Unexpected token in block scalar header: ${token.type}`;\n                onError(token, 'UNEXPECTED_TOKEN', message);\n                const ts = token.source;\n                if (ts && typeof ts === 'string')\n                    length += ts.length;\n            }\n        }\n    }\n    return { mode, indent, chomp, comment, length };\n}\n/** @returns Array of lines split up as `[indent, content]` */\nfunction splitLines(source) {\n    const split = source.split(/\\n( *)/);\n    const first = split[0];\n    const m = first.match(/^( *)/);\n    const line0 = m?.[1]\n        ? [m[1], first.slice(m[1].length)]\n        : ['', first];\n    const lines = [line0];\n    for (let i = 1; i < split.length; i += 2)\n        lines.push([split[i], split[i + 1]]);\n    return lines;\n}\n\nexport { resolveBlockScalar };\n","import { Scalar } from '../nodes/Scalar.js';\nimport { resolveEnd } from './resolve-end.js';\n\nfunction resolveFlowScalar(scalar, strict, onError) {\n    const { offset, type, source, end } = scalar;\n    let _type;\n    let value;\n    const _onError = (rel, code, msg) => onError(offset + rel, code, msg);\n    switch (type) {\n        case 'scalar':\n            _type = Scalar.PLAIN;\n            value = plainValue(source, _onError);\n            break;\n        case 'single-quoted-scalar':\n            _type = Scalar.QUOTE_SINGLE;\n            value = singleQuotedValue(source, _onError);\n            break;\n        case 'double-quoted-scalar':\n            _type = Scalar.QUOTE_DOUBLE;\n            value = doubleQuotedValue(source, _onError);\n            break;\n        /* istanbul ignore next should not happen */\n        default:\n            onError(scalar, 'UNEXPECTED_TOKEN', `Expected a flow scalar value, but found: ${type}`);\n            return {\n                value: '',\n                type: null,\n                comment: '',\n                range: [offset, offset + source.length, offset + source.length]\n            };\n    }\n    const valueEnd = offset + source.length;\n    const re = resolveEnd(end, valueEnd, strict, onError);\n    return {\n        value,\n        type: _type,\n        comment: re.comment,\n        range: [offset, valueEnd, re.offset]\n    };\n}\nfunction plainValue(source, onError) {\n    let badChar = '';\n    switch (source[0]) {\n        /* istanbul ignore next should not happen */\n        case '\\t':\n            badChar = 'a tab character';\n            break;\n        case ',':\n            badChar = 'flow indicator character ,';\n            break;\n        case '%':\n            badChar = 'directive indicator character %';\n            break;\n        case '|':\n        case '>': {\n            badChar = `block scalar indicator ${source[0]}`;\n            break;\n        }\n        case '@':\n        case '`': {\n            badChar = `reserved character ${source[0]}`;\n            break;\n        }\n    }\n    if (badChar)\n        onError(0, 'BAD_SCALAR_START', `Plain value cannot start with ${badChar}`);\n    return foldLines(source);\n}\nfunction singleQuotedValue(source, onError) {\n    if (source[source.length - 1] !== \"'\" || source.length === 1)\n        onError(source.length, 'MISSING_CHAR', \"Missing closing 'quote\");\n    return foldLines(source.slice(1, -1)).replace(/''/g, \"'\");\n}\nfunction foldLines(source) {\n    /**\n     * The negative lookbehind here and in the `re` RegExp is to\n     * prevent causing a polynomial search time in certain cases.\n     *\n     * The try-catch is for Safari, which doesn't support this yet:\n     * https://caniuse.com/js-regexp-lookbehind\n     */\n    let first, line;\n    try {\n        first = new RegExp('(.*?)(?<![ \\t])[ \\t]*\\r?\\n', 'sy');\n        line = new RegExp('[ \\t]*(.*?)(?:(?<![ \\t])[ \\t]*)?\\r?\\n', 'sy');\n    }\n    catch (_) {\n        first = /(.*?)[ \\t]*\\r?\\n/sy;\n        line = /[ \\t]*(.*?)[ \\t]*\\r?\\n/sy;\n    }\n    let match = first.exec(source);\n    if (!match)\n        return source;\n    let res = match[1];\n    let sep = ' ';\n    let pos = first.lastIndex;\n    line.lastIndex = pos;\n    while ((match = line.exec(source))) {\n        if (match[1] === '') {\n            if (sep === '\\n')\n                res += sep;\n            else\n                sep = '\\n';\n        }\n        else {\n            res += sep + match[1];\n            sep = ' ';\n        }\n        pos = line.lastIndex;\n    }\n    const last = /[ \\t]*(.*)/sy;\n    last.lastIndex = pos;\n    match = last.exec(source);\n    return res + sep + (match?.[1] ?? '');\n}\nfunction doubleQuotedValue(source, onError) {\n    let res = '';\n    for (let i = 1; i < source.length - 1; ++i) {\n        const ch = source[i];\n        if (ch === '\\r' && source[i + 1] === '\\n')\n            continue;\n        if (ch === '\\n') {\n            const { fold, offset } = foldNewline(source, i);\n            res += fold;\n            i = offset;\n        }\n        else if (ch === '\\\\') {\n            let next = source[++i];\n            const cc = escapeCodes[next];\n            if (cc)\n                res += cc;\n            else if (next === '\\n') {\n                // skip escaped newlines, but still trim the following line\n                next = source[i + 1];\n                while (next === ' ' || next === '\\t')\n                    next = source[++i + 1];\n            }\n            else if (next === '\\r' && source[i + 1] === '\\n') {\n                // skip escaped CRLF newlines, but still trim the following line\n                next = source[++i + 1];\n                while (next === ' ' || next === '\\t')\n                    next = source[++i + 1];\n            }\n            else if (next === 'x' || next === 'u' || next === 'U') {\n                const length = { x: 2, u: 4, U: 8 }[next];\n                res += parseCharCode(source, i + 1, length, onError);\n                i += length;\n            }\n            else {\n                const raw = source.substr(i - 1, 2);\n                onError(i - 1, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);\n                res += raw;\n            }\n        }\n        else if (ch === ' ' || ch === '\\t') {\n            // trim trailing whitespace\n            const wsStart = i;\n            let next = source[i + 1];\n            while (next === ' ' || next === '\\t')\n                next = source[++i + 1];\n            if (next !== '\\n' && !(next === '\\r' && source[i + 2] === '\\n'))\n                res += i > wsStart ? source.slice(wsStart, i + 1) : ch;\n        }\n        else {\n            res += ch;\n        }\n    }\n    if (source[source.length - 1] !== '\"' || source.length === 1)\n        onError(source.length, 'MISSING_CHAR', 'Missing closing \"quote');\n    return res;\n}\n/**\n * Fold a single newline into a space, multiple newlines to N - 1 newlines.\n * Presumes `source[offset] === '\\n'`\n */\nfunction foldNewline(source, offset) {\n    let fold = '';\n    let ch = source[offset + 1];\n    while (ch === ' ' || ch === '\\t' || ch === '\\n' || ch === '\\r') {\n        if (ch === '\\r' && source[offset + 2] !== '\\n')\n            break;\n        if (ch === '\\n')\n            fold += '\\n';\n        offset += 1;\n        ch = source[offset + 1];\n    }\n    if (!fold)\n        fold = ' ';\n    return { fold, offset };\n}\nconst escapeCodes = {\n    '0': '\\0', // null character\n    a: '\\x07', // bell character\n    b: '\\b', // backspace\n    e: '\\x1b', // escape character\n    f: '\\f', // form feed\n    n: '\\n', // line feed\n    r: '\\r', // carriage return\n    t: '\\t', // horizontal tab\n    v: '\\v', // vertical tab\n    N: '\\u0085', // Unicode next line\n    _: '\\u00a0', // Unicode non-breaking space\n    L: '\\u2028', // Unicode line separator\n    P: '\\u2029', // Unicode paragraph separator\n    ' ': ' ',\n    '\"': '\"',\n    '/': '/',\n    '\\\\': '\\\\',\n    '\\t': '\\t'\n};\nfunction parseCharCode(source, offset, length, onError) {\n    const cc = source.substr(offset, length);\n    const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);\n    const code = ok ? parseInt(cc, 16) : NaN;\n    if (isNaN(code)) {\n        const raw = source.substr(offset - 2, length + 2);\n        onError(offset - 2, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);\n        return raw;\n    }\n    return String.fromCodePoint(code);\n}\n\nexport { resolveFlowScalar };\n","import { SCALAR, isScalar } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\nimport { resolveBlockScalar } from './resolve-block-scalar.js';\nimport { resolveFlowScalar } from './resolve-flow-scalar.js';\n\nfunction composeScalar(ctx, token, tagToken, onError) {\n    const { value, type, comment, range } = token.type === 'block-scalar'\n        ? resolveBlockScalar(token, ctx.options.strict, onError)\n        : resolveFlowScalar(token, ctx.options.strict, onError);\n    const tagName = tagToken\n        ? ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg))\n        : null;\n    const tag = tagToken && tagName\n        ? findScalarTagByName(ctx.schema, value, tagName, tagToken, onError)\n        : token.type === 'scalar'\n            ? findScalarTagByTest(ctx, value, token, onError)\n            : ctx.schema[SCALAR];\n    let scalar;\n    try {\n        const res = tag.resolve(value, msg => onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg), ctx.options);\n        scalar = isScalar(res) ? res : new Scalar(res);\n    }\n    catch (error) {\n        const msg = error instanceof Error ? error.message : String(error);\n        onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg);\n        scalar = new Scalar(value);\n    }\n    scalar.range = range;\n    scalar.source = value;\n    if (type)\n        scalar.type = type;\n    if (tagName)\n        scalar.tag = tagName;\n    if (tag.format)\n        scalar.format = tag.format;\n    if (comment)\n        scalar.comment = comment;\n    return scalar;\n}\nfunction findScalarTagByName(schema, value, tagName, tagToken, onError) {\n    if (tagName === '!')\n        return schema[SCALAR]; // non-specific tag\n    const matchWithTest = [];\n    for (const tag of schema.tags) {\n        if (!tag.collection && tag.tag === tagName) {\n            if (tag.default && tag.test)\n                matchWithTest.push(tag);\n            else\n                return tag;\n        }\n    }\n    for (const tag of matchWithTest)\n        if (tag.test?.test(value))\n            return tag;\n    const kt = schema.knownTags[tagName];\n    if (kt && !kt.collection) {\n        // Ensure that the known tag is available for stringifying,\n        // but does not get used by default.\n        schema.tags.push(Object.assign({}, kt, { default: false, test: undefined }));\n        return kt;\n    }\n    onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, tagName !== 'tag:yaml.org,2002:str');\n    return schema[SCALAR];\n}\nfunction findScalarTagByTest({ directives, schema }, value, token, onError) {\n    const tag = schema.tags.find(tag => tag.default && tag.test?.test(value)) || schema[SCALAR];\n    if (schema.compat) {\n        const compat = schema.compat.find(tag => tag.default && tag.test?.test(value)) ??\n            schema[SCALAR];\n        if (tag.tag !== compat.tag) {\n            const ts = directives.tagString(tag.tag);\n            const cs = directives.tagString(compat.tag);\n            const msg = `Value may be parsed as either ${ts} or ${cs}`;\n            onError(token, 'TAG_RESOLVE_FAILED', msg, true);\n        }\n    }\n    return tag;\n}\n\nexport { composeScalar };\n","function emptyScalarPosition(offset, before, pos) {\n    if (before) {\n        if (pos === null)\n            pos = before.length;\n        for (let i = pos - 1; i >= 0; --i) {\n            let st = before[i];\n            switch (st.type) {\n                case 'space':\n                case 'comment':\n                case 'newline':\n                    offset -= st.source.length;\n                    continue;\n            }\n            // Technically, an empty scalar is immediately after the last non-empty\n            // node, but it's more useful to place it after any whitespace.\n            st = before[++i];\n            while (st?.type === 'space') {\n                offset += st.source.length;\n                st = before[++i];\n            }\n            break;\n        }\n    }\n    return offset;\n}\n\nexport { emptyScalarPosition };\n","import { Alias } from '../nodes/Alias.js';\nimport { composeCollection } from './compose-collection.js';\nimport { composeScalar } from './compose-scalar.js';\nimport { resolveEnd } from './resolve-end.js';\nimport { emptyScalarPosition } from './util-empty-scalar-position.js';\n\nconst CN = { composeNode, composeEmptyNode };\nfunction composeNode(ctx, token, props, onError) {\n    const { spaceBefore, comment, anchor, tag } = props;\n    let node;\n    let isSrcToken = true;\n    switch (token.type) {\n        case 'alias':\n            node = composeAlias(ctx, token, onError);\n            if (anchor || tag)\n                onError(token, 'ALIAS_PROPS', 'An alias node must not specify any properties');\n            break;\n        case 'scalar':\n        case 'single-quoted-scalar':\n        case 'double-quoted-scalar':\n        case 'block-scalar':\n            node = composeScalar(ctx, token, tag, onError);\n            if (anchor)\n                node.anchor = anchor.source.substring(1);\n            break;\n        case 'block-map':\n        case 'block-seq':\n        case 'flow-collection':\n            node = composeCollection(CN, ctx, token, tag, onError);\n            if (anchor)\n                node.anchor = anchor.source.substring(1);\n            break;\n        default: {\n            const message = token.type === 'error'\n                ? token.message\n                : `Unsupported token (type: ${token.type})`;\n            onError(token, 'UNEXPECTED_TOKEN', message);\n            node = composeEmptyNode(ctx, token.offset, undefined, null, props, onError);\n            isSrcToken = false;\n        }\n    }\n    if (anchor && node.anchor === '')\n        onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');\n    if (spaceBefore)\n        node.spaceBefore = true;\n    if (comment) {\n        if (token.type === 'scalar' && token.source === '')\n            node.comment = comment;\n        else\n            node.commentBefore = comment;\n    }\n    // @ts-expect-error Type checking misses meaning of isSrcToken\n    if (ctx.options.keepSourceTokens && isSrcToken)\n        node.srcToken = token;\n    return node;\n}\nfunction composeEmptyNode(ctx, offset, before, pos, { spaceBefore, comment, anchor, tag, end }, onError) {\n    const token = {\n        type: 'scalar',\n        offset: emptyScalarPosition(offset, before, pos),\n        indent: -1,\n        source: ''\n    };\n    const node = composeScalar(ctx, token, tag, onError);\n    if (anchor) {\n        node.anchor = anchor.source.substring(1);\n        if (node.anchor === '')\n            onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');\n    }\n    if (spaceBefore)\n        node.spaceBefore = true;\n    if (comment) {\n        node.comment = comment;\n        node.range[2] = end;\n    }\n    return node;\n}\nfunction composeAlias({ options }, { offset, source, end }, onError) {\n    const alias = new Alias(source.substring(1));\n    if (alias.source === '')\n        onError(offset, 'BAD_ALIAS', 'Alias cannot be an empty string');\n    if (alias.source.endsWith(':'))\n        onError(offset + source.length - 1, 'BAD_ALIAS', 'Alias ending in : is ambiguous', true);\n    const valueEnd = offset + source.length;\n    const re = resolveEnd(end, valueEnd, options.strict, onError);\n    alias.range = [offset, valueEnd, re.offset];\n    if (re.comment)\n        alias.comment = re.comment;\n    return alias;\n}\n\nexport { composeEmptyNode, composeNode };\n","import { Document } from '../doc/Document.js';\nimport { composeNode, composeEmptyNode } from './compose-node.js';\nimport { resolveEnd } from './resolve-end.js';\nimport { resolveProps } from './resolve-props.js';\n\nfunction composeDoc(options, directives, { offset, start, value, end }, onError) {\n    const opts = Object.assign({ _directives: directives }, options);\n    const doc = new Document(undefined, opts);\n    const ctx = {\n        atRoot: true,\n        directives: doc.directives,\n        options: doc.options,\n        schema: doc.schema\n    };\n    const props = resolveProps(start, {\n        indicator: 'doc-start',\n        next: value ?? end?.[0],\n        offset,\n        onError,\n        startOnNewline: true\n    });\n    if (props.found) {\n        doc.directives.docStart = true;\n        if (value &&\n            (value.type === 'block-map' || value.type === 'block-seq') &&\n            !props.hasNewline)\n            onError(props.end, 'MISSING_CHAR', 'Block collection cannot start on same line with directives-end marker');\n    }\n    // @ts-expect-error If Contents is set, let's trust the user\n    doc.contents = value\n        ? composeNode(ctx, value, props, onError)\n        : composeEmptyNode(ctx, props.end, start, null, props, onError);\n    const contentEnd = doc.contents.range[2];\n    const re = resolveEnd(end, contentEnd, false, onError);\n    if (re.comment)\n        doc.comment = re.comment;\n    doc.range = [offset, contentEnd, re.offset];\n    return doc;\n}\n\nexport { composeDoc };\n","import { Directives } from '../doc/directives.js';\nimport { Document } from '../doc/Document.js';\nimport { YAMLWarning, YAMLParseError } from '../errors.js';\nimport { isCollection, isPair } from '../nodes/identity.js';\nimport { composeDoc } from './compose-doc.js';\nimport { resolveEnd } from './resolve-end.js';\n\nfunction getErrorPos(src) {\n    if (typeof src === 'number')\n        return [src, src + 1];\n    if (Array.isArray(src))\n        return src.length === 2 ? src : [src[0], src[1]];\n    const { offset, source } = src;\n    return [offset, offset + (typeof source === 'string' ? source.length : 1)];\n}\nfunction parsePrelude(prelude) {\n    let comment = '';\n    let atComment = false;\n    let afterEmptyLine = false;\n    for (let i = 0; i < prelude.length; ++i) {\n        const source = prelude[i];\n        switch (source[0]) {\n            case '#':\n                comment +=\n                    (comment === '' ? '' : afterEmptyLine ? '\\n\\n' : '\\n') +\n                        (source.substring(1) || ' ');\n                atComment = true;\n                afterEmptyLine = false;\n                break;\n            case '%':\n                if (prelude[i + 1]?.[0] !== '#')\n                    i += 1;\n                atComment = false;\n                break;\n            default:\n                // This may be wrong after doc-end, but in that case it doesn't matter\n                if (!atComment)\n                    afterEmptyLine = true;\n                atComment = false;\n        }\n    }\n    return { comment, afterEmptyLine };\n}\n/**\n * Compose a stream of CST nodes into a stream of YAML Documents.\n *\n * ```ts\n * import { Composer, Parser } from 'yaml'\n *\n * const src: string = ...\n * const tokens = new Parser().parse(src)\n * const docs = new Composer().compose(tokens)\n * ```\n */\nclass Composer {\n    constructor(options = {}) {\n        this.doc = null;\n        this.atDirectives = false;\n        this.prelude = [];\n        this.errors = [];\n        this.warnings = [];\n        this.onError = (source, code, message, warning) => {\n            const pos = getErrorPos(source);\n            if (warning)\n                this.warnings.push(new YAMLWarning(pos, code, message));\n            else\n                this.errors.push(new YAMLParseError(pos, code, message));\n        };\n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        this.directives = new Directives({ version: options.version || '1.2' });\n        this.options = options;\n    }\n    decorate(doc, afterDoc) {\n        const { comment, afterEmptyLine } = parsePrelude(this.prelude);\n        //console.log({ dc: doc.comment, prelude, comment })\n        if (comment) {\n            const dc = doc.contents;\n            if (afterDoc) {\n                doc.comment = doc.comment ? `${doc.comment}\\n${comment}` : comment;\n            }\n            else if (afterEmptyLine || doc.directives.docStart || !dc) {\n                doc.commentBefore = comment;\n            }\n            else if (isCollection(dc) && !dc.flow && dc.items.length > 0) {\n                let it = dc.items[0];\n                if (isPair(it))\n                    it = it.key;\n                const cb = it.commentBefore;\n                it.commentBefore = cb ? `${comment}\\n${cb}` : comment;\n            }\n            else {\n                const cb = dc.commentBefore;\n                dc.commentBefore = cb ? `${comment}\\n${cb}` : comment;\n            }\n        }\n        if (afterDoc) {\n            Array.prototype.push.apply(doc.errors, this.errors);\n            Array.prototype.push.apply(doc.warnings, this.warnings);\n        }\n        else {\n            doc.errors = this.errors;\n            doc.warnings = this.warnings;\n        }\n        this.prelude = [];\n        this.errors = [];\n        this.warnings = [];\n    }\n    /**\n     * Current stream status information.\n     *\n     * Mostly useful at the end of input for an empty stream.\n     */\n    streamInfo() {\n        return {\n            comment: parsePrelude(this.prelude).comment,\n            directives: this.directives,\n            errors: this.errors,\n            warnings: this.warnings\n        };\n    }\n    /**\n     * Compose tokens into documents.\n     *\n     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.\n     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.\n     */\n    *compose(tokens, forceDoc = false, endOffset = -1) {\n        for (const token of tokens)\n            yield* this.next(token);\n        yield* this.end(forceDoc, endOffset);\n    }\n    /** Advance the composer by one CST token. */\n    *next(token) {\n        switch (token.type) {\n            case 'directive':\n                this.directives.add(token.source, (offset, message, warning) => {\n                    const pos = getErrorPos(token);\n                    pos[0] += offset;\n                    this.onError(pos, 'BAD_DIRECTIVE', message, warning);\n                });\n                this.prelude.push(token.source);\n                this.atDirectives = true;\n                break;\n            case 'document': {\n                const doc = composeDoc(this.options, this.directives, token, this.onError);\n                if (this.atDirectives && !doc.directives.docStart)\n                    this.onError(token, 'MISSING_CHAR', 'Missing directives-end/doc-start indicator line');\n                this.decorate(doc, false);\n                if (this.doc)\n                    yield this.doc;\n                this.doc = doc;\n                this.atDirectives = false;\n                break;\n            }\n            case 'byte-order-mark':\n            case 'space':\n                break;\n            case 'comment':\n            case 'newline':\n                this.prelude.push(token.source);\n                break;\n            case 'error': {\n                const msg = token.source\n                    ? `${token.message}: ${JSON.stringify(token.source)}`\n                    : token.message;\n                const error = new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg);\n                if (this.atDirectives || !this.doc)\n                    this.errors.push(error);\n                else\n                    this.doc.errors.push(error);\n                break;\n            }\n            case 'doc-end': {\n                if (!this.doc) {\n                    const msg = 'Unexpected doc-end without preceding document';\n                    this.errors.push(new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg));\n                    break;\n                }\n                this.doc.directives.docEnd = true;\n                const end = resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);\n                this.decorate(this.doc, true);\n                if (end.comment) {\n                    const dc = this.doc.comment;\n                    this.doc.comment = dc ? `${dc}\\n${end.comment}` : end.comment;\n                }\n                this.doc.range[2] = end.offset;\n                break;\n            }\n            default:\n                this.errors.push(new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', `Unsupported token ${token.type}`));\n        }\n    }\n    /**\n     * Call at end of input to yield any remaining document.\n     *\n     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.\n     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.\n     */\n    *end(forceDoc = false, endOffset = -1) {\n        if (this.doc) {\n            this.decorate(this.doc, true);\n            yield this.doc;\n            this.doc = null;\n        }\n        else if (forceDoc) {\n            const opts = Object.assign({ _directives: this.directives }, this.options);\n            const doc = new Document(undefined, opts);\n            if (this.atDirectives)\n                this.onError(endOffset, 'MISSING_CHAR', 'Missing directives-end indicator line');\n            doc.range = [0, endOffset, endOffset];\n            this.decorate(doc, false);\n            yield doc;\n        }\n    }\n}\n\nexport { Composer };\n","export { createScalarToken, resolveAsScalar, setScalarValue } from './cst-scalar.js';\nexport { stringify } from './cst-stringify.js';\nexport { visit } from './cst-visit.js';\n\n/** The byte order mark */\nconst BOM = '\\u{FEFF}';\n/** Start of doc-mode */\nconst DOCUMENT = '\\x02'; // C0: Start of Text\n/** Unexpected end of flow-mode */\nconst FLOW_END = '\\x18'; // C0: Cancel\n/** Next token is a scalar value */\nconst SCALAR = '\\x1f'; // C0: Unit Separator\n/** @returns `true` if `token` is a flow or block collection */\nconst isCollection = (token) => !!token && 'items' in token;\n/** @returns `true` if `token` is a flow or block scalar; not an alias */\nconst isScalar = (token) => !!token &&\n    (token.type === 'scalar' ||\n        token.type === 'single-quoted-scalar' ||\n        token.type === 'double-quoted-scalar' ||\n        token.type === 'block-scalar');\n/* istanbul ignore next */\n/** Get a printable representation of a lexer token */\nfunction prettyToken(token) {\n    switch (token) {\n        case BOM:\n            return '<BOM>';\n        case DOCUMENT:\n            return '<DOC>';\n        case FLOW_END:\n            return '<FLOW_END>';\n        case SCALAR:\n            return '<SCALAR>';\n        default:\n            return JSON.stringify(token);\n    }\n}\n/** Identify the type of a lexer token. May return `null` for unknown tokens. */\nfunction tokenType(source) {\n    switch (source) {\n        case BOM:\n            return 'byte-order-mark';\n        case DOCUMENT:\n            return 'doc-mode';\n        case FLOW_END:\n            return 'flow-error-end';\n        case SCALAR:\n            return 'scalar';\n        case '---':\n            return 'doc-start';\n        case '...':\n            return 'doc-end';\n        case '':\n        case '\\n':\n        case '\\r\\n':\n            return 'newline';\n        case '-':\n            return 'seq-item-ind';\n        case '?':\n            return 'explicit-key-ind';\n        case ':':\n            return 'map-value-ind';\n        case '{':\n            return 'flow-map-start';\n        case '}':\n            return 'flow-map-end';\n        case '[':\n            return 'flow-seq-start';\n        case ']':\n            return 'flow-seq-end';\n        case ',':\n            return 'comma';\n    }\n    switch (source[0]) {\n        case ' ':\n        case '\\t':\n            return 'space';\n        case '#':\n            return 'comment';\n        case '%':\n            return 'directive-line';\n        case '*':\n            return 'alias';\n        case '&':\n            return 'anchor';\n        case '!':\n            return 'tag';\n        case \"'\":\n            return 'single-quoted-scalar';\n        case '\"':\n            return 'double-quoted-scalar';\n        case '|':\n        case '>':\n            return 'block-scalar-header';\n    }\n    return null;\n}\n\nexport { BOM, DOCUMENT, FLOW_END, SCALAR, isCollection, isScalar, prettyToken, tokenType };\n","import { BOM, DOCUMENT, FLOW_END, SCALAR } from './cst.js';\n\n/*\nSTART -> stream\n\nstream\n  directive -> line-end -> stream\n  indent + line-end -> stream\n  [else] -> line-start\n\nline-end\n  comment -> line-end\n  newline -> .\n  input-end -> END\n\nline-start\n  doc-start -> doc\n  doc-end -> stream\n  [else] -> indent -> block-start\n\nblock-start\n  seq-item-start -> block-start\n  explicit-key-start -> block-start\n  map-value-start -> block-start\n  [else] -> doc\n\ndoc\n  line-end -> line-start\n  spaces -> doc\n  anchor -> doc\n  tag -> doc\n  flow-start -> flow -> doc\n  flow-end -> error -> doc\n  seq-item-start -> error -> doc\n  explicit-key-start -> error -> doc\n  map-value-start -> doc\n  alias -> doc\n  quote-start -> quoted-scalar -> doc\n  block-scalar-header -> line-end -> block-scalar(min) -> line-start\n  [else] -> plain-scalar(false, min) -> doc\n\nflow\n  line-end -> flow\n  spaces -> flow\n  anchor -> flow\n  tag -> flow\n  flow-start -> flow -> flow\n  flow-end -> .\n  seq-item-start -> error -> flow\n  explicit-key-start -> flow\n  map-value-start -> flow\n  alias -> flow\n  quote-start -> quoted-scalar -> flow\n  comma -> flow\n  [else] -> plain-scalar(true, 0) -> flow\n\nquoted-scalar\n  quote-end -> .\n  [else] -> quoted-scalar\n\nblock-scalar(min)\n  newline + peek(indent < min) -> .\n  [else] -> block-scalar(min)\n\nplain-scalar(is-flow, min)\n  scalar-end(is-flow) -> .\n  peek(newline + (indent < min)) -> .\n  [else] -> plain-scalar(min)\n*/\nfunction isEmpty(ch) {\n    switch (ch) {\n        case undefined:\n        case ' ':\n        case '\\n':\n        case '\\r':\n        case '\\t':\n            return true;\n        default:\n            return false;\n    }\n}\nconst hexDigits = '0123456789ABCDEFabcdef'.split('');\nconst tagChars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()\".split('');\nconst invalidFlowScalarChars = ',[]{}'.split('');\nconst invalidAnchorChars = ' ,[]{}\\n\\r\\t'.split('');\nconst isNotAnchorChar = (ch) => !ch || invalidAnchorChars.includes(ch);\n/**\n * Splits an input string into lexical tokens, i.e. smaller strings that are\n * easily identifiable by `tokens.tokenType()`.\n *\n * Lexing starts always in a \"stream\" context. Incomplete input may be buffered\n * until a complete token can be emitted.\n *\n * In addition to slices of the original input, the following control characters\n * may also be emitted:\n *\n * - `\\x02` (Start of Text): A document starts with the next token\n * - `\\x18` (Cancel): Unexpected end of flow-mode (indicates an error)\n * - `\\x1f` (Unit Separator): Next token is a scalar value\n * - `\\u{FEFF}` (Byte order mark): Emitted separately outside documents\n */\nclass Lexer {\n    constructor() {\n        /**\n         * Flag indicating whether the end of the current buffer marks the end of\n         * all input\n         */\n        this.atEnd = false;\n        /**\n         * Explicit indent set in block scalar header, as an offset from the current\n         * minimum indent, so e.g. set to 1 from a header `|2+`. Set to -1 if not\n         * explicitly set.\n         */\n        this.blockScalarIndent = -1;\n        /**\n         * Block scalars that include a + (keep) chomping indicator in their header\n         * include trailing empty lines, which are otherwise excluded from the\n         * scalar's contents.\n         */\n        this.blockScalarKeep = false;\n        /** Current input */\n        this.buffer = '';\n        /**\n         * Flag noting whether the map value indicator : can immediately follow this\n         * node within a flow context.\n         */\n        this.flowKey = false;\n        /** Count of surrounding flow collection levels. */\n        this.flowLevel = 0;\n        /**\n         * Minimum level of indentation required for next lines to be parsed as a\n         * part of the current scalar value.\n         */\n        this.indentNext = 0;\n        /** Indentation level of the current line. */\n        this.indentValue = 0;\n        /** Position of the next \\n character. */\n        this.lineEndPos = null;\n        /** Stores the state of the lexer if reaching the end of incpomplete input */\n        this.next = null;\n        /** A pointer to `buffer`; the current position of the lexer. */\n        this.pos = 0;\n    }\n    /**\n     * Generate YAML tokens from the `source` string. If `incomplete`,\n     * a part of the last line may be left as a buffer for the next call.\n     *\n     * @returns A generator of lexical tokens\n     */\n    *lex(source, incomplete = false) {\n        if (source) {\n            this.buffer = this.buffer ? this.buffer + source : source;\n            this.lineEndPos = null;\n        }\n        this.atEnd = !incomplete;\n        let next = this.next ?? 'stream';\n        while (next && (incomplete || this.hasChars(1)))\n            next = yield* this.parseNext(next);\n    }\n    atLineEnd() {\n        let i = this.pos;\n        let ch = this.buffer[i];\n        while (ch === ' ' || ch === '\\t')\n            ch = this.buffer[++i];\n        if (!ch || ch === '#' || ch === '\\n')\n            return true;\n        if (ch === '\\r')\n            return this.buffer[i + 1] === '\\n';\n        return false;\n    }\n    charAt(n) {\n        return this.buffer[this.pos + n];\n    }\n    continueScalar(offset) {\n        let ch = this.buffer[offset];\n        if (this.indentNext > 0) {\n            let indent = 0;\n            while (ch === ' ')\n                ch = this.buffer[++indent + offset];\n            if (ch === '\\r') {\n                const next = this.buffer[indent + offset + 1];\n                if (next === '\\n' || (!next && !this.atEnd))\n                    return offset + indent + 1;\n            }\n            return ch === '\\n' || indent >= this.indentNext || (!ch && !this.atEnd)\n                ? offset + indent\n                : -1;\n        }\n        if (ch === '-' || ch === '.') {\n            const dt = this.buffer.substr(offset, 3);\n            if ((dt === '---' || dt === '...') && isEmpty(this.buffer[offset + 3]))\n                return -1;\n        }\n        return offset;\n    }\n    getLine() {\n        let end = this.lineEndPos;\n        if (typeof end !== 'number' || (end !== -1 && end < this.pos)) {\n            end = this.buffer.indexOf('\\n', this.pos);\n            this.lineEndPos = end;\n        }\n        if (end === -1)\n            return this.atEnd ? this.buffer.substring(this.pos) : null;\n        if (this.buffer[end - 1] === '\\r')\n            end -= 1;\n        return this.buffer.substring(this.pos, end);\n    }\n    hasChars(n) {\n        return this.pos + n <= this.buffer.length;\n    }\n    setNext(state) {\n        this.buffer = this.buffer.substring(this.pos);\n        this.pos = 0;\n        this.lineEndPos = null;\n        this.next = state;\n        return null;\n    }\n    peek(n) {\n        return this.buffer.substr(this.pos, n);\n    }\n    *parseNext(next) {\n        switch (next) {\n            case 'stream':\n                return yield* this.parseStream();\n            case 'line-start':\n                return yield* this.parseLineStart();\n            case 'block-start':\n                return yield* this.parseBlockStart();\n            case 'doc':\n                return yield* this.parseDocument();\n            case 'flow':\n                return yield* this.parseFlowCollection();\n            case 'quoted-scalar':\n                return yield* this.parseQuotedScalar();\n            case 'block-scalar':\n                return yield* this.parseBlockScalar();\n            case 'plain-scalar':\n                return yield* this.parsePlainScalar();\n        }\n    }\n    *parseStream() {\n        let line = this.getLine();\n        if (line === null)\n            return this.setNext('stream');\n        if (line[0] === BOM) {\n            yield* this.pushCount(1);\n            line = line.substring(1);\n        }\n        if (line[0] === '%') {\n            let dirEnd = line.length;\n            const cs = line.indexOf('#');\n            if (cs !== -1) {\n                const ch = line[cs - 1];\n                if (ch === ' ' || ch === '\\t')\n                    dirEnd = cs - 1;\n            }\n            while (true) {\n                const ch = line[dirEnd - 1];\n                if (ch === ' ' || ch === '\\t')\n                    dirEnd -= 1;\n                else\n                    break;\n            }\n            const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));\n            yield* this.pushCount(line.length - n); // possible comment\n            this.pushNewline();\n            return 'stream';\n        }\n        if (this.atLineEnd()) {\n            const sp = yield* this.pushSpaces(true);\n            yield* this.pushCount(line.length - sp);\n            yield* this.pushNewline();\n            return 'stream';\n        }\n        yield DOCUMENT;\n        return yield* this.parseLineStart();\n    }\n    *parseLineStart() {\n        const ch = this.charAt(0);\n        if (!ch && !this.atEnd)\n            return this.setNext('line-start');\n        if (ch === '-' || ch === '.') {\n            if (!this.atEnd && !this.hasChars(4))\n                return this.setNext('line-start');\n            const s = this.peek(3);\n            if (s === '---' && isEmpty(this.charAt(3))) {\n                yield* this.pushCount(3);\n                this.indentValue = 0;\n                this.indentNext = 0;\n                return 'doc';\n            }\n            else if (s === '...' && isEmpty(this.charAt(3))) {\n                yield* this.pushCount(3);\n                return 'stream';\n            }\n        }\n        this.indentValue = yield* this.pushSpaces(false);\n        if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1)))\n            this.indentNext = this.indentValue;\n        return yield* this.parseBlockStart();\n    }\n    *parseBlockStart() {\n        const [ch0, ch1] = this.peek(2);\n        if (!ch1 && !this.atEnd)\n            return this.setNext('block-start');\n        if ((ch0 === '-' || ch0 === '?' || ch0 === ':') && isEmpty(ch1)) {\n            const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));\n            this.indentNext = this.indentValue + 1;\n            this.indentValue += n;\n            return yield* this.parseBlockStart();\n        }\n        return 'doc';\n    }\n    *parseDocument() {\n        yield* this.pushSpaces(true);\n        const line = this.getLine();\n        if (line === null)\n            return this.setNext('doc');\n        let n = yield* this.pushIndicators();\n        switch (line[n]) {\n            case '#':\n                yield* this.pushCount(line.length - n);\n            // fallthrough\n            case undefined:\n                yield* this.pushNewline();\n                return yield* this.parseLineStart();\n            case '{':\n            case '[':\n                yield* this.pushCount(1);\n                this.flowKey = false;\n                this.flowLevel = 1;\n                return 'flow';\n            case '}':\n            case ']':\n                // this is an error\n                yield* this.pushCount(1);\n                return 'doc';\n            case '*':\n                yield* this.pushUntil(isNotAnchorChar);\n                return 'doc';\n            case '\"':\n            case \"'\":\n                return yield* this.parseQuotedScalar();\n            case '|':\n            case '>':\n                n += yield* this.parseBlockScalarHeader();\n                n += yield* this.pushSpaces(true);\n                yield* this.pushCount(line.length - n);\n                yield* this.pushNewline();\n                return yield* this.parseBlockScalar();\n            default:\n                return yield* this.parsePlainScalar();\n        }\n    }\n    *parseFlowCollection() {\n        let nl, sp;\n        let indent = -1;\n        do {\n            nl = yield* this.pushNewline();\n            if (nl > 0) {\n                sp = yield* this.pushSpaces(false);\n                this.indentValue = indent = sp;\n            }\n            else {\n                sp = 0;\n            }\n            sp += yield* this.pushSpaces(true);\n        } while (nl + sp > 0);\n        const line = this.getLine();\n        if (line === null)\n            return this.setNext('flow');\n        if ((indent !== -1 && indent < this.indentNext && line[0] !== '#') ||\n            (indent === 0 &&\n                (line.startsWith('---') || line.startsWith('...')) &&\n                isEmpty(line[3]))) {\n            // Allowing for the terminal ] or } at the same (rather than greater)\n            // indent level as the initial [ or { is technically invalid, but\n            // failing here would be surprising to users.\n            const atFlowEndMarker = indent === this.indentNext - 1 &&\n                this.flowLevel === 1 &&\n                (line[0] === ']' || line[0] === '}');\n            if (!atFlowEndMarker) {\n                // this is an error\n                this.flowLevel = 0;\n                yield FLOW_END;\n                return yield* this.parseLineStart();\n            }\n        }\n        let n = 0;\n        while (line[n] === ',') {\n            n += yield* this.pushCount(1);\n            n += yield* this.pushSpaces(true);\n            this.flowKey = false;\n        }\n        n += yield* this.pushIndicators();\n        switch (line[n]) {\n            case undefined:\n                return 'flow';\n            case '#':\n                yield* this.pushCount(line.length - n);\n                return 'flow';\n            case '{':\n            case '[':\n                yield* this.pushCount(1);\n                this.flowKey = false;\n                this.flowLevel += 1;\n                return 'flow';\n            case '}':\n            case ']':\n                yield* this.pushCount(1);\n                this.flowKey = true;\n                this.flowLevel -= 1;\n                return this.flowLevel ? 'flow' : 'doc';\n            case '*':\n                yield* this.pushUntil(isNotAnchorChar);\n                return 'flow';\n            case '\"':\n            case \"'\":\n                this.flowKey = true;\n                return yield* this.parseQuotedScalar();\n            case ':': {\n                const next = this.charAt(1);\n                if (this.flowKey || isEmpty(next) || next === ',') {\n                    this.flowKey = false;\n                    yield* this.pushCount(1);\n                    yield* this.pushSpaces(true);\n                    return 'flow';\n                }\n            }\n            // fallthrough\n            default:\n                this.flowKey = false;\n                return yield* this.parsePlainScalar();\n        }\n    }\n    *parseQuotedScalar() {\n        const quote = this.charAt(0);\n        let end = this.buffer.indexOf(quote, this.pos + 1);\n        if (quote === \"'\") {\n            while (end !== -1 && this.buffer[end + 1] === \"'\")\n                end = this.buffer.indexOf(\"'\", end + 2);\n        }\n        else {\n            // double-quote\n            while (end !== -1) {\n                let n = 0;\n                while (this.buffer[end - 1 - n] === '\\\\')\n                    n += 1;\n                if (n % 2 === 0)\n                    break;\n                end = this.buffer.indexOf('\"', end + 1);\n            }\n        }\n        // Only looking for newlines within the quotes\n        const qb = this.buffer.substring(0, end);\n        let nl = qb.indexOf('\\n', this.pos);\n        if (nl !== -1) {\n            while (nl !== -1) {\n                const cs = this.continueScalar(nl + 1);\n                if (cs === -1)\n                    break;\n                nl = qb.indexOf('\\n', cs);\n            }\n            if (nl !== -1) {\n                // this is an error caused by an unexpected unindent\n                end = nl - (qb[nl - 1] === '\\r' ? 2 : 1);\n            }\n        }\n        if (end === -1) {\n            if (!this.atEnd)\n                return this.setNext('quoted-scalar');\n            end = this.buffer.length;\n        }\n        yield* this.pushToIndex(end + 1, false);\n        return this.flowLevel ? 'flow' : 'doc';\n    }\n    *parseBlockScalarHeader() {\n        this.blockScalarIndent = -1;\n        this.blockScalarKeep = false;\n        let i = this.pos;\n        while (true) {\n            const ch = this.buffer[++i];\n            if (ch === '+')\n                this.blockScalarKeep = true;\n            else if (ch > '0' && ch <= '9')\n                this.blockScalarIndent = Number(ch) - 1;\n            else if (ch !== '-')\n                break;\n        }\n        return yield* this.pushUntil(ch => isEmpty(ch) || ch === '#');\n    }\n    *parseBlockScalar() {\n        let nl = this.pos - 1; // may be -1 if this.pos === 0\n        let indent = 0;\n        let ch;\n        loop: for (let i = this.pos; (ch = this.buffer[i]); ++i) {\n            switch (ch) {\n                case ' ':\n                    indent += 1;\n                    break;\n                case '\\n':\n                    nl = i;\n                    indent = 0;\n                    break;\n                case '\\r': {\n                    const next = this.buffer[i + 1];\n                    if (!next && !this.atEnd)\n                        return this.setNext('block-scalar');\n                    if (next === '\\n')\n                        break;\n                } // fallthrough\n                default:\n                    break loop;\n            }\n        }\n        if (!ch && !this.atEnd)\n            return this.setNext('block-scalar');\n        if (indent >= this.indentNext) {\n            if (this.blockScalarIndent === -1)\n                this.indentNext = indent;\n            else\n                this.indentNext += this.blockScalarIndent;\n            do {\n                const cs = this.continueScalar(nl + 1);\n                if (cs === -1)\n                    break;\n                nl = this.buffer.indexOf('\\n', cs);\n            } while (nl !== -1);\n            if (nl === -1) {\n                if (!this.atEnd)\n                    return this.setNext('block-scalar');\n                nl = this.buffer.length;\n            }\n        }\n        if (!this.blockScalarKeep) {\n            do {\n                let i = nl - 1;\n                let ch = this.buffer[i];\n                if (ch === '\\r')\n                    ch = this.buffer[--i];\n                const lastChar = i; // Drop the line if last char not more indented\n                while (ch === ' ' || ch === '\\t')\n                    ch = this.buffer[--i];\n                if (ch === '\\n' && i >= this.pos && i + 1 + indent > lastChar)\n                    nl = i;\n                else\n                    break;\n            } while (true);\n        }\n        yield SCALAR;\n        yield* this.pushToIndex(nl + 1, true);\n        return yield* this.parseLineStart();\n    }\n    *parsePlainScalar() {\n        const inFlow = this.flowLevel > 0;\n        let end = this.pos - 1;\n        let i = this.pos - 1;\n        let ch;\n        while ((ch = this.buffer[++i])) {\n            if (ch === ':') {\n                const next = this.buffer[i + 1];\n                if (isEmpty(next) || (inFlow && next === ','))\n                    break;\n                end = i;\n            }\n            else if (isEmpty(ch)) {\n                let next = this.buffer[i + 1];\n                if (ch === '\\r') {\n                    if (next === '\\n') {\n                        i += 1;\n                        ch = '\\n';\n                        next = this.buffer[i + 1];\n                    }\n                    else\n                        end = i;\n                }\n                if (next === '#' || (inFlow && invalidFlowScalarChars.includes(next)))\n                    break;\n                if (ch === '\\n') {\n                    const cs = this.continueScalar(i + 1);\n                    if (cs === -1)\n                        break;\n                    i = Math.max(i, cs - 2); // to advance, but still account for ' #'\n                }\n            }\n            else {\n                if (inFlow && invalidFlowScalarChars.includes(ch))\n                    break;\n                end = i;\n            }\n        }\n        if (!ch && !this.atEnd)\n            return this.setNext('plain-scalar');\n        yield SCALAR;\n        yield* this.pushToIndex(end + 1, true);\n        return inFlow ? 'flow' : 'doc';\n    }\n    *pushCount(n) {\n        if (n > 0) {\n            yield this.buffer.substr(this.pos, n);\n            this.pos += n;\n            return n;\n        }\n        return 0;\n    }\n    *pushToIndex(i, allowEmpty) {\n        const s = this.buffer.slice(this.pos, i);\n        if (s) {\n            yield s;\n            this.pos += s.length;\n            return s.length;\n        }\n        else if (allowEmpty)\n            yield '';\n        return 0;\n    }\n    *pushIndicators() {\n        switch (this.charAt(0)) {\n            case '!':\n                return ((yield* this.pushTag()) +\n                    (yield* this.pushSpaces(true)) +\n                    (yield* this.pushIndicators()));\n            case '&':\n                return ((yield* this.pushUntil(isNotAnchorChar)) +\n                    (yield* this.pushSpaces(true)) +\n                    (yield* this.pushIndicators()));\n            case '-': // this is an error\n            case '?': // this is an error outside flow collections\n            case ':': {\n                const inFlow = this.flowLevel > 0;\n                const ch1 = this.charAt(1);\n                if (isEmpty(ch1) || (inFlow && invalidFlowScalarChars.includes(ch1))) {\n                    if (!inFlow)\n                        this.indentNext = this.indentValue + 1;\n                    else if (this.flowKey)\n                        this.flowKey = false;\n                    return ((yield* this.pushCount(1)) +\n                        (yield* this.pushSpaces(true)) +\n                        (yield* this.pushIndicators()));\n                }\n            }\n        }\n        return 0;\n    }\n    *pushTag() {\n        if (this.charAt(1) === '<') {\n            let i = this.pos + 2;\n            let ch = this.buffer[i];\n            while (!isEmpty(ch) && ch !== '>')\n                ch = this.buffer[++i];\n            return yield* this.pushToIndex(ch === '>' ? i + 1 : i, false);\n        }\n        else {\n            let i = this.pos + 1;\n            let ch = this.buffer[i];\n            while (ch) {\n                if (tagChars.includes(ch))\n                    ch = this.buffer[++i];\n                else if (ch === '%' &&\n                    hexDigits.includes(this.buffer[i + 1]) &&\n                    hexDigits.includes(this.buffer[i + 2])) {\n                    ch = this.buffer[(i += 3)];\n                }\n                else\n                    break;\n            }\n            return yield* this.pushToIndex(i, false);\n        }\n    }\n    *pushNewline() {\n        const ch = this.buffer[this.pos];\n        if (ch === '\\n')\n            return yield* this.pushCount(1);\n        else if (ch === '\\r' && this.charAt(1) === '\\n')\n            return yield* this.pushCount(2);\n        else\n            return 0;\n    }\n    *pushSpaces(allowTabs) {\n        let i = this.pos - 1;\n        let ch;\n        do {\n            ch = this.buffer[++i];\n        } while (ch === ' ' || (allowTabs && ch === '\\t'));\n        const n = i - this.pos;\n        if (n > 0) {\n            yield this.buffer.substr(this.pos, n);\n            this.pos = i;\n        }\n        return n;\n    }\n    *pushUntil(test) {\n        let i = this.pos;\n        let ch = this.buffer[i];\n        while (!test(ch))\n            ch = this.buffer[++i];\n        return yield* this.pushToIndex(i, false);\n    }\n}\n\nexport { Lexer };\n","/**\n * Tracks newlines during parsing in order to provide an efficient API for\n * determining the one-indexed `{ line, col }` position for any offset\n * within the input.\n */\nclass LineCounter {\n    constructor() {\n        this.lineStarts = [];\n        /**\n         * Should be called in ascending order. Otherwise, call\n         * `lineCounter.lineStarts.sort()` before calling `linePos()`.\n         */\n        this.addNewLine = (offset) => this.lineStarts.push(offset);\n        /**\n         * Performs a binary search and returns the 1-indexed { line, col }\n         * position of `offset`. If `line === 0`, `addNewLine` has never been\n         * called or `offset` is before the first known newline.\n         */\n        this.linePos = (offset) => {\n            let low = 0;\n            let high = this.lineStarts.length;\n            while (low < high) {\n                const mid = (low + high) >> 1; // Math.floor((low + high) / 2)\n                if (this.lineStarts[mid] < offset)\n                    low = mid + 1;\n                else\n                    high = mid;\n            }\n            if (this.lineStarts[low] === offset)\n                return { line: low + 1, col: 1 };\n            if (low === 0)\n                return { line: 0, col: offset };\n            const start = this.lineStarts[low - 1];\n            return { line: low, col: offset - start + 1 };\n        };\n    }\n}\n\nexport { LineCounter };\n","import { tokenType } from './cst.js';\nimport { Lexer } from './lexer.js';\n\nfunction includesToken(list, type) {\n    for (let i = 0; i < list.length; ++i)\n        if (list[i].type === type)\n            return true;\n    return false;\n}\nfunction findNonEmptyIndex(list) {\n    for (let i = 0; i < list.length; ++i) {\n        switch (list[i].type) {\n            case 'space':\n            case 'comment':\n            case 'newline':\n                break;\n            default:\n                return i;\n        }\n    }\n    return -1;\n}\nfunction isFlowToken(token) {\n    switch (token?.type) {\n        case 'alias':\n        case 'scalar':\n        case 'single-quoted-scalar':\n        case 'double-quoted-scalar':\n        case 'flow-collection':\n            return true;\n        default:\n            return false;\n    }\n}\nfunction getPrevProps(parent) {\n    switch (parent.type) {\n        case 'document':\n            return parent.start;\n        case 'block-map': {\n            const it = parent.items[parent.items.length - 1];\n            return it.sep ?? it.start;\n        }\n        case 'block-seq':\n            return parent.items[parent.items.length - 1].start;\n        /* istanbul ignore next should not happen */\n        default:\n            return [];\n    }\n}\n/** Note: May modify input array */\nfunction getFirstKeyStartProps(prev) {\n    if (prev.length === 0)\n        return [];\n    let i = prev.length;\n    loop: while (--i >= 0) {\n        switch (prev[i].type) {\n            case 'doc-start':\n            case 'explicit-key-ind':\n            case 'map-value-ind':\n            case 'seq-item-ind':\n            case 'newline':\n                break loop;\n        }\n    }\n    while (prev[++i]?.type === 'space') {\n        /* loop */\n    }\n    return prev.splice(i, prev.length);\n}\nfunction fixFlowSeqItems(fc) {\n    if (fc.start.type === 'flow-seq-start') {\n        for (const it of fc.items) {\n            if (it.sep &&\n                !it.value &&\n                !includesToken(it.start, 'explicit-key-ind') &&\n                !includesToken(it.sep, 'map-value-ind')) {\n                if (it.key)\n                    it.value = it.key;\n                delete it.key;\n                if (isFlowToken(it.value)) {\n                    if (it.value.end)\n                        Array.prototype.push.apply(it.value.end, it.sep);\n                    else\n                        it.value.end = it.sep;\n                }\n                else\n                    Array.prototype.push.apply(it.start, it.sep);\n                delete it.sep;\n            }\n        }\n    }\n}\n/**\n * A YAML concrete syntax tree (CST) parser\n *\n * ```ts\n * const src: string = ...\n * for (const token of new Parser().parse(src)) {\n *   // token: Token\n * }\n * ```\n *\n * To use the parser with a user-provided lexer:\n *\n * ```ts\n * function* parse(source: string, lexer: Lexer) {\n *   const parser = new Parser()\n *   for (const lexeme of lexer.lex(source))\n *     yield* parser.next(lexeme)\n *   yield* parser.end()\n * }\n *\n * const src: string = ...\n * const lexer = new Lexer()\n * for (const token of parse(src, lexer)) {\n *   // token: Token\n * }\n * ```\n */\nclass Parser {\n    /**\n     * @param onNewLine - If defined, called separately with the start position of\n     *   each new line (in `parse()`, including the start of input).\n     */\n    constructor(onNewLine) {\n        /** If true, space and sequence indicators count as indentation */\n        this.atNewLine = true;\n        /** If true, next token is a scalar value */\n        this.atScalar = false;\n        /** Current indentation level */\n        this.indent = 0;\n        /** Current offset since the start of parsing */\n        this.offset = 0;\n        /** On the same line with a block map key */\n        this.onKeyLine = false;\n        /** Top indicates the node that's currently being built */\n        this.stack = [];\n        /** The source of the current token, set in parse() */\n        this.source = '';\n        /** The type of the current token, set in parse() */\n        this.type = '';\n        // Must be defined after `next()`\n        this.lexer = new Lexer();\n        this.onNewLine = onNewLine;\n    }\n    /**\n     * Parse `source` as a YAML stream.\n     * If `incomplete`, a part of the last line may be left as a buffer for the next call.\n     *\n     * Errors are not thrown, but yielded as `{ type: 'error', message }` tokens.\n     *\n     * @returns A generator of tokens representing each directive, document, and other structure.\n     */\n    *parse(source, incomplete = false) {\n        if (this.onNewLine && this.offset === 0)\n            this.onNewLine(0);\n        for (const lexeme of this.lexer.lex(source, incomplete))\n            yield* this.next(lexeme);\n        if (!incomplete)\n            yield* this.end();\n    }\n    /**\n     * Advance the parser by the `source` of one lexical token.\n     */\n    *next(source) {\n        this.source = source;\n        if (this.atScalar) {\n            this.atScalar = false;\n            yield* this.step();\n            this.offset += source.length;\n            return;\n        }\n        const type = tokenType(source);\n        if (!type) {\n            const message = `Not a YAML token: ${source}`;\n            yield* this.pop({ type: 'error', offset: this.offset, message, source });\n            this.offset += source.length;\n        }\n        else if (type === 'scalar') {\n            this.atNewLine = false;\n            this.atScalar = true;\n            this.type = 'scalar';\n        }\n        else {\n            this.type = type;\n            yield* this.step();\n            switch (type) {\n                case 'newline':\n                    this.atNewLine = true;\n                    this.indent = 0;\n                    if (this.onNewLine)\n                        this.onNewLine(this.offset + source.length);\n                    break;\n                case 'space':\n                    if (this.atNewLine && source[0] === ' ')\n                        this.indent += source.length;\n                    break;\n                case 'explicit-key-ind':\n                case 'map-value-ind':\n                case 'seq-item-ind':\n                    if (this.atNewLine)\n                        this.indent += source.length;\n                    break;\n                case 'doc-mode':\n                case 'flow-error-end':\n                    return;\n                default:\n                    this.atNewLine = false;\n            }\n            this.offset += source.length;\n        }\n    }\n    /** Call at end of input to push out any remaining constructions */\n    *end() {\n        while (this.stack.length > 0)\n            yield* this.pop();\n    }\n    get sourceToken() {\n        const st = {\n            type: this.type,\n            offset: this.offset,\n            indent: this.indent,\n            source: this.source\n        };\n        return st;\n    }\n    *step() {\n        const top = this.peek(1);\n        if (this.type === 'doc-end' && (!top || top.type !== 'doc-end')) {\n            while (this.stack.length > 0)\n                yield* this.pop();\n            this.stack.push({\n                type: 'doc-end',\n                offset: this.offset,\n                source: this.source\n            });\n            return;\n        }\n        if (!top)\n            return yield* this.stream();\n        switch (top.type) {\n            case 'document':\n                return yield* this.document(top);\n            case 'alias':\n            case 'scalar':\n            case 'single-quoted-scalar':\n            case 'double-quoted-scalar':\n                return yield* this.scalar(top);\n            case 'block-scalar':\n                return yield* this.blockScalar(top);\n            case 'block-map':\n                return yield* this.blockMap(top);\n            case 'block-seq':\n                return yield* this.blockSequence(top);\n            case 'flow-collection':\n                return yield* this.flowCollection(top);\n            case 'doc-end':\n                return yield* this.documentEnd(top);\n        }\n        /* istanbul ignore next should not happen */\n        yield* this.pop();\n    }\n    peek(n) {\n        return this.stack[this.stack.length - n];\n    }\n    *pop(error) {\n        const token = error ?? this.stack.pop();\n        /* istanbul ignore if should not happen */\n        if (!token) {\n            const message = 'Tried to pop an empty stack';\n            yield { type: 'error', offset: this.offset, source: '', message };\n        }\n        else if (this.stack.length === 0) {\n            yield token;\n        }\n        else {\n            const top = this.peek(1);\n            if (token.type === 'block-scalar') {\n                // Block scalars use their parent rather than header indent\n                token.indent = 'indent' in top ? top.indent : 0;\n            }\n            else if (token.type === 'flow-collection' && top.type === 'document') {\n                // Ignore all indent for top-level flow collections\n                token.indent = 0;\n            }\n            if (token.type === 'flow-collection')\n                fixFlowSeqItems(token);\n            switch (top.type) {\n                case 'document':\n                    top.value = token;\n                    break;\n                case 'block-scalar':\n                    top.props.push(token); // error\n                    break;\n                case 'block-map': {\n                    const it = top.items[top.items.length - 1];\n                    if (it.value) {\n                        top.items.push({ start: [], key: token, sep: [] });\n                        this.onKeyLine = true;\n                        return;\n                    }\n                    else if (it.sep) {\n                        it.value = token;\n                    }\n                    else {\n                        Object.assign(it, { key: token, sep: [] });\n                        this.onKeyLine = !includesToken(it.start, 'explicit-key-ind');\n                        return;\n                    }\n                    break;\n                }\n                case 'block-seq': {\n                    const it = top.items[top.items.length - 1];\n                    if (it.value)\n                        top.items.push({ start: [], value: token });\n                    else\n                        it.value = token;\n                    break;\n                }\n                case 'flow-collection': {\n                    const it = top.items[top.items.length - 1];\n                    if (!it || it.value)\n                        top.items.push({ start: [], key: token, sep: [] });\n                    else if (it.sep)\n                        it.value = token;\n                    else\n                        Object.assign(it, { key: token, sep: [] });\n                    return;\n                }\n                /* istanbul ignore next should not happen */\n                default:\n                    yield* this.pop();\n                    yield* this.pop(token);\n            }\n            if ((top.type === 'document' ||\n                top.type === 'block-map' ||\n                top.type === 'block-seq') &&\n                (token.type === 'block-map' || token.type === 'block-seq')) {\n                const last = token.items[token.items.length - 1];\n                if (last &&\n                    !last.sep &&\n                    !last.value &&\n                    last.start.length > 0 &&\n                    findNonEmptyIndex(last.start) === -1 &&\n                    (token.indent === 0 ||\n                        last.start.every(st => st.type !== 'comment' || st.indent < token.indent))) {\n                    if (top.type === 'document')\n                        top.end = last.start;\n                    else\n                        top.items.push({ start: last.start });\n                    token.items.splice(-1, 1);\n                }\n            }\n        }\n    }\n    *stream() {\n        switch (this.type) {\n            case 'directive-line':\n                yield { type: 'directive', offset: this.offset, source: this.source };\n                return;\n            case 'byte-order-mark':\n            case 'space':\n            case 'comment':\n            case 'newline':\n                yield this.sourceToken;\n                return;\n            case 'doc-mode':\n            case 'doc-start': {\n                const doc = {\n                    type: 'document',\n                    offset: this.offset,\n                    start: []\n                };\n                if (this.type === 'doc-start')\n                    doc.start.push(this.sourceToken);\n                this.stack.push(doc);\n                return;\n            }\n        }\n        yield {\n            type: 'error',\n            offset: this.offset,\n            message: `Unexpected ${this.type} token in YAML stream`,\n            source: this.source\n        };\n    }\n    *document(doc) {\n        if (doc.value)\n            return yield* this.lineEnd(doc);\n        switch (this.type) {\n            case 'doc-start': {\n                if (findNonEmptyIndex(doc.start) !== -1) {\n                    yield* this.pop();\n                    yield* this.step();\n                }\n                else\n                    doc.start.push(this.sourceToken);\n                return;\n            }\n            case 'anchor':\n            case 'tag':\n            case 'space':\n            case 'comment':\n            case 'newline':\n                doc.start.push(this.sourceToken);\n                return;\n        }\n        const bv = this.startBlockValue(doc);\n        if (bv)\n            this.stack.push(bv);\n        else {\n            yield {\n                type: 'error',\n                offset: this.offset,\n                message: `Unexpected ${this.type} token in YAML document`,\n                source: this.source\n            };\n        }\n    }\n    *scalar(scalar) {\n        if (this.type === 'map-value-ind') {\n            const prev = getPrevProps(this.peek(2));\n            const start = getFirstKeyStartProps(prev);\n            let sep;\n            if (scalar.end) {\n                sep = scalar.end;\n                sep.push(this.sourceToken);\n                delete scalar.end;\n            }\n            else\n                sep = [this.sourceToken];\n            const map = {\n                type: 'block-map',\n                offset: scalar.offset,\n                indent: scalar.indent,\n                items: [{ start, key: scalar, sep }]\n            };\n            this.onKeyLine = true;\n            this.stack[this.stack.length - 1] = map;\n        }\n        else\n            yield* this.lineEnd(scalar);\n    }\n    *blockScalar(scalar) {\n        switch (this.type) {\n            case 'space':\n            case 'comment':\n            case 'newline':\n                scalar.props.push(this.sourceToken);\n                return;\n            case 'scalar':\n                scalar.source = this.source;\n                // block-scalar source includes trailing newline\n                this.atNewLine = true;\n                this.indent = 0;\n                if (this.onNewLine) {\n                    let nl = this.source.indexOf('\\n') + 1;\n                    while (nl !== 0) {\n                        this.onNewLine(this.offset + nl);\n                        nl = this.source.indexOf('\\n', nl) + 1;\n                    }\n                }\n                yield* this.pop();\n                break;\n            /* istanbul ignore next should not happen */\n            default:\n                yield* this.pop();\n                yield* this.step();\n        }\n    }\n    *blockMap(map) {\n        const it = map.items[map.items.length - 1];\n        // it.sep is true-ish if pair already has key or : separator\n        switch (this.type) {\n            case 'newline':\n                this.onKeyLine = false;\n                if (it.value) {\n                    const end = 'end' in it.value ? it.value.end : undefined;\n                    const last = Array.isArray(end) ? end[end.length - 1] : undefined;\n                    if (last?.type === 'comment')\n                        end?.push(this.sourceToken);\n                    else\n                        map.items.push({ start: [this.sourceToken] });\n                }\n                else if (it.sep) {\n                    it.sep.push(this.sourceToken);\n                }\n                else {\n                    it.start.push(this.sourceToken);\n                }\n                return;\n            case 'space':\n            case 'comment':\n                if (it.value) {\n                    map.items.push({ start: [this.sourceToken] });\n                }\n                else if (it.sep) {\n                    it.sep.push(this.sourceToken);\n                }\n                else {\n                    if (this.atIndentedComment(it.start, map.indent)) {\n                        const prev = map.items[map.items.length - 2];\n                        const end = prev?.value?.end;\n                        if (Array.isArray(end)) {\n                            Array.prototype.push.apply(end, it.start);\n                            end.push(this.sourceToken);\n                            map.items.pop();\n                            return;\n                        }\n                    }\n                    it.start.push(this.sourceToken);\n                }\n                return;\n        }\n        if (this.indent >= map.indent) {\n            const atNextItem = !this.onKeyLine &&\n                this.indent === map.indent &&\n                it.sep &&\n                this.type !== 'seq-item-ind';\n            // For empty nodes, assign newline-separated not indented empty tokens to following node\n            let start = [];\n            if (atNextItem && it.sep && !it.value) {\n                const nl = [];\n                for (let i = 0; i < it.sep.length; ++i) {\n                    const st = it.sep[i];\n                    switch (st.type) {\n                        case 'newline':\n                            nl.push(i);\n                            break;\n                        case 'space':\n                            break;\n                        case 'comment':\n                            if (st.indent > map.indent)\n                                nl.length = 0;\n                            break;\n                        default:\n                            nl.length = 0;\n                    }\n                }\n                if (nl.length >= 2)\n                    start = it.sep.splice(nl[1]);\n            }\n            switch (this.type) {\n                case 'anchor':\n                case 'tag':\n                    if (atNextItem || it.value) {\n                        start.push(this.sourceToken);\n                        map.items.push({ start });\n                        this.onKeyLine = true;\n                    }\n                    else if (it.sep) {\n                        it.sep.push(this.sourceToken);\n                    }\n                    else {\n                        it.start.push(this.sourceToken);\n                    }\n                    return;\n                case 'explicit-key-ind':\n                    if (!it.sep && !includesToken(it.start, 'explicit-key-ind')) {\n                        it.start.push(this.sourceToken);\n                    }\n                    else if (atNextItem || it.value) {\n                        start.push(this.sourceToken);\n                        map.items.push({ start });\n                    }\n                    else {\n                        this.stack.push({\n                            type: 'block-map',\n                            offset: this.offset,\n                            indent: this.indent,\n                            items: [{ start: [this.sourceToken] }]\n                        });\n                    }\n                    this.onKeyLine = true;\n                    return;\n                case 'map-value-ind':\n                    if (includesToken(it.start, 'explicit-key-ind')) {\n                        if (!it.sep) {\n                            if (includesToken(it.start, 'newline')) {\n                                Object.assign(it, { key: null, sep: [this.sourceToken] });\n                            }\n                            else {\n                                const start = getFirstKeyStartProps(it.start);\n                                this.stack.push({\n                                    type: 'block-map',\n                                    offset: this.offset,\n                                    indent: this.indent,\n                                    items: [{ start, key: null, sep: [this.sourceToken] }]\n                                });\n                            }\n                        }\n                        else if (it.value) {\n                            map.items.push({ start: [], key: null, sep: [this.sourceToken] });\n                        }\n                        else if (includesToken(it.sep, 'map-value-ind')) {\n                            this.stack.push({\n                                type: 'block-map',\n                                offset: this.offset,\n                                indent: this.indent,\n                                items: [{ start, key: null, sep: [this.sourceToken] }]\n                            });\n                        }\n                        else if (isFlowToken(it.key) &&\n                            !includesToken(it.sep, 'newline')) {\n                            const start = getFirstKeyStartProps(it.start);\n                            const key = it.key;\n                            const sep = it.sep;\n                            sep.push(this.sourceToken);\n                            // @ts-expect-error type guard is wrong here\n                            delete it.key, delete it.sep;\n                            this.stack.push({\n                                type: 'block-map',\n                                offset: this.offset,\n                                indent: this.indent,\n                                items: [{ start, key, sep }]\n                            });\n                        }\n                        else if (start.length > 0) {\n                            // Not actually at next item\n                            it.sep = it.sep.concat(start, this.sourceToken);\n                        }\n                        else {\n                            it.sep.push(this.sourceToken);\n                        }\n                    }\n                    else {\n                        if (!it.sep) {\n                            Object.assign(it, { key: null, sep: [this.sourceToken] });\n                        }\n                        else if (it.value || atNextItem) {\n                            map.items.push({ start, key: null, sep: [this.sourceToken] });\n                        }\n                        else if (includesToken(it.sep, 'map-value-ind')) {\n                            this.stack.push({\n                                type: 'block-map',\n                                offset: this.offset,\n                                indent: this.indent,\n                                items: [{ start: [], key: null, sep: [this.sourceToken] }]\n                            });\n                        }\n                        else {\n                            it.sep.push(this.sourceToken);\n                        }\n                    }\n                    this.onKeyLine = true;\n                    return;\n                case 'alias':\n                case 'scalar':\n                case 'single-quoted-scalar':\n                case 'double-quoted-scalar': {\n                    const fs = this.flowScalar(this.type);\n                    if (atNextItem || it.value) {\n                        map.items.push({ start, key: fs, sep: [] });\n                        this.onKeyLine = true;\n                    }\n                    else if (it.sep) {\n                        this.stack.push(fs);\n                    }\n                    else {\n                        Object.assign(it, { key: fs, sep: [] });\n                        this.onKeyLine = true;\n                    }\n                    return;\n                }\n                default: {\n                    const bv = this.startBlockValue(map);\n                    if (bv) {\n                        if (atNextItem &&\n                            bv.type !== 'block-seq' &&\n                            includesToken(it.start, 'explicit-key-ind')) {\n                            map.items.push({ start });\n                        }\n                        this.stack.push(bv);\n                        return;\n                    }\n                }\n            }\n        }\n        yield* this.pop();\n        yield* this.step();\n    }\n    *blockSequence(seq) {\n        const it = seq.items[seq.items.length - 1];\n        switch (this.type) {\n            case 'newline':\n                if (it.value) {\n                    const end = 'end' in it.value ? it.value.end : undefined;\n                    const last = Array.isArray(end) ? end[end.length - 1] : undefined;\n                    if (last?.type === 'comment')\n                        end?.push(this.sourceToken);\n                    else\n                        seq.items.push({ start: [this.sourceToken] });\n                }\n                else\n                    it.start.push(this.sourceToken);\n                return;\n            case 'space':\n            case 'comment':\n                if (it.value)\n                    seq.items.push({ start: [this.sourceToken] });\n                else {\n                    if (this.atIndentedComment(it.start, seq.indent)) {\n                        const prev = seq.items[seq.items.length - 2];\n                        const end = prev?.value?.end;\n                        if (Array.isArray(end)) {\n                            Array.prototype.push.apply(end, it.start);\n                            end.push(this.sourceToken);\n                            seq.items.pop();\n                            return;\n                        }\n                    }\n                    it.start.push(this.sourceToken);\n                }\n                return;\n            case 'anchor':\n            case 'tag':\n                if (it.value || this.indent <= seq.indent)\n                    break;\n                it.start.push(this.sourceToken);\n                return;\n            case 'seq-item-ind':\n                if (this.indent !== seq.indent)\n                    break;\n                if (it.value || includesToken(it.start, 'seq-item-ind'))\n                    seq.items.push({ start: [this.sourceToken] });\n                else\n                    it.start.push(this.sourceToken);\n                return;\n        }\n        if (this.indent > seq.indent) {\n            const bv = this.startBlockValue(seq);\n            if (bv) {\n                this.stack.push(bv);\n                return;\n            }\n        }\n        yield* this.pop();\n        yield* this.step();\n    }\n    *flowCollection(fc) {\n        const it = fc.items[fc.items.length - 1];\n        if (this.type === 'flow-error-end') {\n            let top;\n            do {\n                yield* this.pop();\n                top = this.peek(1);\n            } while (top && top.type === 'flow-collection');\n        }\n        else if (fc.end.length === 0) {\n            switch (this.type) {\n                case 'comma':\n                case 'explicit-key-ind':\n                    if (!it || it.sep)\n                        fc.items.push({ start: [this.sourceToken] });\n                    else\n                        it.start.push(this.sourceToken);\n                    return;\n                case 'map-value-ind':\n                    if (!it || it.value)\n                        fc.items.push({ start: [], key: null, sep: [this.sourceToken] });\n                    else if (it.sep)\n                        it.sep.push(this.sourceToken);\n                    else\n                        Object.assign(it, { key: null, sep: [this.sourceToken] });\n                    return;\n                case 'space':\n                case 'comment':\n                case 'newline':\n                case 'anchor':\n                case 'tag':\n                    if (!it || it.value)\n                        fc.items.push({ start: [this.sourceToken] });\n                    else if (it.sep)\n                        it.sep.push(this.sourceToken);\n                    else\n                        it.start.push(this.sourceToken);\n                    return;\n                case 'alias':\n                case 'scalar':\n                case 'single-quoted-scalar':\n                case 'double-quoted-scalar': {\n                    const fs = this.flowScalar(this.type);\n                    if (!it || it.value)\n                        fc.items.push({ start: [], key: fs, sep: [] });\n                    else if (it.sep)\n                        this.stack.push(fs);\n                    else\n                        Object.assign(it, { key: fs, sep: [] });\n                    return;\n                }\n                case 'flow-map-end':\n                case 'flow-seq-end':\n                    fc.end.push(this.sourceToken);\n                    return;\n            }\n            const bv = this.startBlockValue(fc);\n            /* istanbul ignore else should not happen */\n            if (bv)\n                this.stack.push(bv);\n            else {\n                yield* this.pop();\n                yield* this.step();\n            }\n        }\n        else {\n            const parent = this.peek(2);\n            if (parent.type === 'block-map' &&\n                ((this.type === 'map-value-ind' && parent.indent === fc.indent) ||\n                    (this.type === 'newline' &&\n                        !parent.items[parent.items.length - 1].sep))) {\n                yield* this.pop();\n                yield* this.step();\n            }\n            else if (this.type === 'map-value-ind' &&\n                parent.type !== 'flow-collection') {\n                const prev = getPrevProps(parent);\n                const start = getFirstKeyStartProps(prev);\n                fixFlowSeqItems(fc);\n                const sep = fc.end.splice(1, fc.end.length);\n                sep.push(this.sourceToken);\n                const map = {\n                    type: 'block-map',\n                    offset: fc.offset,\n                    indent: fc.indent,\n                    items: [{ start, key: fc, sep }]\n                };\n                this.onKeyLine = true;\n                this.stack[this.stack.length - 1] = map;\n            }\n            else {\n                yield* this.lineEnd(fc);\n            }\n        }\n    }\n    flowScalar(type) {\n        if (this.onNewLine) {\n            let nl = this.source.indexOf('\\n') + 1;\n            while (nl !== 0) {\n                this.onNewLine(this.offset + nl);\n                nl = this.source.indexOf('\\n', nl) + 1;\n            }\n        }\n        return {\n            type,\n            offset: this.offset,\n            indent: this.indent,\n            source: this.source\n        };\n    }\n    startBlockValue(parent) {\n        switch (this.type) {\n            case 'alias':\n            case 'scalar':\n            case 'single-quoted-scalar':\n            case 'double-quoted-scalar':\n                return this.flowScalar(this.type);\n            case 'block-scalar-header':\n                return {\n                    type: 'block-scalar',\n                    offset: this.offset,\n                    indent: this.indent,\n                    props: [this.sourceToken],\n                    source: ''\n                };\n            case 'flow-map-start':\n            case 'flow-seq-start':\n                return {\n                    type: 'flow-collection',\n                    offset: this.offset,\n                    indent: this.indent,\n                    start: this.sourceToken,\n                    items: [],\n                    end: []\n                };\n            case 'seq-item-ind':\n                return {\n                    type: 'block-seq',\n                    offset: this.offset,\n                    indent: this.indent,\n                    items: [{ start: [this.sourceToken] }]\n                };\n            case 'explicit-key-ind': {\n                this.onKeyLine = true;\n                const prev = getPrevProps(parent);\n                const start = getFirstKeyStartProps(prev);\n                start.push(this.sourceToken);\n                return {\n                    type: 'block-map',\n                    offset: this.offset,\n                    indent: this.indent,\n                    items: [{ start }]\n                };\n            }\n            case 'map-value-ind': {\n                this.onKeyLine = true;\n                const prev = getPrevProps(parent);\n                const start = getFirstKeyStartProps(prev);\n                return {\n                    type: 'block-map',\n                    offset: this.offset,\n                    indent: this.indent,\n                    items: [{ start, key: null, sep: [this.sourceToken] }]\n                };\n            }\n        }\n        return null;\n    }\n    atIndentedComment(start, indent) {\n        if (this.type !== 'comment')\n            return false;\n        if (this.indent <= indent)\n            return false;\n        return start.every(st => st.type === 'newline' || st.type === 'space');\n    }\n    *documentEnd(docEnd) {\n        if (this.type !== 'doc-mode') {\n            if (docEnd.end)\n                docEnd.end.push(this.sourceToken);\n            else\n                docEnd.end = [this.sourceToken];\n            if (this.type === 'newline')\n                yield* this.pop();\n        }\n    }\n    *lineEnd(token) {\n        switch (this.type) {\n            case 'comma':\n            case 'doc-start':\n            case 'doc-end':\n            case 'flow-seq-end':\n            case 'flow-map-end':\n            case 'map-value-ind':\n                yield* this.pop();\n                yield* this.step();\n                break;\n            case 'newline':\n                this.onKeyLine = false;\n            // fallthrough\n            case 'space':\n            case 'comment':\n            default:\n                // all other values are errors\n                if (token.end)\n                    token.end.push(this.sourceToken);\n                else\n                    token.end = [this.sourceToken];\n                if (this.type === 'newline')\n                    yield* this.pop();\n        }\n    }\n}\n\nexport { Parser };\n","import { Composer } from './compose/composer.js';\nimport { Document } from './doc/Document.js';\nimport { prettifyError, YAMLParseError } from './errors.js';\nimport { warn } from './log.js';\nimport { LineCounter } from './parse/line-counter.js';\nimport { Parser } from './parse/parser.js';\n\nfunction parseOptions(options) {\n    const prettyErrors = options.prettyErrors !== false;\n    const lineCounter = options.lineCounter || (prettyErrors && new LineCounter()) || null;\n    return { lineCounter, prettyErrors };\n}\n/**\n * Parse the input as a stream of YAML documents.\n *\n * Documents should be separated from each other by `...` or `---` marker lines.\n *\n * @returns If an empty `docs` array is returned, it will be of type\n *   EmptyStream and contain additional stream information. In\n *   TypeScript, you should use `'empty' in docs` as a type guard for it.\n */\nfunction parseAllDocuments(source, options = {}) {\n    const { lineCounter, prettyErrors } = parseOptions(options);\n    const parser = new Parser(lineCounter?.addNewLine);\n    const composer = new Composer(options);\n    const docs = Array.from(composer.compose(parser.parse(source)));\n    if (prettyErrors && lineCounter)\n        for (const doc of docs) {\n            doc.errors.forEach(prettifyError(source, lineCounter));\n            doc.warnings.forEach(prettifyError(source, lineCounter));\n        }\n    if (docs.length > 0)\n        return docs;\n    return Object.assign([], { empty: true }, composer.streamInfo());\n}\n/** Parse an input string into a single YAML.Document */\nfunction parseDocument(source, options = {}) {\n    const { lineCounter, prettyErrors } = parseOptions(options);\n    const parser = new Parser(lineCounter?.addNewLine);\n    const composer = new Composer(options);\n    // `doc` is always set by compose.end(true) at the very latest\n    let doc = null;\n    for (const _doc of composer.compose(parser.parse(source), true, source.length)) {\n        if (!doc)\n            doc = _doc;\n        else if (doc.options.logLevel !== 'silent') {\n            doc.errors.push(new YAMLParseError(_doc.range.slice(0, 2), 'MULTIPLE_DOCS', 'Source contains multiple documents; please use YAML.parseAllDocuments()'));\n            break;\n        }\n    }\n    if (prettyErrors && lineCounter) {\n        doc.errors.forEach(prettifyError(source, lineCounter));\n        doc.warnings.forEach(prettifyError(source, lineCounter));\n    }\n    return doc;\n}\nfunction parse(src, reviver, options) {\n    let _reviver = undefined;\n    if (typeof reviver === 'function') {\n        _reviver = reviver;\n    }\n    else if (options === undefined && reviver && typeof reviver === 'object') {\n        options = reviver;\n    }\n    const doc = parseDocument(src, options);\n    if (!doc)\n        return null;\n    doc.warnings.forEach(warning => warn(doc.options.logLevel, warning));\n    if (doc.errors.length > 0) {\n        if (doc.options.logLevel !== 'silent')\n            throw doc.errors[0];\n        else\n            doc.errors = [];\n    }\n    return doc.toJS(Object.assign({ reviver: _reviver }, options));\n}\nfunction stringify(value, replacer, options) {\n    let _replacer = null;\n    if (typeof replacer === 'function' || Array.isArray(replacer)) {\n        _replacer = replacer;\n    }\n    else if (options === undefined && replacer) {\n        options = replacer;\n    }\n    if (typeof options === 'string')\n        options = options.length;\n    if (typeof options === 'number') {\n        const indent = Math.round(options);\n        options = indent < 1 ? undefined : indent > 8 ? { indent: 8 } : { indent };\n    }\n    if (value === undefined) {\n        const { keepUndefined } = options ?? replacer ?? {};\n        if (!keepUndefined)\n            return undefined;\n    }\n    return new Document(value, _replacer, options).toString(options);\n}\n\nexport { parse, parseAllDocuments, parseDocument, stringify };\n","import { Base64 } from \"js-base64\";\nimport * as pako from \"pako\";\nimport * as YAML from \"yaml\";\n\nimport { type JSONSchema } from \"../input/JSONSchemaStore\";\nimport { messageError } from \"../Messages\";\n\nexport interface StringMap {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [name: string]: any;\n}\n\nexport function isStringMap(x: unknown): x is StringMap;\nexport function isStringMap<T>(x: unknown, checkValue: (v: unknown) => v is T): x is { [name: string]: T };\nexport function isStringMap<T>(x: unknown, checkValue?: (v: unknown) => v is T): boolean {\n    if (typeof x !== \"object\" || Array.isArray(x) || x === null) {\n        return false;\n    }\n\n    if (checkValue !== undefined) {\n        for (const k of Object.getOwnPropertyNames(x)) {\n            const v = x[k as keyof typeof x];\n            if (!checkValue(v)) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nexport function checkString(x: unknown): x is string {\n    return typeof x === \"string\";\n}\n\nexport function checkStringMap(x: unknown): StringMap;\nexport function checkStringMap<T>(x: unknown, checkValue: (v: unknown) => v is T): { [name: string]: T };\nexport function checkStringMap<T>(x: unknown, checkValue?: (v: unknown) => v is T): StringMap {\n    if (checkValue && isStringMap(x, checkValue)) {\n        return x;\n    }\n\n    if (isStringMap(x)) {\n        return x;\n    }\n\n    return panic(`Value must be an object, but is ${x}`);\n}\n\nexport function checkArray(x: unknown): unknown[];\nexport function checkArray<T>(x: unknown, checkItem: (v: unknown) => v is T): T[];\nexport function checkArray<T>(x: unknown, checkItem?: (v: unknown) => v is T): T[] {\n    if (!Array.isArray(x)) {\n        return panic(`Value must be an array, but is ${x}`);\n    }\n\n    if (checkItem !== undefined) {\n        for (const v of x) {\n            if (!checkItem(v)) {\n                return panic(`Array item does not satisfy constraint: ${v}`);\n            }\n        }\n    }\n\n    return x;\n}\n\nexport function defined<T>(x: T | undefined): T {\n    if (x !== undefined) return x;\n    return panic(\"Defined value expected, but got undefined\");\n}\n\nexport function nonNull<T>(x: T | null): T {\n    if (x !== null) return x;\n    return panic(\"Non-null value expected, but got null\");\n}\n\nexport function assertNever(x: never): never {\n    return messageError(\"InternalError\", { message: `Unexpected object ${x}` });\n}\n\nexport function assert(condition: boolean, message = \"Assertion failed\"): void {\n    if (!condition) {\n        return messageError(\"InternalError\", { message });\n    }\n}\n\nexport function panic(message: string): never {\n    return messageError(\"InternalError\", { message });\n}\n\nexport function mustNotHappen(): never {\n    return panic(\"This must not happen\");\n}\n\nexport function repeated<T>(n: number, value: T): T[] {\n    const arr: T[] = [];\n    for (let i = 0; i < n; i++) {\n        arr.push(value);\n    }\n\n    return arr;\n}\n\nexport function repeatedCall<T>(n: number, producer: () => T): T[] {\n    const arr: T[] = [];\n    for (let i = 0; i < n; i++) {\n        arr.push(producer());\n    }\n\n    return arr;\n}\n\nexport function errorMessage(e: unknown): string {\n    if (e instanceof Error) {\n        return e.message;\n    }\n\n    return (e as { toString: () => string }).toString();\n}\n\nexport function inflateBase64(encoded: string): string {\n    const bytes = Base64.atob(encoded);\n    return pako.inflate(bytes, { to: \"string\" });\n}\n\nexport function parseJSON(text: string, description: string, address = \"<unknown>\"): JSONSchema | undefined {\n    try {\n        // https://gist.github.com/pbakondy/f5045eff725193dad9c7\n        if (text.charCodeAt(0) === 0xfeff) {\n            text = text.slice(1);\n        }\n\n        return YAML.parse(text);\n    } catch (e) {\n        let message: string;\n\n        if (e instanceof SyntaxError) {\n            message = e.message;\n        } else {\n            message = `Unknown exception ${e}`;\n        }\n\n        return messageError(\"MiscJSONParseError\", { description, address, message });\n    }\n}\n\nexport function indentationString(level: number): string {\n    return \"  \".repeat(level);\n}\n\n// FIXME: fix this enum iteration\nexport function numberEnumValues(e: Record<string | number, string | number>): number[] {\n    const result: number[] = [];\n    for (const k of Object.keys(e)) {\n        const v = e[k];\n        if (typeof v === \"number\") {\n            result.push(v);\n        }\n    }\n\n    return result;\n}\n","// eslint-disable-next-line @typescript-eslint/no-redeclare\nimport { hasOwnProperty } from \"collection-utils\";\n\nimport { messageError } from \"./Messages\";\nimport { assert } from \"./support/Support\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"./types\";\n\n/**\n * Primary options show up in the web UI in the \"Language\" settings tab,\n * secondary options in \"Other\".\n */\nexport type OptionKind = \"primary\" | \"secondary\";\n\nexport interface OptionDefinition {\n    alias?: string;\n    defaultOption?: boolean;\n    defaultValue?: FixMeOptionsAnyType;\n    description: string;\n    kind?: OptionKind;\n    legalValues?: string[];\n    multiple?: boolean;\n    name: string;\n    renderer?: boolean;\n    type: StringConstructor | BooleanConstructor;\n    typeLabel?: string;\n}\n\n/**\n * The superclass for target language options.  You probably want to use one of its\n * subclasses, `BooleanOption`, `EnumOption`, or `StringOption`.\n */\nexport abstract class Option<T> {\n    public readonly definition: OptionDefinition;\n\n    public constructor(definition: OptionDefinition) {\n        definition.renderer = true;\n        this.definition = definition;\n        assert(definition.kind !== undefined, \"Renderer option kind must be defined\");\n    }\n\n    public getValue(values: FixMeOptionsType): T {\n        const value = values[this.definition.name];\n        if (value === undefined) {\n            return this.definition.defaultValue;\n        }\n\n        return value;\n    }\n\n    public get cliDefinitions(): { actual: OptionDefinition[]; display: OptionDefinition[] } {\n        return { actual: [this.definition], display: [this.definition] };\n    }\n}\n\nexport type OptionValueType<O> = O extends Option<infer T> ? T : never;\nexport type OptionValues<T> = { [P in keyof T]: OptionValueType<T[P]> };\n\nexport function getOptionValues<T extends { [name: string]: Option<FixMeOptionsAnyType> }>(\n    options: T,\n    untypedOptionValues: FixMeOptionsType\n): OptionValues<T> {\n    const optionValues: FixMeOptionsType = {};\n    for (const name of Object.getOwnPropertyNames(options)) {\n        optionValues[name] = options[name].getValue(untypedOptionValues);\n    }\n\n    return optionValues as OptionValues<T>;\n}\n\n/**\n * A target language option that allows setting a boolean flag.\n */\nexport class BooleanOption extends Option<boolean> {\n    /**\n     * @param name The shorthand name.\n     * @param description Short-ish description of the option.\n     * @param defaultValue The default value.\n     * @param kind Whether it's a primary or secondary option.\n     */\n    public constructor(name: string, description: string, defaultValue: boolean, kind: OptionKind = \"primary\") {\n        super({\n            name,\n            kind,\n            type: Boolean,\n            description,\n            defaultValue\n        });\n    }\n\n    public get cliDefinitions(): { actual: OptionDefinition[]; display: OptionDefinition[] } {\n        const negated = Object.assign({}, this.definition, {\n            name: `no-${this.definition.name}`,\n            defaultValue: !this.definition.defaultValue\n        });\n        const display = Object.assign({}, this.definition, {\n            name: `[no-]${this.definition.name}`,\n            description: `${this.definition.description} (${this.definition.defaultValue ? \"on\" : \"off\"} by default)`\n        });\n        return {\n            display: [display],\n            actual: [this.definition, negated]\n        };\n    }\n\n    public getValue(values: FixMeOptionsType): boolean {\n        let value = values[this.definition.name];\n        if (value === undefined) {\n            value = this.definition.defaultValue;\n        }\n\n        let negated = values[`no-${this.definition.name}`];\n        if (negated === undefined) {\n            negated = !this.definition.defaultValue;\n        }\n\n        if (value === \"true\") {\n            value = true;\n        } else if (value === \"false\") {\n            value = false;\n        }\n\n        if (this.definition.defaultValue) {\n            return value && !negated;\n        } else {\n            return value || !negated;\n        }\n    }\n}\n\nexport class StringOption extends Option<string> {\n    public constructor(\n        name: string,\n        description: string,\n        typeLabel: string,\n        defaultValue: string,\n        kind: OptionKind = \"primary\"\n    ) {\n        const definition = {\n            name,\n            kind,\n            type: String,\n            description,\n            typeLabel,\n            defaultValue\n        };\n        super(definition);\n    }\n}\n\nexport class EnumOption<T> extends Option<T> {\n    private readonly _values: { [name: string]: T };\n\n    public constructor(\n        name: string,\n        description: string,\n        values: Array<[string, T]>,\n        defaultValue: string | undefined = undefined,\n        kind: OptionKind = \"primary\"\n    ) {\n        if (defaultValue === undefined) {\n            defaultValue = values[0][0];\n        }\n\n        const definition = {\n            name,\n            kind,\n            type: String,\n            description,\n            typeLabel: values.map(([n, _]) => n).join(\"|\"),\n            legalValues: values.map(([n, _]) => n),\n            defaultValue\n        };\n        super(definition);\n\n        this._values = {};\n        for (const [n, v] of values) {\n            this._values[n] = v;\n        }\n    }\n\n    public getValue(values: FixMeOptionsType): T {\n        let name: string = values[this.definition.name];\n        if (name === undefined) {\n            name = this.definition.defaultValue;\n        }\n\n        if (!hasOwnProperty(this._values, name)) {\n            return messageError(\"RendererUnknownOptionValue\", { value: name, name: this.definition.name });\n        }\n\n        return this._values[name];\n    }\n}\n","import { EnumOption } from \"../RendererOptions\";\n\n// eslint-disable-next-line import/no-cycle\nimport { allLowerWordStyle, allUpperWordStyle, firstUpperWordStyle, originalWord } from \"./Strings\";\n\nexport const acronyms: string[] = [\n    \"aaa\",\n    \"aabb\",\n    \"aac\",\n    \"aal\",\n    \"aalc\",\n    \"aarp\",\n    \"abac\",\n    \"abcl\",\n    \"abi\",\n    \"abm\",\n    \"abr\",\n    \"ac\",\n    \"acd\",\n    \"ack\",\n    \"acl\",\n    \"acm\",\n    \"acme\",\n    \"acp\",\n    \"acpi\",\n    \"acr\",\n    \"adb\",\n    \"adc\",\n    \"adccp\",\n    \"ado\",\n    \"adsl\",\n    \"adt\",\n    \"ae\",\n    \"aes\",\n    \"af\",\n    \"afp\",\n    \"agp\",\n    \"ai\",\n    \"aix\",\n    \"alac\",\n    \"algol\",\n    \"alsa\",\n    \"alu\",\n    \"amd\",\n    \"amoled\",\n    \"amqp\",\n    \"amr\",\n    \"ann\",\n    \"ansi\",\n    \"aop\",\n    \"apci\",\n    \"api\",\n    \"apic\",\n    \"apipa\",\n    \"apl\",\n    \"apr\",\n    \"arin\",\n    \"aros\",\n    \"arp\",\n    \"arpa\",\n    \"arpanet\",\n    \"ascii\",\n    \"aset\",\n    \"asg\",\n    \"asic\",\n    \"asimo\",\n    \"aslr\",\n    \"asm\",\n    \"asmp\",\n    \"asp\",\n    \"asr\",\n    \"assp\",\n    \"ast\",\n    \"ata\",\n    \"atag\",\n    \"atapi\",\n    \"atm\",\n    \"av\",\n    \"avc\",\n    \"avi\",\n    \"awfl\",\n    \"awk\",\n    \"awt\",\n    \"bal\",\n    \"bam\",\n    \"bbp\",\n    \"bbs\",\n    \"bcd\",\n    \"bcnf\",\n    \"beep\",\n    \"ber\",\n    \"bfd\",\n    \"bfs\",\n    \"bft\",\n    \"bgp\",\n    \"bi\",\n    \"binac\",\n    \"bios\",\n    \"bjt\",\n    \"bmp\",\n    \"bnc\",\n    \"boinc\",\n    \"bom\",\n    \"bootp\",\n    \"bpdu\",\n    \"bpel\",\n    \"bpl\",\n    \"bpm\",\n    \"brm\",\n    \"brms\",\n    \"brr\",\n    \"brs\",\n    \"bsa\",\n    \"bsb\",\n    \"bsd\",\n    \"bss\",\n    \"bt\",\n    \"bw\",\n    \"byod\",\n    \"ca\",\n    \"cad\",\n    \"cae\",\n    \"cai\",\n    \"caid\",\n    \"captcha\",\n    \"caq\",\n    \"cd\",\n    \"cde\",\n    \"cdfs\",\n    \"cdma\",\n    \"cdn\",\n    \"cdp\",\n    \"cdsa\",\n    \"cert\",\n    \"ces\",\n    \"cf\",\n    \"cfd\",\n    \"cfg\",\n    \"cg\",\n    \"cga\",\n    \"cgi\",\n    \"cgt\",\n    \"chs\",\n    \"cidr\",\n    \"cifs\",\n    \"cim\",\n    \"cio\",\n    \"cir\",\n    \"cisc\",\n    \"cjk\",\n    \"cjkv\",\n    \"cli\",\n    \"clr\",\n    \"cm\",\n    \"cmdb\",\n    \"cmmi\",\n    \"cmo\",\n    \"cmos\",\n    \"cms\",\n    \"cn\",\n    \"cnc\",\n    \"cng\",\n    \"cnr\",\n    \"cobol\",\n    \"com\",\n    \"corba\",\n    \"cots\",\n    \"cpa\",\n    \"cpan\",\n    \"cpri\",\n    \"cps\",\n    \"cpu\",\n    \"cr\",\n    \"cran\",\n    \"crc\",\n    \"crlf\",\n    \"crm\",\n    \"crs\",\n    \"crt\",\n    \"crud\",\n    \"cs\",\n    \"cse\",\n    \"csi\",\n    \"csm\",\n    \"csp\",\n    \"csrf\",\n    \"css\",\n    \"csv\",\n    \"ct\",\n    \"ctan\",\n    \"ctcp\",\n    \"ctfe\",\n    \"cti\",\n    \"ctl\",\n    \"ctm\",\n    \"cts\",\n    \"ctss\",\n    \"cua\",\n    \"cvs\",\n    \"dac\",\n    \"dal\",\n    \"dao\",\n    \"dap\",\n    \"darpa\",\n    \"dat\",\n    \"db\",\n    \"dba\",\n    \"dbcs\",\n    \"dbms\",\n    \"dcc\",\n    \"dcca\",\n    \"dccp\",\n    \"dcl\",\n    \"dcmi\",\n    \"dcom\",\n    \"dcs\",\n    \"dd\",\n    \"dde\",\n    \"ddi\",\n    \"ddl\",\n    \"ddr\",\n    \"dec\",\n    \"des\",\n    \"dfa\",\n    \"dfd\",\n    \"dfs\",\n    \"dgd\",\n    \"dhcp\",\n    \"dhtml\",\n    \"dif\",\n    \"dimm\",\n    \"din\",\n    \"dip\",\n    \"dism\",\n    \"divx\",\n    \"dkim\",\n    \"dl\",\n    \"dll\",\n    \"dlna\",\n    \"dlp\",\n    \"dma\",\n    \"dmca\",\n    \"dmi\",\n    \"dml\",\n    \"dmr\",\n    \"dmz\",\n    \"dn\",\n    \"dnd\",\n    \"dns\",\n    \"doa\",\n    \"docsis\",\n    \"dom\",\n    \"dos\",\n    \"dp\",\n    \"dpc\",\n    \"dpi\",\n    \"dpmi\",\n    \"dpms\",\n    \"dr\",\n    \"dram\",\n    \"dri\",\n    \"drm\",\n    \"dsa\",\n    \"dsdl\",\n    \"dsdm\",\n    \"dsl\",\n    \"dslam\",\n    \"dsn\",\n    \"dsp\",\n    \"dsssl\",\n    \"dtd\",\n    \"dte\",\n    \"dtp\",\n    \"dtr\",\n    \"dvd\",\n    \"dvi\",\n    \"dvr\",\n    \"dw\",\n    \"eai\",\n    \"eap\",\n    \"eas\",\n    \"ebcdic\",\n    \"ebml\",\n    \"ecc\",\n    \"ecma\",\n    \"ecn\",\n    \"ecos\",\n    \"ecrs\",\n    \"eda\",\n    \"edi\",\n    \"edo\",\n    \"edsac\",\n    \"edvac\",\n    \"eeprom\",\n    \"eff\",\n    \"efi\",\n    \"efm\",\n    \"efs\",\n    \"ega\",\n    \"egp\",\n    \"eide\",\n    \"eigrp\",\n    \"eisa\",\n    \"elf\",\n    \"emacs\",\n    \"ems\",\n    \"eniac\",\n    \"eod\",\n    \"eof\",\n    \"eol\",\n    \"eom\",\n    \"eos\",\n    \"eprom\",\n    \"erd\",\n    \"erm\",\n    \"erp\",\n    \"esb\",\n    \"escon\",\n    \"esd\",\n    \"esr\",\n    \"etl\",\n    \"etw\",\n    \"euc\",\n    \"eula\",\n    \"ewmh\",\n    \"ext\",\n    \"fap\",\n    \"faq\",\n    \"fasm\",\n    \"fbdimm\",\n    \"fcb\",\n    \"fcs\",\n    \"fdc\",\n    \"fdd\",\n    \"fddi\",\n    \"fdm\",\n    \"fdma\",\n    \"fds\",\n    \"fec\",\n    \"femb\",\n    \"fet\",\n    \"fhs\",\n    \"ficon\",\n    \"fifo\",\n    \"fips\",\n    \"fl\",\n    \"flac\",\n    \"flops\",\n    \"fmc\",\n    \"fmo\",\n    \"foldoc\",\n    \"fosdem\",\n    \"fosi\",\n    \"foss\",\n    \"fp\",\n    \"fpga\",\n    \"fps\",\n    \"fpu\",\n    \"fqdn\",\n    \"fru\",\n    \"fs\",\n    \"fsb\",\n    \"fsf\",\n    \"fsm\",\n    \"ftp\",\n    \"ftta\",\n    \"fttc\",\n    \"ftth\",\n    \"fttp\",\n    \"fud\",\n    \"fvek\",\n    \"fws\",\n    \"fxp\",\n    \"fyi\",\n    \"gb\",\n    \"gcc\",\n    \"gcj\",\n    \"gcr\",\n    \"gdb\",\n    \"gdi\",\n    \"geran\",\n    \"gfdl\",\n    \"gif\",\n    \"gigo\",\n    \"gimps\",\n    \"gis\",\n    \"gml\",\n    \"gnu\",\n    \"goms\",\n    \"gpasm\",\n    \"gpfs\",\n    \"gpg\",\n    \"gpgpu\",\n    \"gpib\",\n    \"gpl\",\n    \"gprs\",\n    \"gpt\",\n    \"gpu\",\n    \"gsm\",\n    \"gui\",\n    \"guid\",\n    \"gwt\",\n    \"gyr\",\n    \"hal\",\n    \"hasp\",\n    \"hba\",\n    \"hci\",\n    \"hcl\",\n    \"hd\",\n    \"hdd\",\n    \"hdl\",\n    \"hdmi\",\n    \"hf\",\n    \"hfs\",\n    \"hhd\",\n    \"hid\",\n    \"hig\",\n    \"hird\",\n    \"hlasm\",\n    \"hls\",\n    \"hma\",\n    \"hp\",\n    \"hpc\",\n    \"hpfs\",\n    \"hsdpa\",\n    \"hsm\",\n    \"ht\",\n    \"htc\",\n    \"htm\",\n    \"html\",\n    \"http\",\n    \"https\",\n    \"htx\",\n    \"hurd\",\n    \"hvd\",\n    \"iana\",\n    \"ibm\",\n    \"ic\",\n    \"icann\",\n    \"ich\",\n    \"icmp\",\n    \"icp\",\n    \"ics\",\n    \"ict\",\n    \"id\",\n    \"ide\",\n    \"idf\",\n    \"idl\",\n    \"ids\",\n    \"iec\",\n    \"ieee\",\n    \"ietf\",\n    \"ifl\",\n    \"igmp\",\n    \"igrp\",\n    \"ihv\",\n    \"iiop\",\n    \"iis\",\n    \"ike\",\n    \"il\",\n    \"im\",\n    \"imap\",\n    \"ime\",\n    \"infosec\",\n    \"ip\",\n    \"ipam\",\n    \"ipc\",\n    \"ipl\",\n    \"ipmi\",\n    \"ipo\",\n    \"ipp\",\n    \"ips\",\n    \"iptv\",\n    \"ipx\",\n    \"ir\",\n    \"irc\",\n    \"iri\",\n    \"irp\",\n    \"irq\",\n    \"isa\",\n    \"isam\",\n    \"isatap\",\n    \"isc\",\n    \"isdn\",\n    \"iso\",\n    \"isp\",\n    \"ispf\",\n    \"isr\",\n    \"isv\",\n    \"itil\",\n    \"itl\",\n    \"itu\",\n    \"ivcr\",\n    \"ivrs\",\n    \"jaxb\",\n    \"jaxp\",\n    \"jbod\",\n    \"jce\",\n    \"jcl\",\n    \"jcp\",\n    \"jdbc\",\n    \"jdk\",\n    \"jds\",\n    \"jee\",\n    \"jes\",\n    \"jfc\",\n    \"jfet\",\n    \"jfs\",\n    \"jini\",\n    \"jit\",\n    \"jme\",\n    \"jms\",\n    \"jmx\",\n    \"jndi\",\n    \"jni\",\n    \"jnz\",\n    \"jpeg\",\n    \"jre\",\n    \"js\",\n    \"jse\",\n    \"json\",\n    \"jsp\",\n    \"jtag\",\n    \"jvm\",\n    \"kb\",\n    \"kde\",\n    \"km\",\n    \"krl\",\n    \"kvm\",\n    \"lacp\",\n    \"lan\",\n    \"lb\",\n    \"lba\",\n    \"lcd\",\n    \"lcos\",\n    \"lcr\",\n    \"ldap\",\n    \"le\",\n    \"led\",\n    \"lf\",\n    \"lfs\",\n    \"lga\",\n    \"lgpl\",\n    \"lib\",\n    \"lif\",\n    \"lifo\",\n    \"lilo\",\n    \"lisp\",\n    \"lkml\",\n    \"lm\",\n    \"loc\",\n    \"lpc\",\n    \"lpi\",\n    \"lpt\",\n    \"lru\",\n    \"lsb\",\n    \"lsi\",\n    \"lte\",\n    \"ltl\",\n    \"ltr\",\n    \"lun\",\n    \"lv\",\n    \"lvd\",\n    \"lvm\",\n    \"lzw\",\n    \"mac\",\n    \"manet\",\n    \"mapi\",\n    \"mb\",\n    \"mbcs\",\n    \"mbd\",\n    \"mbr\",\n    \"mca\",\n    \"mcad\",\n    \"mcas\",\n    \"mcdba\",\n    \"mcdst\",\n    \"mcitp\",\n    \"mcm\",\n    \"mcp\",\n    \"mcpc\",\n    \"mcpd\",\n    \"mcsa\",\n    \"mcsd\",\n    \"mcse\",\n    \"mct\",\n    \"mcts\",\n    \"mda\",\n    \"mdf\",\n    \"mdi\",\n    \"mf\",\n    \"mfc\",\n    \"mfm\",\n    \"mgcp\",\n    \"mib\",\n    \"micr\",\n    \"midi\",\n    \"mimd\",\n    \"mime\",\n    \"mimo\",\n    \"minix\",\n    \"mips\",\n    \"mis\",\n    \"misd\",\n    \"mit\",\n    \"mmc\",\n    \"mmds\",\n    \"mmf\",\n    \"mmi\",\n    \"mmio\",\n    \"mmorpg\",\n    \"mmu\",\n    \"mmx\",\n    \"mng\",\n    \"mom\",\n    \"mos\",\n    \"mosfet\",\n    \"motd\",\n    \"mous\",\n    \"mov\",\n    \"mpaa\",\n    \"mpeg\",\n    \"mpl\",\n    \"mpls\",\n    \"mpu\",\n    \"ms\",\n    \"msa\",\n    \"msb\",\n    \"msdn\",\n    \"msi\",\n    \"msn\",\n    \"mt\",\n    \"mta\",\n    \"mtbf\",\n    \"mtu\",\n    \"mua\",\n    \"mvc\",\n    \"mvp\",\n    \"mvs\",\n    \"mwc\",\n    \"mx\",\n    \"mxf\",\n    \"nack\",\n    \"nak\",\n    \"nas\",\n    \"nasm\",\n    \"ncp\",\n    \"ncq\",\n    \"ncsa\",\n    \"ndis\",\n    \"ndps\",\n    \"nds\",\n    \"nep\",\n    \"nfa\",\n    \"nfc\",\n    \"nfs\",\n    \"ngl\",\n    \"ngscb\",\n    \"ni\",\n    \"nic\",\n    \"nim\",\n    \"nio\",\n    \"nist\",\n    \"nlp\",\n    \"nls\",\n    \"nmi\",\n    \"nntp\",\n    \"noc\",\n    \"nop\",\n    \"nos\",\n    \"np\",\n    \"npl\",\n    \"nptl\",\n    \"npu\",\n    \"ns\",\n    \"nsa\",\n    \"nsi\",\n    \"nspr\",\n    \"nss\",\n    \"nt\",\n    \"ntfs\",\n    \"ntlm\",\n    \"ntp\",\n    \"numa\",\n    \"nurbs\",\n    \"nvr\",\n    \"nvram\",\n    \"oat\",\n    \"obsai\",\n    \"odbc\",\n    \"oem\",\n    \"oes\",\n    \"ofdm\",\n    \"oftc\",\n    \"oid\",\n    \"olap\",\n    \"ole\",\n    \"oled\",\n    \"olpc\",\n    \"oltp\",\n    \"omf\",\n    \"omg\",\n    \"omr\",\n    \"oo\",\n    \"ooe\",\n    \"oom\",\n    \"oop\",\n    \"ootb\",\n    \"opml\",\n    \"orb\",\n    \"orm\",\n    \"os\",\n    \"oscon\",\n    \"osdn\",\n    \"osi\",\n    \"ospf\",\n    \"oss\",\n    \"ostg\",\n    \"oui\",\n    \"pap\",\n    \"parc\",\n    \"pata\",\n    \"pbs\",\n    \"pc\",\n    \"pcb\",\n    \"pci\",\n    \"pcl\",\n    \"pcm\",\n    \"pcmcia\",\n    \"pcre\",\n    \"pd\",\n    \"pda\",\n    \"pdf\",\n    \"pdh\",\n    \"pdp\",\n    \"pe\",\n    \"perl\",\n    \"pfa\",\n    \"pg\",\n    \"pga\",\n    \"pgo\",\n    \"pgp\",\n    \"php\",\n    \"pid\",\n    \"pim\",\n    \"pio\",\n    \"pkcs\",\n    \"pki\",\n    \"plc\",\n    \"pld\",\n    \"plt\",\n    \"pmm\",\n    \"png\",\n    \"pnrp\",\n    \"poid\",\n    \"pojo\",\n    \"posix\",\n    \"ppc\",\n    \"ppi\",\n    \"ppp\",\n    \"pptp\",\n    \"pr\",\n    \"ps\",\n    \"psa\",\n    \"psm\",\n    \"psu\",\n    \"psvi\",\n    \"pv\",\n    \"pvg\",\n    \"pvr\",\n    \"pxe\",\n    \"pxi\",\n    \"qa\",\n    \"qdr\",\n    \"qfp\",\n    \"qotd\",\n    \"qsop\",\n    \"qtam\",\n    \"racf\",\n    \"rad\",\n    \"raid\",\n    \"raii\",\n    \"rait\",\n    \"ram\",\n    \"rarp\",\n    \"ras\",\n    \"rc\",\n    \"rcs\",\n    \"rd\",\n    \"rdbms\",\n    \"rdc\",\n    \"rdf\",\n    \"rdm\",\n    \"rdos\",\n    \"rdp\",\n    \"rds\",\n    \"refal\",\n    \"rest\",\n    \"rf\",\n    \"rfc\",\n    \"rfi\",\n    \"rfid\",\n    \"rgb\",\n    \"rgba\",\n    \"rhel\",\n    \"rhl\",\n    \"ria\",\n    \"riaa\",\n    \"rip\",\n    \"rir\",\n    \"risc\",\n    \"rje\",\n    \"rle\",\n    \"rll\",\n    \"rmi\",\n    \"rms\",\n    \"rom\",\n    \"romb\",\n    \"rpc\",\n    \"rpg\",\n    \"rpm\",\n    \"rras\",\n    \"rsa\",\n    \"rsi\",\n    \"rss\",\n    \"rtai\",\n    \"rtc\",\n    \"rte\",\n    \"rtems\",\n    \"rtl\",\n    \"rtos\",\n    \"rtp\",\n    \"rts\",\n    \"rtsp\",\n    \"rtti\",\n    \"rwd\",\n    \"san\",\n    \"sas\",\n    \"sata\",\n    \"sax\",\n    \"sbod\",\n    \"sbu\",\n    \"scada\",\n    \"scid\",\n    \"scm\",\n    \"scp\",\n    \"scpc\",\n    \"scpi\",\n    \"scsa\",\n    \"scsi\",\n    \"sctp\",\n    \"sd\",\n    \"sddl\",\n    \"sdh\",\n    \"sdi\",\n    \"sdio\",\n    \"sdk\",\n    \"sdl\",\n    \"sdn\",\n    \"sdp\",\n    \"sdr\",\n    \"sdram\",\n    \"sdsl\",\n    \"se\",\n    \"sec\",\n    \"sei\",\n    \"seo\",\n    \"sftp\",\n    \"sgi\",\n    \"sgml\",\n    \"sgr\",\n    \"sha\",\n    \"shdsl\",\n    \"sigcat\",\n    \"siggraph\",\n    \"simd\",\n    \"simm\",\n    \"sip\",\n    \"sisd\",\n    \"siso\",\n    \"sles\",\n    \"sli\",\n    \"slm\",\n    \"sloc\",\n    \"sma\",\n    \"smb\",\n    \"smbios\",\n    \"sme\",\n    \"smf\",\n    \"smil\",\n    \"smp\",\n    \"smps\",\n    \"sms\",\n    \"smt\",\n    \"smtp\",\n    \"sna\",\n    \"snmp\",\n    \"sntp\",\n    \"soa\",\n    \"soe\",\n    \"soho\",\n    \"soi\",\n    \"sopa\",\n    \"sp\",\n    \"spa\",\n    \"sparc\",\n    \"spf\",\n    \"spi\",\n    \"spm\",\n    \"spmd\",\n    \"sql\",\n    \"sram\",\n    \"ssa\",\n    \"ssd\",\n    \"ssdp\",\n    \"sse\",\n    \"ssh\",\n    \"ssi\",\n    \"ssid\",\n    \"ssl\",\n    \"ssp\",\n    \"ssse\",\n    \"sssp\",\n    \"sstp\",\n    \"sus\",\n    \"suse\",\n    \"svc\",\n    \"svd\",\n    \"svg\",\n    \"svga\",\n    \"swf\",\n    \"swt\",\n    \"tao\",\n    \"tapi\",\n    \"tasm\",\n    \"tb\",\n    \"tcp\",\n    \"tcu\",\n    \"tdma\",\n    \"tft\",\n    \"tftp\",\n    \"ti\",\n    \"tla\",\n    \"tld\",\n    \"tls\",\n    \"tlv\",\n    \"tnc\",\n    \"tpf\",\n    \"tpm\",\n    \"troff\",\n    \"tron\",\n    \"trsdos\",\n    \"tso\",\n    \"tsp\",\n    \"tsr\",\n    \"tta\",\n    \"ttf\",\n    \"ttl\",\n    \"tts\",\n    \"tty\",\n    \"tucows\",\n    \"twain\",\n    \"uaag\",\n    \"uac\",\n    \"uart\",\n    \"uat\",\n    \"ucs\",\n    \"uddi\",\n    \"udma\",\n    \"udp\",\n    \"uefi\",\n    \"uhf\",\n    \"ui\",\n    \"ul\",\n    \"ula\",\n    \"uma\",\n    \"umb\",\n    \"uml\",\n    \"umpc\",\n    \"umts\",\n    \"unc\",\n    \"univac\",\n    \"ups\",\n    \"uri\",\n    \"url\",\n    \"usb\",\n    \"usr\",\n    \"utc\",\n    \"utf\",\n    \"utp\",\n    \"utran\",\n    \"uucp\",\n    \"uuid\",\n    \"uun\",\n    \"uvc\",\n    \"uwp\",\n    \"ux\",\n    \"vax\",\n    \"vb\",\n    \"vba\",\n    \"vbs\",\n    \"vcpi\",\n    \"vdm\",\n    \"vdsl\",\n    \"vesa\",\n    \"vfat\",\n    \"vfs\",\n    \"vg\",\n    \"vga\",\n    \"vhf\",\n    \"vlan\",\n    \"vlb\",\n    \"vlf\",\n    \"vliw\",\n    \"vlsi\",\n    \"vlsm\",\n    \"vm\",\n    \"vmm\",\n    \"vnc\",\n    \"vod\",\n    \"vpn\",\n    \"vpu\",\n    \"vr\",\n    \"vram\",\n    \"vrml\",\n    \"vsam\",\n    \"vsat\",\n    \"vt\",\n    \"vtam\",\n    \"vtl\",\n    \"wafs\",\n    \"wai\",\n    \"wais\",\n    \"wan\",\n    \"wap\",\n    \"wasm\",\n    \"wbem\",\n    \"wcag\",\n    \"wcf\",\n    \"wdm\",\n    \"wep\",\n    \"wfi\",\n    \"wins\",\n    \"wlan\",\n    \"wma\",\n    \"wmi\",\n    \"wmv\",\n    \"wns\",\n    \"wol\",\n    \"wor\",\n    \"wora\",\n    \"wpa\",\n    \"wpad\",\n    \"wpan\",\n    \"wpf\",\n    \"wsdl\",\n    \"wsfl\",\n    \"wusb\",\n    \"wwan\",\n    \"wwdc\",\n    \"wwid\",\n    \"wwn\",\n    \"www\",\n    \"wysiwyg\",\n    \"wzc\",\n    \"xag\",\n    \"xaml\",\n    \"xcbl\",\n    \"xdm\",\n    \"xdmcp\",\n    \"xhtml\",\n    \"xilp\",\n    \"xml\",\n    \"xmms\",\n    \"xmpp\",\n    \"xms\",\n    \"xns\",\n    \"xp\",\n    \"xpcom\",\n    \"xpi\",\n    \"xpidl\",\n    \"xps\",\n    \"xsd\",\n    \"xsl\",\n    \"xslt\",\n    \"xss\",\n    \"xtf\",\n    \"xul\",\n    \"xvga\",\n    \"yaaf\",\n    \"yacc\",\n    \"yaml\",\n    \"zcav\",\n    \"zcs\",\n    \"zif\",\n    \"zifs\",\n    \"zisc\",\n    \"zma\",\n    \"zoi\",\n    \"zope\",\n    \"zpl\"\n];\n\nexport enum AcronymStyleOptions {\n    Camel = \"camel\",\n    Lower = \"lowerCase\",\n    Original = \"original\",\n    Pascal = \"pascal\"\n}\n\nexport const acronymOption = function (defaultOption: AcronymStyleOptions): EnumOption<AcronymStyleOptions> {\n    return new EnumOption(\n        \"acronym-style\",\n        \"Acronym naming style\",\n        [\n            [AcronymStyleOptions.Original, AcronymStyleOptions.Original],\n            [AcronymStyleOptions.Pascal, AcronymStyleOptions.Pascal],\n            [AcronymStyleOptions.Camel, AcronymStyleOptions.Camel],\n            [AcronymStyleOptions.Lower, AcronymStyleOptions.Lower]\n        ],\n        defaultOption,\n        \"secondary\"\n    );\n};\n\nexport function acronymStyle(style: AcronymStyleOptions): (s: string) => string {\n    const options: { [key: string]: (s: string) => string } = {\n        [AcronymStyleOptions.Pascal]: allUpperWordStyle,\n        [AcronymStyleOptions.Camel]: firstUpperWordStyle,\n        [AcronymStyleOptions.Original]: originalWord,\n        [AcronymStyleOptions.Lower]: allLowerWordStyle\n    };\n\n    return options[style];\n}\n","import unicode from \"unicode-properties\";\n\nimport { messageAssert } from \"../Messages\";\n\n// eslint-disable-next-line import/no-cycle\nimport { acronyms } from \"./Acronyms\";\nimport { assert, assertNever, defined, panic } from \"./Support\";\n\nexport type NamingStyle =\n    | \"pascal\"\n    | \"camel\"\n    | \"underscore\"\n    | \"upper-underscore\"\n    | \"pascal-upper-acronyms\"\n    | \"camel-upper-acronyms\";\n\nfunction computeAsciiMap(mapper: (codePoint: number) => string): {\n    charNoEscapeMap: number[];\n    charStringMap: string[];\n} {\n    const charStringMap: string[] = [];\n    const charNoEscapeMap: number[] = [];\n\n    for (let i = 0; i < 128; i++) {\n        let noEscape = 0;\n        const result = mapper(i);\n        if (result === String.fromCharCode(i)) {\n            noEscape = 1;\n        }\n\n        charStringMap.push(result);\n        charNoEscapeMap.push(noEscape);\n    }\n\n    return { charStringMap, charNoEscapeMap };\n}\n\ntype CodePointPredicate = (codePoint: number) => boolean;\n\nfunction precomputedCodePointPredicate(p: CodePointPredicate): CodePointPredicate {\n    const asciiResults: boolean[] = [];\n    for (let cp = 0; cp < 128; cp++) {\n        asciiResults.push(p(cp));\n    }\n\n    return function (cp: number) {\n        return cp < 128 ? asciiResults[cp] : p(cp);\n    };\n}\n\n// FIXME: This is a copy of code in src/Data/String/Util.js\nexport function utf16ConcatMap(mapper: (utf16Unit: number) => string): (s: string) => string {\n    const { charStringMap, charNoEscapeMap } = computeAsciiMap(mapper);\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    return function stringConcatMap_inner(s: string): string {\n        let cs: string[] | null = null;\n        let start = 0;\n        let i = 0;\n        while (i < s.length) {\n            const cc = s.charCodeAt(i);\n            if (charNoEscapeMap[cc] !== 1) {\n                if (cs === null) cs = [];\n                cs.push(s.substring(start, i));\n\n                const str = charStringMap[cc];\n                if (str === undefined) {\n                    cs.push(mapper(s.charCodeAt(i)));\n                } else {\n                    cs.push(str);\n                }\n\n                start = i + 1;\n            }\n\n            i++;\n        }\n\n        if (cs === null) return s;\n\n        cs.push(s.substring(start, i));\n\n        return cs.join(\"\");\n    };\n}\n\nfunction isHighSurrogate(cc: number): boolean {\n    return cc >= 0xd800 && cc <= 0xdbff;\n}\n\nfunction isLowSurrogate(cc: number): boolean {\n    return cc >= 0xdc00 && cc <= 0xdfff;\n}\n\nexport function utf32ConcatMap(mapper: (codePoint: number) => string): (s: string) => string {\n    const { charStringMap, charNoEscapeMap } = computeAsciiMap(mapper);\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    return function stringConcatMap_inner(s: string): string {\n        let cs: string[] | null = null;\n        let start = 0;\n        let i = 0;\n        while (i < s.length) {\n            let cc = s.charCodeAt(i);\n            if (charNoEscapeMap[cc] !== 1) {\n                if (cs === null) cs = [];\n                cs.push(s.substring(start, i));\n\n                if (isHighSurrogate(cc)) {\n                    const highSurrogate = cc;\n                    i++;\n                    const lowSurrogate = s.charCodeAt(i);\n                    messageAssert(isLowSurrogate(lowSurrogate), \"MiscUnicodeHighSurrogateWithoutLowSurrogate\", {});\n                    const highBits = highSurrogate - 0xd800;\n                    const lowBits = lowSurrogate - 0xdc00;\n                    cc = 0x10000 + lowBits + (highBits << 10);\n                }\n\n                const str = charStringMap[cc];\n                if (str === undefined) {\n                    cs.push(mapper(cc));\n                } else {\n                    cs.push(str);\n                }\n\n                start = i + 1;\n            }\n\n            i++;\n        }\n\n        if (cs === null) return s;\n\n        cs.push(s.substring(start, i));\n\n        return cs.join(\"\");\n    };\n}\n\nexport function utf16LegalizeCharacters(isLegal: (utf16Unit: number) => boolean): (s: string) => string {\n    return utf16ConcatMap(u => (isLegal(u) ? String.fromCharCode(u) : \"\"));\n}\n\nexport function legalizeCharacters(isLegal: (codePoint: number) => boolean): (s: string) => string {\n    return utf32ConcatMap(u => (u <= 0xffff && isLegal(u) ? String.fromCharCode(u) : \"\"));\n}\n\nexport function repeatString(s: string, n: number): string {\n    assert(n >= 0, \"Cannot repeat a string a negative number of times\");\n    if (n === 0) return \"\";\n\n    // From https://github.com/lodash/lodash\n    // Leverage the exponentiation by squaring algorithm for a faster repeat.\n    // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n    let result = \"\";\n    do {\n        if (n % 2 !== 0) {\n            result += s;\n        }\n\n        n = Math.floor(n / 2);\n        if (n > 0) {\n            s += s;\n        }\n    } while (n > 0);\n\n    return result;\n}\n\nexport function intToHex(i: number, width: number): string {\n    let str = i.toString(16);\n    if (str.length >= width) return str;\n    return repeatString(\"0\", width - str.length) + str;\n}\n\nexport function standardUnicodeHexEscape(codePoint: number): string {\n    if (codePoint <= 0xffff) {\n        return \"\\\\u\" + intToHex(codePoint, 4);\n    } else {\n        return \"\\\\U\" + intToHex(codePoint, 8);\n    }\n}\n\nexport function escapeNonPrintableMapper(\n    printablePredicate: (codePoint: number) => boolean,\n    escaper: (codePoint: number) => string\n): (u: number) => string {\n    function mapper(u: number): string {\n        switch (u) {\n            case 0x5c:\n                return \"\\\\\\\\\";\n            case 0x22:\n                return '\\\\\"';\n            case 0x0a:\n                return \"\\\\n\";\n            case 0x09:\n                return \"\\\\t\";\n            default:\n                if (printablePredicate(u)) {\n                    return String.fromCharCode(u);\n                }\n\n                return escaper(u);\n        }\n    }\n\n    return mapper;\n}\n\nexport const utf16StringEscape = utf16ConcatMap(escapeNonPrintableMapper(isPrintable, standardUnicodeHexEscape));\nexport const stringEscape = utf32ConcatMap(escapeNonPrintableMapper(isPrintable, standardUnicodeHexEscape));\n\nexport function isPrintable(codePoint: number): boolean {\n    if (codePoint > 0xffff) return false;\n    const category = unicode.getCategory(codePoint);\n    return [\n        \"Mc\",\n        \"No\",\n        \"Sk\",\n        \"Me\",\n        \"Nd\",\n        \"Po\",\n        \"Lt\",\n        \"Pc\",\n        \"Sm\",\n        \"Zs\",\n        \"Lu\",\n        \"Pd\",\n        \"So\",\n        \"Pe\",\n        \"Pf\",\n        \"Ps\",\n        \"Sc\",\n        \"Ll\",\n        \"Lm\",\n        \"Pi\",\n        \"Nl\",\n        \"Mn\",\n        \"Lo\"\n    ].includes(category);\n}\n\nexport function isAscii(codePoint: number): boolean {\n    return codePoint < 128;\n}\n\nexport function isLetter(codePoint: number): boolean {\n    const category = unicode.getCategory(codePoint);\n    // FIXME: Include Letter, modifier (Lm)?\n    return [\"Lu\", \"Ll\", \"Lt\", \"Lo\"].includes(category);\n}\n\nexport function isDigit(codePoint: number): boolean {\n    const category = unicode.getCategory(codePoint);\n    return [\"Nd\"].includes(category);\n}\n\nexport function isNumeric(codePoint: number): boolean {\n    const category = unicode.getCategory(codePoint);\n    return [\"No\", \"Nd\", \"Nl\"].includes(category);\n}\n\nexport function isLetterOrDigit(codePoint: number): boolean {\n    return isLetter(codePoint) || isDigit(codePoint);\n}\n\nexport function isLetterOrUnderscore(codePoint: number): boolean {\n    return isLetter(codePoint) || codePoint === 0x5f;\n}\n\nexport function isLetterOrUnderscoreOrDigit(codePoint: number): boolean {\n    return isLetterOrUnderscore(codePoint) || isDigit(codePoint);\n}\n\nexport function isWordCharacter(codePoint: number): boolean {\n    return isLetter(codePoint) || isDigit(codePoint);\n}\n\nexport function trimEnd(str: string): string {\n    const l = str.length;\n    let firstWS = l;\n    for (let i = l - 1; i >= 0; i--) {\n        if (!unicode.isWhiteSpace(str.charCodeAt(i))) break;\n        firstWS = i;\n    }\n\n    if (firstWS === l) return str;\n    return str.slice(0, firstWS);\n}\n\nfunction modifyFirstChar(f: (c: string) => string, s: string): string {\n    if (s === \"\") return s;\n    return f(s[0]) + s.slice(1);\n}\n\nexport function capitalize(str: string): string {\n    return modifyFirstChar(c => c.toUpperCase(), str);\n}\n\nexport function decapitalize(str: string): string {\n    return modifyFirstChar(c => c.toLowerCase(), str);\n}\n\nconst wordSeparatorRegex = /[-_. ]+/;\n\nexport function pascalCase(str: string): string {\n    const words = str.split(wordSeparatorRegex).map(capitalize);\n    return words.join(\"\");\n}\n\nexport function camelCase(str: string): string {\n    return decapitalize(pascalCase(str));\n}\n\nexport function snakeCase(str: string): string {\n    const words = splitIntoWords(str).map(({ word }) => word.toLowerCase());\n    return words.join(\"_\");\n}\n\nexport function startWithLetter(\n    isAllowedStart: (codePoint: number) => boolean, // FIXME: technically, this operates on UTF16 units\n    upper: boolean,\n    str: string\n): string {\n    const modify = upper ? capitalize : decapitalize;\n    if (str === \"\") return modify(\"empty\");\n    if (isAllowedStart(str.charCodeAt(0))) return modify(str);\n    return modify(\"the\" + str);\n}\n\nconst knownAcronyms = new Set(acronyms);\n\nexport interface WordInName {\n    isAcronym: boolean;\n    word: string;\n}\n\nconst fastIsWordCharacter = precomputedCodePointPredicate(isWordCharacter);\nconst fastIsNonWordCharacter = precomputedCodePointPredicate(cp => !isWordCharacter(cp));\nconst fastIsLowerCase = precomputedCodePointPredicate(cp => unicode.isLowerCase(cp));\nexport const fastIsUpperCase = precomputedCodePointPredicate(cp => unicode.isUpperCase(cp));\nconst fastNonLetter = precomputedCodePointPredicate(cp => !unicode.isLowerCase(cp) && !unicode.isUpperCase(cp));\nconst fastIsDigit = precomputedCodePointPredicate(isDigit);\n\nexport function splitIntoWords(s: string): WordInName[] {\n    // [start, end, allUpper]\n    const intervals: Array<[number, number, boolean]> = [];\n    let intervalStart: number | undefined = undefined;\n    const len = s.length;\n    let i = 0;\n    let lastLowerCaseIndex: number | undefined = undefined;\n\n    function atEnd(): boolean {\n        return i >= len;\n    }\n\n    function currentCodePoint(): number {\n        return defined(s.codePointAt(i));\n    }\n\n    function skipWhile(p: (codePoint: number) => boolean): void {\n        while (!atEnd()) {\n            const cp = currentCodePoint();\n            if (!p(cp)) break;\n            if (fastIsLowerCase(cp)) lastLowerCaseIndex = i;\n            i++;\n        }\n    }\n\n    function skipNonWord(): void {\n        skipWhile(fastIsNonWordCharacter);\n    }\n\n    function skipLowerCase(): void {\n        skipWhile(fastIsLowerCase);\n    }\n\n    function skipUpperCase(): void {\n        skipWhile(fastIsUpperCase);\n    }\n\n    function skipNonLetter(): void {\n        skipWhile(fastNonLetter);\n    }\n\n    function skipDigits(): void {\n        skipWhile(fastIsDigit);\n    }\n\n    function startInterval(): void {\n        assert(intervalStart === undefined, \"Interval started before last one was committed\");\n        intervalStart = i;\n    }\n\n    function commitInterval(): void {\n        if (intervalStart === undefined) {\n            return panic(\"Tried to commit interval without starting one\");\n        }\n\n        assert(i > intervalStart, \"Interval must be non-empty\");\n        // FIXME: This is a hack to avoid splitting up surrogates.  We shouldn't\n        // look at surrogates individually in the first place.  When we\n        // encounter a high surrogate we have to combine it with the low\n        // surrogate and then do the logic on the code point.  Right now we're\n        // only operating on UTF16 char codes, which is wrong.\n        if (!atEnd() && isLowSurrogate(currentCodePoint())) {\n            i += 1;\n        }\n\n        const allUpper = lastLowerCaseIndex === undefined || lastLowerCaseIndex < intervalStart;\n        intervals.push([intervalStart, i, allUpper]);\n        intervalStart = undefined;\n    }\n\n    function intervalLength(): number {\n        if (intervalStart === undefined) {\n            return panic(\"Tried to get interval length without starting one\");\n        }\n\n        return i - intervalStart;\n    }\n\n    for (;;) {\n        skipNonWord();\n        if (atEnd()) break;\n\n        startInterval();\n        if (fastIsLowerCase(currentCodePoint())) {\n            skipLowerCase();\n            skipDigits();\n            commitInterval();\n        } else if (fastIsUpperCase(currentCodePoint())) {\n            skipUpperCase();\n            if (atEnd()) {\n                commitInterval();\n            } else if (intervalLength() === 1) {\n                skipLowerCase();\n                skipDigits();\n                commitInterval();\n            } else if (isDigit(currentCodePoint())) {\n                skipDigits();\n                commitInterval();\n            } else {\n                if (fastIsWordCharacter(currentCodePoint())) {\n                    i -= 1;\n                }\n\n                commitInterval();\n            }\n        } else {\n            skipNonLetter();\n            commitInterval();\n        }\n    }\n\n    const words: WordInName[] = [];\n    for (const [start, end, allUpper] of intervals) {\n        const word = s.slice(start, end);\n        const isAcronym = (lastLowerCaseIndex !== undefined && allUpper) || knownAcronyms.has(word.toLowerCase());\n        words.push({ word, isAcronym });\n    }\n\n    return words;\n}\n\nexport type WordStyle = (word: string) => string;\n\nexport function firstUpperWordStyle(s: string): string {\n    assert(s.length > 0, \"Cannot style an empty string\");\n    return s[0].toUpperCase() + s.slice(1).toLowerCase();\n}\n\nexport function allUpperWordStyle(s: string): string {\n    return s.toUpperCase();\n}\n\nexport function originalWord(s: string): string {\n    return s;\n}\n\nexport function allLowerWordStyle(s: string): string {\n    return s.toLowerCase();\n}\n\nfunction styleWord(style: WordStyle, word: string): string {\n    assert(word.length > 0, \"Tried to style an empty word\");\n    const result = style(word);\n    assert(result.length > 0, \"Word style must not make word empty\");\n    return result;\n}\n\nexport function combineWords(\n    words: WordInName[],\n    removeInvalidCharacters: (s: string) => string,\n    firstWordStyle: WordStyle,\n    restWordStyle: WordStyle,\n    firstWordAcronymStyle: WordStyle,\n    restAcronymStyle: WordStyle,\n    separator: string,\n    isStartCharacter: (codePoint: number) => boolean\n): string {\n    const legalizedWords: WordInName[] = [];\n    for (const w of words) {\n        const word = removeInvalidCharacters(w.word);\n        if (word.length === 0) continue;\n        legalizedWords.push({ word, isAcronym: w.isAcronym });\n    }\n\n    if (legalizedWords.length === 0) {\n        const validEmpty = removeInvalidCharacters(\"empty\");\n        assert(validEmpty.length > 0, 'Word \"empty\" is invalid in target language');\n        legalizedWords.push({ word: validEmpty, isAcronym: false });\n    }\n\n    const styledWords: string[] = [];\n    const first = legalizedWords[0];\n    const firstStyle = first.isAcronym ? firstWordAcronymStyle : firstWordStyle;\n    const styledFirstWord = styleWord(firstStyle, first.word);\n    let restWords: WordInName[];\n    if (!isStartCharacter(defined(styledFirstWord.codePointAt(0)))) {\n        const validThe = removeInvalidCharacters(\"the\");\n        assert(validThe.length > 0, 'Word \"the\" is invalid in the target language');\n        const styledThe = styleWord(firstWordStyle, validThe);\n        assert(\n            isStartCharacter(defined(styledThe.codePointAt(0))),\n            'The first character of styling \"the\" is not a start character'\n        );\n        styledWords.push(styledThe);\n        restWords = legalizedWords;\n    } else {\n        styledWords.push(styledFirstWord);\n        restWords = legalizedWords.slice(1);\n    }\n\n    for (const w of restWords) {\n        const style = w.isAcronym ? restAcronymStyle : restWordStyle;\n        styledWords.push(styleWord(style, w.word));\n    }\n\n    return styledWords.join(separator);\n}\n\nexport function addPrefixIfNecessary(prefix: string, name: string): string {\n    // Take care not to doubly-prefix type names\n    return name.startsWith(prefix) ? name : prefix + name;\n}\n\nexport function makeNameStyle(\n    namingStyle: NamingStyle,\n    legalizeName: (name: string) => string,\n    prefix?: string\n): (rawName: string) => string {\n    let separator: string;\n    let firstWordStyle: WordStyle;\n    let restWordStyle: WordStyle;\n    let firstWordAcronymStyle: WordStyle;\n    let restAcronymStyle: WordStyle;\n\n    if (\n        namingStyle === \"pascal\" ||\n        namingStyle === \"camel\" ||\n        namingStyle === \"pascal-upper-acronyms\" ||\n        namingStyle === \"camel-upper-acronyms\"\n    ) {\n        separator = \"\";\n        if (namingStyle === \"pascal-upper-acronyms\" || namingStyle === \"camel-upper-acronyms\") {\n            restWordStyle = firstUpperWordStyle;\n            restAcronymStyle = allUpperWordStyle;\n        } else {\n            restWordStyle = restAcronymStyle = firstUpperWordStyle;\n        }\n    } else {\n        separator = \"_\";\n    }\n\n    switch (namingStyle) {\n        case \"pascal\":\n        case \"pascal-upper-acronyms\":\n            firstWordStyle = firstWordAcronymStyle = firstUpperWordStyle;\n            break;\n        case \"camel\":\n        case \"camel-upper-acronyms\":\n            firstWordStyle = firstWordAcronymStyle = allLowerWordStyle;\n            break;\n        case \"underscore\":\n            firstWordStyle = restWordStyle = firstWordAcronymStyle = restAcronymStyle = allLowerWordStyle;\n            break;\n        case \"upper-underscore\":\n            firstWordStyle = restWordStyle = firstWordAcronymStyle = restAcronymStyle = allUpperWordStyle;\n            break;\n        default:\n            return assertNever(namingStyle);\n    }\n\n    return (original: string) => {\n        const words = splitIntoWords(original);\n\n        const styledName = combineWords(\n            words,\n            legalizeName,\n            firstWordStyle,\n            restWordStyle,\n            firstWordAcronymStyle,\n            restAcronymStyle,\n            separator,\n            isLetterOrUnderscore\n        );\n\n        if (prefix !== undefined) {\n            return addPrefixIfNecessary(prefix, styledName);\n        } else {\n            return styledName;\n        }\n    };\n}\n","import { hashString, mapFilter, mapFilterMap, mapTranspose } from \"collection-utils\";\n\nimport { type BaseGraphRewriteBuilder } from \"../GraphRewriting\";\nimport { assert, panic } from \"../support/Support\";\nimport { type Type, type TypeKind } from \"../Type\";\n\nexport class TypeAttributeKind<T> {\n    public constructor(public readonly name: string) {}\n\n    public appliesToTypeKind(kind: TypeKind): boolean {\n        return kind !== \"any\";\n    }\n\n    public combine(_attrs: T[]): T | undefined {\n        return panic(`Cannot combine type attribute ${this.name}`);\n    }\n\n    public intersect(attrs: T[]): T | undefined {\n        return this.combine(attrs);\n    }\n\n    public makeInferred(_: T): T | undefined {\n        return panic(`Cannot make type attribute ${this.name} inferred`);\n    }\n\n    public increaseDistance(attrs: T): T | undefined {\n        return attrs;\n    }\n\n    public addToSchema(_schema: { [name: string]: unknown }, _t: Type, _attrs: T): void {\n        return;\n    }\n\n    public children(_: T): ReadonlySet<Type> {\n        return new Set();\n    }\n\n    public stringify(_: T): string | undefined {\n        return undefined;\n    }\n\n    public get inIdentity(): boolean {\n        return false;\n    }\n\n    public requiresUniqueIdentity(_: T): boolean {\n        return false;\n    }\n\n    public reconstitute<TBuilder extends BaseGraphRewriteBuilder>(_builder: TBuilder, a: T): T {\n        return a;\n    }\n\n    public makeAttributes(value: T): TypeAttributes {\n        const kvps: Array<[this, T]> = [[this, value]];\n        return new Map(kvps);\n    }\n\n    public tryGetInAttributes(a: TypeAttributes): T | undefined {\n        return a.get(this);\n    }\n\n    private setInAttributes(a: TypeAttributes, value: T): TypeAttributes {\n        // FIXME: This is potentially super slow\n        return new Map(a).set(this, value);\n    }\n\n    public modifyInAttributes(a: TypeAttributes, modify: (value: T | undefined) => T | undefined): TypeAttributes {\n        const modified = modify(this.tryGetInAttributes(a));\n        if (modified === undefined) {\n            // FIXME: This is potentially super slow\n            const result = new Map(a);\n            result.delete(this);\n            return result;\n        }\n\n        return this.setInAttributes(a, modified);\n    }\n\n    public setDefaultInAttributes(a: TypeAttributes, makeDefault: () => T): TypeAttributes {\n        if (this.tryGetInAttributes(a) !== undefined) return a;\n        return this.modifyInAttributes(a, makeDefault);\n    }\n\n    public removeInAttributes(a: TypeAttributes): TypeAttributes {\n        return mapFilter(a, (_, k) => k !== this);\n    }\n\n    public equals(other: TypeAttributeKind<unknown>): boolean {\n        if (!(other instanceof TypeAttributeKind)) {\n            return false;\n        }\n\n        return this.name === other.name;\n    }\n\n    public hashCode(): number {\n        return hashString(this.name);\n    }\n}\n\n// FIXME: strongly type this\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type TypeAttributes = ReadonlyMap<TypeAttributeKind<any>, any>;\n\nexport const emptyTypeAttributes: TypeAttributes = new Map();\n\nexport type CombinationKind = \"union\" | \"intersect\";\n\nexport function combineTypeAttributes(kind: CombinationKind, attributeArray: TypeAttributes[]): TypeAttributes;\nexport function combineTypeAttributes(kind: CombinationKind, a: TypeAttributes, b: TypeAttributes): TypeAttributes;\nexport function combineTypeAttributes(\n    combinationKind: CombinationKind,\n    firstOrArray: TypeAttributes[] | TypeAttributes,\n    second?: TypeAttributes\n): TypeAttributes {\n    const union = combinationKind === \"union\";\n    let attributeArray: TypeAttributes[];\n    if (Array.isArray(firstOrArray)) {\n        attributeArray = firstOrArray;\n    } else {\n        if (second === undefined) {\n            return panic(\"Must have on array or two attributes\");\n        }\n\n        attributeArray = [firstOrArray, second];\n    }\n\n    const attributesByKind = mapTranspose(attributeArray);\n\n    // FIXME: strongly type this\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function combine(attrs: any[], kind: TypeAttributeKind<any>): any {\n        assert(attrs.length > 0, \"Cannot combine zero type attributes\");\n        if (attrs.length === 1) return attrs[0];\n        if (union) {\n            return kind.combine(attrs);\n        } else {\n            return kind.intersect(attrs);\n        }\n    }\n\n    return mapFilterMap(attributesByKind, combine);\n}\n\nexport function makeTypeAttributesInferred(attr: TypeAttributes): TypeAttributes {\n    return mapFilterMap(attr, (value, kind) => kind.makeInferred(value));\n}\n\nexport function increaseTypeAttributesDistance(attr: TypeAttributes): TypeAttributes {\n    return mapFilterMap(attr, (value, kind) => kind.increaseDistance(value));\n}\n","import { definedMap, iterableFirst, iterableSkip, setMap, setUnionInto } from \"collection-utils\";\nimport * as pluralize from \"pluralize\";\n\nimport { Chance } from \"../support/Chance\";\nimport { splitIntoWords } from \"../support/Strings\";\nimport { assert, defined, panic } from \"../support/Support\";\n\nimport { TypeAttributeKind, type TypeAttributes } from \"./TypeAttributes\";\n\nlet chance: Chance;\nlet usedRandomNames: Set<string>;\n\nexport function initTypeNames(): void {\n    chance = new Chance(31415);\n    usedRandomNames = new Set();\n}\n\ninitTypeNames();\n\nfunction makeRandomName(): string {\n    for (;;) {\n        const name = `${chance.city()} ${chance.animal()}`;\n        if (usedRandomNames.has(name)) continue;\n        usedRandomNames.add(name);\n        return name;\n    }\n}\n\nexport type NameOrNames = string | TypeNames;\n\n// FIXME: In the case of overlapping prefixes and suffixes we will\n// produce a name that includes the overlap twice.  For example, for\n// the names \"aaa\" and \"aaaa\" we have the common prefix \"aaa\" and the\n// common suffix \"aaa\", so we will produce the combined name \"aaaaaa\".\nfunction combineNames(names: ReadonlySet<string>): string {\n    let originalFirst = iterableFirst(names);\n    if (originalFirst === undefined) {\n        return panic(\"Named type has no names\");\n    }\n\n    if (names.size === 1) {\n        return originalFirst;\n    }\n\n    const namesSet = setMap(names, s =>\n        splitIntoWords(s)\n            .map(w => w.word.toLowerCase())\n            .join(\"_\")\n    );\n    const first = defined(iterableFirst(namesSet));\n    if (namesSet.size === 1) {\n        return first;\n    }\n\n    let prefixLength = first.length;\n    let suffixLength = first.length;\n    for (const n of iterableSkip(namesSet, 1)) {\n        prefixLength = Math.min(prefixLength, n.length);\n        for (let i = 0; i < prefixLength; i++) {\n            if (first[i] !== n[i]) {\n                prefixLength = i;\n                break;\n            }\n        }\n\n        suffixLength = Math.min(suffixLength, n.length);\n        for (let i = 0; i < suffixLength; i++) {\n            if (first[first.length - i - 1] !== n[n.length - i - 1]) {\n                suffixLength = i;\n                break;\n            }\n        }\n    }\n\n    const prefix = prefixLength > 2 ? first.slice(0, prefixLength) : \"\";\n    const suffix = suffixLength > 2 ? first.slice(first.length - suffixLength) : \"\";\n    const combined = prefix + suffix;\n    if (combined.length > 2) {\n        return combined;\n    }\n\n    return first;\n}\n\nexport const tooManyNamesThreshold = 1000;\n\nexport abstract class TypeNames {\n    public static makeWithDistance(\n        names: ReadonlySet<string>,\n        alternativeNames: ReadonlySet<string> | undefined,\n        distance: number\n    ): TypeNames {\n        if (names.size >= tooManyNamesThreshold) {\n            return new TooManyTypeNames(distance);\n        }\n\n        if (alternativeNames === undefined || alternativeNames.size > tooManyNamesThreshold) {\n            alternativeNames = undefined;\n        }\n\n        return new RegularTypeNames(names, alternativeNames, distance);\n    }\n\n    public static make(\n        names: ReadonlySet<string>,\n        alternativeNames: ReadonlySet<string> | undefined,\n        areInferred: boolean\n    ): TypeNames {\n        return TypeNames.makeWithDistance(names, alternativeNames, areInferred ? 1 : 0);\n    }\n\n    public constructor(public readonly distance: number) {}\n\n    public get areInferred(): boolean {\n        return this.distance > 0;\n    }\n\n    public abstract get names(): ReadonlySet<string>;\n    public abstract get combinedName(): string;\n    public abstract get proposedNames(): ReadonlySet<string>;\n\n    public abstract add(namesArray: TypeNames[], startIndex?: number): TypeNames;\n    public abstract clearInferred(): TypeNames;\n    public abstract makeInferred(): TypeNames;\n    public abstract singularize(): TypeNames;\n    public abstract toString(): string;\n}\n\nexport class RegularTypeNames extends TypeNames {\n    public constructor(\n        public readonly names: ReadonlySet<string>,\n        private readonly _alternativeNames: ReadonlySet<string> | undefined,\n        distance: number\n    ) {\n        super(distance);\n    }\n\n    public add(namesArray: TypeNames[], startIndex = 0): TypeNames {\n        let newNames = new Set(this.names);\n        let newDistance = this.distance;\n        let newAlternativeNames = definedMap(this._alternativeNames, s => new Set(s));\n\n        for (let i = startIndex; i < namesArray.length; i++) {\n            const other = namesArray[i];\n\n            if (other instanceof RegularTypeNames && other._alternativeNames !== undefined) {\n                if (newAlternativeNames === undefined) {\n                    newAlternativeNames = new Set();\n                }\n\n                setUnionInto(newAlternativeNames, other._alternativeNames);\n            }\n\n            if (other.distance > newDistance) continue;\n\n            if (!(other instanceof RegularTypeNames)) {\n                assert(other instanceof TooManyTypeNames, \"Unknown TypeNames instance\");\n                // The other one is at most our distance, so let it sort it out\n                return other.add(namesArray, i + 1);\n            }\n\n            if (other.distance < newDistance) {\n                // The other one is closer, so take its names\n                newNames = new Set(other.names);\n                newDistance = other.distance;\n                newAlternativeNames = definedMap(other._alternativeNames, s => new Set(s));\n            } else {\n                // Same distance, merge them\n                assert(other.distance === newDistance, \"This should be the only case left\");\n                setUnionInto(newNames, other.names);\n            }\n        }\n\n        return TypeNames.makeWithDistance(newNames, newAlternativeNames, newDistance);\n    }\n\n    public clearInferred(): TypeNames {\n        const newNames = this.areInferred ? new Set<string>() : this.names;\n        return TypeNames.makeWithDistance(newNames, new Set(), this.distance);\n    }\n\n    public get combinedName(): string {\n        return combineNames(this.names);\n    }\n\n    public get proposedNames(): ReadonlySet<string> {\n        const set = new Set([this.combinedName]);\n        if (this._alternativeNames === undefined) {\n            return set;\n        }\n\n        setUnionInto(set, this._alternativeNames);\n        return set;\n    }\n\n    public makeInferred(): TypeNames {\n        return TypeNames.makeWithDistance(this.names, this._alternativeNames, this.distance + 1);\n    }\n\n    public singularize(): TypeNames {\n        return TypeNames.makeWithDistance(\n            setMap(this.names, pluralize.singular),\n            definedMap(this._alternativeNames, an => setMap(an, pluralize.singular)),\n            this.distance + 1\n        );\n    }\n\n    public toString(): string {\n        const inferred = this.areInferred ? `distance ${this.distance}` : \"given\";\n        const names = `${inferred} ${Array.from(this.names).join(\",\")}`;\n        if (this._alternativeNames === undefined) {\n            return names;\n        }\n\n        return `${names} (${Array.from(this._alternativeNames).join(\",\")})`;\n    }\n}\n\nexport class TooManyTypeNames extends TypeNames {\n    public readonly names: ReadonlySet<string>;\n\n    public constructor(distance: number, name?: string) {\n        super(distance);\n\n        if (name === undefined) {\n            name = makeRandomName();\n        }\n\n        this.names = new Set([name]);\n    }\n\n    public get combinedName(): string {\n        return defined(iterableFirst(this.names));\n    }\n\n    public get proposedNames(): ReadonlySet<string> {\n        return this.names;\n    }\n\n    public add(namesArray: TypeNames[], startIndex = 0): TypeNames {\n        if (!this.areInferred) return this;\n\n        for (let i = startIndex; i < namesArray.length; i++) {\n            const other = namesArray[i];\n            if (other.distance < this.distance) {\n                return other.add(namesArray, i + 1);\n            }\n        }\n\n        return this;\n    }\n\n    public clearInferred(): TypeNames {\n        if (!this.areInferred) {\n            return this;\n        }\n\n        return TypeNames.makeWithDistance(new Set(), new Set(), this.distance);\n    }\n\n    public makeInferred(): TypeNames {\n        return new TooManyTypeNames(this.distance + 1, iterableFirst(this.names));\n    }\n\n    public singularize(): TypeNames {\n        return this;\n    }\n\n    public toString(): string {\n        return `too many ${this.combinedName}`;\n    }\n}\n\nclass TypeNamesTypeAttributeKind extends TypeAttributeKind<TypeNames> {\n    public constructor() {\n        super(\"names\");\n    }\n\n    public combine(namesArray: TypeNames[]): TypeNames {\n        assert(namesArray.length > 0, \"Can't combine zero type names\");\n\n        return namesArray[0].add(namesArray, 1);\n    }\n\n    public makeInferred(tn: TypeNames): TypeNames {\n        return tn.makeInferred();\n    }\n\n    public increaseDistance(tn: TypeNames): TypeNames {\n        return tn.makeInferred();\n    }\n\n    public stringify(tn: TypeNames): string {\n        return tn.toString();\n    }\n}\n\nexport const namesTypeAttributeKind: TypeAttributeKind<TypeNames> = new TypeNamesTypeAttributeKind();\n\nexport function modifyTypeNames(\n    attributes: TypeAttributes,\n    modifier: (tn: TypeNames | undefined) => TypeNames | undefined\n): TypeAttributes {\n    return namesTypeAttributeKind.modifyInAttributes(attributes, modifier);\n}\n\nexport function singularizeTypeNames(attributes: TypeAttributes): TypeAttributes {\n    return modifyTypeNames(attributes, maybeNames => {\n        if (maybeNames === undefined) return undefined;\n        return maybeNames.singularize();\n    });\n}\n\nexport function makeNamesTypeAttributes(nameOrNames: NameOrNames, areNamesInferred?: boolean): TypeAttributes {\n    let typeNames: TypeNames;\n    if (typeof nameOrNames === \"string\") {\n        typeNames = TypeNames.make(new Set([nameOrNames]), new Set(), defined(areNamesInferred));\n    } else {\n        typeNames = nameOrNames as TypeNames;\n    }\n\n    return namesTypeAttributeKind.makeAttributes(typeNames);\n}\n","import { setUnionManyInto } from \"collection-utils\";\nimport URI from \"urijs\";\n\nimport { type JSONSchemaAttributes, type JSONSchemaType, type Ref } from \"../input/JSONSchemaInput\";\nimport { type JSONSchema } from \"../input/JSONSchemaStore\";\nimport { checkArray, checkString } from \"../support/Support\";\nimport { type Type } from \"../Type\";\n\nimport { TypeAttributeKind, type TypeAttributes, emptyTypeAttributes } from \"./TypeAttributes\";\n\nconst protocolsSchemaProperty = \"qt-uri-protocols\";\nconst extensionsSchemaProperty = \"qt-uri-extensions\";\n\n// protocols, extensions\ntype URIAttributes = [ReadonlySet<string>, ReadonlySet<string>];\n\nclass URITypeAttributeKind extends TypeAttributeKind<URIAttributes> {\n    public constructor() {\n        super(\"uriAttributes\");\n    }\n\n    public get inIdentity(): boolean {\n        return true;\n    }\n\n    public combine(attrs: URIAttributes[]): URIAttributes {\n        const protocolSets = attrs.map(a => a[0]);\n        const extensionSets = attrs.map(a => a[1]);\n        return [setUnionManyInto(new Set(), protocolSets), setUnionManyInto(new Set(), extensionSets)];\n    }\n\n    public makeInferred(_: URIAttributes): undefined {\n        return undefined;\n    }\n\n    public addToSchema(schema: { [name: string]: unknown }, t: Type, attrs: URIAttributes): void {\n        if (t.kind !== \"string\" && t.kind !== \"uri\") return;\n\n        const [protocols, extensions] = attrs;\n        if (protocols.size > 0) {\n            schema[protocolsSchemaProperty] = Array.from(protocols).sort();\n        }\n\n        if (extensions.size > 0) {\n            schema[extensionsSchemaProperty] = Array.from(extensions).sort();\n        }\n    }\n}\n\nexport const uriTypeAttributeKind: TypeAttributeKind<URIAttributes> = new URITypeAttributeKind();\n\nconst extensionRegex = /^.+(\\.[^./\\\\]+)$/;\n\nfunction pathExtension(path: string): string | undefined {\n    const matches = extensionRegex.exec(path);\n    if (matches === null) return undefined;\n    return matches[1];\n}\n\nexport function uriInferenceAttributesProducer(s: string): TypeAttributes {\n    try {\n        const uri = URI(s);\n        const extension = pathExtension(uri.path());\n        const extensions = extension === undefined ? [] : [extension.toLowerCase()];\n        return uriTypeAttributeKind.makeAttributes([new Set([uri.protocol().toLowerCase()]), new Set(extensions)]);\n    } catch {\n        return emptyTypeAttributes;\n    }\n}\n\nexport function uriSchemaAttributesProducer(\n    schema: JSONSchema,\n    _ref: Ref,\n    types: Set<JSONSchemaType>\n): JSONSchemaAttributes | undefined {\n    if (!(typeof schema === \"object\")) return undefined;\n    if (!types.has(\"string\")) return undefined;\n\n    let protocols: ReadonlySet<string>;\n    const maybeProtocols = schema[protocolsSchemaProperty];\n    if (maybeProtocols !== undefined) {\n        protocols = new Set(checkArray(maybeProtocols, checkString));\n    } else {\n        protocols = new Set();\n    }\n\n    let extensions: ReadonlySet<string>;\n    const maybeExtensions = schema[extensionsSchemaProperty];\n    if (maybeExtensions !== undefined) {\n        extensions = new Set(checkArray(maybeExtensions, checkString));\n    } else {\n        extensions = new Set();\n    }\n\n    if (protocols.size === 0 && extensions.size === 0) return undefined;\n\n    return { forString: uriTypeAttributeKind.makeAttributes([protocols, extensions]) };\n}\n","import { setMap } from \"collection-utils\";\n\nimport { assert, defined, repeated, repeatedCall } from \"./support/Support\";\n\nfunction countComponentGraphNodes(components: number[][]): number {\n    if (components.length === 0) return 0;\n\n    let largest = -1;\n    let count = 0;\n\n    for (const c of components) {\n        assert(c.length > 0, \"Empty component not allowed\");\n        for (const v of c) {\n            assert(v >= 0, \"Negative vertex index is invalid\");\n            largest = Math.max(largest, v);\n            count += 1;\n        }\n    }\n\n    assert(largest + 1 === count, \"Vertex indexes and count don't match up\");\n    return count;\n}\n\n// https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm\nfunction stronglyConnectedComponents(successors: number[][]): number[][] {\n    let index = 0;\n    const stack: number[] = [];\n    const numNodes = successors.length;\n    const indexes: number[] = repeated(numNodes, -1);\n    const lowLinks: number[] = repeated(numNodes, -1);\n    const onStack: boolean[] = repeated(numNodes, false);\n    const sccs: number[][] = [];\n\n    function strongconnect(v: number): void {\n        // Set the depth index for v to the smallest unused index\n        indexes[v] = index;\n        lowLinks[v] = index;\n        index += 1;\n\n        stack.push(v);\n        onStack[v] = true;\n\n        // Consider successors of v\n        for (const w of successors[v]) {\n            if (indexes[w] < 0) {\n                // Successor w has not yet been visited; recurse on it\n                strongconnect(w);\n                lowLinks[v] = Math.min(lowLinks[v], lowLinks[w]);\n            } else if (onStack[w]) {\n                // Successor w is in stack and hence in the current SCC\n                // If w is not on stack, then (v, w) is a cross-edge in the DFS tree and must be ignored\n                // Note: The next line may look odd - but is correct.\n                // It says w.index not w.lowlink; that is deliberate and from the original paper\n                lowLinks[v] = Math.min(lowLinks[v], indexes[w]);\n            }\n        }\n\n        // If v is a root node, pop the stack and generate an SCC\n        if (lowLinks[v] === indexes[v]) {\n            const scc: number[] = [];\n            let w: number;\n            do {\n                w = defined(stack.pop());\n                onStack[w] = false;\n                scc.push(w);\n            } while (w !== v);\n\n            sccs.push(scc);\n        }\n    }\n\n    for (let v = 0; v < numNodes; v++) {\n        if (indexes[v] < 0) {\n            strongconnect(v);\n        }\n    }\n\n    assert(countComponentGraphNodes(sccs) === numNodes, \"We didn't put all the nodes into SCCs\");\n\n    return sccs;\n}\n\nfunction buildComponentOfNodeMap(successors: number[][], components: number[][]): number[] {\n    const numComponents = components.length;\n    const numNodes = successors.length;\n\n    assert(numNodes === countComponentGraphNodes(components), \"Components don't match up with graph\");\n\n    const componentOfNode: number[] = repeated(numNodes, -1);\n    for (let c = 0; c < numComponents; c++) {\n        for (const n of components[c]) {\n            assert(componentOfNode[n] < 0, \"We have a node that's in two components\");\n            componentOfNode[n] = c;\n        }\n    }\n\n    return componentOfNode;\n}\n\nfunction buildMetaSuccessors(successors: number[][], components: number[][]): number[][] {\n    const numComponents = components.length;\n    const componentOfNode = buildComponentOfNodeMap(successors, components);\n    const componentAdded: boolean[] = repeated(numComponents, false);\n\n    const metaSuccessors: number[][] = [];\n\n    for (let c = 0; c < numComponents; c++) {\n        const succ: number[] = [];\n        for (const n of components[c]) {\n            for (const s of successors[n]) {\n                const ms = componentOfNode[s];\n                if (ms === c || componentAdded[ms]) continue;\n                succ.push(ms);\n                componentAdded[ms] = true;\n            }\n        }\n\n        // reset bookkeeping\n        for (const ms of succ) {\n            assert(componentAdded[ms]);\n            componentAdded[ms] = false;\n        }\n\n        metaSuccessors.push(succ);\n    }\n\n    return metaSuccessors;\n}\n\nfunction invertEdges(successors: number[][]): number[][] {\n    const numNodes = successors.length;\n    const predecessors: number[][] = repeatedCall(numNodes, () => []);\n\n    for (let s = 0; s < numNodes; s++) {\n        for (const v of successors[s]) {\n            predecessors[v].push(s);\n        }\n    }\n\n    return predecessors;\n}\n\nfunction calculateInDegrees(successors: number[][]): number[] {\n    const numNodes = successors.length;\n    const inDegrees: number[] = repeated(numNodes, 0);\n\n    for (const s of successors) {\n        for (const v of s) {\n            inDegrees[v] += 1;\n        }\n    }\n\n    return inDegrees;\n}\n\nfunction findRoots(successors: number[][]): number[] {\n    const numNodes = successors.length;\n    const inDegrees = calculateInDegrees(successors);\n    const roots: number[] = [];\n\n    for (let v = 0; v < numNodes; v++) {\n        if (inDegrees[v] === 0) {\n            roots.push(v);\n        }\n    }\n\n    return roots;\n}\n\nexport class Graph<T> {\n    private readonly _nodes: readonly T[];\n\n    private readonly _indexByNode: ReadonlyMap<T, number>;\n\n    private readonly _successors: number[][];\n\n    public constructor(\n        nodes: Iterable<T>,\n        invertDirection: boolean,\n        edges: number[][] | ((node: T) => ReadonlySet<T>)\n    ) {\n        this._nodes = Array.from(nodes);\n        this._indexByNode = new Map(this._nodes.map((n, i): [T, number] => [n, i]));\n        let edgesArray: number[][];\n        if (Array.isArray(edges)) {\n            edgesArray = edges;\n        } else {\n            edgesArray = this._nodes.map(n => Array.from(edges(n)).map(s => defined(this._indexByNode.get(s))));\n        }\n\n        if (invertDirection) {\n            edgesArray = invertEdges(edgesArray);\n        }\n\n        this._successors = edgesArray;\n    }\n\n    public get size(): number {\n        return this._nodes.length;\n    }\n\n    public get nodes(): readonly T[] {\n        return this._nodes;\n    }\n\n    public findRoots(): ReadonlySet<T> {\n        const roots = findRoots(this._successors);\n        return new Set(roots.map(n => this._nodes[n]));\n    }\n\n    // The subgraph starting at `root` must be acyclic.\n    public dfsTraversal(root: T, preOrder: boolean, process: (node: T) => void): void {\n        const visited = repeated(this.size, false);\n\n        const visit = (v: number): void => {\n            if (visited[v]) return;\n            visited[v] = true;\n\n            if (preOrder) {\n                process(this._nodes[v]);\n            }\n\n            for (const w of this._successors[v]) {\n                visit(w);\n            }\n\n            if (!preOrder) {\n                process(this._nodes[v]);\n            }\n        };\n\n        visit(defined(this._indexByNode.get(root)));\n    }\n\n    public stronglyConnectedComponents(): Graph<ReadonlySet<T>> {\n        const components = stronglyConnectedComponents(this._successors);\n        const componentSuccessors = buildMetaSuccessors(this._successors, components);\n        return new Graph(\n            components.map(ns => setMap(ns, n => this._nodes[n])),\n            false,\n            componentSuccessors\n        );\n    }\n\n    public makeDot(includeNode: (n: T) => boolean, nodeLabel: (n: T) => string): string {\n        const lines: string[] = [];\n        lines.push(\"digraph G {\");\n        lines.push(\"    ordering = out;\");\n        lines.push(\"\");\n\n        for (let i = 0; i < this.size; i++) {\n            const n = this._nodes[i];\n            if (!includeNode(n)) continue;\n            lines.push(`    node${i} [label=\"${nodeLabel(n)}\"];`);\n        }\n\n        for (let i = 0; i < this.size; i++) {\n            if (!includeNode(this._nodes[i])) continue;\n            for (const j of this._successors[i]) {\n                if (!includeNode(this._nodes[j])) continue;\n                lines.push(`    node${i} -> node${j};`);\n            }\n        }\n\n        lines.push(\"}\");\n        lines.push(\"\");\n\n        return lines.join(\"\\n\");\n    }\n}\n","import {\n    addHashCode,\n    areEqual,\n    definedMap,\n    hashCodeOf,\n    iterableFirst,\n    mapMap,\n    mapMergeWithInto,\n    setIntersect,\n    setUnionInto\n} from \"collection-utils\";\n\nimport { type DateTimeRecognizer } from \"../DateTime\";\nimport { assert, defined } from \"../support/Support\";\nimport { type TransformedStringTypeKind } from \"../Type\";\n// eslint-disable-next-line import/no-cycle\nimport { type StringTypeMapping, stringTypeMappingGet } from \"../TypeBuilder\";\n\nimport { TypeAttributeKind } from \"./TypeAttributes\";\n\nexport class StringTypes {\n    public static readonly unrestricted: StringTypes = new StringTypes(undefined, new Set());\n\n    public static fromCase(s: string, count: number): StringTypes {\n        const caseMap: { [name: string]: number } = {};\n        caseMap[s] = count;\n        return new StringTypes(new Map([[s, count] as [string, number]]), new Set());\n    }\n\n    public static fromCases(cases: string[]): StringTypes {\n        const caseMap: { [name: string]: number } = {};\n        for (const s of cases) {\n            caseMap[s] = 1;\n        }\n\n        return new StringTypes(new Map(cases.map(s => [s, 1] as [string, number])), new Set());\n    }\n\n    // undefined means no restrictions\n    public constructor(\n        public readonly cases: ReadonlyMap<string, number> | undefined,\n        public readonly transformations: ReadonlySet<TransformedStringTypeKind>\n    ) {\n        if (cases === undefined) {\n            assert(transformations.size === 0, \"We can't have an unrestricted string that also allows transformations\");\n        }\n    }\n\n    public get isRestricted(): boolean {\n        return this.cases !== undefined;\n    }\n\n    public union(othersArray: StringTypes[], startIndex: number): StringTypes {\n        if (this.cases === undefined) return this;\n\n        const cases = new Map(this.cases);\n        const transformations = new Set(this.transformations);\n\n        for (let i = startIndex; i < othersArray.length; i++) {\n            const other = othersArray[i];\n\n            if (other.cases === undefined) return other;\n            mapMergeWithInto(cases, (x, y) => x + y, other.cases);\n\n            setUnionInto(transformations, other.transformations);\n        }\n\n        return new StringTypes(cases, transformations);\n    }\n\n    public intersect(othersArray: StringTypes[], startIndex: number): StringTypes {\n        let cases = this.cases;\n        let transformations = this.transformations;\n\n        for (let i = startIndex; i < othersArray.length; i++) {\n            const other = othersArray[i];\n\n            if (cases === undefined) {\n                cases = definedMap(other.cases, m => new Map(m));\n            } else if (other.cases !== undefined) {\n                const thisCases = cases;\n                const otherCases = other.cases;\n\n                const intersects = setIntersect(thisCases.keys(), new Set(otherCases.keys()));\n                const entries = intersects.size > 0 ? intersects.entries() : new Set(thisCases.keys()).entries();\n                cases = mapMap(entries, k => {\n                    const thisValue = defined(thisCases.get(k));\n                    const otherValue = otherCases.get(k) ?? Math.min();\n                    return Math.min(thisValue, otherValue);\n                });\n            }\n\n            transformations = setIntersect(transformations, other.transformations);\n        }\n\n        return new StringTypes(cases, transformations);\n    }\n\n    public applyStringTypeMapping(mapping: StringTypeMapping): StringTypes {\n        if (!this.isRestricted) return this;\n\n        const kinds = new Set<TransformedStringTypeKind>();\n        for (const kind of this.transformations) {\n            const mapped = stringTypeMappingGet(mapping, kind);\n            if (mapped === \"string\") return StringTypes.unrestricted;\n            kinds.add(mapped);\n        }\n\n        return new StringTypes(this.cases, new Set(kinds));\n    }\n\n    public equals<T extends StringTypes>(other: T): boolean {\n        if (!(other instanceof StringTypes)) return false;\n        return areEqual(this.cases, other.cases) && areEqual(this.transformations, other.transformations);\n    }\n\n    public hashCode(): number {\n        let h = hashCodeOf(this.cases);\n        h = addHashCode(h, hashCodeOf(this.transformations));\n        return h;\n    }\n\n    public toString(): string {\n        const parts: string[] = [];\n\n        const enumCases = this.cases;\n        if (enumCases === undefined) {\n            parts.push(\"unrestricted\");\n        } else {\n            const firstKey = iterableFirst(enumCases.keys());\n            if (firstKey === undefined) {\n                parts.push(\"enum with no cases\");\n            } else {\n                parts.push(`${enumCases.size.toString()} enums: ${firstKey} (${enumCases.get(firstKey)}), ...`);\n            }\n        }\n\n        return parts.concat(Array.from(this.transformations)).join(\",\");\n    }\n}\n\nclass StringTypesTypeAttributeKind extends TypeAttributeKind<StringTypes> {\n    public constructor() {\n        super(\"stringTypes\");\n    }\n\n    public get inIdentity(): boolean {\n        return true;\n    }\n\n    public requiresUniqueIdentity(st: StringTypes): boolean {\n        return st.cases !== undefined && st.cases.size > 0;\n    }\n\n    public combine(arr: StringTypes[]): StringTypes {\n        assert(arr.length > 0);\n        return arr[0].union(arr, 1);\n    }\n\n    public intersect(arr: StringTypes[]): StringTypes {\n        assert(arr.length > 0);\n        return arr[0].intersect(arr, 1);\n    }\n\n    public makeInferred(_: StringTypes): undefined {\n        return undefined;\n    }\n\n    public stringify(st: StringTypes): string {\n        return st.toString();\n    }\n}\n\nexport const stringTypesTypeAttributeKind: TypeAttributeKind<StringTypes> = new StringTypesTypeAttributeKind();\n\nconst INTEGER_STRING = /^(0|-?[1-9]\\d*)$/;\n// We're restricting numbers to what's representable as 32 bit\n// signed integers, to be on the safe side of most languages.\nconst MIN_INTEGER_STRING = 1 << 31;\nconst MAX_INTEGER_STRING = -(MIN_INTEGER_STRING + 1);\n\nfunction isIntegerString(s: string): boolean {\n    if (INTEGER_STRING.exec(s) === null) {\n        return false;\n    }\n\n    const i = parseInt(s, 10);\n    return i >= MIN_INTEGER_STRING && i <= MAX_INTEGER_STRING;\n}\n\nconst UUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;\n\nfunction isUUID(s: string): boolean {\n    return UUID.exec(s) !== null;\n}\n\n// FIXME: This is obviously not a complete URI regex.  The exclusion of\n// `{}` is a hack to make `github-events.json` work, which contains URLs\n// with those characters which ajv refuses to accept as `uri`.\nconst URI = /^(https?|ftp):\\/\\/[^{}]+$/;\n\nfunction isURI(s: string): boolean {\n    return URI.exec(s) !== null;\n}\n\n/**\n * JSON inference calls this function to figure out whether a given string is to be\n * transformed into a higher level type.  Must return undefined if not, otherwise the\n * type kind of the transformed string type.\n *\n * @param s The string for which to determine the transformed string type kind.\n */\nexport function inferTransformedStringTypeKindForString(\n    s: string,\n    recognizer: DateTimeRecognizer\n): TransformedStringTypeKind | undefined {\n    if (s.length === 0 || !\"0123456789-abcdefth\".includes(s[0])) return undefined;\n\n    if (recognizer.isDate(s)) {\n        return \"date\";\n    } else if (recognizer.isTime(s)) {\n        return \"time\";\n    } else if (recognizer.isDateTime(s)) {\n        return \"date-time\";\n    } else if (isIntegerString(s)) {\n        return \"integer-string\";\n    } else if (s === \"false\" || s === \"true\") {\n        return \"bool-string\";\n    } else if (isUUID(s)) {\n        return \"uuid\";\n    } else if (isURI(s)) {\n        return \"uri\";\n    }\n\n    return undefined;\n}\n","import {\n    EqualityMap,\n    areEqual,\n    definedMap,\n    iterableEvery,\n    mapFilter,\n    mapFind,\n    mapMap,\n    mapSortByKey,\n    setUnionManyInto,\n    withDefault\n} from \"collection-utils\";\n\n// eslint-disable-next-line import/no-cycle\nimport { StringTypes, stringTypesTypeAttributeKind } from \"./attributes/StringTypes\";\nimport {\n    TypeAttributeKind,\n    type TypeAttributes,\n    combineTypeAttributes,\n    emptyTypeAttributes\n} from \"./attributes/TypeAttributes\";\nimport { assert, defined, panic } from \"./support/Support\";\n// eslint-disable-next-line import/no-cycle\nimport {\n    ArrayType,\n    ClassProperty,\n    ClassType,\n    EnumType,\n    IntersectionType,\n    MapType,\n    type MaybeTypeIdentity,\n    ObjectType,\n    type PrimitiveStringTypeKind,\n    PrimitiveType,\n    type PrimitiveTypeKind,\n    type TransformedStringTypeKind,\n    type Type,\n    type TypeIdentity,\n    type TypeKind,\n    UnionType,\n    arrayTypeIdentity,\n    classTypeIdentity,\n    enumTypeIdentity,\n    intersectionTypeIdentity,\n    isPrimitiveStringTypeKind,\n    mapTypeIdentify,\n    primitiveTypeIdentity,\n    transformedStringTypeKinds,\n    unionTypeIdentity\n} from \"./Type\";\nimport { TypeGraph, type TypeRef, assertTypeRefGraph, derefTypeRef, makeTypeRef, typeRefIndex } from \"./TypeGraph\";\n\n// FIXME: Don't infer provenance.  All original types should be present in\n// non-inferred form in the final graph.\nclass ProvenanceTypeAttributeKind extends TypeAttributeKind<Set<number>> {\n    public constructor() {\n        super(\"provenance\");\n    }\n\n    public appliesToTypeKind(_kind: TypeKind): boolean {\n        return true;\n    }\n\n    public combine(arr: Array<Set<number>>): Set<number> {\n        return setUnionManyInto(new Set(), arr);\n    }\n\n    public makeInferred(p: Set<number>): Set<number> {\n        return p;\n    }\n\n    public stringify(p: Set<number>): string {\n        return Array.from(p)\n            .sort()\n            .map(i => i.toString())\n            .join(\",\");\n    }\n}\n\nexport const provenanceTypeAttributeKind: TypeAttributeKind<Set<number>> = new ProvenanceTypeAttributeKind();\n\nexport type StringTypeMapping = ReadonlyMap<TransformedStringTypeKind, PrimitiveStringTypeKind>;\n\nexport function stringTypeMappingGet(stm: StringTypeMapping, kind: TransformedStringTypeKind): PrimitiveStringTypeKind {\n    const mapped = stm.get(kind);\n    if (mapped === undefined) return \"string\";\n    return mapped;\n}\n\nlet noStringTypeMapping: StringTypeMapping | undefined;\n\nexport function getNoStringTypeMapping(): StringTypeMapping {\n    if (noStringTypeMapping === undefined) {\n        noStringTypeMapping = new Map(\n            Array.from(transformedStringTypeKinds).map(\n                k => [k, k] as [TransformedStringTypeKind, PrimitiveStringTypeKind]\n            )\n        );\n    }\n\n    return noStringTypeMapping;\n}\n\nexport class TypeBuilder {\n    public readonly typeGraph: TypeGraph;\n\n    protected readonly topLevels: Map<string, TypeRef> = new Map();\n\n    protected readonly types: Array<Type | undefined> = [];\n\n    private readonly typeAttributes: TypeAttributes[] = [];\n\n    private _addedForwardingIntersection = false;\n\n    public constructor(\n        typeGraphSerial: number,\n        private readonly _stringTypeMapping: StringTypeMapping,\n        public readonly canonicalOrder: boolean,\n        private readonly _allPropertiesOptional: boolean,\n        private readonly _addProvenanceAttributes: boolean,\n        inheritsProvenanceAttributes: boolean\n    ) {\n        assert(\n            !_addProvenanceAttributes || !inheritsProvenanceAttributes,\n            \"We can't both inherit as well as add provenance\"\n        );\n        this.typeGraph = new TypeGraph(this, typeGraphSerial, _addProvenanceAttributes || inheritsProvenanceAttributes);\n    }\n\n    public addTopLevel(name: string, tref: TypeRef): void {\n        // assert(t.typeGraph === this.typeGraph, \"Adding top-level to wrong type graph\");\n        assert(!this.topLevels.has(name), \"Trying to add top-level with existing name\");\n        assert(\n            this.types[typeRefIndex(tref)] !== undefined,\n            \"Trying to add a top-level type that doesn't exist (yet?)\"\n        );\n        this.topLevels.set(name, tref);\n    }\n\n    public reserveTypeRef(): TypeRef {\n        const index = this.types.length;\n        // console.log(`reserving ${index}`);\n        this.types.push(undefined);\n        const tref = makeTypeRef(this.typeGraph, index);\n        const attributes: TypeAttributes = this._addProvenanceAttributes\n            ? provenanceTypeAttributeKind.makeAttributes(new Set([index]))\n            : emptyTypeAttributes;\n        this.typeAttributes.push(attributes);\n        return tref;\n    }\n\n    private assertTypeRefGraph(tref: TypeRef | undefined): void {\n        if (tref === undefined) return;\n        assertTypeRefGraph(tref, this.typeGraph);\n    }\n\n    private assertTypeRefSetGraph(trefs: ReadonlySet<TypeRef> | undefined): void {\n        if (trefs === undefined) return;\n        trefs.forEach(tref => this.assertTypeRefGraph(tref));\n    }\n\n    private filterTypeAttributes(t: Type, attributes: TypeAttributes): TypeAttributes {\n        const filtered = mapFilter(attributes, (_, k) => k.appliesToTypeKind(t.kind));\n        if (attributes.size !== filtered.size) {\n            this.setLostTypeAttributes();\n        }\n\n        return filtered;\n    }\n\n    private commitType(tref: TypeRef, t: Type): void {\n        this.assertTypeRefGraph(tref);\n        const index = typeRefIndex(tref);\n        // const name = names !== undefined ? ` ${names.combinedName}` : \"\";\n        // console.log(`committing ${t.kind}${name} to ${index}`);\n        assert(this.types[index] === undefined, \"A type index was committed twice\");\n        this.types[index] = t;\n        this.typeAttributes[index] = this.filterTypeAttributes(t, this.typeAttributes[index]);\n    }\n\n    protected addType<T extends Type>(\n        forwardingRef: TypeRef | undefined,\n        creator: (tref: TypeRef) => T,\n        attributes: TypeAttributes | undefined\n    ): TypeRef {\n        if (forwardingRef !== undefined) {\n            this.assertTypeRefGraph(forwardingRef);\n            assert(this.types[typeRefIndex(forwardingRef)] === undefined);\n        }\n\n        const tref = forwardingRef ?? this.reserveTypeRef();\n        if (attributes !== undefined) {\n            const index = typeRefIndex(tref);\n            this.typeAttributes[index] = combineTypeAttributes(\"union\", this.typeAttributes[index], attributes);\n        }\n\n        const t = creator(tref);\n        this.commitType(tref, t);\n        return tref;\n    }\n\n    public typeAtIndex(index: number): Type {\n        const maybeType = this.types[index];\n        if (maybeType === undefined) {\n            return panic(\"Trying to deref an undefined type in a type builder\");\n        }\n\n        return maybeType;\n    }\n\n    public atIndex(index: number): [Type, TypeAttributes] {\n        const t = this.typeAtIndex(index);\n        const attribtues = this.typeAttributes[index];\n        return [t, attribtues];\n    }\n\n    public addAttributes(tref: TypeRef, attributes: TypeAttributes): void {\n        this.assertTypeRefGraph(tref);\n        const index = typeRefIndex(tref);\n        const existingAttributes = this.typeAttributes[index];\n        assert(\n            iterableEvery(attributes, ([k, v]) => {\n                if (!k.inIdentity) return true;\n                const existing = existingAttributes.get(k);\n                if (existing === undefined) return false;\n                return areEqual(existing, v);\n            }),\n            \"Can't add different identity type attributes to an existing type\"\n        );\n        const maybeType = this.types[index];\n        if (maybeType !== undefined) {\n            attributes = this.filterTypeAttributes(maybeType, attributes);\n        }\n\n        const nonIdentityAttributes = mapFilter(attributes, (_, k) => !k.inIdentity);\n        this.typeAttributes[index] = combineTypeAttributes(\"union\", existingAttributes, nonIdentityAttributes);\n    }\n\n    public finish(): TypeGraph {\n        this.typeGraph.freeze(this.topLevels, this.types.map(defined), this.typeAttributes);\n        return this.typeGraph;\n    }\n\n    protected addForwardingIntersection(forwardingRef: TypeRef, tref: TypeRef): TypeRef {\n        this.assertTypeRefGraph(tref);\n        this._addedForwardingIntersection = true;\n        return this.addType(forwardingRef, tr => new IntersectionType(tr, this.typeGraph, new Set([tref])), undefined);\n    }\n\n    protected forwardIfNecessary(forwardingRef: TypeRef | undefined, tref: undefined): undefined;\n    protected forwardIfNecessary(forwardingRef: TypeRef | undefined, tref: TypeRef): TypeRef;\n    protected forwardIfNecessary(forwardingRef: TypeRef | undefined, tref: TypeRef | undefined): TypeRef | undefined;\n    protected forwardIfNecessary(forwardingRef: TypeRef | undefined, tref: TypeRef | undefined): TypeRef | undefined {\n        if (tref === undefined) return undefined;\n        if (forwardingRef === undefined) return tref;\n        return this.addForwardingIntersection(forwardingRef, tref);\n    }\n\n    public get didAddForwardingIntersection(): boolean {\n        return this._addedForwardingIntersection;\n    }\n\n    private readonly _typeForIdentity: EqualityMap<TypeIdentity, TypeRef> = new EqualityMap();\n\n    private registerTypeForIdentity(identity: MaybeTypeIdentity, tref: TypeRef): void {\n        if (identity === undefined) return;\n        this._typeForIdentity.set(identity, tref);\n    }\n\n    protected makeIdentity(maker: () => MaybeTypeIdentity): MaybeTypeIdentity {\n        return maker();\n    }\n\n    private getOrAddType(\n        identityMaker: () => MaybeTypeIdentity,\n        creator: (tr: TypeRef) => Type,\n        attributes: TypeAttributes | undefined,\n        forwardingRef: TypeRef | undefined\n    ): TypeRef {\n        const identity = this.makeIdentity(identityMaker);\n        let maybeTypeRef: TypeRef | undefined;\n        if (identity === undefined) {\n            maybeTypeRef = undefined;\n        } else {\n            maybeTypeRef = this._typeForIdentity.get(identity);\n        }\n\n        if (maybeTypeRef !== undefined) {\n            const result = this.forwardIfNecessary(forwardingRef, maybeTypeRef);\n            if (attributes !== undefined) {\n                // We only add the attributes that are not in the identity, since\n                // we found the type based on its identity, i.e. all the identity\n                // attributes must be in there already, and we have a check that\n                // asserts that no identity attributes are added later.\n                this.addAttributes(\n                    result,\n                    mapFilter(attributes, (_, k) => !k.inIdentity)\n                );\n            }\n\n            return result;\n        }\n\n        const tref = this.addType(forwardingRef, creator, attributes);\n        this.registerTypeForIdentity(identity, tref);\n        return tref;\n    }\n\n    private registerType(t: Type): void {\n        this.registerTypeForIdentity(t.identity, t.typeRef);\n    }\n\n    public getPrimitiveType(\n        kind: PrimitiveTypeKind,\n        maybeAttributes?: TypeAttributes,\n        forwardingRef?: TypeRef\n    ): TypeRef {\n        const attributes = withDefault(maybeAttributes, emptyTypeAttributes);\n        // FIXME: Why do date/time types need a StringTypes attribute?\n        // FIXME: Remove this from here and put it into flattenStrings\n        let stringTypes = kind === \"string\" ? undefined : StringTypes.unrestricted;\n        if (isPrimitiveStringTypeKind(kind) && kind !== \"string\") {\n            kind = stringTypeMappingGet(this._stringTypeMapping, kind);\n        }\n\n        if (kind === \"string\") {\n            return this.getStringType(attributes, stringTypes, forwardingRef);\n        }\n\n        return this.getOrAddType(\n            () => primitiveTypeIdentity(kind, attributes),\n            tr => new PrimitiveType(tr, this.typeGraph, kind),\n            attributes,\n            forwardingRef\n        );\n    }\n\n    public getStringType(\n        attributes: TypeAttributes,\n        stringTypes: StringTypes | undefined,\n        forwardingRef?: TypeRef\n    ): TypeRef {\n        const existingStringTypes = mapFind(attributes, (_, k) => k === stringTypesTypeAttributeKind);\n        assert(\n            (stringTypes === undefined) !== (existingStringTypes === undefined),\n            \"Must instantiate string type with one enum case attribute\"\n        );\n        if (existingStringTypes === undefined) {\n            attributes = combineTypeAttributes(\n                \"union\",\n                attributes,\n                stringTypesTypeAttributeKind.makeAttributes(defined(stringTypes))\n            );\n        }\n\n        return this.getOrAddType(\n            () => primitiveTypeIdentity(\"string\", attributes),\n            tr => new PrimitiveType(tr, this.typeGraph, \"string\"),\n            attributes,\n            forwardingRef\n        );\n    }\n\n    public getEnumType(attributes: TypeAttributes, cases: ReadonlySet<string>, forwardingRef?: TypeRef): TypeRef {\n        return this.getOrAddType(\n            () => enumTypeIdentity(attributes, cases),\n            tr => new EnumType(tr, this.typeGraph, cases),\n            attributes,\n            forwardingRef\n        );\n    }\n\n    public makeClassProperty(tref: TypeRef, isOptional: boolean): ClassProperty {\n        return new ClassProperty(tref, this.typeGraph, isOptional);\n    }\n\n    public getUniqueObjectType(\n        attributes: TypeAttributes,\n        properties: ReadonlyMap<string, ClassProperty> | undefined,\n        additionalProperties: TypeRef | undefined,\n        forwardingRef?: TypeRef\n    ): TypeRef {\n        this.assertTypeRefGraph(additionalProperties);\n\n        properties = definedMap(properties, p => this.modifyPropertiesIfNecessary(p));\n        return this.addType(\n            forwardingRef,\n            tref => new ObjectType(tref, this.typeGraph, \"object\", true, properties, additionalProperties),\n            attributes\n        );\n    }\n\n    public getUniqueMapType(forwardingRef?: TypeRef): TypeRef {\n        return this.addType(forwardingRef, tr => new MapType(tr, this.typeGraph, undefined), undefined);\n    }\n\n    public getMapType(attributes: TypeAttributes, values: TypeRef, forwardingRef?: TypeRef): TypeRef {\n        this.assertTypeRefGraph(values);\n\n        return this.getOrAddType(\n            () => mapTypeIdentify(attributes, values),\n            tr => new MapType(tr, this.typeGraph, values),\n            attributes,\n            forwardingRef\n        );\n    }\n\n    public setObjectProperties(\n        ref: TypeRef,\n        properties: ReadonlyMap<string, ClassProperty>,\n        additionalProperties: TypeRef | undefined\n    ): void {\n        this.assertTypeRefGraph(additionalProperties);\n\n        const type = derefTypeRef(ref, this.typeGraph);\n        if (!(type instanceof ObjectType)) {\n            return panic(\"Tried to set properties of non-object type\");\n        }\n\n        type.setProperties(this.modifyPropertiesIfNecessary(properties), additionalProperties);\n        this.registerType(type);\n    }\n\n    public getUniqueArrayType(forwardingRef?: TypeRef): TypeRef {\n        return this.addType(forwardingRef, tr => new ArrayType(tr, this.typeGraph, undefined), undefined);\n    }\n\n    public getArrayType(attributes: TypeAttributes, items: TypeRef, forwardingRef?: TypeRef): TypeRef {\n        this.assertTypeRefGraph(items);\n\n        return this.getOrAddType(\n            () => arrayTypeIdentity(attributes, items),\n            tr => new ArrayType(tr, this.typeGraph, items),\n            attributes,\n            forwardingRef\n        );\n    }\n\n    public setArrayItems(ref: TypeRef, items: TypeRef): void {\n        this.assertTypeRefGraph(items);\n\n        const type = derefTypeRef(ref, this.typeGraph);\n        if (!(type instanceof ArrayType)) {\n            return panic(\"Tried to set items of non-array type\");\n        }\n\n        type.setItems(items);\n        this.registerType(type);\n    }\n\n    public modifyPropertiesIfNecessary(\n        properties: ReadonlyMap<string, ClassProperty>\n    ): ReadonlyMap<string, ClassProperty> {\n        properties.forEach(p => this.assertTypeRefGraph(p.typeRef));\n\n        if (this.canonicalOrder) {\n            properties = mapSortByKey(properties);\n        }\n\n        if (this._allPropertiesOptional) {\n            properties = mapMap(properties, cp => this.makeClassProperty(cp.typeRef, true));\n        }\n\n        return properties;\n    }\n\n    public getClassType(\n        attributes: TypeAttributes,\n        properties: ReadonlyMap<string, ClassProperty>,\n        forwardingRef?: TypeRef\n    ): TypeRef {\n        properties = this.modifyPropertiesIfNecessary(properties);\n        return this.getOrAddType(\n            () => classTypeIdentity(attributes, properties),\n            tr => new ClassType(tr, this.typeGraph, false, properties),\n            attributes,\n            forwardingRef\n        );\n    }\n\n    // FIXME: Maybe just distinguish between this and `getClassType`\n    // via a flag?  That would make `ClassType.map` simpler.\n    public getUniqueClassType(\n        attributes: TypeAttributes,\n        isFixed: boolean,\n        properties: ReadonlyMap<string, ClassProperty> | undefined,\n        forwardingRef?: TypeRef\n    ): TypeRef {\n        properties = definedMap(properties, p => this.modifyPropertiesIfNecessary(p));\n        return this.addType(\n            forwardingRef,\n            tref => new ClassType(tref, this.typeGraph, isFixed, properties),\n            attributes\n        );\n    }\n\n    public getUnionType(attributes: TypeAttributes, members: ReadonlySet<TypeRef>, forwardingRef?: TypeRef): TypeRef {\n        this.assertTypeRefSetGraph(members);\n\n        return this.getOrAddType(\n            () => unionTypeIdentity(attributes, members),\n            tr => new UnionType(tr, this.typeGraph, members),\n            attributes,\n            forwardingRef\n        );\n    }\n\n    // FIXME: why do we sometimes call this with defined members???\n    public getUniqueUnionType(\n        attributes: TypeAttributes,\n        members: ReadonlySet<TypeRef> | undefined,\n        forwardingRef?: TypeRef\n    ): TypeRef {\n        this.assertTypeRefSetGraph(members);\n\n        return this.addType(forwardingRef, tref => new UnionType(tref, this.typeGraph, members), attributes);\n    }\n\n    public getIntersectionType(\n        attributes: TypeAttributes,\n        members: ReadonlySet<TypeRef>,\n        forwardingRef?: TypeRef\n    ): TypeRef {\n        this.assertTypeRefSetGraph(members);\n\n        return this.getOrAddType(\n            () => intersectionTypeIdentity(attributes, members),\n            tr => new IntersectionType(tr, this.typeGraph, members),\n            attributes,\n            forwardingRef\n        );\n    }\n\n    // FIXME: why do we sometimes call this with defined members???\n    public getUniqueIntersectionType(\n        attributes: TypeAttributes,\n        members: ReadonlySet<TypeRef> | undefined,\n        forwardingRef?: TypeRef\n    ): TypeRef {\n        this.assertTypeRefSetGraph(members);\n\n        return this.addType(forwardingRef, tref => new IntersectionType(tref, this.typeGraph, members), attributes);\n    }\n\n    public setSetOperationMembers(ref: TypeRef, members: ReadonlySet<TypeRef>): void {\n        this.assertTypeRefSetGraph(members);\n\n        const type = derefTypeRef(ref, this.typeGraph);\n        if (!(type instanceof UnionType || type instanceof IntersectionType)) {\n            return panic(\"Tried to set members of non-set-operation type\");\n        }\n\n        type.setMembers(members);\n        this.registerType(type);\n    }\n\n    public setLostTypeAttributes(): void {\n        return;\n    }\n}\n","import { EqualityMap, iterableFirst, setFilter, setSortBy, setUnion } from \"collection-utils\";\n\n// eslint-disable-next-line import/no-cycle\nimport { type StringTypes, stringTypesTypeAttributeKind } from \"./attributes/StringTypes\";\nimport {\n    type CombinationKind,\n    type TypeAttributes,\n    combineTypeAttributes,\n    emptyTypeAttributes\n} from \"./attributes/TypeAttributes\";\nimport { assert, assertNever, defined, panic } from \"./support/Support\";\nimport {\n    ArrayType,\n    type ClassProperty,\n    ClassType,\n    EnumType,\n    MapType,\n    ObjectType,\n    type PrimitiveType,\n    type SetOperationType,\n    type Type,\n    UnionType,\n    isPrimitiveStringTypeKind\n} from \"./Type\";\n\nexport function assertIsObject(t: Type): ObjectType {\n    if (t instanceof ObjectType) {\n        return t;\n    }\n\n    return panic(\"Supposed object type is not an object type\");\n}\n\nexport function assertIsClass(t: Type): ClassType {\n    if (!(t instanceof ClassType)) {\n        return panic(\"Supposed class type is not a class type\");\n    }\n\n    return t;\n}\n\nexport function setOperationMembersRecursively<T extends SetOperationType>(\n    setOperations: T | T[],\n    combinationKind: CombinationKind | undefined\n): [ReadonlySet<Type>, TypeAttributes];\nexport function setOperationMembersRecursively<T extends SetOperationType>(\n    oneOrMany: T | T[],\n    combinationKind: CombinationKind | undefined\n): [ReadonlySet<Type>, TypeAttributes] {\n    const setOperations = Array.isArray(oneOrMany) ? oneOrMany : [oneOrMany];\n    const kind = setOperations[0].kind;\n    const includeAny = kind !== \"intersection\";\n    const processedSetOperations = new Set<T>();\n    const members = new Set<Type>();\n    let attributes = emptyTypeAttributes;\n\n    function process(t: Type): void {\n        if (t.kind === kind) {\n            const so = t as T;\n            if (processedSetOperations.has(so)) return;\n            processedSetOperations.add(so);\n            if (combinationKind !== undefined) {\n                attributes = combineTypeAttributes(combinationKind, attributes, t.getAttributes());\n            }\n\n            for (const m of so.members) {\n                process(m);\n            }\n        } else if (includeAny || t.kind !== \"any\") {\n            members.add(t);\n        } else {\n            if (combinationKind !== undefined) {\n                attributes = combineTypeAttributes(combinationKind, attributes, t.getAttributes());\n            }\n        }\n    }\n\n    for (const so of setOperations) {\n        process(so);\n    }\n\n    return [members, attributes];\n}\n\nexport function makeGroupsToFlatten<T extends SetOperationType>(\n    setOperations: Iterable<T>,\n    include: ((members: ReadonlySet<Type>) => boolean) | undefined\n): Type[][] {\n    const typeGroups = new EqualityMap<Set<Type>, Set<Type>>();\n    for (const u of setOperations) {\n        // FIXME: We shouldn't have to make a new set here once we got rid\n        // of immutable.\n        const members = new Set(setOperationMembersRecursively(u, undefined)[0]);\n\n        if (include !== undefined) {\n            if (!include(members)) continue;\n        }\n\n        let maybeSet = typeGroups.get(members);\n        if (maybeSet === undefined) {\n            maybeSet = new Set();\n            if (members.size === 1) {\n                maybeSet.add(defined(iterableFirst(members)));\n            }\n        }\n\n        maybeSet.add(u);\n        typeGroups.set(members, maybeSet);\n    }\n\n    return Array.from(typeGroups.values()).map(ts => Array.from(ts));\n}\n\nexport function combineTypeAttributesOfTypes(combinationKind: CombinationKind, types: Iterable<Type>): TypeAttributes {\n    return combineTypeAttributes(\n        combinationKind,\n        Array.from(types).map(t => t.getAttributes())\n    );\n}\n\nexport function isAnyOrNull(t: Type): boolean {\n    return t.kind === \"any\" || t.kind === \"null\";\n}\n\n// FIXME: We shouldn't have to sort here.  This is just because we're not getting\n// back the right order from JSON Schema, due to the changes the intersection types\n// introduced.\nexport function removeNullFromUnion(\n    t: UnionType,\n    sortBy: boolean | ((t: Type) => string | number) = false\n): [PrimitiveType | null, ReadonlySet<Type>] {\n    function sort(s: ReadonlySet<Type>): ReadonlySet<Type> {\n        if (sortBy === false) return s;\n        if (sortBy === true) return setSortBy(s, m => m.kind);\n        return setSortBy(s, sortBy);\n    }\n\n    const nullType = t.findMember(\"null\");\n    if (nullType === undefined) {\n        return [null, sort(t.members)];\n    }\n\n    return [nullType as PrimitiveType, sort(setFilter(t.members, m => m.kind !== \"null\"))];\n}\n\nexport function removeNullFromType(t: Type): [PrimitiveType | null, ReadonlySet<Type>] {\n    if (t.kind === \"null\") {\n        return [t as PrimitiveType, new Set()];\n    }\n\n    if (!(t instanceof UnionType)) {\n        return [null, new Set([t])];\n    }\n\n    return removeNullFromUnion(t);\n}\n\nexport function nullableFromUnion(t: UnionType): Type | null {\n    const [hasNull, nonNulls] = removeNullFromUnion(t);\n    if (hasNull === null) return null;\n    if (nonNulls.size !== 1) return null;\n    return defined(iterableFirst(nonNulls));\n}\n\nexport function nonNullTypeCases(t: Type): ReadonlySet<Type> {\n    return removeNullFromType(t)[1];\n}\n\nexport function getNullAsOptional(cp: ClassProperty): [boolean, ReadonlySet<Type>] {\n    const [maybeNull, nonNulls] = removeNullFromType(cp.type);\n    if (cp.isOptional) {\n        return [true, nonNulls];\n    }\n\n    return [maybeNull !== null, nonNulls];\n}\n\n// FIXME: Give this an appropriate name, considering that we don't distinguish\n// between named and non-named types anymore.\nexport function isNamedType(t: Type): boolean {\n    return [\"class\", \"union\", \"enum\", \"object\"].includes(t.kind);\n}\n\nexport interface SeparatedNamedTypes {\n    enums: ReadonlySet<EnumType>;\n    objects: ReadonlySet<ObjectType>;\n    unions: ReadonlySet<UnionType>;\n}\n\nexport function separateNamedTypes(types: Iterable<Type>): SeparatedNamedTypes {\n    const objects = setFilter(\n        types,\n        t => t.kind === \"object\" || t.kind === \"class\"\n    ) as Set<ObjectType> as ReadonlySet<ObjectType>;\n    const enums = setFilter(types, t => t instanceof EnumType) as Set<EnumType> as ReadonlySet<EnumType>;\n    const unions = setFilter(types, t => t instanceof UnionType) as Set<UnionType> as ReadonlySet<UnionType>;\n\n    return { objects, enums, unions };\n}\n\nexport function directlyReachableTypes<T>(t: Type, setForType: (t: Type) => ReadonlySet<T> | null): ReadonlySet<T> {\n    const set = setForType(t);\n    if (set !== null) return set;\n    return setUnion(...Array.from(t.getNonAttributeChildren()).map(c => directlyReachableTypes(c, setForType)));\n}\n\nexport function directlyReachableSingleNamedType(type: Type): Type | undefined {\n    const definedTypes = directlyReachableTypes(type, t => {\n        if (\n            (!(t instanceof UnionType) && isNamedType(t)) ||\n            (t instanceof UnionType && nullableFromUnion(t) === null)\n        ) {\n            return new Set([t]);\n        }\n\n        return null;\n    });\n    assert(definedTypes.size <= 1, \"Cannot have more than one defined type per top-level\");\n    return iterableFirst(definedTypes);\n}\n\nexport function stringTypesForType(t: PrimitiveType): StringTypes {\n    assert(t.kind === \"string\", \"Only strings can have string types\");\n    const stringTypes = stringTypesTypeAttributeKind.tryGetInAttributes(t.getAttributes());\n    if (stringTypes === undefined) {\n        return panic(\"All strings must have a string type attribute\");\n    }\n\n    return stringTypes;\n}\n\nexport interface StringTypeMatchers<U> {\n    dateTimeType?: (dateTimeType: PrimitiveType) => U;\n    dateType?: (dateType: PrimitiveType) => U;\n    timeType?: (timeType: PrimitiveType) => U;\n}\n\nexport function matchTypeExhaustive<U>(\n    t: Type,\n    noneType: (noneType: PrimitiveType) => U,\n    anyType: (anyType: PrimitiveType) => U,\n    nullType: (nullType: PrimitiveType) => U,\n    boolType: (boolType: PrimitiveType) => U,\n    integerType: (integerType: PrimitiveType) => U,\n    doubleType: (doubleType: PrimitiveType) => U,\n    stringType: (stringType: PrimitiveType) => U,\n    arrayType: (arrayType: ArrayType) => U,\n    classType: (classType: ClassType) => U,\n    mapType: (mapType: MapType) => U,\n    objectType: (objectType: ObjectType) => U,\n    enumType: (enumType: EnumType) => U,\n    unionType: (unionType: UnionType) => U,\n    transformedStringType: (transformedStringType: PrimitiveType) => U\n): U {\n    if (t.isPrimitive()) {\n        if (isPrimitiveStringTypeKind(t.kind)) {\n            if (t.kind === \"string\") {\n                return stringType(t);\n            }\n\n            return transformedStringType(t);\n        }\n\n        const kind = t.kind;\n        const f = {\n            none: noneType,\n            any: anyType,\n            null: nullType,\n            bool: boolType,\n            integer: integerType,\n            double: doubleType\n        }[kind];\n        if (f !== undefined) return f(t);\n        return assertNever(f);\n    } else if (t instanceof ArrayType) return arrayType(t);\n    else if (t instanceof ClassType) return classType(t);\n    else if (t instanceof MapType) return mapType(t);\n    else if (t instanceof ObjectType) return objectType(t);\n    else if (t instanceof EnumType) return enumType(t);\n    else if (t instanceof UnionType) return unionType(t);\n    return panic(`Unknown type ${t.kind}`);\n}\n\nexport function matchType<U>(\n    type: Type,\n    anyType: (anyType: PrimitiveType) => U,\n    nullType: (nullType: PrimitiveType) => U,\n    boolType: (boolType: PrimitiveType) => U,\n    integerType: (integerType: PrimitiveType) => U,\n    doubleType: (doubleType: PrimitiveType) => U,\n    stringType: (stringType: PrimitiveType) => U,\n    arrayType: (arrayType: ArrayType) => U,\n    classType: (classType: ClassType) => U,\n    mapType: (mapType: MapType) => U,\n    enumType: (enumType: EnumType) => U,\n    unionType: (unionType: UnionType) => U,\n    transformedStringType?: (transformedStringType: PrimitiveType) => U\n): U {\n    function typeNotSupported(t: Type): never {\n        return panic(`Unsupported type ${t.kind} in non-exhaustive match`);\n    }\n\n    return matchTypeExhaustive(\n        type,\n        typeNotSupported,\n        anyType,\n        nullType,\n        boolType,\n        integerType,\n        doubleType,\n        stringType,\n        arrayType,\n        classType,\n        mapType,\n        typeNotSupported,\n        enumType,\n        unionType,\n        transformedStringType ?? typeNotSupported\n    );\n}\n\nexport function matchCompoundType(\n    t: Type,\n    arrayType: (arrayType: ArrayType) => void,\n    classType: (classType: ClassType) => void,\n    mapType: (mapType: MapType) => void,\n    objectType: (objectType: ObjectType) => void,\n    unionType: (unionType: UnionType) => void\n): void {\n    function ignore<T extends Type>(_: T): void {\n        return;\n    }\n\n    matchTypeExhaustive(\n        t,\n        ignore,\n        ignore,\n        ignore,\n        ignore,\n        ignore,\n        ignore,\n        ignore,\n        arrayType,\n        classType,\n        mapType,\n        objectType,\n        ignore,\n        unionType,\n        ignore\n    );\n}\n","import { EqualityMap, mapMap } from \"collection-utils\";\n\nimport { type TypeAttributes, combineTypeAttributes, emptyTypeAttributes } from \"./attributes/TypeAttributes\";\nimport { assert, indentationString, panic } from \"./support/Support\";\nimport { type ClassProperty, type MaybeTypeIdentity, type PrimitiveTypeKind, type Type } from \"./Type\";\n// eslint-disable-next-line import/no-cycle\nimport { type StringTypeMapping, TypeBuilder } from \"./TypeBuilder\";\nimport {\n    type TypeGraph,\n    type TypeRef,\n    assertTypeRefGraph,\n    derefTypeRef,\n    isTypeRef,\n    typeAndAttributesForTypeRef,\n    typeRefIndex\n} from \"./TypeGraph\";\nimport { combineTypeAttributesOfTypes } from \"./TypeUtils\";\n\nexport interface TypeLookerUp {\n    lookupTypeRefs: (typeRefs: TypeRef[], forwardingRef?: TypeRef) => TypeRef | undefined;\n    reconstituteTypeRef: (typeRef: TypeRef, attributes?: TypeAttributes, forwardingRef?: TypeRef) => TypeRef;\n}\n\nexport class TypeReconstituter<TBuilder extends BaseGraphRewriteBuilder> {\n    private _wasUsed = false;\n\n    private _typeRef: TypeRef | undefined = undefined;\n\n    public constructor(\n        private readonly _typeBuilder: TBuilder,\n        private readonly _makeClassUnique: boolean,\n        private readonly _typeAttributes: TypeAttributes,\n        private readonly _forwardingRef: TypeRef | undefined,\n        private readonly _register: (tref: TypeRef) => void\n    ) {}\n\n    private builderForNewType(): TBuilder {\n        assert(!this._wasUsed, \"TypeReconstituter used more than once\");\n        this._wasUsed = true;\n        return this._typeBuilder;\n    }\n\n    private builderForSetting(): TBuilder {\n        assert(this._wasUsed && this._typeRef !== undefined, \"Can't set type members before constructing a type\");\n        return this._typeBuilder;\n    }\n\n    public getResult(): TypeRef {\n        if (this._typeRef === undefined) {\n            return panic(\"Type was not reconstituted\");\n        }\n\n        return this._typeRef;\n    }\n\n    // FIXME: Do registration automatically.\n    private register(tref: TypeRef): void {\n        assert(this._typeRef === undefined, \"Cannot register a type twice\");\n        this._typeRef = tref;\n        this._register(tref);\n    }\n\n    private registerAndAddAttributes(tref: TypeRef): void {\n        this._typeBuilder.addAttributes(tref, this._typeAttributes);\n        this.register(tref);\n    }\n\n    public lookup(tref: TypeRef): TypeRef | undefined;\n    public lookup(trefs: Iterable<TypeRef>): readonly TypeRef[] | undefined;\n    public lookup(trefs: TypeRef | Iterable<TypeRef>): TypeRef | readonly TypeRef[] | undefined {\n        assert(!this._wasUsed, \"Cannot lookup constituents after building type\");\n        if (isTypeRef(trefs)) {\n            return this._typeBuilder.lookupTypeRefs([trefs], undefined, false);\n        } else {\n            const maybeRefs = Array.from(trefs).map(tref => this._typeBuilder.lookupTypeRefs([tref], undefined, false));\n            if (maybeRefs.some(tref => tref === undefined)) return undefined;\n            return maybeRefs as readonly TypeRef[];\n        }\n    }\n\n    public lookupMap<K>(trefs: ReadonlyMap<K, TypeRef>): ReadonlyMap<K, TypeRef> | undefined {\n        const resultValues = this.lookup(trefs.values());\n        if (resultValues === undefined) return undefined;\n        assert(resultValues.length === trefs.size, \"Didn't get back the correct number of types\");\n        const result = new Map<K, TypeRef>();\n        let i = 0;\n        for (const k of trefs.keys()) {\n            result.set(k, resultValues[i]);\n            i += 1;\n        }\n\n        return result;\n    }\n\n    public reconstitute(tref: TypeRef): TypeRef;\n    public reconstitute(trefs: Iterable<TypeRef>): readonly TypeRef[];\n    public reconstitute(trefs: TypeRef | Iterable<TypeRef>): TypeRef | readonly TypeRef[] {\n        assert(this._wasUsed, \"Cannot reconstitute constituents before building type\");\n        if (isTypeRef(trefs)) {\n            return this._typeBuilder.reconstituteTypeRef(trefs);\n        } else {\n            return Array.from(trefs).map(tref => this._typeBuilder.reconstituteTypeRef(tref));\n        }\n    }\n\n    public reconstituteMap<K>(trefs: ReadonlyMap<K, TypeRef>): ReadonlyMap<K, TypeRef> {\n        return mapMap(trefs, tref => this._typeBuilder.reconstituteTypeRef(tref));\n    }\n\n    public getPrimitiveType(kind: PrimitiveTypeKind): void {\n        this.register(this.builderForNewType().getPrimitiveType(kind, this._typeAttributes, this._forwardingRef));\n    }\n\n    public getEnumType(cases: ReadonlySet<string>): void {\n        this.register(this.builderForNewType().getEnumType(this._typeAttributes, cases, this._forwardingRef));\n    }\n\n    public getUniqueMapType(): void {\n        this.registerAndAddAttributes(this.builderForNewType().getUniqueMapType(this._forwardingRef));\n    }\n\n    public getMapType(values: TypeRef): void {\n        this.register(this.builderForNewType().getMapType(this._typeAttributes, values, this._forwardingRef));\n    }\n\n    public getUniqueArrayType(): void {\n        this.registerAndAddAttributes(this.builderForNewType().getUniqueArrayType(this._forwardingRef));\n    }\n\n    public getArrayType(items: TypeRef): void {\n        this.register(this.builderForNewType().getArrayType(this._typeAttributes, items, this._forwardingRef));\n    }\n\n    public setArrayItems(items: TypeRef): void {\n        this.builderForSetting().setArrayItems(this.getResult(), items);\n    }\n\n    public makeClassProperty(tref: TypeRef, isOptional: boolean): ClassProperty {\n        return this._typeBuilder.makeClassProperty(tref, isOptional);\n    }\n\n    public getObjectType(\n        properties: ReadonlyMap<string, ClassProperty>,\n        additionalProperties: TypeRef | undefined\n    ): void {\n        this.register(\n            this.builderForNewType().getUniqueObjectType(\n                this._typeAttributes,\n                properties,\n                additionalProperties,\n                this._forwardingRef\n            )\n        );\n    }\n\n    public getUniqueObjectType(\n        properties: ReadonlyMap<string, ClassProperty> | undefined,\n        additionalProperties: TypeRef | undefined\n    ): void {\n        this.register(\n            this.builderForNewType().getUniqueObjectType(\n                this._typeAttributes,\n                properties,\n                additionalProperties,\n                this._forwardingRef\n            )\n        );\n    }\n\n    public getClassType(properties: ReadonlyMap<string, ClassProperty>): void {\n        if (this._makeClassUnique) {\n            this.getUniqueClassType(false, properties);\n            return;\n        }\n\n        this.register(this.builderForNewType().getClassType(this._typeAttributes, properties, this._forwardingRef));\n    }\n\n    public getUniqueClassType(isFixed: boolean, properties: ReadonlyMap<string, ClassProperty> | undefined): void {\n        this.register(\n            this.builderForNewType().getUniqueClassType(this._typeAttributes, isFixed, properties, this._forwardingRef)\n        );\n    }\n\n    public setObjectProperties(\n        properties: ReadonlyMap<string, ClassProperty>,\n        additionalProperties: TypeRef | undefined\n    ): void {\n        this.builderForSetting().setObjectProperties(this.getResult(), properties, additionalProperties);\n    }\n\n    public getUnionType(members: ReadonlySet<TypeRef>): void {\n        this.register(this.builderForNewType().getUnionType(this._typeAttributes, members, this._forwardingRef));\n    }\n\n    public getUniqueUnionType(): void {\n        this.register(\n            this.builderForNewType().getUniqueUnionType(this._typeAttributes, undefined, this._forwardingRef)\n        );\n    }\n\n    public getIntersectionType(members: ReadonlySet<TypeRef>): void {\n        this.register(this.builderForNewType().getIntersectionType(this._typeAttributes, members, this._forwardingRef));\n    }\n\n    public getUniqueIntersectionType(members?: ReadonlySet<TypeRef>): void {\n        this.register(\n            this.builderForNewType().getUniqueIntersectionType(this._typeAttributes, members, this._forwardingRef)\n        );\n    }\n\n    public setSetOperationMembers(members: ReadonlySet<TypeRef>): void {\n        this.builderForSetting().setSetOperationMembers(this.getResult(), members);\n    }\n}\n\nexport abstract class BaseGraphRewriteBuilder extends TypeBuilder implements TypeLookerUp {\n    protected readonly reconstitutedTypes: Map<number, TypeRef> = new Map();\n\n    private _lostTypeAttributes = false;\n\n    private _printIndent = 0;\n\n    public constructor(\n        public readonly originalGraph: TypeGraph,\n        stringTypeMapping: StringTypeMapping,\n        alphabetizeProperties: boolean,\n        graphHasProvenanceAttributes: boolean,\n        protected readonly debugPrint: boolean\n    ) {\n        super(\n            originalGraph.serial + 1,\n            stringTypeMapping,\n            alphabetizeProperties,\n            false,\n            false,\n            graphHasProvenanceAttributes\n        );\n    }\n\n    public withForwardingRef(\n        maybeForwardingRef: TypeRef | undefined,\n        typeCreator: (forwardingRef: TypeRef) => TypeRef\n    ): TypeRef {\n        if (maybeForwardingRef !== undefined) {\n            return typeCreator(maybeForwardingRef);\n        }\n\n        const forwardingRef = this.reserveTypeRef();\n        const actualRef = typeCreator(forwardingRef);\n        assert(actualRef === forwardingRef, \"Type creator didn't return its forwarding ref\");\n        return actualRef;\n    }\n\n    public reconstituteType(t: Type, attributes?: TypeAttributes, forwardingRef?: TypeRef): TypeRef {\n        return this.reconstituteTypeRef(t.typeRef, attributes, forwardingRef);\n    }\n\n    public abstract lookupTypeRefs(\n        typeRefs: TypeRef[],\n        forwardingRef?: TypeRef,\n        replaceSet?: boolean\n    ): TypeRef | undefined;\n    protected abstract forceReconstituteTypeRef(\n        originalRef: TypeRef,\n        attributes?: TypeAttributes,\n        maybeForwardingRef?: TypeRef\n    ): TypeRef;\n\n    public reconstituteTypeRef(\n        originalRef: TypeRef,\n        attributes?: TypeAttributes,\n        maybeForwardingRef?: TypeRef\n    ): TypeRef {\n        const maybeRef = this.lookupTypeRefs([originalRef], maybeForwardingRef);\n        if (maybeRef !== undefined) {\n            if (attributes !== undefined) {\n                this.addAttributes(maybeRef, attributes);\n            }\n\n            return maybeRef;\n        }\n\n        return this.forceReconstituteTypeRef(originalRef, attributes, maybeForwardingRef);\n    }\n\n    public reconstituteTypeAttributes(attributes: TypeAttributes): TypeAttributes {\n        return mapMap(attributes, (v, a) => a.reconstitute(this, v));\n    }\n\n    protected assertTypeRefsToReconstitute(typeRefs: TypeRef[], forwardingRef?: TypeRef): void {\n        assert(typeRefs.length > 0, \"Must have at least one type to reconstitute\");\n        for (const originalRef of typeRefs) {\n            assertTypeRefGraph(originalRef, this.originalGraph);\n        }\n\n        if (forwardingRef !== undefined) {\n            assertTypeRefGraph(forwardingRef, this.typeGraph);\n        }\n    }\n\n    protected changeDebugPrintIndent(delta: number): void {\n        this._printIndent += delta;\n    }\n\n    protected get debugPrintIndentation(): string {\n        return indentationString(this._printIndent);\n    }\n\n    public finish(): TypeGraph {\n        for (const [name, t] of this.originalGraph.topLevels) {\n            this.addTopLevel(name, this.reconstituteType(t));\n        }\n\n        return super.finish();\n    }\n\n    public setLostTypeAttributes(): void {\n        this._lostTypeAttributes = true;\n    }\n\n    public get lostTypeAttributes(): boolean {\n        return this._lostTypeAttributes;\n    }\n}\n\nexport class GraphRemapBuilder extends BaseGraphRewriteBuilder {\n    private readonly _attributeSources: Map<Type, Type[]> = new Map();\n\n    public constructor(\n        originalGraph: TypeGraph,\n        stringTypeMapping: StringTypeMapping,\n        alphabetizeProperties: boolean,\n        graphHasProvenanceAttributes: boolean,\n        private readonly _map: ReadonlyMap<Type, Type>,\n        debugPrintRemapping: boolean\n    ) {\n        super(\n            originalGraph,\n            stringTypeMapping,\n            alphabetizeProperties,\n            graphHasProvenanceAttributes,\n            debugPrintRemapping\n        );\n\n        for (const [source, target] of _map) {\n            let maybeSources = this._attributeSources.get(target);\n            if (maybeSources === undefined) {\n                maybeSources = [target];\n                this._attributeSources.set(target, maybeSources);\n            }\n\n            maybeSources.push(source);\n        }\n    }\n\n    protected makeIdentity(_maker: () => MaybeTypeIdentity): MaybeTypeIdentity {\n        return undefined;\n    }\n\n    private getMapTarget(tref: TypeRef): TypeRef {\n        const maybeType = this._map.get(derefTypeRef(tref, this.originalGraph));\n        if (maybeType === undefined) return tref;\n        assert(this._map.get(maybeType) === undefined, \"We have a type that's remapped to a remapped type\");\n        return maybeType.typeRef;\n    }\n\n    protected addForwardingIntersection(_forwardingRef: TypeRef, _tref: TypeRef): TypeRef {\n        return panic(\"We can't add forwarding intersections when we're removing forwarding intersections\");\n    }\n\n    public lookupTypeRefs(typeRefs: TypeRef[], forwardingRef?: TypeRef): TypeRef | undefined {\n        assert(forwardingRef === undefined, \"We can't have a forwarding ref when we remap\");\n\n        this.assertTypeRefsToReconstitute(typeRefs, forwardingRef);\n\n        const first = this.reconstitutedTypes.get(typeRefIndex(this.getMapTarget(typeRefs[0])));\n        if (first === undefined) return undefined;\n\n        for (let i = 1; i < typeRefs.length; i++) {\n            const other = this.reconstitutedTypes.get(typeRefIndex(this.getMapTarget(typeRefs[i])));\n            if (first !== other) return undefined;\n        }\n\n        return first;\n    }\n\n    protected forceReconstituteTypeRef(\n        originalRef: TypeRef,\n        attributes?: TypeAttributes,\n        maybeForwardingRef?: TypeRef\n    ): TypeRef {\n        originalRef = this.getMapTarget(originalRef);\n\n        const index = typeRefIndex(originalRef);\n        assert(this.reconstitutedTypes.get(index) === undefined, \"Type has already been reconstituted\");\n\n        assert(maybeForwardingRef === undefined, \"We can't have a forwarding ref when we remap\");\n\n        return this.withForwardingRef(undefined, forwardingRef => {\n            this.reconstitutedTypes.set(index, forwardingRef);\n\n            if (this.debugPrint) {\n                console.log(`${this.debugPrintIndentation}reconstituting ${index} as ${typeRefIndex(forwardingRef)}`);\n                this.changeDebugPrintIndent(1);\n            }\n\n            const [originalType, originalAttributes] = typeAndAttributesForTypeRef(originalRef, this.originalGraph);\n\n            const attributeSources = this._attributeSources.get(originalType);\n            if (attributes === undefined) {\n                attributes = emptyTypeAttributes;\n            }\n\n            if (attributeSources === undefined) {\n                attributes = combineTypeAttributes(\n                    \"union\",\n                    attributes,\n                    this.reconstituteTypeAttributes(originalAttributes)\n                );\n            } else {\n                attributes = combineTypeAttributes(\n                    \"union\",\n                    attributes,\n                    this.reconstituteTypeAttributes(combineTypeAttributesOfTypes(\"union\", attributeSources))\n                );\n            }\n\n            const newAttributes = attributes;\n\n            const reconstituter = new TypeReconstituter(\n                this,\n                this.canonicalOrder,\n                newAttributes,\n                forwardingRef,\n                tref => {\n                    assert(tref === forwardingRef, \"Reconstituted type as a different ref\");\n                    if (this.debugPrint) {\n                        this.changeDebugPrintIndent(-1);\n                        console.log(`${this.debugPrintIndentation}reconstituted ${index} as ${typeRefIndex(tref)}`);\n                    }\n                }\n            );\n            originalType.reconstitute(reconstituter, this.canonicalOrder);\n            return reconstituter.getResult();\n        });\n    }\n}\n\nexport class GraphRewriteBuilder<T extends Type> extends BaseGraphRewriteBuilder {\n    private readonly _setsToReplaceByMember: Map<number, Set<T>>;\n\n    private readonly _reconstitutedUnions: EqualityMap<Set<TypeRef>, TypeRef> = new EqualityMap();\n\n    public constructor(\n        originalGraph: TypeGraph,\n        stringTypeMapping: StringTypeMapping,\n        alphabetizeProperties: boolean,\n        graphHasProvenanceAttributes: boolean,\n        setsToReplace: T[][],\n        debugPrintReconstitution: boolean,\n        private readonly _replacer: (\n            typesToReplace: ReadonlySet<T>,\n            builder: GraphRewriteBuilder<T>,\n            forwardingRef: TypeRef\n        ) => TypeRef\n    ) {\n        super(\n            originalGraph,\n            stringTypeMapping,\n            alphabetizeProperties,\n            graphHasProvenanceAttributes,\n            debugPrintReconstitution\n        );\n\n        this._setsToReplaceByMember = new Map();\n        for (const types of setsToReplace) {\n            const set = new Set(types);\n            for (const t of set) {\n                const index = t.index;\n                assert(!this._setsToReplaceByMember.has(index), \"A type is member of more than one set to be replaced\");\n                this._setsToReplaceByMember.set(index, set);\n            }\n        }\n    }\n\n    public registerUnion(typeRefs: TypeRef[], reconstituted: TypeRef): void {\n        const set = new Set(typeRefs);\n        assert(!this._reconstitutedUnions.has(set), \"Cannot register reconstituted set twice\");\n        this._reconstitutedUnions.set(set, reconstituted);\n    }\n\n    private replaceSet(typesToReplace: ReadonlySet<T>, maybeForwardingRef: TypeRef | undefined): TypeRef {\n        return this.withForwardingRef(maybeForwardingRef, forwardingRef => {\n            if (this.debugPrint) {\n                console.log(\n                    `${this.debugPrintIndentation}replacing set ${Array.from(typesToReplace)\n                        .map(t => t.index.toString())\n                        .join(\",\")} as ${typeRefIndex(forwardingRef)}`\n                );\n                this.changeDebugPrintIndent(1);\n            }\n\n            for (const t of typesToReplace) {\n                const originalRef = t.typeRef;\n                const index = typeRefIndex(originalRef);\n                this.reconstitutedTypes.set(index, forwardingRef);\n                this._setsToReplaceByMember.delete(index);\n            }\n\n            const result = this._replacer(typesToReplace, this, forwardingRef);\n            assert(result === forwardingRef, \"The forwarding ref got lost when replacing\");\n\n            if (this.debugPrint) {\n                this.changeDebugPrintIndent(-1);\n                console.log(\n                    `${this.debugPrintIndentation}replaced set ${Array.from(typesToReplace)\n                        .map(t => t.index.toString())\n                        .join(\",\")} as ${typeRefIndex(forwardingRef)}`\n                );\n            }\n\n            return result;\n        });\n    }\n\n    protected forceReconstituteTypeRef(\n        originalRef: TypeRef,\n        attributes?: TypeAttributes,\n        maybeForwardingRef?: TypeRef\n    ): TypeRef {\n        const [originalType, originalAttributes] = typeAndAttributesForTypeRef(originalRef, this.originalGraph);\n        const index = typeRefIndex(originalRef);\n\n        if (this.debugPrint) {\n            console.log(`${this.debugPrintIndentation}reconstituting ${index}`);\n            this.changeDebugPrintIndent(1);\n        }\n\n        if (attributes === undefined) {\n            attributes = this.reconstituteTypeAttributes(originalAttributes);\n        } else {\n            attributes = combineTypeAttributes(\n                \"union\",\n                attributes,\n                this.reconstituteTypeAttributes(originalAttributes)\n            );\n        }\n\n        const reconstituter = new TypeReconstituter(this, this.canonicalOrder, attributes, maybeForwardingRef, tref => {\n            if (this.debugPrint) {\n                this.changeDebugPrintIndent(-1);\n                console.log(`${this.debugPrintIndentation}reconstituted ${index} as ${typeRefIndex(tref)}`);\n            }\n\n            if (maybeForwardingRef !== undefined) {\n                assert(tref === maybeForwardingRef, \"We didn't pass the forwarding ref\");\n            }\n\n            const alreadyReconstitutedType = this.reconstitutedTypes.get(index);\n            if (alreadyReconstitutedType === undefined) {\n                this.reconstitutedTypes.set(index, tref);\n            } else {\n                assert(tref === alreadyReconstitutedType, \"We reconstituted a type twice differently\");\n            }\n        });\n        originalType.reconstitute(reconstituter, this.canonicalOrder);\n        return reconstituter.getResult();\n    }\n\n    /*\n     public reconstituteTypeUnmodified(originalType: Type): TypeRef {\n        const reconstituter = new TypeReconstituter(\n            this,\n            this.alphabetizeProperties,\n            emptyTypeAttributes,\n            undefined,\n            () => {}\n        );\n        originalType.reconstitute(reconstituter);\n        return reconstituter.getResult();\n    }\n    */\n\n    // If the union of these type refs have been, or are supposed to be, reconstituted to\n    // one target type, return it.  Otherwise return undefined.\n    public lookupTypeRefs(typeRefs: TypeRef[], forwardingRef?: TypeRef, replaceSet = true): TypeRef | undefined {\n        this.assertTypeRefsToReconstitute(typeRefs, forwardingRef);\n\n        // Check whether we have already reconstituted them.  That means ensuring\n        // that they all have the same target type.\n        let maybeRef = this.reconstitutedTypes.get(typeRefIndex(typeRefs[0]));\n        if (maybeRef !== undefined && maybeRef !== forwardingRef) {\n            let allEqual = true;\n            for (let i = 1; i < typeRefs.length; i++) {\n                if (this.reconstitutedTypes.get(typeRefIndex(typeRefs[i])) !== maybeRef) {\n                    allEqual = false;\n                    break;\n                }\n            }\n\n            if (allEqual) {\n                return this.forwardIfNecessary(forwardingRef, maybeRef);\n            }\n        }\n\n        // Has this been reconstituted as a set?\n        maybeRef = this._reconstitutedUnions.get(new Set(typeRefs));\n        if (maybeRef !== undefined && maybeRef !== forwardingRef) {\n            return this.forwardIfNecessary(forwardingRef, maybeRef);\n        }\n\n        // Is this set requested to be replaced?  If not, we're out of options.\n        const maybeSet = this._setsToReplaceByMember.get(typeRefIndex(typeRefs[0]));\n        if (maybeSet === undefined) {\n            return undefined;\n        }\n\n        for (let i = 1; i < typeRefs.length; i++) {\n            if (this._setsToReplaceByMember.get(typeRefIndex(typeRefs[i])) !== maybeSet) {\n                return undefined;\n            }\n        }\n\n        // Yes, this set is requested to be replaced, so do it.\n        if (!replaceSet) return undefined;\n        return this.replaceSet(maybeSet, forwardingRef);\n    }\n}\n","import { iterableFirst, mapMap, mapSome, setFilter, setMap, setSubtract, setUnionManyInto } from \"collection-utils\";\n\nimport { type TypeAttributeKind, type TypeAttributes, emptyTypeAttributes } from \"./attributes/TypeAttributes\";\nimport { TypeNames, namesTypeAttributeKind } from \"./attributes/TypeNames\";\nimport { Graph } from \"./Graph\";\n// eslint-disable-next-line import/no-cycle\nimport { type BaseGraphRewriteBuilder, GraphRemapBuilder, GraphRewriteBuilder } from \"./GraphRewriting\";\nimport { messageError } from \"./Messages\";\nimport { assert, defined, mustNotHappen, panic } from \"./support/Support\";\n// eslint-disable-next-line import/no-cycle\nimport { ClassType, IntersectionType, type Type, UnionType } from \"./Type\";\n// eslint-disable-next-line import/no-cycle\nimport {\n    type StringTypeMapping,\n    type TypeBuilder,\n    getNoStringTypeMapping,\n    provenanceTypeAttributeKind\n} from \"./TypeBuilder\";\nimport { type SeparatedNamedTypes, combineTypeAttributesOfTypes, isNamedType, separateNamedTypes } from \"./TypeUtils\";\n\nexport type TypeRef = number;\n\nconst indexBits = 26;\nconst indexMask = (1 << indexBits) - 1;\nconst serialBits = 31 - indexBits;\nconst serialMask = (1 << serialBits) - 1;\n\nexport function isTypeRef(x: unknown): x is TypeRef {\n    return typeof x === \"number\";\n}\n\nexport function makeTypeRef(graph: TypeGraph, index: number): TypeRef {\n    assert(index <= indexMask, \"Too many types in graph\");\n    return ((graph.serial & serialMask) << indexBits) | index;\n}\n\nexport function typeRefIndex(tref: TypeRef): number {\n    return tref & indexMask;\n}\n\nexport function assertTypeRefGraph(tref: TypeRef, graph: TypeGraph): void {\n    assert(\n        ((tref >> indexBits) & serialMask) === (graph.serial & serialMask),\n        \"Mixing the wrong type reference and graph\"\n    );\n}\n\nfunction getGraph(graphOrBuilder: TypeGraph | BaseGraphRewriteBuilder): TypeGraph {\n    if (graphOrBuilder instanceof TypeGraph) return graphOrBuilder;\n    return graphOrBuilder.originalGraph;\n}\n\nexport function derefTypeRef(tref: TypeRef, graphOrBuilder: TypeGraph | BaseGraphRewriteBuilder): Type {\n    const graph = getGraph(graphOrBuilder);\n    assertTypeRefGraph(tref, graph);\n    return graph.typeAtIndex(typeRefIndex(tref));\n}\n\nexport function attributesForTypeRef(\n    tref: TypeRef,\n    graphOrBuilder: TypeGraph | BaseGraphRewriteBuilder\n): TypeAttributes {\n    const graph = getGraph(graphOrBuilder);\n    assertTypeRefGraph(tref, graph);\n    return graph.atIndex(typeRefIndex(tref))[1];\n}\n\nexport function typeAndAttributesForTypeRef(\n    tref: TypeRef,\n    graphOrBuilder: TypeGraph | BaseGraphRewriteBuilder\n): [Type, TypeAttributes] {\n    const graph = getGraph(graphOrBuilder);\n    assertTypeRefGraph(tref, graph);\n    return graph.atIndex(typeRefIndex(tref));\n}\n\nexport class TypeAttributeStore {\n    private readonly _topLevelValues: Map<string, TypeAttributes> = new Map();\n\n    public constructor(\n        private readonly _typeGraph: TypeGraph,\n        private _values: Array<TypeAttributes | undefined>\n    ) {}\n\n    private getTypeIndex(t: Type): number {\n        const tref = t.typeRef;\n        assertTypeRefGraph(tref, this._typeGraph);\n        return typeRefIndex(tref);\n    }\n\n    public attributesForType(t: Type): TypeAttributes {\n        const index = this.getTypeIndex(t);\n        const maybeAttributes = this._values[index];\n        if (maybeAttributes !== undefined) {\n            return maybeAttributes;\n        }\n\n        return emptyTypeAttributes;\n    }\n\n    public attributesForTopLevel(name: string): TypeAttributes {\n        const maybeAttributes = this._topLevelValues.get(name);\n        if (maybeAttributes !== undefined) {\n            return maybeAttributes;\n        }\n\n        return emptyTypeAttributes;\n    }\n\n    public setInMap<T>(attributes: TypeAttributes, kind: TypeAttributeKind<T>, value: T): TypeAttributes {\n        // FIXME: This is potentially super slow\n        return new Map(attributes).set(kind, value);\n    }\n\n    public set<T>(kind: TypeAttributeKind<T>, t: Type, value: T): void {\n        const index = this.getTypeIndex(t);\n        while (index >= this._values.length) {\n            this._values.push(undefined);\n        }\n\n        this._values[index] = this.setInMap(this.attributesForType(t), kind, value);\n    }\n\n    public setForTopLevel<T>(kind: TypeAttributeKind<T>, topLevelName: string, value: T): void {\n        this._topLevelValues.set(topLevelName, this.setInMap(this.attributesForTopLevel(topLevelName), kind, value));\n    }\n\n    public tryGetInMap<T>(attributes: TypeAttributes, kind: TypeAttributeKind<T>): T | undefined {\n        return attributes.get(kind);\n    }\n\n    public tryGet<T>(kind: TypeAttributeKind<T>, t: Type): T | undefined {\n        return this.tryGetInMap(this.attributesForType(t), kind);\n    }\n\n    public tryGetForTopLevel<T>(kind: TypeAttributeKind<T>, topLevelName: string): T | undefined {\n        return this.tryGetInMap(this.attributesForTopLevel(topLevelName), kind);\n    }\n}\n\nexport class TypeAttributeStoreView<T> {\n    public constructor(\n        private readonly _attributeStore: TypeAttributeStore,\n        private readonly _definition: TypeAttributeKind<T>\n    ) {}\n\n    public set(t: Type, value: T): void {\n        this._attributeStore.set(this._definition, t, value);\n    }\n\n    public setForTopLevel(name: string, value: T): void {\n        this._attributeStore.setForTopLevel(this._definition, name, value);\n    }\n\n    public tryGet(t: Type): T | undefined {\n        return this._attributeStore.tryGet(this._definition, t);\n    }\n\n    public get(t: Type): T {\n        return defined(this.tryGet(t));\n    }\n\n    public tryGetForTopLevel(name: string): T | undefined {\n        return this._attributeStore.tryGetForTopLevel(this._definition, name);\n    }\n\n    public getForTopLevel(name: string): T {\n        return defined(this.tryGetForTopLevel(name));\n    }\n}\n\nexport class TypeGraph {\n    private _typeBuilder?: TypeBuilder;\n\n    private _attributeStore: TypeAttributeStore | undefined = undefined;\n\n    // FIXME: OrderedMap?  We lose the order in PureScript right now, though,\n    // and maybe even earlier in the TypeScript driver.\n    private _topLevels: Map<string, Type> = new Map();\n\n    private _types?: Type[];\n\n    private _parents: Array<Set<Type>> | undefined = undefined;\n\n    private _printOnRewrite = false;\n\n    public constructor(\n        typeBuilder: TypeBuilder,\n        public readonly serial: number,\n        private readonly _haveProvenanceAttributes: boolean\n    ) {\n        this._typeBuilder = typeBuilder;\n    }\n\n    private get isFrozen(): boolean {\n        return this._typeBuilder === undefined;\n    }\n\n    public get attributeStore(): TypeAttributeStore {\n        return defined(this._attributeStore);\n    }\n\n    public freeze(\n        topLevels: ReadonlyMap<string, TypeRef>,\n        types: Type[],\n        typeAttributes: Array<TypeAttributes | undefined>\n    ): void {\n        assert(!this.isFrozen, \"Tried to freeze TypeGraph a second time\");\n        for (const t of types) {\n            assertTypeRefGraph(t.typeRef, this);\n        }\n\n        this._attributeStore = new TypeAttributeStore(this, typeAttributes);\n\n        // The order of these three statements matters.  If we set _typeBuilder\n        // to undefined before we deref the TypeRefs, then we need to set _types\n        // before, also, because the deref will call into typeAtIndex, which requires\n        // either a _typeBuilder or a _types.\n        this._types = types;\n        this._typeBuilder = undefined;\n        this._topLevels = mapMap(topLevels, tref => derefTypeRef(tref, this));\n    }\n\n    public get topLevels(): ReadonlyMap<string, Type> {\n        assert(this.isFrozen, \"Cannot get top-levels from a non-frozen graph\");\n        return this._topLevels;\n    }\n\n    public typeAtIndex(index: number): Type {\n        if (this._typeBuilder !== undefined) {\n            return this._typeBuilder.typeAtIndex(index);\n        }\n\n        return defined(this._types)[index];\n    }\n\n    public atIndex(index: number): [Type, TypeAttributes] {\n        if (this._typeBuilder !== undefined) {\n            return this._typeBuilder.atIndex(index);\n        }\n\n        const t = this.typeAtIndex(index);\n        return [t, defined(this._attributeStore).attributesForType(t)];\n    }\n\n    private filterTypes(predicate: ((t: Type) => boolean) | undefined): ReadonlySet<Type> {\n        const seen = new Set<Type>();\n        let types: Type[] = [];\n\n        function addFromType(t: Type): void {\n            if (seen.has(t)) return;\n            seen.add(t);\n\n            const required = predicate === undefined || predicate(t);\n\n            if (required) {\n                types.push(t);\n            }\n\n            for (const c of t.getChildren()) {\n                addFromType(c);\n            }\n        }\n\n        for (const [, t] of this.topLevels) {\n            addFromType(t);\n        }\n\n        return new Set(types);\n    }\n\n    public allNamedTypes(): ReadonlySet<Type> {\n        return this.filterTypes(isNamedType);\n    }\n\n    public allNamedTypesSeparated(): SeparatedNamedTypes {\n        const types = this.allNamedTypes();\n        return separateNamedTypes(types);\n    }\n\n    private allProvenance(): ReadonlySet<number> {\n        assert(this._haveProvenanceAttributes);\n\n        const view = new TypeAttributeStoreView(this.attributeStore, provenanceTypeAttributeKind);\n        const sets = Array.from(this.allTypesUnordered()).map(t => {\n            const maybeSet = view.tryGet(t);\n            if (maybeSet !== undefined) return maybeSet;\n            return new Set<number>();\n        });\n        const result = new Set<number>();\n        setUnionManyInto(result, sets);\n        return result;\n    }\n\n    public setPrintOnRewrite(): void {\n        this._printOnRewrite = true;\n    }\n\n    private checkLostTypeAttributes(builder: BaseGraphRewriteBuilder, newGraph: TypeGraph): void {\n        if (!this._haveProvenanceAttributes || builder.lostTypeAttributes) return;\n\n        const oldProvenance = this.allProvenance();\n        const newProvenance = newGraph.allProvenance();\n        if (oldProvenance.size !== newProvenance.size) {\n            const difference = setSubtract(oldProvenance, newProvenance);\n            const indexes = Array.from(difference);\n            return messageError(\"IRTypeAttributesNotPropagated\", { count: difference.size, indexes });\n        }\n    }\n\n    private printRewrite(title: string): void {\n        if (!this._printOnRewrite) return;\n\n        console.log(`\\n# ${title}`);\n    }\n\n    // Each array in `replacementGroups` is a bunch of types to be replaced by a\n    // single new type.  `replacer` is a function that takes a group and a\n    // TypeBuilder, and builds a new type with that builder that replaces the group.\n    // That particular TypeBuilder will have to take as inputs types in the old\n    // graph, but return types in the new graph.  Recursive types must be handled\n    // carefully.\n    public rewrite<T extends Type>(\n        title: string,\n        stringTypeMapping: StringTypeMapping,\n        alphabetizeProperties: boolean,\n        replacementGroups: T[][],\n        debugPrintReconstitution: boolean,\n        replacer: (typesToReplace: ReadonlySet<T>, builder: GraphRewriteBuilder<T>, forwardingRef: TypeRef) => TypeRef,\n        force = false\n    ): TypeGraph {\n        this.printRewrite(title);\n\n        if (!force && replacementGroups.length === 0) return this;\n\n        const builder = new GraphRewriteBuilder(\n            this,\n            stringTypeMapping,\n            alphabetizeProperties,\n            this._haveProvenanceAttributes,\n            replacementGroups,\n            debugPrintReconstitution,\n            replacer\n        );\n        const newGraph = builder.finish();\n\n        this.checkLostTypeAttributes(builder, newGraph);\n\n        if (this._printOnRewrite) {\n            newGraph.setPrintOnRewrite();\n            newGraph.printGraph();\n        }\n\n        if (!builder.didAddForwardingIntersection) return newGraph;\n\n        return removeIndirectionIntersections(newGraph, stringTypeMapping, debugPrintReconstitution);\n    }\n\n    public remap(\n        title: string,\n        stringTypeMapping: StringTypeMapping,\n        alphabetizeProperties: boolean,\n        map: ReadonlyMap<Type, Type>,\n        debugPrintRemapping: boolean,\n        force = false\n    ): TypeGraph {\n        this.printRewrite(title);\n\n        if (!force && map.size === 0) return this;\n\n        const builder = new GraphRemapBuilder(\n            this,\n            stringTypeMapping,\n            alphabetizeProperties,\n            this._haveProvenanceAttributes,\n            map,\n            debugPrintRemapping\n        );\n        const newGraph = builder.finish();\n\n        this.checkLostTypeAttributes(builder, newGraph);\n\n        if (this._printOnRewrite) {\n            newGraph.setPrintOnRewrite();\n            newGraph.printGraph();\n        }\n\n        assert(!builder.didAddForwardingIntersection);\n\n        return newGraph;\n    }\n\n    public garbageCollect(alphabetizeProperties: boolean, debugPrintReconstitution: boolean): TypeGraph {\n        const newGraph = this.remap(\n            \"GC\",\n            getNoStringTypeMapping(),\n            alphabetizeProperties,\n            new Map(),\n            debugPrintReconstitution,\n            true\n        );\n        return newGraph;\n    }\n\n    public rewriteFixedPoint(alphabetizeProperties: boolean, debugPrintReconstitution: boolean): TypeGraph {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let graph: TypeGraph = this;\n        for (;;) {\n            const newGraph = this.rewrite(\n                \"fixed-point\",\n                getNoStringTypeMapping(),\n                alphabetizeProperties,\n                [],\n                debugPrintReconstitution,\n                mustNotHappen,\n                true\n            );\n            if (graph.allTypesUnordered().size === newGraph.allTypesUnordered().size) {\n                return graph;\n            }\n\n            graph = newGraph;\n        }\n    }\n\n    public allTypesUnordered(): ReadonlySet<Type> {\n        assert(this.isFrozen, \"Tried to get all graph types before it was frozen\");\n        return new Set(defined(this._types));\n    }\n\n    public makeGraph(invertDirection: boolean, childrenOfType: (t: Type) => ReadonlySet<Type>): Graph<Type> {\n        return new Graph(defined(this._types), invertDirection, childrenOfType);\n    }\n\n    public getParentsOfType(t: Type): Set<Type> {\n        assertTypeRefGraph(t.typeRef, this);\n        if (this._parents === undefined) {\n            const parents = defined(this._types).map(_ => new Set<Type>());\n            for (const p of this.allTypesUnordered()) {\n                for (const c of p.getChildren()) {\n                    const index = c.index;\n                    parents[index] = parents[index].add(p);\n                }\n            }\n\n            this._parents = parents;\n        }\n\n        return this._parents[t.index];\n    }\n\n    public printGraph(): void {\n        const types = defined(this._types);\n        for (let i = 0; i < types.length; i++) {\n            const t = types[i];\n            const parts: string[] = [];\n            parts.push(`${t.debugPrintKind}${t.hasNames ? ` ${t.getCombinedName()}` : \"\"}`);\n            const children = t.getChildren();\n            if (children.size > 0) {\n                parts.push(\n                    `children ${Array.from(children)\n                        .map(c => c.index)\n                        .join(\",\")}`\n                );\n            }\n\n            for (const [kind, value] of t.getAttributes()) {\n                const maybeString = kind.stringify(value);\n                if (maybeString !== undefined) {\n                    parts.push(maybeString);\n                }\n            }\n\n            console.log(`${i}: ${parts.join(\" | \")}`);\n        }\n    }\n}\n\nexport function noneToAny(\n    graph: TypeGraph,\n    stringTypeMapping: StringTypeMapping,\n    debugPrintReconstitution: boolean\n): TypeGraph {\n    const noneTypes = setFilter(graph.allTypesUnordered(), t => t.kind === \"none\");\n    if (noneTypes.size === 0) {\n        return graph;\n    }\n\n    assert(noneTypes.size === 1, \"Cannot have more than one none type\");\n    return graph.rewrite(\n        \"none to any\",\n        stringTypeMapping,\n        false,\n        [Array.from(noneTypes)],\n        debugPrintReconstitution,\n        (types, builder, forwardingRef) => {\n            const attributes = combineTypeAttributesOfTypes(\"union\", types);\n            const tref = builder.getPrimitiveType(\"any\", attributes, forwardingRef);\n            return tref;\n        }\n    );\n}\n\nexport function optionalToNullable(\n    graph: TypeGraph,\n    stringTypeMapping: StringTypeMapping,\n    debugPrintReconstitution: boolean\n): TypeGraph {\n    function rewriteClass(c: ClassType, builder: GraphRewriteBuilder<ClassType>, forwardingRef: TypeRef): TypeRef {\n        const properties = mapMap(c.getProperties(), (p, name) => {\n            const t = p.type;\n            let ref: TypeRef;\n            if (!p.isOptional || t.isNullable) {\n                ref = builder.reconstituteType(t);\n            } else {\n                const nullType = builder.getPrimitiveType(\"null\");\n                let members: ReadonlySet<TypeRef>;\n                if (t instanceof UnionType) {\n                    members = setMap(t.members, m => builder.reconstituteType(m)).add(nullType);\n                } else {\n                    members = new Set([builder.reconstituteType(t), nullType]);\n                }\n\n                const attributes = namesTypeAttributeKind.setDefaultInAttributes(t.getAttributes(), () =>\n                    TypeNames.make(new Set([name]), new Set(), true)\n                );\n                ref = builder.getUnionType(attributes, members);\n            }\n\n            return builder.makeClassProperty(ref, p.isOptional);\n        });\n        if (c.isFixed) {\n            return builder.getUniqueClassType(c.getAttributes(), true, properties, forwardingRef);\n        } else {\n            return builder.getClassType(c.getAttributes(), properties, forwardingRef);\n        }\n    }\n\n    const classesWithOptional = setFilter(\n        graph.allTypesUnordered(),\n        t => t instanceof ClassType && mapSome(t.getProperties(), p => p.isOptional)\n    );\n    const replacementGroups = Array.from(classesWithOptional).map(c => [c as ClassType]);\n    if (classesWithOptional.size === 0) {\n        return graph;\n    }\n\n    return graph.rewrite(\n        \"optional to nullable\",\n        stringTypeMapping,\n        false,\n        replacementGroups,\n        debugPrintReconstitution,\n        (setOfClass, builder, forwardingRef) => {\n            assert(setOfClass.size === 1);\n            const c = defined(iterableFirst(setOfClass));\n            return rewriteClass(c, builder, forwardingRef);\n        }\n    );\n}\n\nexport function removeIndirectionIntersections(\n    graph: TypeGraph,\n    stringTypeMapping: StringTypeMapping,\n    debugPrintRemapping: boolean\n): TypeGraph {\n    const map: Array<[Type, Type]> = [];\n\n    for (const t of graph.allTypesUnordered()) {\n        if (!(t instanceof IntersectionType)) continue;\n        const seen = new Set([t]);\n        let current = t;\n        while (current.members.size === 1) {\n            const member = defined(iterableFirst(current.members));\n            if (!(member instanceof IntersectionType)) {\n                map.push([t, member]);\n                break;\n            }\n\n            if (seen.has(member)) {\n                // FIXME: Technically, this is an any type.\n                return panic(\"There's a cycle of intersection types\");\n            }\n\n            seen.add(member);\n            current = member;\n        }\n    }\n\n    return graph.remap(\"remove indirection intersections\", stringTypeMapping, false, new Map(map), debugPrintRemapping);\n}\n","import {\n    addHashCode,\n    areEqual,\n    definedMap,\n    // eslint-disable-next-line @typescript-eslint/no-redeclare\n    hasOwnProperty,\n    hashCodeInit,\n    hashCodeOf,\n    iterableEvery,\n    iterableFind,\n    iterableSome,\n    mapFilter,\n    mapFromObject,\n    mapMap,\n    mapSome,\n    mapSortByKey,\n    mapSortToArray,\n    setFilter,\n    setMap,\n    setSortBy,\n    setUnionInto,\n    toReadonlySet\n} from \"collection-utils\";\n\nimport { type TypeAttributes } from \"./attributes/TypeAttributes\";\nimport { type TypeNames, namesTypeAttributeKind } from \"./attributes/TypeNames\";\nimport { uriInferenceAttributesProducer } from \"./attributes/URIAttributes\";\nimport { type BaseGraphRewriteBuilder, type TypeReconstituter } from \"./GraphRewriting\";\nimport { messageAssert } from \"./Messages\";\nimport { assert, defined, panic } from \"./support/Support\";\n// eslint-disable-next-line import/no-cycle\nimport { type TypeGraph, type TypeRef, attributesForTypeRef, derefTypeRef, typeRefIndex } from \"./TypeGraph\";\n\n/**\n * `jsonSchema` is the `format` to be used to represent this string type in\n * JSON Schema.  It's ok to \"invent\" a new one if the JSON Schema standard doesn't\n * have that particular type yet.\n *\n * For transformed type kinds that map to an existing primitive type, `primitive`\n * must specify that type kind.\n */\nexport interface TransformedStringTypeTargets {\n    attributesProducer?: (s: string) => TypeAttributes;\n    jsonSchema: string;\n    primitive: PrimitiveNonStringTypeKind | undefined;\n}\n\n/**\n * All the transformed string type kinds and the JSON Schema formats and\n * primitive type kinds they map to.  Not all transformed string types map to\n * primitive types.  Date-time types, for example, stand on their own, but\n * stringified integers map to integers.\n */\nconst transformedStringTypeTargetTypeKinds = {\n    date: { jsonSchema: \"date\", primitive: undefined },\n    time: { jsonSchema: \"time\", primitive: undefined },\n    \"date-time\": { jsonSchema: \"date-time\", primitive: undefined },\n    uuid: { jsonSchema: \"uuid\", primitive: undefined },\n    uri: { jsonSchema: \"uri\", primitive: undefined, attributesProducer: uriInferenceAttributesProducer },\n    \"integer-string\": { jsonSchema: \"integer\", primitive: \"integer\" } as TransformedStringTypeTargets,\n    \"bool-string\": { jsonSchema: \"boolean\", primitive: \"bool\" } as TransformedStringTypeTargets\n};\n\nexport const transformedStringTypeTargetTypeKindsMap = mapFromObject(\n    transformedStringTypeTargetTypeKinds as {\n        [kind: string]: TransformedStringTypeTargets;\n    }\n);\n\nexport type TransformedStringTypeKind = keyof typeof transformedStringTypeTargetTypeKinds;\nexport type PrimitiveStringTypeKind = \"string\" | TransformedStringTypeKind;\nexport type PrimitiveNonStringTypeKind = \"none\" | \"any\" | \"null\" | \"bool\" | \"integer\" | \"double\";\nexport type PrimitiveTypeKind = PrimitiveNonStringTypeKind | PrimitiveStringTypeKind;\nexport type NamedTypeKind = \"class\" | \"enum\" | \"union\";\nexport type TypeKind = PrimitiveTypeKind | NamedTypeKind | \"array\" | \"object\" | \"map\" | \"intersection\";\nexport type ObjectTypeKind = \"object\" | \"map\" | \"class\";\n\nexport const transformedStringTypeKinds = new Set(\n    Object.getOwnPropertyNames(transformedStringTypeTargetTypeKinds)\n) as ReadonlySet<TransformedStringTypeKind>;\n\nexport function isPrimitiveStringTypeKind(kind: string): kind is PrimitiveStringTypeKind {\n    return kind === \"string\" || hasOwnProperty(transformedStringTypeTargetTypeKinds, kind);\n}\n\nexport function targetTypeKindForTransformedStringTypeKind(\n    kind: PrimitiveStringTypeKind\n): PrimitiveNonStringTypeKind | undefined {\n    const target = transformedStringTypeTargetTypeKindsMap.get(kind);\n    if (target === undefined) return undefined;\n    return target.primitive;\n}\n\nexport function isNumberTypeKind(kind: TypeKind): kind is \"integer\" | \"double\" {\n    return kind === \"integer\" || kind === \"double\";\n}\n\nexport function isPrimitiveTypeKind(kind: TypeKind): kind is PrimitiveTypeKind {\n    if (isPrimitiveStringTypeKind(kind)) return true;\n    if (isNumberTypeKind(kind)) return true;\n    return kind === \"none\" || kind === \"any\" || kind === \"null\" || kind === \"bool\";\n}\n\nfunction triviallyStructurallyCompatible(x: Type, y: Type): boolean {\n    if (x.index === y.index) return true;\n    if (x.kind === \"none\" || y.kind === \"none\") return true;\n    return false;\n}\n\nexport class TypeIdentity {\n    private readonly _hashCode: number;\n\n    public constructor(\n        private readonly _kind: TypeKind,\n        // FIXME: strongly type this\n        private readonly _components: readonly unknown[]\n    ) {\n        let h = hashCodeInit;\n        h = addHashCode(h, hashCodeOf(this._kind));\n        for (const c of _components) {\n            h = addHashCode(h, hashCodeOf(c));\n        }\n\n        this._hashCode = h;\n    }\n\n    public equals<T extends TypeIdentity>(other: T): boolean {\n        if (!(other instanceof TypeIdentity)) return false;\n        if (this._kind !== other._kind) return false;\n        const n = this._components.length;\n        assert(n === other._components.length, \"Components of a type kind's identity must have the same length\");\n        for (let i = 0; i < n; i++) {\n            if (!areEqual(this._components[i], other._components[i])) return false;\n        }\n\n        return true;\n    }\n\n    public hashCode(): number {\n        return this._hashCode;\n    }\n}\n\n// undefined in case the identity is unique\nexport type MaybeTypeIdentity = TypeIdentity | undefined;\n\nexport abstract class Type {\n    public abstract readonly kind: TypeKind;\n\n    public constructor(\n        public readonly typeRef: TypeRef,\n        protected readonly graph: TypeGraph\n    ) {}\n\n    public get index(): number {\n        return typeRefIndex(this.typeRef);\n    }\n\n    // This must return a newly allocated set\n    public abstract getNonAttributeChildren(): Set<Type>;\n\n    public getChildren(): ReadonlySet<Type> {\n        let result = this.getNonAttributeChildren();\n        for (const [k, v] of this.getAttributes()) {\n            if (k.children === undefined) continue;\n            setUnionInto(result, k.children(v));\n        }\n\n        return result;\n    }\n\n    public getAttributes(): TypeAttributes {\n        return attributesForTypeRef(this.typeRef, this.graph);\n    }\n\n    public get hasNames(): boolean {\n        return namesTypeAttributeKind.tryGetInAttributes(this.getAttributes()) !== undefined;\n    }\n\n    public getNames(): TypeNames {\n        return defined(namesTypeAttributeKind.tryGetInAttributes(this.getAttributes()));\n    }\n\n    public getCombinedName(): string {\n        return this.getNames().combinedName;\n    }\n\n    public abstract get isNullable(): boolean;\n    // FIXME: Remove `isPrimitive`\n    public abstract isPrimitive(): this is PrimitiveType;\n    public abstract get identity(): MaybeTypeIdentity;\n    public abstract reconstitute<T extends BaseGraphRewriteBuilder>(\n        builder: TypeReconstituter<T>,\n        canonicalOrder: boolean\n    ): void;\n\n    public get debugPrintKind(): string {\n        return this.kind;\n    }\n\n    public equals<T extends Type>(other: T): boolean {\n        if (!(other instanceof Type)) return false;\n        return this.typeRef === other.typeRef;\n    }\n\n    public hashCode(): number {\n        return hashCodeOf(this.typeRef);\n    }\n\n    // This will only ever be called when `this` and `other` are not\n    // equal, but `this.kind === other.kind`.\n    protected abstract structuralEqualityStep(\n        other: Type,\n        conflateNumbers: boolean,\n        queue: (a: Type, b: Type) => boolean\n    ): boolean;\n\n    public structurallyCompatible(other: Type, conflateNumbers = false): boolean {\n        function kindsCompatible(kind1: TypeKind, kind2: TypeKind): boolean {\n            if (kind1 === kind2) return true;\n            if (!conflateNumbers) return false;\n            if (kind1 === \"integer\") return kind2 === \"double\";\n            if (kind1 === \"double\") return kind2 === \"integer\";\n            return false;\n        }\n\n        if (triviallyStructurallyCompatible(this, other)) return true;\n        if (!kindsCompatible(this.kind, other.kind)) return false;\n\n        const workList: Array<[Type, Type]> = [[this, other]];\n        // This contains a set of pairs which are the type pairs\n        // we have already determined to be equal.  We can't just\n        // do comparison recursively because types can have cycles.\n        const done: Array<[number, number]> = [];\n\n        let failed: boolean;\n        const queue = (x: Type, y: Type): boolean => {\n            if (triviallyStructurallyCompatible(x, y)) return true;\n            if (!kindsCompatible(x.kind, y.kind)) {\n                failed = true;\n                return false;\n            }\n\n            workList.push([x, y]);\n            return true;\n        };\n\n        while (workList.length > 0) {\n            let [a, b] = defined(workList.pop());\n            if (a.index > b.index) {\n                [a, b] = [b, a];\n            }\n\n            if (!a.isPrimitive()) {\n                let ai = a.index;\n                let bi = b.index;\n\n                let found = false;\n                for (const [dai, dbi] of done) {\n                    if (dai === ai && dbi === bi) {\n                        found = true;\n                        break;\n                    }\n                }\n\n                if (found) continue;\n                done.push([ai, bi]);\n            }\n\n            failed = false;\n            if (!a.structuralEqualityStep(b, conflateNumbers, queue)) return false;\n            if (failed) return false;\n        }\n\n        return true;\n    }\n\n    public getParentTypes(): ReadonlySet<Type> {\n        return this.graph.getParentsOfType(this);\n    }\n\n    public getAncestorsNotInSet(set: ReadonlySet<TypeRef>): ReadonlySet<Type> {\n        const workList: Type[] = [this];\n        const processed = new Set<Type>();\n        const ancestors = new Set<Type>();\n        for (;;) {\n            const t = workList.pop();\n            if (t === undefined) break;\n\n            const parents = t.getParentTypes();\n            console.log(`${parents.size} parents`);\n            for (const p of parents) {\n                if (processed.has(p)) continue;\n                processed.add(p);\n                if (set.has(p.typeRef)) {\n                    console.log(`adding ${p.kind}`);\n                    workList.push(p);\n                } else {\n                    console.log(`found ${p.kind}`);\n                    ancestors.add(p);\n                }\n            }\n        }\n\n        return ancestors;\n    }\n}\n\nfunction hasUniqueIdentityAttributes(attributes: TypeAttributes): boolean {\n    return mapSome(attributes, (v, ta) => ta.requiresUniqueIdentity(v));\n}\n\nfunction identityAttributes(attributes: TypeAttributes): TypeAttributes {\n    return mapFilter(attributes, (_, kind) => kind.inIdentity);\n}\n\nexport function primitiveTypeIdentity(kind: PrimitiveTypeKind, attributes: TypeAttributes): MaybeTypeIdentity {\n    if (hasUniqueIdentityAttributes(attributes)) return undefined;\n    return new TypeIdentity(kind, [identityAttributes(attributes)]);\n}\n\nexport class PrimitiveType extends Type {\n    public constructor(\n        typeRef: TypeRef,\n        graph: TypeGraph,\n        public readonly kind: PrimitiveTypeKind\n    ) {\n        super(typeRef, graph);\n    }\n\n    public get isNullable(): boolean {\n        return this.kind === \"null\" || this.kind === \"any\" || this.kind === \"none\";\n    }\n\n    public isPrimitive(): this is PrimitiveType {\n        return true;\n    }\n\n    public getNonAttributeChildren(): Set<Type> {\n        return new Set();\n    }\n\n    public get identity(): MaybeTypeIdentity {\n        return primitiveTypeIdentity(this.kind, this.getAttributes());\n    }\n\n    public reconstitute<T extends BaseGraphRewriteBuilder>(builder: TypeReconstituter<T>): void {\n        builder.getPrimitiveType(this.kind);\n    }\n\n    protected structuralEqualityStep(\n        _other: Type,\n        _conflateNumbers: boolean,\n        _queue: (a: Type, b: Type) => boolean\n    ): boolean {\n        return true;\n    }\n}\n\nexport function arrayTypeIdentity(attributes: TypeAttributes, itemsRef: TypeRef): MaybeTypeIdentity {\n    if (hasUniqueIdentityAttributes(attributes)) return undefined;\n    return new TypeIdentity(\"array\", [identityAttributes(attributes), itemsRef]);\n}\n\nexport class ArrayType extends Type {\n    public readonly kind = \"array\";\n\n    public constructor(\n        typeRef: TypeRef,\n        graph: TypeGraph,\n        private _itemsRef?: TypeRef\n    ) {\n        super(typeRef, graph);\n    }\n\n    public setItems(itemsRef: TypeRef): void {\n        if (this._itemsRef !== undefined) {\n            return panic(\"Can only set array items once\");\n        }\n\n        this._itemsRef = itemsRef;\n    }\n\n    private getItemsRef(): TypeRef {\n        if (this._itemsRef === undefined) {\n            return panic(\"Array items accessed before they were set\");\n        }\n\n        return this._itemsRef;\n    }\n\n    public get items(): Type {\n        return derefTypeRef(this.getItemsRef(), this.graph);\n    }\n\n    public getNonAttributeChildren(): Set<Type> {\n        return new Set([this.items]);\n    }\n\n    public get isNullable(): boolean {\n        return false;\n    }\n\n    public isPrimitive(): this is PrimitiveType {\n        return false;\n    }\n\n    public get identity(): MaybeTypeIdentity {\n        return arrayTypeIdentity(this.getAttributes(), this.getItemsRef());\n    }\n\n    public reconstitute<T extends BaseGraphRewriteBuilder>(builder: TypeReconstituter<T>): void {\n        const itemsRef = this.getItemsRef();\n        const maybeItems = builder.lookup(itemsRef);\n        if (maybeItems === undefined) {\n            builder.getUniqueArrayType();\n            builder.setArrayItems(builder.reconstitute(this.getItemsRef()));\n        } else {\n            builder.getArrayType(maybeItems);\n        }\n    }\n\n    protected structuralEqualityStep(\n        other: ArrayType,\n        _conflateNumbers: boolean,\n        queue: (a: Type, b: Type) => boolean\n    ): boolean {\n        return queue(this.items, other.items);\n    }\n}\n\nexport class GenericClassProperty<T> {\n    public constructor(\n        public readonly typeData: T,\n        public readonly isOptional: boolean\n    ) {}\n\n    public equals(other: GenericClassProperty<unknown>): boolean {\n        if (!(other instanceof GenericClassProperty)) {\n            return false;\n        }\n\n        return areEqual(this.typeData, other.typeData) && this.isOptional === other.isOptional;\n    }\n\n    public hashCode(): number {\n        return hashCodeOf(this.typeData) + (this.isOptional ? 17 : 23);\n    }\n}\n\nexport class ClassProperty extends GenericClassProperty<TypeRef> {\n    public constructor(\n        typeRef: TypeRef,\n        public readonly graph: TypeGraph,\n        isOptional: boolean\n    ) {\n        super(typeRef, isOptional);\n    }\n\n    public get typeRef(): TypeRef {\n        return this.typeData;\n    }\n\n    public get type(): Type {\n        return derefTypeRef(this.typeRef, this.graph);\n    }\n}\n\nfunction objectTypeIdentify(\n    kind: ObjectTypeKind,\n    attributes: TypeAttributes,\n    properties: ReadonlyMap<string, ClassProperty>,\n    additionalPropertiesRef: TypeRef | undefined\n): MaybeTypeIdentity {\n    if (hasUniqueIdentityAttributes(attributes)) return undefined;\n    return new TypeIdentity(kind, [identityAttributes(attributes), properties, additionalPropertiesRef]);\n}\n\nexport function classTypeIdentity(\n    attributes: TypeAttributes,\n    properties: ReadonlyMap<string, ClassProperty>\n): MaybeTypeIdentity {\n    return objectTypeIdentify(\"class\", attributes, properties, undefined);\n}\n\nexport function mapTypeIdentify(\n    attributes: TypeAttributes,\n    additionalPropertiesRef: TypeRef | undefined\n): MaybeTypeIdentity {\n    return objectTypeIdentify(\"map\", attributes, new Map(), additionalPropertiesRef);\n}\n\nexport class ObjectType extends Type {\n    public constructor(\n        typeRef: TypeRef,\n        graph: TypeGraph,\n        public readonly kind: ObjectTypeKind,\n        public readonly isFixed: boolean,\n        private _properties: ReadonlyMap<string, ClassProperty> | undefined,\n        private _additionalPropertiesRef: TypeRef | undefined\n    ) {\n        super(typeRef, graph);\n\n        if (kind === \"map\") {\n            if (_properties !== undefined) {\n                assert(_properties.size === 0);\n            }\n\n            assert(!isFixed);\n        } else if (kind === \"class\") {\n            assert(_additionalPropertiesRef === undefined);\n        } else {\n            assert(isFixed);\n        }\n    }\n\n    public setProperties(\n        properties: ReadonlyMap<string, ClassProperty>,\n        additionalPropertiesRef: TypeRef | undefined\n    ): void {\n        assert(this._properties === undefined, \"Tried to set object properties twice\");\n\n        if (this instanceof MapType) {\n            assert(properties.size === 0, \"Cannot set properties on map type\");\n        }\n\n        if (this instanceof ClassType) {\n            assert(additionalPropertiesRef === undefined, \"Cannot set additional properties of class type\");\n        }\n\n        this._properties = properties;\n        this._additionalPropertiesRef = additionalPropertiesRef;\n    }\n\n    public getProperties(): ReadonlyMap<string, ClassProperty> {\n        return defined(this._properties);\n    }\n\n    public getSortedProperties(): ReadonlyMap<string, ClassProperty> {\n        return mapSortByKey(this.getProperties());\n    }\n\n    private getAdditionalPropertiesRef(): TypeRef | undefined {\n        assert(this._properties !== undefined, \"Properties are not set yet\");\n        return this._additionalPropertiesRef;\n    }\n\n    public getAdditionalProperties(): Type | undefined {\n        const tref = this.getAdditionalPropertiesRef();\n        if (tref === undefined) return undefined;\n        return derefTypeRef(tref, this.graph);\n    }\n\n    public getNonAttributeChildren(): Set<Type> {\n        const types = mapSortToArray(this.getProperties(), (_, k) => k).map(([_, p]) => p.type);\n        const additionalProperties = this.getAdditionalProperties();\n        if (additionalProperties !== undefined) {\n            types.push(additionalProperties);\n        }\n\n        return new Set(types);\n    }\n\n    public get isNullable(): boolean {\n        return false;\n    }\n\n    public isPrimitive(): this is PrimitiveType {\n        return false;\n    }\n\n    public get identity(): MaybeTypeIdentity {\n        if (this.isFixed) return undefined;\n        return objectTypeIdentify(\n            this.kind,\n            this.getAttributes(),\n            this.getProperties(),\n            this.getAdditionalPropertiesRef()\n        );\n    }\n\n    public reconstitute<T extends BaseGraphRewriteBuilder>(\n        builder: TypeReconstituter<T>,\n        canonicalOrder: boolean\n    ): void {\n        const sortedProperties = this.getSortedProperties();\n        const propertiesInNewOrder = canonicalOrder ? sortedProperties : this.getProperties();\n        const maybePropertyTypes = builder.lookupMap(mapMap(sortedProperties, cp => cp.typeRef));\n        const maybeAdditionalProperties = definedMap(this._additionalPropertiesRef, r => builder.lookup(r));\n\n        if (\n            maybePropertyTypes !== undefined &&\n            (maybeAdditionalProperties !== undefined || this._additionalPropertiesRef === undefined)\n        ) {\n            const properties = mapMap(propertiesInNewOrder, (cp, n) =>\n                builder.makeClassProperty(defined(maybePropertyTypes.get(n)), cp.isOptional)\n            );\n\n            switch (this.kind) {\n                case \"object\":\n                    assert(this.isFixed);\n                    builder.getObjectType(properties, maybeAdditionalProperties);\n                    break;\n                case \"map\":\n                    builder.getMapType(defined(maybeAdditionalProperties));\n                    break;\n                case \"class\":\n                    if (this.isFixed) {\n                        builder.getUniqueClassType(true, properties);\n                    } else {\n                        builder.getClassType(properties);\n                    }\n\n                    break;\n                default:\n                    return panic(`Invalid object type kind ${this.kind}`);\n            }\n        } else {\n            switch (this.kind) {\n                case \"object\":\n                    assert(this.isFixed);\n                    builder.getUniqueObjectType(undefined, undefined);\n                    break;\n                case \"map\":\n                    builder.getUniqueMapType();\n                    break;\n                case \"class\":\n                    builder.getUniqueClassType(this.isFixed, undefined);\n                    break;\n                default:\n                    return panic(`Invalid object type kind ${this.kind}`);\n            }\n\n            const reconstitutedTypes = mapMap(sortedProperties, cp => builder.reconstitute(cp.typeRef));\n            const properties = mapMap(propertiesInNewOrder, (cp, n) =>\n                builder.makeClassProperty(defined(reconstitutedTypes.get(n)), cp.isOptional)\n            );\n            const additionalProperties = definedMap(this._additionalPropertiesRef, r => builder.reconstitute(r));\n            builder.setObjectProperties(properties, additionalProperties);\n        }\n    }\n\n    protected structuralEqualityStep(\n        other: ObjectType,\n        _conflateNumbers: boolean,\n        queue: (a: Type, b: Type) => boolean\n    ): boolean {\n        const pa = this.getProperties();\n        const pb = other.getProperties();\n        if (pa.size !== pb.size) return false;\n        let failed = false;\n        for (const [name, cpa] of pa) {\n            const cpb = pb.get(name);\n            if (cpb === undefined || cpa.isOptional !== cpb.isOptional || !queue(cpa.type, cpb.type)) {\n                failed = true;\n                return false;\n            }\n        }\n\n        if (failed) return false;\n\n        const thisAdditionalProperties = this.getAdditionalProperties();\n        const otherAdditionalProperties = other.getAdditionalProperties();\n        if ((thisAdditionalProperties === undefined) !== (otherAdditionalProperties === undefined)) return false;\n        if (thisAdditionalProperties === undefined || otherAdditionalProperties === undefined) return true;\n        return queue(thisAdditionalProperties, otherAdditionalProperties);\n    }\n}\n\nexport class ClassType extends ObjectType {\n    public constructor(\n        typeRef: TypeRef,\n        graph: TypeGraph,\n        isFixed: boolean,\n        properties: ReadonlyMap<string, ClassProperty> | undefined\n    ) {\n        super(typeRef, graph, \"class\", isFixed, properties, undefined);\n    }\n}\n\nexport class MapType extends ObjectType {\n    public constructor(typeRef: TypeRef, graph: TypeGraph, valuesRef: TypeRef | undefined) {\n        super(\n            typeRef,\n            graph,\n            \"map\",\n            false,\n            definedMap(valuesRef, () => new Map()),\n            valuesRef\n        );\n    }\n\n    // FIXME: Remove and use `getAdditionalProperties()` instead.\n    public get values(): Type {\n        return defined(this.getAdditionalProperties());\n    }\n}\n\nexport function enumTypeIdentity(attributes: TypeAttributes, cases: ReadonlySet<string>): MaybeTypeIdentity {\n    if (hasUniqueIdentityAttributes(attributes)) return undefined;\n    return new TypeIdentity(\"enum\", [identityAttributes(attributes), cases]);\n}\n\nexport class EnumType extends Type {\n    public readonly kind = \"enum\";\n\n    public constructor(\n        typeRef: TypeRef,\n        graph: TypeGraph,\n        public readonly cases: ReadonlySet<string>\n    ) {\n        super(typeRef, graph);\n    }\n\n    public get isNullable(): boolean {\n        return false;\n    }\n\n    public isPrimitive(): this is PrimitiveType {\n        return false;\n    }\n\n    public get identity(): MaybeTypeIdentity {\n        return enumTypeIdentity(this.getAttributes(), this.cases);\n    }\n\n    public getNonAttributeChildren(): Set<Type> {\n        return new Set();\n    }\n\n    public reconstitute<T extends BaseGraphRewriteBuilder>(builder: TypeReconstituter<T>): void {\n        builder.getEnumType(this.cases);\n    }\n\n    protected structuralEqualityStep(\n        other: EnumType,\n        _conflateNumbers: boolean,\n        _queue: (a: Type, b: Type) => void\n    ): boolean {\n        return areEqual(this.cases, other.cases);\n    }\n}\n\nexport function setOperationCasesEqual(\n    typesA: Iterable<Type>,\n    typesB: Iterable<Type>,\n    conflateNumbers: boolean,\n    membersEqual: (a: Type, b: Type) => boolean\n): boolean {\n    const ma = toReadonlySet(typesA);\n    const mb = toReadonlySet(typesB);\n    if (ma.size !== mb.size) return false;\n    return iterableEvery(ma, ta => {\n        const tb = iterableFind(mb, t => t.kind === ta.kind);\n        if (tb !== undefined) {\n            if (membersEqual(ta, tb)) return true;\n        }\n\n        if (conflateNumbers) {\n            if (ta.kind === \"integer\" && iterableSome(mb, t => t.kind === \"double\")) return true;\n            if (ta.kind === \"double\" && iterableSome(mb, t => t.kind === \"integer\")) return true;\n        }\n\n        return false;\n    });\n}\n\nexport function setOperationTypeIdentity(\n    kind: TypeKind,\n    attributes: TypeAttributes,\n    memberRefs: ReadonlySet<TypeRef>\n): MaybeTypeIdentity {\n    if (hasUniqueIdentityAttributes(attributes)) return undefined;\n    return new TypeIdentity(kind, [identityAttributes(attributes), memberRefs]);\n}\n\nexport function unionTypeIdentity(attributes: TypeAttributes, memberRefs: ReadonlySet<TypeRef>): MaybeTypeIdentity {\n    return setOperationTypeIdentity(\"union\", attributes, memberRefs);\n}\n\nexport function intersectionTypeIdentity(\n    attributes: TypeAttributes,\n    memberRefs: ReadonlySet<TypeRef>\n): MaybeTypeIdentity {\n    return setOperationTypeIdentity(\"intersection\", attributes, memberRefs);\n}\n\nexport abstract class SetOperationType extends Type {\n    public constructor(\n        typeRef: TypeRef,\n        graph: TypeGraph,\n        public readonly kind: TypeKind,\n        private _memberRefs?: ReadonlySet<TypeRef>\n    ) {\n        super(typeRef, graph);\n    }\n\n    public setMembers(memberRefs: ReadonlySet<TypeRef>): void {\n        if (this._memberRefs !== undefined) {\n            return panic(\"Can only set map members once\");\n        }\n\n        this._memberRefs = memberRefs;\n    }\n\n    protected getMemberRefs(): ReadonlySet<TypeRef> {\n        if (this._memberRefs === undefined) {\n            return panic(\"Map members accessed before they were set\");\n        }\n\n        return this._memberRefs;\n    }\n\n    public get members(): ReadonlySet<Type> {\n        return setMap(this.getMemberRefs(), tref => derefTypeRef(tref, this.graph));\n    }\n\n    public get sortedMembers(): ReadonlySet<Type> {\n        return this.getNonAttributeChildren();\n    }\n\n    public getNonAttributeChildren(): Set<Type> {\n        // FIXME: We're assuming no two members of the same kind.\n        return setSortBy(this.members, t => t.kind);\n    }\n\n    public isPrimitive(): this is PrimitiveType {\n        return false;\n    }\n\n    public get identity(): MaybeTypeIdentity {\n        return setOperationTypeIdentity(this.kind, this.getAttributes(), this.getMemberRefs());\n    }\n\n    protected reconstituteSetOperation<T extends BaseGraphRewriteBuilder>(\n        builder: TypeReconstituter<T>,\n        canonicalOrder: boolean,\n        getType: (members: ReadonlySet<TypeRef> | undefined) => void\n    ): void {\n        const sortedMemberRefs = mapMap(this.sortedMembers.entries(), t => t.typeRef);\n        const membersInOrder = canonicalOrder ? this.sortedMembers : this.members;\n        const maybeMembers = builder.lookupMap(sortedMemberRefs);\n        if (maybeMembers === undefined) {\n            getType(undefined);\n            const reconstituted = builder.reconstituteMap(sortedMemberRefs);\n            builder.setSetOperationMembers(setMap(membersInOrder, t => defined(reconstituted.get(t))));\n        } else {\n            getType(setMap(membersInOrder, t => defined(maybeMembers.get(t))));\n        }\n    }\n\n    protected structuralEqualityStep(\n        other: SetOperationType,\n        conflateNumbers: boolean,\n        queue: (a: Type, b: Type) => boolean\n    ): boolean {\n        return setOperationCasesEqual(this.members, other.members, conflateNumbers, queue);\n    }\n}\n\nexport class IntersectionType extends SetOperationType {\n    public constructor(typeRef: TypeRef, graph: TypeGraph, memberRefs?: ReadonlySet<TypeRef>) {\n        super(typeRef, graph, \"intersection\", memberRefs);\n    }\n\n    public get isNullable(): boolean {\n        return panic(\"isNullable not implemented for IntersectionType\");\n    }\n\n    public reconstitute<T extends BaseGraphRewriteBuilder>(\n        builder: TypeReconstituter<T>,\n        canonicalOrder: boolean\n    ): void {\n        this.reconstituteSetOperation(builder, canonicalOrder, members => {\n            if (members === undefined) {\n                builder.getUniqueIntersectionType();\n            } else {\n                builder.getIntersectionType(members);\n            }\n        });\n    }\n}\n\nexport class UnionType extends SetOperationType {\n    public constructor(typeRef: TypeRef, graph: TypeGraph, memberRefs?: ReadonlySet<TypeRef>) {\n        super(typeRef, graph, \"union\", memberRefs);\n        if (memberRefs !== undefined) {\n            messageAssert(memberRefs.size > 0, \"IRNoEmptyUnions\", {});\n        }\n    }\n\n    public setMembers(memberRefs: ReadonlySet<TypeRef>): void {\n        messageAssert(memberRefs.size > 0, \"IRNoEmptyUnions\", {});\n        super.setMembers(memberRefs);\n    }\n\n    public get stringTypeMembers(): ReadonlySet<Type> {\n        return setFilter(this.members, t => isPrimitiveStringTypeKind(t.kind) || t.kind === \"enum\");\n    }\n\n    public findMember(kind: TypeKind): Type | undefined {\n        return iterableFind(this.members, t => t.kind === kind);\n    }\n\n    public get isNullable(): boolean {\n        return this.findMember(\"null\") !== undefined;\n    }\n\n    public get isCanonical(): boolean {\n        const members = this.members;\n        if (members.size <= 1) return false;\n        const kinds = setMap(members, t => t.kind);\n        if (kinds.size < members.size) return false;\n        if (kinds.has(\"union\") || kinds.has(\"intersection\")) return false;\n        if (kinds.has(\"none\") || kinds.has(\"any\")) return false;\n        if (kinds.has(\"string\") && kinds.has(\"enum\")) return false;\n\n        let numObjectTypes = 0;\n        if (kinds.has(\"class\")) numObjectTypes += 1;\n        if (kinds.has(\"map\")) numObjectTypes += 1;\n        if (kinds.has(\"object\")) numObjectTypes += 1;\n        if (numObjectTypes > 1) return false;\n\n        return true;\n    }\n\n    public reconstitute<T extends BaseGraphRewriteBuilder>(\n        builder: TypeReconstituter<T>,\n        canonicalOrder: boolean\n    ): void {\n        this.reconstituteSetOperation(builder, canonicalOrder, members => {\n            if (members === undefined) {\n                builder.getUniqueUnionType();\n            } else {\n                builder.getUnionType(members);\n            }\n        });\n    }\n}\n","import {\n    addHashCode,\n    areEqual,\n    arraySortByInto,\n    definedMap,\n    definedMapWithDefault,\n    hashCodeOf,\n    hashString,\n    setUnionInto\n} from \"collection-utils\";\n\nimport { TypeAttributeKind } from \"./attributes/TypeAttributes\";\nimport { type BaseGraphRewriteBuilder } from \"./GraphRewriting\";\nimport { assert, indentationString, panic } from \"./support/Support\";\nimport { EnumType, PrimitiveType, type Type, type TypeKind, UnionType } from \"./Type\";\nimport { type TypeGraph, type TypeRef, derefTypeRef } from \"./TypeGraph\";\n\nfunction debugStringForType(t: Type): string {\n    const target = followTargetType(t);\n    if (t === target) {\n        return t.kind;\n    }\n\n    return `${t.kind} (${target.kind})`;\n}\n\nfunction getNumberOfNodes(xfer: Transformer | undefined): number {\n    return definedMapWithDefault(xfer, 0, x => x.getNumberOfNodes());\n}\n\nexport abstract class Transformer {\n    public constructor(\n        public readonly kind: string,\n        protected readonly graph: TypeGraph,\n        public readonly sourceTypeRef: TypeRef\n    ) {}\n\n    public get sourceType(): Type {\n        return derefTypeRef(this.sourceTypeRef, this.graph);\n    }\n\n    /** This must return a newly constructed set. */\n    public getChildren(): Set<Type> {\n        return new Set([this.sourceType]);\n    }\n\n    public getNumberOfNodes(): number {\n        return 1;\n    }\n\n    public abstract get canFail(): boolean;\n\n    public abstract reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer;\n\n    public abstract reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer;\n\n    public equals<T extends Transformer>(other: T): boolean {\n        return this.sourceTypeRef === other.sourceTypeRef;\n    }\n\n    public hashCode(): number {\n        return hashCodeOf(this.sourceTypeRef);\n    }\n\n    protected debugDescription(): string {\n        return `${debugStringForType(this.sourceType)} -> ${this.kind}`;\n    }\n\n    protected debugPrintContinuations(_indent: number): void {\n        return;\n    }\n\n    public debugPrint(indent: number): void {\n        console.log(indentationString(indent) + this.debugDescription());\n        this.debugPrintContinuations(indent + 1);\n    }\n}\n\nexport abstract class ProducerTransformer extends Transformer {\n    public constructor(\n        kind: string,\n        graph: TypeGraph,\n        sourceTypeRef: TypeRef,\n        public readonly consumer: Transformer | undefined\n    ) {\n        super(kind, graph, sourceTypeRef);\n    }\n\n    public getChildren(): Set<Type> {\n        const children = super.getChildren();\n        if (this.consumer === undefined) return children;\n        return setUnionInto(children, this.consumer.getChildren());\n    }\n\n    public getNumberOfNodes(): number {\n        return super.getNumberOfNodes() + getNumberOfNodes(this.consumer);\n    }\n\n    public equals<T extends Transformer>(other: T): boolean {\n        if (!super.equals(other)) return false;\n        if (!(other instanceof ProducerTransformer)) return false;\n        return areEqual(this.consumer, other.consumer);\n    }\n\n    public hashCode(): number {\n        const h = super.hashCode();\n        return addHashCode(h, hashCodeOf(this.consumer));\n    }\n\n    protected debugPrintContinuations(indent: number): void {\n        if (this.consumer === undefined) return;\n        this.consumer.debugPrint(indent);\n    }\n}\n\nexport abstract class MatchTransformer extends Transformer {\n    public constructor(\n        kind: string,\n        graph: TypeGraph,\n        sourceTypeRef: TypeRef,\n        public readonly transformer: Transformer\n    ) {\n        super(kind, graph, sourceTypeRef);\n    }\n\n    public getChildren(): Set<Type> {\n        return setUnionInto(super.getChildren(), this.transformer.getChildren());\n    }\n\n    public getNumberOfNodes(): number {\n        return super.getNumberOfNodes() + this.transformer.getNumberOfNodes();\n    }\n\n    public equals<T extends Transformer>(other: T): boolean {\n        if (!super.equals(other)) return false;\n        if (!(other instanceof MatchTransformer)) return false;\n        return this.transformer.equals(other.transformer);\n    }\n\n    public hashCode(): number {\n        const h = super.hashCode();\n        return addHashCode(h, this.transformer.hashCode());\n    }\n\n    protected debugPrintContinuations(indent: number): void {\n        this.transformer.debugPrint(indent);\n    }\n}\n\nexport class DecodingTransformer extends ProducerTransformer {\n    public constructor(graph: TypeGraph, sourceTypeRef: TypeRef, consumer: Transformer | undefined) {\n        super(\"decode\", graph, sourceTypeRef, consumer);\n    }\n\n    public get canFail(): boolean {\n        return false;\n    }\n\n    public reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer {\n        if (continuationTransformer !== undefined) {\n            return panic(\"Reversing a decoding transformer cannot have a continuation\");\n        }\n\n        if (this.consumer === undefined) {\n            return new EncodingTransformer(this.graph, targetTypeRef);\n        } else {\n            return this.consumer.reverse(\n                targetTypeRef,\n                new EncodingTransformer(this.graph, this.consumer.sourceTypeRef)\n            );\n        }\n    }\n\n    public reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer {\n        return new DecodingTransformer(\n            builder.typeGraph,\n            builder.reconstituteTypeRef(this.sourceTypeRef),\n            definedMap(this.consumer, xfer => xfer.reconstitute(builder))\n        );\n    }\n\n    public equals<T extends Transformer>(other: T): boolean {\n        if (!super.equals(other)) return false;\n        return other instanceof DecodingTransformer;\n    }\n}\n\nexport class EncodingTransformer extends Transformer {\n    public constructor(graph: TypeGraph, sourceTypeRef: TypeRef) {\n        super(\"encode\", graph, sourceTypeRef);\n    }\n\n    public get canFail(): boolean {\n        return false;\n    }\n\n    public reverse(_targetTypeRef: TypeRef, _continuationTransformer: Transformer | undefined): Transformer {\n        return panic(\"Can't reverse encoding transformer\");\n    }\n\n    public reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer {\n        return new EncodingTransformer(builder.typeGraph, builder.reconstituteTypeRef(this.sourceTypeRef));\n    }\n\n    public equals<T extends Transformer>(other: T): boolean {\n        if (!super.equals(other)) return false;\n        if (!(other instanceof EncodingTransformer)) return false;\n        return true;\n    }\n}\n\nexport class ArrayDecodingTransformer extends ProducerTransformer {\n    public constructor(\n        graph: TypeGraph,\n        sourceTypeRef: TypeRef,\n        consumer: Transformer | undefined,\n        private readonly _itemTargetTypeRef: TypeRef,\n        public readonly itemTransformer: Transformer\n    ) {\n        super(\"decode-array\", graph, sourceTypeRef, consumer);\n    }\n\n    public getChildren(): Set<Type> {\n        const children = super.getChildren();\n        children.add(this.itemTargetType);\n        return setUnionInto(children, this.itemTransformer.getChildren());\n    }\n\n    public getNumberOfNodes(): number {\n        return super.getNumberOfNodes() + this.itemTransformer.getNumberOfNodes();\n    }\n\n    public get canFail(): boolean {\n        return false;\n    }\n\n    public get itemTargetType(): Type {\n        return derefTypeRef(this._itemTargetTypeRef, this.graph);\n    }\n\n    public reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer {\n        if (continuationTransformer !== undefined) {\n            return panic(\"Reversing a decoding transformer cannot have a continuation\");\n        }\n\n        const itemTransformer = this.itemTransformer.reverse(this._itemTargetTypeRef, undefined);\n\n        if (this.consumer === undefined) {\n            return new ArrayEncodingTransformer(\n                this.graph,\n                targetTypeRef,\n                this.itemTransformer.sourceTypeRef,\n                itemTransformer\n            );\n        } else {\n            return this.consumer.reverse(\n                targetTypeRef,\n                new ArrayEncodingTransformer(\n                    this.graph,\n                    this.consumer.sourceTypeRef,\n                    this.itemTransformer.sourceTypeRef,\n                    itemTransformer\n                )\n            );\n        }\n    }\n\n    public reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer {\n        return new ArrayDecodingTransformer(\n            builder.typeGraph,\n            builder.reconstituteTypeRef(this.sourceTypeRef),\n            definedMap(this.consumer, xfer => xfer.reconstitute(builder)),\n            builder.reconstituteTypeRef(this._itemTargetTypeRef),\n            this.itemTransformer.reconstitute(builder)\n        );\n    }\n\n    public hashCode(): number {\n        let h = super.hashCode();\n        h = addHashCode(h, hashCodeOf(this._itemTargetTypeRef));\n        h = addHashCode(h, this.itemTransformer.hashCode());\n        return h;\n    }\n\n    public equals<T extends Transformer>(other: T): boolean {\n        if (!super.equals(other)) return false;\n        if (!(other instanceof ArrayDecodingTransformer)) return false;\n        if (!areEqual(this._itemTargetTypeRef, other._itemTargetTypeRef)) return false;\n        return this.itemTransformer.equals(other.itemTransformer);\n    }\n\n    protected debugPrintContinuations(indent: number): void {\n        this.itemTransformer.debugPrint(indent);\n        super.debugPrintContinuations(indent);\n    }\n}\n\nexport class ArrayEncodingTransformer extends Transformer {\n    public constructor(\n        graph: TypeGraph,\n        sourceTypeRef: TypeRef,\n        private readonly _itemTargetTypeRef: TypeRef,\n        public readonly itemTransformer: Transformer\n    ) {\n        super(\"encode-array\", graph, sourceTypeRef);\n    }\n\n    public getChildren(): Set<Type> {\n        const children = super.getChildren();\n        children.add(this.itemTargetType);\n        return setUnionInto(children, this.itemTransformer.getChildren());\n    }\n\n    public getNumberOfNodes(): number {\n        return super.getNumberOfNodes() + this.itemTransformer.getNumberOfNodes();\n    }\n\n    public get canFail(): boolean {\n        return false;\n    }\n\n    public get itemTargetType(): Type {\n        return derefTypeRef(this._itemTargetTypeRef, this.graph);\n    }\n\n    public reverse(_targetTypeRef: TypeRef, _continuationTransformer: Transformer | undefined): Transformer {\n        return panic(\"Can't reverse array encoding transformer\");\n    }\n\n    public reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer {\n        return new ArrayEncodingTransformer(\n            builder.typeGraph,\n            builder.reconstituteTypeRef(this.sourceTypeRef),\n            builder.reconstituteTypeRef(this._itemTargetTypeRef),\n            this.itemTransformer.reconstitute(builder)\n        );\n    }\n\n    public hashCode(): number {\n        let h = super.hashCode();\n        h = addHashCode(h, hashCodeOf(this._itemTargetTypeRef));\n        return addHashCode(h, this.itemTransformer.hashCode());\n    }\n\n    public equals<T extends Transformer>(other: T): boolean {\n        if (!super.equals(other)) return false;\n        if (!(other instanceof ArrayEncodingTransformer)) return false;\n        if (!areEqual(this._itemTargetTypeRef, other._itemTargetTypeRef)) return false;\n        return this.itemTransformer.equals(other.itemTransformer);\n    }\n\n    protected debugPrintContinuations(indent: number): void {\n        this.itemTransformer.debugPrint(indent);\n        super.debugPrintContinuations(indent);\n    }\n}\n\nexport class ChoiceTransformer extends Transformer {\n    public constructor(\n        graph: TypeGraph,\n        sourceTypeRef: TypeRef,\n        public readonly transformers: readonly Transformer[]\n    ) {\n        super(\"choice\", graph, sourceTypeRef);\n        assert(transformers.length > 0, \"Choice must have at least one transformer\");\n    }\n\n    public getChildren(): Set<Type> {\n        let children = super.getChildren();\n        for (const xfer of this.transformers) {\n            setUnionInto(children, xfer.getChildren());\n        }\n\n        return children;\n    }\n\n    public getNumberOfNodes(): number {\n        let n = 0;\n        for (const xfer of this.transformers) {\n            n += xfer.getNumberOfNodes();\n        }\n\n        return super.getNumberOfNodes() + n;\n    }\n\n    public get canFail(): boolean {\n        return this.transformers.some(xfer => xfer.canFail);\n    }\n\n    public reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer {\n        const transformers = this.transformers.map(xfer => xfer.reverse(targetTypeRef, continuationTransformer));\n        if (transformers.every(xfer => xfer instanceof UnionMemberMatchTransformer)) {\n            const memberMatchers = transformers as UnionMemberMatchTransformer[];\n            const first = memberMatchers[0];\n            if (memberMatchers.every(xfer => first.memberType.equals(xfer.memberType))) {\n                const subTransformers = memberMatchers.map(xfer => xfer.transformer);\n                return new UnionMemberMatchTransformer(\n                    this.graph,\n                    targetTypeRef,\n                    new ChoiceTransformer(this.graph, subTransformers[0].sourceTypeRef, subTransformers),\n                    first.memberTypeRef\n                );\n            }\n        }\n\n        return new ChoiceTransformer(this.graph, targetTypeRef, transformers);\n    }\n\n    public reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer {\n        return new ChoiceTransformer(\n            builder.typeGraph,\n            builder.reconstituteTypeRef(this.sourceTypeRef),\n            this.transformers.map(xfer => xfer.reconstitute(builder))\n        );\n    }\n\n    public equals<T extends Transformer>(other: T): boolean {\n        if (!super.equals(other)) return false;\n        if (!(other instanceof ChoiceTransformer)) return false;\n        return areEqual(this.transformers, other.transformers);\n    }\n\n    public hashCode(): number {\n        const h = super.hashCode();\n        return addHashCode(h, hashCodeOf(this.transformers));\n    }\n\n    protected debugPrintContinuations(indent: number): void {\n        for (const xfer of this.transformers) {\n            xfer.debugPrint(indent);\n        }\n    }\n}\n\nexport class DecodingChoiceTransformer extends Transformer {\n    public constructor(\n        graph: TypeGraph,\n        sourceTypeRef: TypeRef,\n        public readonly nullTransformer: Transformer | undefined,\n        public readonly integerTransformer: Transformer | undefined,\n        public readonly doubleTransformer: Transformer | undefined,\n        public readonly boolTransformer: Transformer | undefined,\n        public readonly stringTransformer: Transformer | undefined,\n        public readonly arrayTransformer: Transformer | undefined,\n        public readonly objectTransformer: Transformer | undefined\n    ) {\n        super(\"decoding-choice\", graph, sourceTypeRef);\n    }\n\n    public get transformers(): readonly Transformer[] {\n        const transformers: Transformer[] = [];\n        function add(xfer: Transformer | undefined): void {\n            if (xfer === undefined) return;\n            transformers.push(xfer);\n        }\n\n        add(this.nullTransformer);\n        add(this.integerTransformer);\n        add(this.doubleTransformer);\n        add(this.boolTransformer);\n        add(this.stringTransformer);\n        add(this.arrayTransformer);\n        add(this.objectTransformer);\n\n        return transformers;\n    }\n\n    public getChildren(): Set<Type> {\n        let children = super.getChildren();\n        for (const xfer of this.transformers) {\n            setUnionInto(children, xfer.getChildren());\n        }\n\n        return children;\n    }\n\n    public getNumberOfNodes(): number {\n        let n = super.getNumberOfNodes();\n        for (const xfer of this.transformers) {\n            n += getNumberOfNodes(xfer);\n        }\n\n        return n;\n    }\n\n    public get canFail(): boolean {\n        return false;\n    }\n\n    public reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer {\n        assert(\n            continuationTransformer === undefined,\n            \"Reversing a decoding transformer can't have a target transformer\"\n        );\n\n        let transformers = new Map<TypeKind, Transformer[]>();\n        let memberMatchTransformers = new Map<Type, Transformer[]>();\n\n        function addCase(reversed: Transformer): void {\n            if (reversed instanceof UnionMemberMatchTransformer) {\n                const memberType = reversed.memberType;\n                let arr = memberMatchTransformers.get(memberType);\n                if (arr === undefined) {\n                    arr = [];\n                    memberMatchTransformers.set(memberType, arr);\n                }\n\n                arr.push(reversed);\n            } else {\n                const kind = reversed.sourceType.kind;\n                let arr = transformers.get(kind);\n                if (arr === undefined) {\n                    arr = [];\n                    transformers.set(kind, arr);\n                }\n\n                arr.push(reversed);\n            }\n        }\n\n        function reverseAndAdd(transformer: Transformer): void {\n            const reversed = transformer.reverse(targetTypeRef, undefined);\n            let cases: readonly Transformer[] = [];\n            // Flatten nested ChoiceTransformers\n            if (reversed instanceof ChoiceTransformer) {\n                cases = reversed.transformers;\n            } else {\n                cases = [reversed];\n            }\n\n            for (const xfer of cases) {\n                addCase(xfer);\n            }\n        }\n\n        // FIXME: Actually, keep all the failing transformers and put them first, then\n        // finally do the simplest non-failing one.  Actually actually, maybe not, since\n        // we're reversing to encode?  What's a case where this would be useful?\n\n        // If there are non-failing transformers, we ignore the ones that can fail and\n        // just pick the \"simplest\" non-failing one, being the one with the least number\n        // of nodes.\n        function filter(xfers: Transformer[]): Transformer[] {\n            assert(xfers.length > 0, \"Must have at least one transformer\");\n\n            const nonfailing = xfers.filter(xfer => {\n                // For member match transformers we're deciding between\n                // multiple that match against the same member, so the fact\n                // that the match can fail is not important, since if it fails\n                // it will fail for all candidates.  The question is whether\n                // its continuation can fail.\n                if (xfer instanceof UnionMemberMatchTransformer) {\n                    return !xfer.transformer.canFail;\n                } else {\n                    return !xfer.canFail;\n                }\n            });\n            if (nonfailing.length === 0) return xfers;\n\n            const smallest = arraySortByInto(\n                nonfailing.map(x => [x.getNumberOfNodes(), x] as [number, Transformer]),\n                ([c, _]) => c\n            )[0][1];\n            return [smallest];\n        }\n\n        this.transformers.forEach(reverseAndAdd);\n\n        const allTransformers = Array.from(transformers.values()).concat(Array.from(memberMatchTransformers.values()));\n        const resultingTransformers = ([] as Transformer[]).concat(...allTransformers.map(filter));\n\n        // No choice needed if there's only one\n        if (resultingTransformers.length === 1) {\n            return resultingTransformers[0];\n        }\n\n        return new ChoiceTransformer(this.graph, targetTypeRef, resultingTransformers);\n    }\n\n    public reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer {\n        function reconstitute(xf: Transformer | undefined): Transformer | undefined {\n            if (xf === undefined) return undefined;\n            return xf.reconstitute(builder);\n        }\n\n        return new DecodingChoiceTransformer(\n            builder.typeGraph,\n            builder.reconstituteTypeRef(this.sourceTypeRef),\n            reconstitute(this.nullTransformer),\n            reconstitute(this.integerTransformer),\n            reconstitute(this.doubleTransformer),\n            reconstitute(this.boolTransformer),\n            reconstitute(this.stringTransformer),\n            reconstitute(this.arrayTransformer),\n            reconstitute(this.objectTransformer)\n        );\n    }\n\n    public equals<T extends Transformer>(other: T): boolean {\n        if (!super.equals(other)) return false;\n        if (!(other instanceof DecodingChoiceTransformer)) return false;\n        if (!areEqual(this.nullTransformer, other.nullTransformer)) return false;\n        if (!areEqual(this.integerTransformer, other.integerTransformer)) return false;\n        if (!areEqual(this.doubleTransformer, other.doubleTransformer)) return false;\n        if (!areEqual(this.boolTransformer, other.boolTransformer)) return false;\n        if (!areEqual(this.stringTransformer, other.stringTransformer)) return false;\n        if (!areEqual(this.arrayTransformer, other.arrayTransformer)) return false;\n        if (!areEqual(this.objectTransformer, other.objectTransformer)) return false;\n        return true;\n    }\n\n    public hashCode(): number {\n        let h = super.hashCode();\n        h = addHashCode(h, hashCodeOf(this.nullTransformer));\n        h = addHashCode(h, hashCodeOf(this.integerTransformer));\n        h = addHashCode(h, hashCodeOf(this.doubleTransformer));\n        h = addHashCode(h, hashCodeOf(this.boolTransformer));\n        h = addHashCode(h, hashCodeOf(this.stringTransformer));\n        h = addHashCode(h, hashCodeOf(this.arrayTransformer));\n        h = addHashCode(h, hashCodeOf(this.objectTransformer));\n        return h;\n    }\n\n    protected debugPrintContinuations(indent: number): void {\n        for (const xfer of this.transformers) {\n            xfer.debugPrint(indent);\n        }\n    }\n}\n\nexport class UnionMemberMatchTransformer extends MatchTransformer {\n    public constructor(\n        graph: TypeGraph,\n        sourceTypeRef: TypeRef,\n        transformer: Transformer,\n        public readonly memberTypeRef: TypeRef\n    ) {\n        super(\"union-member-match\", graph, sourceTypeRef, transformer);\n    }\n\n    public get sourceType(): UnionType {\n        const t = derefTypeRef(this.sourceTypeRef, this.graph);\n        if (!(t instanceof UnionType)) {\n            return panic(\"The source of a union member match transformer must be a union type\");\n        }\n\n        return t;\n    }\n\n    public get canFail(): boolean {\n        return true;\n    }\n\n    public get memberType(): Type {\n        return derefTypeRef(this.memberTypeRef, this.graph);\n    }\n\n    public getChildren(): Set<Type> {\n        return super.getChildren().add(this.memberType);\n    }\n\n    public reverse(_targetTypeRef: TypeRef, _continuationTransformer: Transformer | undefined): Transformer {\n        return panic(\"Can't reverse union member match transformer\");\n    }\n\n    public reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer {\n        return new UnionMemberMatchTransformer(\n            builder.typeGraph,\n            builder.reconstituteTypeRef(this.sourceTypeRef),\n            this.transformer.reconstitute(builder),\n            builder.reconstituteTypeRef(this.memberTypeRef)\n        );\n    }\n\n    public equals<T extends Transformer>(other: T): boolean {\n        if (!super.equals(other)) return false;\n        if (!(other instanceof UnionMemberMatchTransformer)) return false;\n        return this.memberTypeRef === other.memberTypeRef;\n    }\n\n    public hashCode(): number {\n        const h = super.hashCode();\n        return addHashCode(h, hashCodeOf(this.memberTypeRef));\n    }\n\n    protected debugDescription(): string {\n        return `${super.debugDescription()} - member: ${debugStringForType(this.memberType)}`;\n    }\n}\n\n/**\n * This matches strings and enum cases.\n */\nexport class StringMatchTransformer extends MatchTransformer {\n    public constructor(\n        graph: TypeGraph,\n        sourceTypeRef: TypeRef,\n        transformer: Transformer,\n        public readonly stringCase: string\n    ) {\n        super(\"string-match\", graph, sourceTypeRef, transformer);\n    }\n\n    public get sourceType(): EnumType | PrimitiveType {\n        const t = derefTypeRef(this.sourceTypeRef, this.graph);\n        if (!(t instanceof EnumType) && !(t instanceof PrimitiveType && t.kind === \"string\")) {\n            return panic(\"The source of a string match transformer must be an enum or string type\");\n        }\n\n        return t;\n    }\n\n    public get canFail(): boolean {\n        return true;\n    }\n\n    public reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer {\n        return this.transformer.reverse(\n            targetTypeRef,\n            new StringProducerTransformer(\n                this.graph,\n                this.transformer.sourceTypeRef,\n                continuationTransformer,\n                this.stringCase\n            )\n        );\n    }\n\n    public reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer {\n        return new StringMatchTransformer(\n            builder.typeGraph,\n            builder.reconstituteTypeRef(this.sourceTypeRef),\n            this.transformer.reconstitute(builder),\n            this.stringCase\n        );\n    }\n\n    public equals<T extends Transformer>(other: T): boolean {\n        if (!super.equals(other)) return false;\n        if (!(other instanceof StringMatchTransformer)) return false;\n        return this.stringCase !== other.stringCase;\n    }\n\n    public hashCode(): number {\n        const h = super.hashCode();\n        return addHashCode(h, hashString(this.stringCase));\n    }\n\n    protected debugDescription(): string {\n        return `${super.debugDescription()} - case: ${this.stringCase}`;\n    }\n}\n\nexport class UnionInstantiationTransformer extends Transformer {\n    public constructor(graph: TypeGraph, sourceTypeRef: TypeRef) {\n        super(\"union-instantiation\", graph, sourceTypeRef);\n    }\n\n    public get canFail(): boolean {\n        return false;\n    }\n\n    public reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer {\n        if (continuationTransformer === undefined) {\n            return panic(\"Union instantiation transformer reverse must have a continuation\");\n        }\n\n        return new UnionMemberMatchTransformer(this.graph, targetTypeRef, continuationTransformer, this.sourceTypeRef);\n    }\n\n    public reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer {\n        return new UnionInstantiationTransformer(builder.typeGraph, builder.reconstituteTypeRef(this.sourceTypeRef));\n    }\n\n    public equals<T extends Transformer>(other: T): boolean {\n        if (!super.equals(other)) return false;\n        return other instanceof UnionInstantiationTransformer;\n    }\n}\n\n/**\n * Produces a string or an enum case.\n */\nexport class StringProducerTransformer extends ProducerTransformer {\n    public constructor(\n        graph: TypeGraph,\n        sourceTypeRef: TypeRef,\n        consumer: Transformer | undefined,\n        public readonly result: string\n    ) {\n        super(\"string-producer\", graph, sourceTypeRef, consumer);\n    }\n\n    public get canFail(): boolean {\n        return false;\n    }\n\n    public reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer {\n        if (continuationTransformer === undefined) {\n            return panic(\"Reversing a string producer transformer must have a continuation\");\n        }\n\n        if (this.consumer === undefined) {\n            return new StringMatchTransformer(this.graph, targetTypeRef, continuationTransformer, this.result);\n        } else {\n            return this.consumer.reverse(\n                targetTypeRef,\n                new StringMatchTransformer(\n                    this.graph,\n                    this.consumer.sourceTypeRef,\n                    continuationTransformer,\n                    this.result\n                )\n            );\n        }\n    }\n\n    public reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer {\n        return new StringProducerTransformer(\n            builder.typeGraph,\n            builder.reconstituteTypeRef(this.sourceTypeRef),\n            definedMap(this.consumer, xfer => xfer.reconstitute(builder)),\n            this.result\n        );\n    }\n\n    public equals<T extends Transformer>(other: T): boolean {\n        if (!super.equals(other)) return false;\n        if (!(other instanceof StringProducerTransformer)) return false;\n        return this.result === other.result;\n    }\n\n    public hashCode(): number {\n        const h = super.hashCode();\n        return addHashCode(h, hashCodeOf(this.consumer));\n    }\n\n    protected debugDescription(): string {\n        return `${super.debugDescription()} - result: ${this.result}`;\n    }\n}\n\nexport class ParseStringTransformer extends ProducerTransformer {\n    public constructor(graph: TypeGraph, sourceTypeRef: TypeRef, consumer: Transformer | undefined) {\n        super(\"parse-string\", graph, sourceTypeRef, consumer);\n    }\n\n    public get canFail(): boolean {\n        return true;\n    }\n\n    public reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer {\n        if (this.consumer === undefined) {\n            return new StringifyTransformer(this.graph, targetTypeRef, continuationTransformer);\n        } else {\n            return this.consumer.reverse(\n                targetTypeRef,\n                new StringifyTransformer(this.graph, this.consumer.sourceTypeRef, continuationTransformer)\n            );\n        }\n    }\n\n    public reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer {\n        return new ParseStringTransformer(\n            builder.typeGraph,\n            builder.reconstituteTypeRef(this.sourceTypeRef),\n            definedMap(this.consumer, xfer => xfer.reconstitute(builder))\n        );\n    }\n\n    public equals<T extends Transformer>(other: T): boolean {\n        if (!super.equals(other)) return false;\n        return other instanceof ParseStringTransformer;\n    }\n}\n\nexport class StringifyTransformer extends ProducerTransformer {\n    public constructor(graph: TypeGraph, sourceTypeRef: TypeRef, consumer: Transformer | undefined) {\n        super(\"stringify\", graph, sourceTypeRef, consumer);\n    }\n\n    public get canFail(): boolean {\n        return false;\n    }\n\n    public reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer {\n        if (this.consumer === undefined) {\n            return new ParseStringTransformer(this.graph, targetTypeRef, continuationTransformer);\n        } else {\n            return this.consumer.reverse(\n                targetTypeRef,\n                new ParseStringTransformer(this.graph, this.consumer.sourceTypeRef, continuationTransformer)\n            );\n        }\n    }\n\n    public reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer {\n        return new StringifyTransformer(\n            builder.typeGraph,\n            builder.reconstituteTypeRef(this.sourceTypeRef),\n            definedMap(this.consumer, xfer => xfer.reconstitute(builder))\n        );\n    }\n\n    public equals<T extends Transformer>(other: T): boolean {\n        if (!super.equals(other)) return false;\n        return other instanceof StringifyTransformer;\n    }\n}\n\nexport class MinMaxLengthCheckTransformer extends ProducerTransformer {\n    public constructor(\n        graph: TypeGraph,\n        sourceTypeRef: TypeRef,\n        consumer: Transformer | undefined,\n        public readonly minLength: number | undefined,\n        public readonly maxLength: number | undefined\n    ) {\n        super(\"min-max-length-check\", graph, sourceTypeRef, consumer);\n    }\n\n    public get canFail(): boolean {\n        return true;\n    }\n\n    public reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer {\n        if (this.consumer === undefined) {\n            return new MinMaxLengthCheckTransformer(\n                this.graph,\n                targetTypeRef,\n                continuationTransformer,\n                this.minLength,\n                this.maxLength\n            );\n        } else {\n            return this.consumer.reverse(\n                targetTypeRef,\n                new MinMaxLengthCheckTransformer(\n                    this.graph,\n                    this.consumer.sourceTypeRef,\n                    continuationTransformer,\n                    this.minLength,\n                    this.maxLength\n                )\n            );\n        }\n    }\n\n    public reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer {\n        return new MinMaxLengthCheckTransformer(\n            builder.typeGraph,\n            builder.reconstituteTypeRef(this.sourceTypeRef),\n            definedMap(this.consumer, xfer => xfer.reconstitute(builder)),\n            this.minLength,\n            this.maxLength\n        );\n    }\n\n    public equals<T extends Transformer>(other: T): boolean {\n        if (!super.equals(other)) return false;\n        return (\n            other instanceof MinMaxLengthCheckTransformer &&\n            this.minLength === other.minLength &&\n            this.maxLength === other.maxLength\n        );\n    }\n}\n\nexport class MinMaxValueTransformer extends ProducerTransformer {\n    public constructor(\n        graph: TypeGraph,\n        sourceTypeRef: TypeRef,\n        consumer: Transformer | undefined,\n        public readonly minimum: number | undefined,\n        public readonly maximum: number | undefined\n    ) {\n        super(\"min-max-value-check\", graph, sourceTypeRef, consumer);\n    }\n\n    public get canFail(): boolean {\n        return true;\n    }\n\n    public reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer {\n        if (this.consumer === undefined) {\n            return new MinMaxValueTransformer(\n                this.graph,\n                targetTypeRef,\n                continuationTransformer,\n                this.minimum,\n                this.maximum\n            );\n        } else {\n            return this.consumer.reverse(\n                targetTypeRef,\n                new MinMaxValueTransformer(\n                    this.graph,\n                    this.consumer.sourceTypeRef,\n                    continuationTransformer,\n                    this.minimum,\n                    this.maximum\n                )\n            );\n        }\n    }\n\n    public reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer {\n        return new MinMaxValueTransformer(\n            builder.typeGraph,\n            builder.reconstituteTypeRef(this.sourceTypeRef),\n            definedMap(this.consumer, xfer => xfer.reconstitute(builder)),\n            this.minimum,\n            this.maximum\n        );\n    }\n\n    public equals<T extends Transformer>(other: T): boolean {\n        if (!super.equals(other)) return false;\n        return (\n            other instanceof MinMaxValueTransformer && this.minimum === other.minimum && this.maximum === other.maximum\n        );\n    }\n}\n\nexport class Transformation {\n    public constructor(\n        private readonly _graph: TypeGraph,\n        private readonly _targetTypeRef: TypeRef,\n        public readonly transformer: Transformer\n    ) {}\n\n    public get sourceType(): Type {\n        return this.transformer.sourceType;\n    }\n\n    public get targetType(): Type {\n        return derefTypeRef(this._targetTypeRef, this._graph);\n    }\n\n    public get reverse(): Transformation {\n        return new Transformation(\n            this._graph,\n            this.transformer.sourceTypeRef,\n            this.transformer.reverse(this._targetTypeRef, undefined)\n        );\n    }\n\n    public getChildren(): Set<Type> {\n        return this.transformer.getChildren().add(this.targetType);\n    }\n\n    public reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformation {\n        return new Transformation(\n            builder.typeGraph,\n            builder.reconstituteTypeRef(this._targetTypeRef),\n            this.transformer.reconstitute(builder)\n        );\n    }\n\n    public equals<T extends Transformer>(other: T): boolean {\n        if (!(other instanceof Transformation)) return false;\n        return this._targetTypeRef === other._targetTypeRef && this.transformer.equals(other.transformer);\n    }\n\n    public hashCode(): number {\n        let h = hashCodeOf(this._targetTypeRef);\n        h = addHashCode(h, this.transformer.hashCode());\n        return h;\n    }\n\n    public debugPrint(): void {\n        this.transformer.debugPrint(0);\n        console.log(`-> ${debugStringForType(this.targetType)}`);\n    }\n}\n\nclass TransformationTypeAttributeKind extends TypeAttributeKind<Transformation> {\n    public constructor() {\n        super(\"transformation\");\n    }\n\n    public appliesToTypeKind(_kind: TypeKind): boolean {\n        return true;\n    }\n\n    public get inIdentity(): boolean {\n        return true;\n    }\n\n    public children(xf: Transformation): Set<Type> {\n        return xf.getChildren();\n    }\n\n    public reconstitute<TBuilder extends BaseGraphRewriteBuilder>(\n        builder: TBuilder,\n        xf: Transformation\n    ): Transformation {\n        return xf.reconstitute(builder);\n    }\n\n    public stringify(_: Transformation): string {\n        return \"transformation\";\n    }\n}\n\nexport const transformationTypeAttributeKind: TypeAttributeKind<Transformation> = new TransformationTypeAttributeKind();\n\nexport function transformationForType(t: Type): Transformation | undefined {\n    return transformationTypeAttributeKind.tryGetInAttributes(t.getAttributes());\n}\n\nexport function followTargetType(t: Type): Type {\n    for (;;) {\n        const xf = transformationForType(t);\n        if (xf === undefined) return t;\n        t = xf.targetType;\n    }\n}\n","import { setMap, setSortBy, setUnion } from \"collection-utils\";\nimport * as pluralize from \"pluralize\";\n\nimport { TooManyTypeNames, TypeNames, namesTypeAttributeKind, tooManyNamesThreshold } from \"./attributes/TypeNames\";\nimport { assert, defined, panic } from \"./support/Support\";\nimport { transformationForType } from \"./Transformers\";\nimport { ObjectType, type Type } from \"./Type\";\nimport { type TypeGraph } from \"./TypeGraph\";\nimport { matchCompoundType, nullableFromUnion } from \"./TypeUtils\";\n\nclass UniqueQueue<T> {\n    private readonly _present = new Set<T>();\n\n    private _queue: Array<T | undefined> = [];\n\n    private _front = 0;\n\n    public get size(): number {\n        return this._queue.length - this._front;\n    }\n\n    public get isEmpty(): boolean {\n        return this.size <= 0;\n    }\n\n    public push(v: T): void {\n        if (this._present.has(v)) return;\n        this._queue.push(v);\n        this._present.add(v);\n    }\n\n    public unshift(): T {\n        assert(!this.isEmpty, \"Trying to unshift from an empty queue\");\n        const v = this._queue[this._front];\n        if (v === undefined) {\n            return panic(\"Value should have been present in queue\");\n        }\n\n        this._queue[this._front] = undefined;\n        this._front += 1;\n        this._present.delete(v);\n\n        if (this._front > this.size) {\n            this._queue = this._queue.slice(this._front);\n            this._front = 0;\n        }\n\n        return v;\n    }\n}\n\n// `gatherNames` infers names from given names and property names.\n//\n// 1. Propagate type and property names down to children.  Let's say\n//    we start with JSON like this, and we name the top-level `TopLevel`:\n//\n//    {\n//      \"foos\": [ [ { \"bar\": 123 } ] ]\n//    }\n//\n//    We use a work-list algorithm to first add the name `TopLevel` to\n//    the outermost class type.  Then we propagate the property name\n//    `foos` to the outer array, which in turn propagates its singular\n//    `foo` to the inner array type.  That tries to singularize `foo`,\n//    but it's already singular, so `foo` is added as a name for the\n//    inner class.  We also then add `bar` to the name of the integer\n//    type.\n//\n// 2. Add \"ancestor\" alternatives and some \"direct\" alternatives.\n//    Direct alternatives are those that don't contain any ancestor\n//    names, whereas ancestor alternatives do. What we do here is add\n//    names of the form `TopLevel_foo` and `TopLevel_foo_class` as\n//    ancestor alternatives to the inner class, and `foo_element` as\n//    a direct alternative, the latter because it's an element in an\n//    array.\n//\n// 3. Add more direct alternatives to the type names.  The reason we're\n//    doing this separately from step 2 is because step 2 only requires\n//    iterating over the types, wheras this step iterates over\n//    ancestor/descendant relationships.  In this case we would add\n//    `TopLevel_class`, and `foo_class` to the outer and inner classes,\n//    respectively.  We do similar stuff for all the other types.\n//\n// 4. For each type, set its inferred names to what we gathered in\n//    step 1, and its alternatives to a union of its direct and ancestor\n//    alternatives, gathered in steps 2 and 3.\n\nexport function gatherNames(graph: TypeGraph, destructive: boolean, debugPrint: boolean): void {\n    function setNames(t: Type, tn: TypeNames): void {\n        graph.attributeStore.set(namesTypeAttributeKind, t, tn);\n    }\n\n    if (destructive) {\n        for (const t of graph.allTypesUnordered()) {\n            if (t.hasNames) {\n                setNames(t, t.getNames().clearInferred());\n            }\n        }\n    }\n\n    const queue = new UniqueQueue<Type>();\n    // null means there are too many\n    const namesForType = new Map<Type, ReadonlySet<string> | null>();\n\n    function addNames(t: Type, names: ReadonlySet<string> | null): void {\n        // Always use the type's given names if it has some\n        if (t.hasNames) {\n            const originalNames = t.getNames();\n            if (!originalNames.areInferred) {\n                names = originalNames.names;\n            }\n        }\n\n        const oldNames = namesForType.get(t);\n        if (oldNames === null) return;\n\n        let newNames: ReadonlySet<string> | null;\n        if (oldNames === undefined) {\n            newNames = names;\n        } else if (names === null) {\n            newNames = null;\n        } else {\n            newNames = setUnion(oldNames, names);\n        }\n\n        if (newNames !== null && newNames.size >= tooManyNamesThreshold) {\n            newNames = null;\n        }\n\n        namesForType.set(t, newNames);\n\n        const transformation = transformationForType(t);\n        if (transformation !== undefined) {\n            addNames(transformation.targetType, names);\n        }\n\n        if (oldNames !== undefined && newNames !== null) {\n            if (oldNames.size === newNames.size) {\n                return;\n            }\n        } else if (oldNames === newNames) {\n            return;\n        }\n\n        queue.push(t);\n    }\n\n    for (const [name, t] of graph.topLevels) {\n        addNames(t, new Set([name]));\n    }\n\n    while (!queue.isEmpty) {\n        const t = queue.unshift();\n\n        const names = defined(namesForType.get(t));\n        if (t instanceof ObjectType) {\n            const properties = t.getSortedProperties();\n            for (const [propertyName, property] of properties) {\n                addNames(property.type, new Set([propertyName]));\n            }\n\n            const values = t.getAdditionalProperties();\n            if (values !== undefined) {\n                addNames(values, names === null ? null : setMap(names, pluralize.singular));\n            }\n        } else {\n            matchCompoundType(\n                t,\n                arrayType => {\n                    addNames(arrayType.items, names === null ? null : setMap(names, pluralize.singular));\n                },\n                _classType => panic(\"We handled this above\"),\n                _mapType => panic(\"We handled this above\"),\n                _objectType => panic(\"We handled this above\"),\n                unionType => {\n                    const members = setSortBy(unionType.members, member => member.kind);\n                    for (const memberType of members) {\n                        addNames(memberType, names);\n                    }\n                }\n            );\n        }\n    }\n\n    if (debugPrint) {\n        for (const t of graph.allTypesUnordered()) {\n            const names = namesForType.get(t);\n            if (names === undefined) return;\n\n            const index = t.index;\n            console.log(`${index}: ${names === null ? \"*** too many ***\" : Array.from(names).join(\" \")}`);\n        }\n    }\n\n    // null means there are too many\n    const directAlternativesForType = new Map<Type, ReadonlySet<string> | null>();\n    const ancestorAlternativesForType = new Map<Type, ReadonlySet<string> | null>();\n    const pairsProcessed = new Map<Type | undefined, Set<Type>>();\n\n    function addAlternatives(\n        existing: ReadonlySet<string> | undefined,\n        alternatives: string[]\n    ): ReadonlySet<string> | undefined | null {\n        if (alternatives.length === 0) {\n            return existing;\n        }\n\n        if (existing === undefined) {\n            existing = new Set();\n        }\n\n        existing = setUnion(existing, alternatives);\n        if (existing.size < tooManyNamesThreshold) {\n            return existing;\n        }\n\n        return null;\n    }\n\n    function processType(ancestor: Type | undefined, t: Type, alternativeSuffix: string | undefined): void {\n        const names = defined(namesForType.get(t));\n\n        let processedEntry = pairsProcessed.get(ancestor);\n        if (processedEntry === undefined) processedEntry = new Set();\n        if (processedEntry.has(t)) return;\n        processedEntry.add(t);\n        pairsProcessed.set(ancestor, processedEntry);\n\n        const transformation = transformationForType(t);\n        if (transformation !== undefined) {\n            processType(ancestor, transformation.targetType, alternativeSuffix);\n        }\n\n        let ancestorAlternatives = ancestorAlternativesForType.get(t);\n        let directAlternatives = directAlternativesForType.get(t);\n        if (names === null) {\n            ancestorAlternatives = null;\n            directAlternatives = null;\n        } else {\n            if (ancestor !== undefined && ancestorAlternatives !== null) {\n                const ancestorNames = namesForType.get(ancestor);\n                if (ancestorNames === null) {\n                    ancestorAlternatives = null;\n                } else if (ancestorNames !== undefined) {\n                    const alternatives: string[] = [];\n                    for (const name of names) {\n                        alternatives.push(...Array.from(ancestorNames).map(an => `${an}_${name}`));\n                        // FIXME: add alternatives with the suffix here, too?\n\n                        alternatives.push(...Array.from(ancestorNames).map(an => `${an}_${name}_${t.kind}`));\n                        // FIXME: add alternatives with the suffix here, too?\n                    }\n\n                    ancestorAlternatives = addAlternatives(ancestorAlternatives, alternatives);\n                }\n            }\n\n            if (alternativeSuffix !== undefined && directAlternatives !== null) {\n                const alternatives: string[] = [];\n                for (const name of names) {\n                    // FIXME: we should only add these for names we couldn't singularize\n                    alternatives.push(`${name}_${alternativeSuffix}`);\n                }\n\n                directAlternatives = addAlternatives(directAlternatives, alternatives);\n            }\n        }\n\n        if (ancestorAlternatives !== undefined) {\n            ancestorAlternativesForType.set(t, ancestorAlternatives);\n        }\n\n        if (directAlternatives !== undefined) {\n            directAlternativesForType.set(t, directAlternatives);\n        }\n\n        if (t instanceof ObjectType) {\n            const properties = t.getSortedProperties();\n            for (const [, property] of properties) {\n                processType(t, property.type, undefined);\n            }\n\n            const values = t.getAdditionalProperties();\n            if (values !== undefined) {\n                processType(properties.size === 0 ? ancestor : t, values, \"value\");\n            }\n        } else {\n            matchCompoundType(\n                t,\n                arrayType => {\n                    processType(ancestor, arrayType.items, \"element\");\n                },\n                _classType => panic(\"We handled this above\"),\n                _mapType => panic(\"We handled this above\"),\n                _objectType => panic(\"We handled this above\"),\n                unionType => {\n                    const members = setSortBy(unionType.members, member => member.kind);\n                    const unionHasGivenName = unionType.hasNames && !unionType.getNames().areInferred;\n                    const unionIsAncestor = unionHasGivenName || nullableFromUnion(unionType) === null;\n                    const ancestorForMembers = unionIsAncestor ? unionType : ancestor;\n                    for (const memberType of members) {\n                        processType(ancestorForMembers, memberType, undefined);\n                    }\n                }\n            );\n        }\n    }\n\n    for (const [, t] of graph.topLevels) {\n        processType(undefined, t, undefined);\n    }\n\n    for (const t of graph.allTypesUnordered()) {\n        const names = namesForType.get(t);\n        if (names === undefined) continue;\n        if (names === null) {\n            directAlternativesForType.set(t, null);\n            continue;\n        }\n\n        let alternatives = directAlternativesForType.get(t);\n        if (alternatives === null) continue;\n        if (alternatives === undefined) {\n            alternatives = new Set();\n        }\n\n        alternatives = setUnion(\n            alternatives,\n            setMap(names, name => `${name}_${t.kind}`)\n        );\n        directAlternativesForType.set(t, alternatives);\n    }\n\n    for (const t of graph.allTypesUnordered()) {\n        const names = namesForType.get(t);\n        if (names === undefined) continue;\n\n        let typeNames: TypeNames;\n        if (names === null) {\n            typeNames = new TooManyTypeNames(1);\n        } else {\n            const ancestorAlternatives = ancestorAlternativesForType.get(t);\n            const directAlternatives = directAlternativesForType.get(t);\n\n            let alternatives: ReadonlySet<string> | undefined;\n            if (ancestorAlternatives === null && directAlternatives === null) {\n                alternatives = undefined;\n            } else {\n                if (directAlternatives !== null && directAlternatives !== undefined) {\n                    alternatives = directAlternatives;\n                } else {\n                    alternatives = new Set();\n                }\n\n                if (ancestorAlternatives !== null && ancestorAlternatives !== undefined) {\n                    alternatives = setUnion(alternatives, ancestorAlternatives);\n                }\n            }\n\n            typeNames = TypeNames.makeWithDistance(names, alternatives, destructive ? 1 : 10);\n        }\n\n        setNames(t, t.hasNames ? t.getNames().add([typeNames]) : typeNames);\n    }\n}\n","import {\n    iterableFirst,\n    mapFromIterable,\n    mapFromObject,\n    mapMap,\n    mapMergeInto,\n    setUnionManyInto\n} from \"collection-utils\";\n\nimport { type JSONSchemaAttributes, type JSONSchemaType, type Ref } from \"../input/JSONSchemaInput\";\nimport { type JSONSchema } from \"../input/JSONSchemaStore\";\nimport { messageAssert } from \"../Messages\";\nimport { checkArray, checkStringMap, defined, isStringMap } from \"../support/Support\";\nimport { type EnumType, type ObjectType, type Type, type UnionType } from \"../Type\";\n\nimport { TypeAttributeKind, type TypeAttributes } from \"./TypeAttributes\";\n\nexport type AccessorEntry = string | Map<string, string>;\n\nexport type AccessorNames = Map<string, AccessorEntry>;\n\nclass AccessorNamesTypeAttributeKind extends TypeAttributeKind<AccessorNames> {\n    public constructor() {\n        super(\"accessorNames\");\n    }\n\n    public makeInferred(_: AccessorNames): undefined {\n        return undefined;\n    }\n}\n\nexport const accessorNamesTypeAttributeKind: TypeAttributeKind<AccessorNames> = new AccessorNamesTypeAttributeKind();\n\n// Returns [name, isFixed].\nfunction getFromEntry(entry: AccessorEntry, language: string): [string, boolean] | undefined {\n    if (typeof entry === \"string\") return [entry, false];\n\n    const maybeForLanguage = entry.get(language);\n    if (maybeForLanguage !== undefined) return [maybeForLanguage, true];\n\n    const maybeWildcard = entry.get(\"*\");\n    if (maybeWildcard !== undefined) return [maybeWildcard, false];\n\n    return undefined;\n}\n\nexport function lookupKey(accessors: AccessorNames, key: string, language: string): [string, boolean] | undefined {\n    const entry = accessors.get(key);\n    if (entry === undefined) return undefined;\n    return getFromEntry(entry, language);\n}\n\nexport function objectPropertyNames(o: ObjectType, language: string): Map<string, [string, boolean] | undefined> {\n    const accessors = accessorNamesTypeAttributeKind.tryGetInAttributes(o.getAttributes());\n    const map = o.getProperties();\n    if (accessors === undefined) return mapMap(map, _ => undefined);\n    return mapMap(map, (_cp, n) => lookupKey(accessors, n, language));\n}\n\nexport function enumCaseNames(e: EnumType, language: string): Map<string, [string, boolean] | undefined> {\n    const accessors = accessorNamesTypeAttributeKind.tryGetInAttributes(e.getAttributes());\n    if (accessors === undefined) return mapMap(e.cases.entries(), _ => undefined);\n    return mapMap(e.cases.entries(), c => lookupKey(accessors, c, language));\n}\n\nexport function getAccessorName(\n    names: Map<string, [string, boolean] | undefined>,\n    original: string\n): [string | undefined, boolean] {\n    const maybeName = names.get(original);\n    if (maybeName === undefined) return [undefined, false];\n    return maybeName;\n}\n\n// Union members can be recombined and reordered, and unions are combined as well, so\n// we can't just store an array of accessor entries in a union, one array entry for each\n// union member.  Instead, we give each union in the origin type graph a union identifier,\n// and each union member type gets a map from union identifiers to accessor entries.\n// That way, no matter how the types are recombined, if we find a union member, we can look\n// up its union's identifier(s), and then look up the member's accessor entries for that\n// identifier.  Of course we might find more than one, potentially conflicting.\nclass UnionIdentifierTypeAttributeKind extends TypeAttributeKind<ReadonlySet<number>> {\n    public constructor() {\n        super(\"unionIdentifier\");\n    }\n\n    public combine(arr: Array<ReadonlySet<number>>): ReadonlySet<number> {\n        return setUnionManyInto(new Set(), arr);\n    }\n\n    public makeInferred(_: ReadonlySet<number>): ReadonlySet<number> {\n        return new Set();\n    }\n}\n\nexport const unionIdentifierTypeAttributeKind: TypeAttributeKind<ReadonlySet<number>> =\n    new UnionIdentifierTypeAttributeKind();\n\nlet nextUnionIdentifier = 0;\n\nexport function makeUnionIdentifierAttribute(): TypeAttributes {\n    const attributes = unionIdentifierTypeAttributeKind.makeAttributes(new Set([nextUnionIdentifier]));\n    nextUnionIdentifier += 1;\n    return attributes;\n}\n\nclass UnionMemberNamesTypeAttributeKind extends TypeAttributeKind<Map<number, AccessorEntry>> {\n    public constructor() {\n        super(\"unionMemberNames\");\n    }\n\n    public combine(arr: Array<Map<number, AccessorEntry>>): Map<number, AccessorEntry> {\n        const result = new Map<number, AccessorEntry>();\n        for (const m of arr) {\n            mapMergeInto(result, m);\n        }\n\n        return result;\n    }\n}\n\nexport const unionMemberNamesTypeAttributeKind: TypeAttributeKind<Map<number, AccessorEntry>> =\n    new UnionMemberNamesTypeAttributeKind();\n\nexport function makeUnionMemberNamesAttribute(unionAttributes: TypeAttributes, entry: AccessorEntry): TypeAttributes {\n    const identifiers = defined(unionIdentifierTypeAttributeKind.tryGetInAttributes(unionAttributes));\n    const map = mapFromIterable(identifiers, _ => entry);\n    return unionMemberNamesTypeAttributeKind.makeAttributes(map);\n}\n\nexport function unionMemberName(u: UnionType, member: Type, language: string): [string | undefined, boolean] {\n    const identifiers = unionIdentifierTypeAttributeKind.tryGetInAttributes(u.getAttributes());\n    if (identifiers === undefined) return [undefined, false];\n\n    const memberNames = unionMemberNamesTypeAttributeKind.tryGetInAttributes(member.getAttributes());\n    if (memberNames === undefined) return [undefined, false];\n\n    const names = new Set<string>();\n    const fixedNames = new Set<string>();\n    for (const i of identifiers) {\n        const maybeEntry = memberNames.get(i);\n        if (maybeEntry === undefined) continue;\n        const maybeName = getFromEntry(maybeEntry, language);\n        if (maybeName === undefined) continue;\n        const [name, isNameFixed] = maybeName;\n        if (isNameFixed) {\n            fixedNames.add(name);\n        } else {\n            names.add(name);\n        }\n    }\n\n    let size: number;\n    let isFixed: boolean;\n    let first = iterableFirst(fixedNames);\n    if (first !== undefined) {\n        size = fixedNames.size;\n        isFixed = true;\n    } else {\n        first = iterableFirst(names);\n        if (first === undefined) return [undefined, false];\n\n        size = names.size;\n        isFixed = false;\n    }\n\n    messageAssert(size === 1, \"SchemaMoreThanOneUnionMemberName\", { names: Array.from(names) });\n    return [first, isFixed];\n}\n\nfunction isAccessorEntry(x: unknown): x is string | { [language: string]: string } {\n    if (typeof x === \"string\") {\n        return true;\n    }\n\n    return isStringMap(x, (v: unknown): v is string => typeof v === \"string\");\n}\n\nfunction makeAccessorEntry(ae: string | { [language: string]: string }): AccessorEntry {\n    if (typeof ae === \"string\") return ae;\n    return mapFromObject(ae);\n}\n\nexport function makeAccessorNames(x: unknown): AccessorNames {\n    // FIXME: Do proper error reporting\n    const stringMap = checkStringMap(x, isAccessorEntry);\n    return mapMap(mapFromObject(stringMap), makeAccessorEntry);\n}\n\nexport function accessorNamesAttributeProducer(\n    schema: JSONSchema,\n    canonicalRef: Ref,\n    _types: Set<JSONSchemaType>,\n    cases: JSONSchema[] | undefined\n): JSONSchemaAttributes | undefined {\n    if (typeof schema !== \"object\") return undefined;\n    const maybeAccessors = schema[\"qt-accessors\"];\n    if (maybeAccessors === undefined) return undefined;\n\n    if (cases === undefined) {\n        return { forType: accessorNamesTypeAttributeKind.makeAttributes(makeAccessorNames(maybeAccessors)) };\n    } else {\n        const identifierAttribute = makeUnionIdentifierAttribute();\n\n        const accessors = checkArray(maybeAccessors, isAccessorEntry);\n        messageAssert(cases.length === accessors.length, \"SchemaWrongAccessorEntryArrayLength\", {\n            operation: \"oneOf\",\n            ref: canonicalRef.push(\"oneOf\")\n        });\n        const caseAttributes = accessors.map(accessor =>\n            makeUnionMemberNamesAttribute(identifierAttribute, makeAccessorEntry(accessor))\n        );\n        return { forUnion: identifierAttribute, forCases: caseAttributes };\n    }\n}\n","import { type JSONSchemaAttributes, type JSONSchemaType, type Ref } from \"../input/JSONSchemaInput\";\nimport { type JSONSchema } from \"../input/JSONSchemaStore\";\nimport { messageError } from \"../Messages\";\nimport { assert } from \"../support/Support\";\nimport { type Type, type TypeKind } from \"../Type\";\n\nimport { TypeAttributeKind } from \"./TypeAttributes\";\n\n// This can't be an object type, unfortunately, because it's in the\n// type's identity and as such must be comparable and hashable with\n// `areEqual`, `hashCodeOf`.\nexport type MinMaxConstraint = [number | undefined, number | undefined];\n\nfunction checkMinMaxConstraint(minmax: MinMaxConstraint): MinMaxConstraint | undefined {\n    const [min, max] = minmax;\n    if (typeof min === \"number\" && typeof max === \"number\" && min > max) {\n        return messageError(\"MiscInvalidMinMaxConstraint\", { min, max });\n    }\n\n    if (min === undefined && max === undefined) {\n        return undefined;\n    }\n\n    return minmax;\n}\n\nexport class MinMaxConstraintTypeAttributeKind extends TypeAttributeKind<MinMaxConstraint> {\n    public constructor(\n        name: string,\n        private readonly _typeKinds: Set<TypeKind>,\n        private _minSchemaProperty: string,\n        private _maxSchemaProperty: string\n    ) {\n        super(name);\n    }\n\n    public get inIdentity(): boolean {\n        return true;\n    }\n\n    public combine(arr: MinMaxConstraint[]): MinMaxConstraint | undefined {\n        assert(arr.length > 0);\n\n        let [min, max] = arr[0];\n        for (let i = 1; i < arr.length; i++) {\n            const [otherMin, otherMax] = arr[i];\n            if (typeof min === \"number\" && typeof otherMin === \"number\") {\n                min = Math.min(min, otherMin);\n            } else {\n                min = undefined;\n            }\n\n            if (typeof max === \"number\" && typeof otherMax === \"number\") {\n                max = Math.max(max, otherMax);\n            } else {\n                max = undefined;\n            }\n        }\n\n        return checkMinMaxConstraint([min, max]);\n    }\n\n    public intersect(arr: MinMaxConstraint[]): MinMaxConstraint | undefined {\n        assert(arr.length > 0);\n\n        let [min, max] = arr[0];\n        for (let i = 1; i < arr.length; i++) {\n            const [otherMin, otherMax] = arr[i];\n            if (typeof min === \"number\" && typeof otherMin === \"number\") {\n                min = Math.max(min, otherMin);\n            } else if (min === undefined) {\n                min = otherMin;\n            }\n\n            if (typeof max === \"number\" && typeof otherMax === \"number\") {\n                max = Math.min(max, otherMax);\n            } else if (max === undefined) {\n                max = otherMax;\n            }\n        }\n\n        return checkMinMaxConstraint([min, max]);\n    }\n\n    public makeInferred(_: MinMaxConstraint): undefined {\n        return undefined;\n    }\n\n    public addToSchema(schema: { [name: string]: unknown }, t: Type, attr: MinMaxConstraint): void {\n        if (this._typeKinds.has(t.kind)) return;\n\n        const [min, max] = attr;\n        if (min !== undefined) {\n            schema[this._minSchemaProperty] = min;\n        }\n\n        if (max !== undefined) {\n            schema[this._maxSchemaProperty] = max;\n        }\n    }\n\n    public stringify([min, max]: MinMaxConstraint): string {\n        return `${min}-${max}`;\n    }\n}\n\nexport const minMaxTypeAttributeKind: TypeAttributeKind<MinMaxConstraint> = new MinMaxConstraintTypeAttributeKind(\n    \"minMax\",\n    new Set<TypeKind>([\"integer\", \"double\"]),\n    \"minimum\",\n    \"maximum\"\n);\n\nexport const minMaxLengthTypeAttributeKind: TypeAttributeKind<MinMaxConstraint> = new MinMaxConstraintTypeAttributeKind(\n    \"minMaxLength\",\n    new Set<TypeKind>([\"string\"]),\n    \"minLength\",\n    \"maxLength\"\n);\n\nfunction producer(schema: JSONSchema, minProperty: string, maxProperty: string): MinMaxConstraint | undefined {\n    if (!(typeof schema === \"object\")) return undefined;\n\n    let min: number | undefined = undefined;\n    let max: number | undefined = undefined;\n\n    if (typeof schema[minProperty] === \"number\") {\n        min = schema[minProperty];\n    }\n\n    if (typeof schema[maxProperty] === \"number\") {\n        max = schema[maxProperty];\n    }\n\n    if (min === undefined && max === undefined) return undefined;\n    return [min, max];\n}\n\nexport function minMaxAttributeProducer(\n    schema: JSONSchema,\n    _ref: Ref,\n    types: Set<JSONSchemaType>\n): JSONSchemaAttributes | undefined {\n    if (!types.has(\"number\") && !types.has(\"integer\")) return undefined;\n\n    const maybeMinMax = producer(schema, \"minimum\", \"maximum\");\n    if (maybeMinMax === undefined) return undefined;\n    return { forNumber: minMaxTypeAttributeKind.makeAttributes(maybeMinMax) };\n}\n\nexport function minMaxLengthAttributeProducer(\n    schema: JSONSchema,\n    _ref: Ref,\n    types: Set<JSONSchemaType>\n): JSONSchemaAttributes | undefined {\n    if (!types.has(\"string\")) return undefined;\n\n    const maybeMinMaxLength = producer(schema, \"minLength\", \"maxLength\");\n    if (maybeMinMaxLength === undefined) return undefined;\n    return { forString: minMaxLengthTypeAttributeKind.makeAttributes(maybeMinMaxLength) };\n}\n\nexport function minMaxValueForType(t: Type): MinMaxConstraint | undefined {\n    return minMaxTypeAttributeKind.tryGetInAttributes(t.getAttributes());\n}\n\nexport function minMaxLengthForType(t: Type): MinMaxConstraint | undefined {\n    return minMaxLengthTypeAttributeKind.tryGetInAttributes(t.getAttributes());\n}\n\nexport class PatternTypeAttributeKind extends TypeAttributeKind<string> {\n    public constructor() {\n        super(\"pattern\");\n    }\n\n    public get inIdentity(): boolean {\n        return true;\n    }\n\n    public combine(arr: string[]): string {\n        assert(arr.length > 0);\n        return arr.map(p => `(${p})`).join(\"|\");\n    }\n\n    public intersect(_arr: string[]): string | undefined {\n        /** FIXME!!! what is the intersection of regexps? */\n        return undefined;\n    }\n\n    public makeInferred(_: string): undefined {\n        return undefined;\n    }\n\n    public addToSchema(schema: { [name: string]: unknown }, t: Type, attr: string): void {\n        if (t.kind !== \"string\") return;\n        schema.pattern = attr;\n    }\n}\n\nexport const patternTypeAttributeKind: TypeAttributeKind<string> = new PatternTypeAttributeKind();\n\nexport function patternAttributeProducer(\n    schema: JSONSchema,\n    _ref: Ref,\n    types: Set<JSONSchemaType>\n): JSONSchemaAttributes | undefined {\n    if (!(typeof schema === \"object\")) return undefined;\n    if (!types.has(\"string\")) return undefined;\n\n    const patt = schema.pattern;\n    if (typeof patt !== \"string\") return undefined;\n    return { forString: patternTypeAttributeKind.makeAttributes(patt) };\n}\n\nexport function patternForType(t: Type): string | undefined {\n    return patternTypeAttributeKind.tryGetInAttributes(t.getAttributes());\n}\n","import { mapMap } from \"collection-utils\";\n\nimport { type JSONSchemaAttributes, type JSONSchemaType, type Ref } from \"../input/JSONSchemaInput\";\nimport { type JSONSchema } from \"../input/JSONSchemaStore\";\nimport { type EnumType } from \"../Type\";\n\nimport { type AccessorNames, lookupKey, makeAccessorNames } from \"./AccessorNames\";\nimport { TypeAttributeKind } from \"./TypeAttributes\";\n\nclass EnumValuesTypeAttributeKind extends TypeAttributeKind<AccessorNames> {\n    public constructor() {\n        super(\"enumValues\");\n    }\n\n    public makeInferred(_: AccessorNames): undefined {\n        return undefined;\n    }\n}\n\nexport const enumValuesTypeAttributeKind: TypeAttributeKind<AccessorNames> = new EnumValuesTypeAttributeKind();\n\nexport function enumCaseValues(e: EnumType, language: string): Map<string, [string, boolean] | undefined> {\n    const enumValues = enumValuesTypeAttributeKind.tryGetInAttributes(e.getAttributes());\n    if (enumValues === undefined) return mapMap(e.cases.entries(), _ => undefined);\n    return mapMap(e.cases.entries(), c => lookupKey(enumValues, c, language));\n}\n\nexport function enumValuesAttributeProducer(\n    schema: JSONSchema,\n    _canonicalRef: Ref | undefined,\n    _types: Set<JSONSchemaType>\n): JSONSchemaAttributes | undefined {\n    if (typeof schema !== \"object\") return undefined;\n\n    const maybeEnumValues = schema[\"qt-enum-values\"];\n\n    if (maybeEnumValues === undefined) return undefined;\n\n    return { forType: enumValuesTypeAttributeKind.makeAttributes(makeAccessorNames(maybeEnumValues)) };\n}\n","import { type StringMap, assert } from \"../support/Support\";\n\nexport type JSONSchema = StringMap | boolean;\n\nexport abstract class JSONSchemaStore {\n    private readonly _schemas = new Map<string, JSONSchema>();\n\n    private add(address: string, schema: JSONSchema): void {\n        assert(!this._schemas.has(address), \"Cannot set a schema for an address twice\");\n        this._schemas.set(address, schema);\n    }\n\n    // FIXME: Remove the undefined option\n    public abstract fetch(_address: string): Promise<JSONSchema | undefined>;\n\n    public async get(address: string, debugPrint: boolean): Promise<JSONSchema | undefined> {\n        let schema = this._schemas.get(address);\n        if (schema !== undefined) {\n            return schema;\n        }\n\n        if (debugPrint) {\n            console.log(`trying to fetch ${address}`);\n        }\n\n        try {\n            schema = await this.fetch(address);\n        } catch (e) {\n            // FIXME: handle or log this error\n        }\n\n        if (schema === undefined) {\n            if (debugPrint) {\n                console.log(`couldn't fetch ${address}`);\n            }\n\n            return undefined;\n        }\n\n        if (debugPrint) {\n            console.log(`successully fetched ${address}`);\n        }\n\n        this.add(address, schema);\n        return schema;\n    }\n}\n","import {\n    EqualityMap,\n    addHashCode,\n    arrayGetFromEnd,\n    arrayLast,\n    arrayMapSync,\n    definedMap,\n    // eslint-disable-next-line @typescript-eslint/no-redeclare\n    hasOwnProperty,\n    hashCodeOf,\n    hashString,\n    iterableFind,\n    iterableFirst,\n    mapFromIterable,\n    mapFromObject,\n    mapMap,\n    mapMapSync,\n    mapMergeInto,\n    mapSortBy,\n    setFilter,\n    setSubtract\n} from \"collection-utils\";\nimport URI from \"urijs\";\n\nimport { accessorNamesAttributeProducer } from \"../attributes/AccessorNames\";\nimport {\n    minMaxAttributeProducer,\n    minMaxLengthAttributeProducer,\n    patternAttributeProducer\n} from \"../attributes/Constraints\";\n// eslint-disable-next-line import/no-cycle\nimport { descriptionAttributeProducer } from \"../attributes/Description\";\nimport { enumValuesAttributeProducer } from \"../attributes/EnumValues\";\nimport { StringTypes } from \"../attributes/StringTypes\";\nimport {\n    type TypeAttributes,\n    combineTypeAttributes,\n    emptyTypeAttributes,\n    makeTypeAttributesInferred\n} from \"../attributes/TypeAttributes\";\nimport { TypeNames, makeNamesTypeAttributes, modifyTypeNames, singularizeTypeNames } from \"../attributes/TypeNames\";\nimport { uriSchemaAttributesProducer } from \"../attributes/URIAttributes\";\nimport { messageAssert, messageError } from \"../Messages\";\nimport { type RunContext } from \"../Run\";\nimport { type StringMap, assert, assertNever, defined, panic, parseJSON } from \"../support/Support\";\nimport {\n    type PrimitiveTypeKind,\n    type TransformedStringTypeKind,\n    isNumberTypeKind,\n    transformedStringTypeTargetTypeKindsMap\n} from \"../Type\";\nimport { type TypeBuilder } from \"../TypeBuilder\";\nimport { type TypeRef } from \"../TypeGraph\";\n\nimport { type Input } from \"./Inputs\";\nimport { type JSONSchema, JSONSchemaStore } from \"./JSONSchemaStore\";\n\n// There's a cyclic import here. Ignoring now because it requires a large refactor.\n// skipcq: JS-E1008\n\nexport enum PathElementKind {\n    Root = 1,\n    KeyOrIndex = 2,\n    Type = 3,\n    Object = 4\n}\n\nexport type PathElement =\n    | { kind: PathElementKind.Root }\n    | { key: string; kind: PathElementKind.KeyOrIndex }\n    | { index: number; kind: PathElementKind.Type }\n    | { kind: PathElementKind.Object };\n\nfunction keyOrIndex(pe: PathElement): string | undefined {\n    if (pe.kind !== PathElementKind.KeyOrIndex) return undefined;\n    return pe.key;\n}\n\nfunction pathElementEquals(a: PathElement, b: PathElement): boolean {\n    if (a.kind !== b.kind) return false;\n\n    if (a.kind === PathElementKind.Type && b.kind === PathElementKind.Type) {\n        return a.index === b.index;\n    }\n\n    if (a.kind === PathElementKind.KeyOrIndex && b.kind === PathElementKind.KeyOrIndex) {\n        return a.key === b.key;\n    }\n\n    return true;\n}\n\nfunction withRef(refOrLoc: Ref | (() => Ref) | Location): { ref: Ref };\nfunction withRef<T extends object>(refOrLoc: Ref | (() => Ref) | Location, props?: T): T & { ref: Ref };\nfunction withRef<T extends object>(refOrLoc: Ref | (() => Ref) | Location, props?: T): unknown {\n    const ref =\n        typeof refOrLoc === \"function\" ? refOrLoc() : refOrLoc instanceof Ref ? refOrLoc : refOrLoc.canonicalRef;\n    return Object.assign({ ref }, props ?? {});\n}\n\nfunction checkJSONSchemaObject(x: unknown, refOrLoc: Ref | (() => Ref)): StringMap {\n    if (Array.isArray(x)) {\n        return messageError(\"SchemaArrayIsInvalidSchema\", withRef(refOrLoc));\n    }\n\n    if (x === null) {\n        return messageError(\"SchemaNullIsInvalidSchema\", withRef(refOrLoc));\n    }\n\n    if (typeof x !== \"object\") {\n        return messageError(\"SchemaInvalidJSONSchemaType\", withRef(refOrLoc, { type: typeof x }));\n    }\n\n    return x;\n}\n\nfunction checkJSONSchema(x: unknown, refOrLoc: Ref | (() => Ref)): JSONSchema {\n    if (typeof x === \"boolean\") return x;\n    return checkJSONSchemaObject(x, refOrLoc);\n}\n\nconst numberRegexp = new RegExp(\"^[0-9]+$\");\n\nfunction normalizeURI(uri: string | URI): URI {\n    // FIXME: This is overly complicated and a bit shady.  The problem is\n    // that `normalize` will URL-escape, with the result that if we want to\n    // open the URL as a file, escaped character will thwart us.  I think the\n    // JSONSchemaStore should take a URI, not a string, and if it reads from\n    // a file it can decode by itself.\n    if (typeof uri === \"string\") {\n        uri = new URI(uri);\n    }\n\n    return new URI(URI.decode(uri.clone().normalize().toString()));\n}\n\nexport class Ref {\n    public static root(address: string | undefined): Ref {\n        const uri = definedMap(address, a => new URI(a));\n        return new Ref(uri, []);\n    }\n\n    private static parsePath(path: string): readonly PathElement[] {\n        const elements: PathElement[] = [];\n\n        if (path.startsWith(\"/\")) {\n            elements.push({ kind: PathElementKind.Root });\n            path = path.slice(1);\n        }\n\n        if (path !== \"\") {\n            const parts = path.split(\"/\");\n            parts.forEach(part => elements.push({ kind: PathElementKind.KeyOrIndex, key: part }));\n        }\n\n        return elements;\n    }\n\n    public static parseURI(uri: URI, destroyURI = false): Ref {\n        if (!destroyURI) {\n            uri = uri.clone();\n        }\n\n        let path = uri.fragment();\n        uri.fragment(\"\");\n        if ((uri.host() !== \"\" || uri.filename() !== \"\") && path === \"\") {\n            path = \"/\";\n        }\n\n        const elements = Ref.parsePath(path);\n        return new Ref(uri, elements);\n    }\n\n    public static parse(ref: string): Ref {\n        return Ref.parseURI(new URI(ref), true);\n    }\n\n    public addressURI: URI | undefined;\n\n    public constructor(\n        addressURI: URI | undefined,\n        public readonly path: readonly PathElement[]\n    ) {\n        if (addressURI !== undefined) {\n            assert(addressURI.fragment() === \"\", `Ref URI with fragment is not allowed: ${addressURI.toString()}`);\n            this.addressURI = normalizeURI(addressURI);\n        } else {\n            this.addressURI = undefined;\n        }\n    }\n\n    public get hasAddress(): boolean {\n        return this.addressURI !== undefined;\n    }\n\n    public get address(): string {\n        return defined(this.addressURI).toString();\n    }\n\n    public get isRoot(): boolean {\n        return this.path.length === 1 && this.path[0].kind === PathElementKind.Root;\n    }\n\n    private pushElement(pe: PathElement): Ref {\n        const newPath = Array.from(this.path);\n        newPath.push(pe);\n        return new Ref(this.addressURI, newPath);\n    }\n\n    public push(...keys: string[]): Ref {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let ref: Ref = this;\n        for (const key of keys) {\n            ref = ref.pushElement({ kind: PathElementKind.KeyOrIndex, key });\n        }\n\n        return ref;\n    }\n\n    public pushObject(): Ref {\n        return this.pushElement({ kind: PathElementKind.Object });\n    }\n\n    public pushType(index: number): Ref {\n        return this.pushElement({ kind: PathElementKind.Type, index });\n    }\n\n    public resolveAgainst(base: Ref | undefined): Ref {\n        let addressURI = this.addressURI;\n        if (base?.addressURI !== undefined) {\n            addressURI = addressURI === undefined ? base.addressURI : addressURI.absoluteTo(base.addressURI);\n        }\n\n        return new Ref(addressURI, this.path);\n    }\n\n    public get name(): string {\n        const path = Array.from(this.path);\n\n        for (;;) {\n            const e = path.pop();\n            if (e === undefined || e.kind === PathElementKind.Root) {\n                let name = this.addressURI !== undefined ? this.addressURI.filename() : \"\";\n                const suffix = this.addressURI !== undefined ? this.addressURI.suffix() : \"\";\n                if (name.length > suffix.length + 1) {\n                    name = name.slice(0, name.length - suffix.length - 1);\n                }\n\n                if (name === \"\") {\n                    return \"Something\";\n                }\n\n                return name;\n            }\n\n            switch (e.kind) {\n                case PathElementKind.KeyOrIndex:\n                    if (numberRegexp.test(e.key)) {\n                        return e.key;\n                    }\n\n                    break;\n                case PathElementKind.Type:\n                case PathElementKind.Object:\n                    return panic(\"We shouldn't try to get the name of Type or Object refs\");\n                default:\n                    return assertNever(e);\n            }\n        }\n    }\n\n    public get definitionName(): string | undefined {\n        const pe = arrayGetFromEnd(this.path, 2);\n        if (pe === undefined) return undefined;\n        if (keyOrIndex(pe) === \"definitions\") return keyOrIndex(defined(arrayLast(this.path)));\n        return undefined;\n    }\n\n    public toString(): string {\n        function elementToString(e: PathElement): string {\n            switch (e.kind) {\n                case PathElementKind.Root:\n                    return \"\";\n                case PathElementKind.Type:\n                    return `type/${e.index.toString()}`;\n                case PathElementKind.Object:\n                    return \"object\";\n                case PathElementKind.KeyOrIndex:\n                    return e.key;\n                default:\n                    return assertNever(e);\n            }\n        }\n\n        const address = this.addressURI === undefined ? \"\" : this.addressURI.toString();\n        return address + \"#\" + this.path.map(elementToString).join(\"/\");\n    }\n\n    private lookup(local: unknown, path: readonly PathElement[], root: JSONSchema): JSONSchema {\n        const refMaker = (): Ref => new Ref(this.addressURI, path);\n        const first = path[0];\n        if (first === undefined) {\n            return checkJSONSchema(local, refMaker);\n        }\n\n        const rest = path.slice(1);\n        switch (first.kind) {\n            case PathElementKind.Root:\n                return this.lookup(root, rest, root);\n            case PathElementKind.KeyOrIndex:\n                const key = first.key;\n                if (Array.isArray(local)) {\n                    if (!/^\\d+$/.test(key)) {\n                        return messageError(\"SchemaCannotIndexArrayWithNonNumber\", withRef(refMaker, { actual: key }));\n                    }\n\n                    const index = parseInt(first.key, 10);\n                    if (index >= local.length) {\n                        return messageError(\"SchemaIndexNotInArray\", withRef(refMaker, { index }));\n                    }\n\n                    return this.lookup(local[index], rest, root);\n                } else {\n                    if (!hasOwnProperty(local, key)) {\n                        return messageError(\"SchemaKeyNotInObject\", withRef(refMaker, { key }));\n                    }\n\n                    return this.lookup(checkJSONSchemaObject(local, refMaker)[first.key], rest, root);\n                }\n\n            case PathElementKind.Type:\n                return panic('Cannot look up path that indexes \"type\"');\n            case PathElementKind.Object:\n                return panic('Cannot look up path that indexes \"object\"');\n            default:\n                return assertNever(first);\n        }\n    }\n\n    public lookupRef(root: JSONSchema): JSONSchema {\n        return this.lookup(root, this.path, root);\n    }\n\n    public equals<R extends Ref>(other: R): boolean {\n        if (!(other instanceof Ref)) return false;\n        if (this.addressURI !== undefined && other.addressURI !== undefined) {\n            if (!this.addressURI.equals(other.addressURI)) return false;\n        } else {\n            if ((this.addressURI === undefined) !== (other.addressURI === undefined)) return false;\n        }\n\n        const l = this.path.length;\n        if (l !== other.path.length) return false;\n        for (let i = 0; i < l; i++) {\n            if (!pathElementEquals(this.path[i], other.path[i])) return false;\n        }\n\n        return true;\n    }\n\n    public hashCode(): number {\n        let acc = hashCodeOf(definedMap(this.addressURI, u => u.toString()));\n        for (const pe of this.path) {\n            acc = addHashCode(acc, pe.kind);\n            switch (pe.kind) {\n                case PathElementKind.Type:\n                    acc = addHashCode(acc, pe.index);\n                    break;\n                case PathElementKind.KeyOrIndex:\n                    acc = addHashCode(acc, hashString(pe.key));\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return acc;\n    }\n}\n\nclass Location {\n    public readonly canonicalRef: Ref;\n\n    public readonly virtualRef: Ref;\n\n    public constructor(\n        canonicalRef: Ref,\n        virtualRef?: Ref,\n        public readonly haveID: boolean = false\n    ) {\n        this.canonicalRef = canonicalRef;\n        this.virtualRef = virtualRef ?? canonicalRef;\n    }\n\n    public updateWithID(id: string | unknown): Location {\n        if (typeof id !== \"string\") return this;\n        const parsed = Ref.parse(id);\n        const virtual = this.haveID ? parsed.resolveAgainst(this.virtualRef) : parsed;\n        if (!this.haveID) {\n            messageAssert(virtual.hasAddress, \"SchemaIDMustHaveAddress\", withRef(this, { id }));\n        }\n\n        return new Location(this.canonicalRef, virtual, true);\n    }\n\n    public push(...keys: string[]): Location {\n        return new Location(this.canonicalRef.push(...keys), this.virtualRef.push(...keys), this.haveID);\n    }\n\n    public pushObject(): Location {\n        return new Location(this.canonicalRef.pushObject(), this.virtualRef.pushObject(), this.haveID);\n    }\n\n    public pushType(index: number): Location {\n        return new Location(this.canonicalRef.pushType(index), this.virtualRef.pushType(index), this.haveID);\n    }\n\n    public toString(): string {\n        return `${this.virtualRef.toString()} (${this.canonicalRef.toString()})`;\n    }\n}\n\nclass Canonizer {\n    private readonly _map = new EqualityMap<Ref, Location>();\n\n    private readonly _schemaAddressesAdded = new Set<string>();\n\n    public constructor(private readonly _ctx: RunContext) {}\n\n    private addIDs(schema: unknown, loc: Location): void {\n        if (schema === null) return;\n        if (Array.isArray(schema)) {\n            for (let i = 0; i < schema.length; i++) {\n                this.addIDs(schema[i], loc.push(i.toString()));\n            }\n\n            return;\n        }\n\n        if (typeof schema !== \"object\") {\n            return;\n        }\n\n        const locWithoutID = loc;\n        const maybeID = \"$id\" in schema ? schema.$id : undefined;\n        if (typeof maybeID === \"string\") {\n            loc = loc.updateWithID(maybeID);\n        }\n\n        if (loc.haveID) {\n            if (this._ctx.debugPrintSchemaResolving) {\n                console.log(`adding mapping ${loc.toString()}`);\n            }\n\n            this._map.set(loc.virtualRef, locWithoutID);\n        }\n\n        for (const property of Object.getOwnPropertyNames(schema)) {\n            this.addIDs(schema[property as keyof typeof schema], loc.push(property));\n        }\n    }\n\n    public addSchema(schema: unknown, address: string): boolean {\n        if (this._schemaAddressesAdded.has(address)) return false;\n\n        this.addIDs(schema, new Location(Ref.root(address), Ref.root(undefined)));\n        this._schemaAddressesAdded.add(address);\n        return true;\n    }\n\n    // Returns: Canonical ref\n    public canonize(base: Location, ref: Ref): Location {\n        const virtual = ref.resolveAgainst(base.virtualRef);\n        const loc = this._map.get(virtual);\n        if (loc !== undefined) {\n            return loc;\n        }\n\n        const canonicalRef =\n            virtual.addressURI === undefined ? new Ref(base.canonicalRef.addressURI, virtual.path) : virtual;\n        return new Location(canonicalRef, new Ref(undefined, virtual.path));\n    }\n}\n\nfunction checkTypeList(typeOrTypes: string | string[], loc: Location): ReadonlySet<string> {\n    let set: Set<string>;\n    if (typeof typeOrTypes === \"string\") {\n        set = new Set([typeOrTypes]);\n    } else if (Array.isArray(typeOrTypes)) {\n        const arr: string[] = [];\n        for (const t of typeOrTypes) {\n            if (typeof t !== \"string\") {\n                return messageError(\"SchemaTypeElementMustBeString\", withRef(loc, { element: t }));\n            }\n\n            arr.push(t);\n        }\n\n        set = new Set(arr);\n    } else {\n        return messageError(\"SchemaTypeMustBeStringOrStringArray\", withRef(loc, { actual: typeOrTypes }));\n    }\n\n    messageAssert(set.size > 0, \"SchemaNoTypeSpecified\", withRef(loc));\n    const validTypes = [\"null\", \"boolean\", \"object\", \"array\", \"number\", \"string\", \"integer\"];\n    const maybeInvalid = iterableFind(set, s => !validTypes.includes(s));\n    if (maybeInvalid !== undefined) {\n        return messageError(\"SchemaInvalidType\", withRef(loc, { type: maybeInvalid }));\n    }\n\n    return set;\n}\n\nfunction checkRequiredArray(arr: string[], loc: Location): string[] {\n    if (!Array.isArray(arr)) {\n        return messageError(\"SchemaRequiredMustBeStringOrStringArray\", withRef(loc, { actual: arr }));\n    }\n\n    for (const e of arr) {\n        if (typeof e !== \"string\") {\n            return messageError(\"SchemaRequiredElementMustBeString\", withRef(loc, { element: e }));\n        }\n    }\n\n    return arr;\n}\n\nexport const schemaTypeDict = {\n    null: true,\n    boolean: true,\n    string: true,\n    integer: true,\n    number: true,\n    array: true,\n    object: true\n};\nexport type JSONSchemaType = keyof typeof schemaTypeDict;\n\nconst schemaTypes = Object.getOwnPropertyNames(schemaTypeDict) as JSONSchemaType[];\n\nexport interface JSONSchemaAttributes {\n    forCases?: TypeAttributes[];\n    forNumber?: TypeAttributes;\n    forObject?: TypeAttributes;\n    forString?: TypeAttributes;\n    forType?: TypeAttributes;\n    forUnion?: TypeAttributes;\n}\nexport type JSONSchemaAttributeProducer = (\n    schema: JSONSchema,\n    canonicalRef: Ref,\n    types: Set<JSONSchemaType>,\n    unionCases: JSONSchema[] | undefined\n) => JSONSchemaAttributes | undefined;\n\nfunction typeKindForJSONSchemaFormat(format: string): TransformedStringTypeKind | undefined {\n    const target = iterableFind(\n        transformedStringTypeTargetTypeKindsMap,\n        ([_, { jsonSchema }]) => jsonSchema === format\n    );\n    if (target === undefined) return undefined;\n    return target[0] as TransformedStringTypeKind;\n}\n\nfunction schemaFetchError(base: Location | undefined, address: string): never {\n    if (base === undefined) {\n        return messageError(\"SchemaFetchErrorTopLevel\", { address });\n    } else {\n        return messageError(\"SchemaFetchError\", { address, base: base.canonicalRef });\n    }\n}\n\nclass Resolver {\n    public constructor(\n        private readonly _ctx: RunContext,\n        private readonly _store: JSONSchemaStore,\n        private readonly _canonizer: Canonizer\n    ) {}\n\n    private async tryResolveVirtualRef(\n        fetchBase: Location,\n        lookupBase: Location,\n        virtualRef: Ref\n    ): Promise<[JSONSchema | undefined, Location]> {\n        let didAdd = false;\n        // If we are resolving into a schema file that we haven't seen yet then\n        // we don't know its $id mapping yet, which means we don't know where we\n        // will end up.  What we do if we encounter a new schema is add all its\n        // IDs first, and then try to canonize again.\n        for (;;) {\n            const loc = this._canonizer.canonize(fetchBase, virtualRef);\n            const canonical = loc.canonicalRef;\n            assert(canonical.hasAddress, \"Canonical ref can't be resolved without an address\");\n            const address = canonical.address;\n\n            let schema =\n                canonical.addressURI === undefined\n                    ? undefined\n                    : await this._store.get(address, this._ctx.debugPrintSchemaResolving);\n            if (schema === undefined) {\n                return [undefined, loc];\n            }\n\n            if (this._canonizer.addSchema(schema, address)) {\n                assert(!didAdd, \"We can't add a schema twice\");\n                didAdd = true;\n            } else {\n                let lookupLoc = this._canonizer.canonize(lookupBase, virtualRef);\n                if (fetchBase !== undefined) {\n                    lookupLoc = new Location(\n                        new Ref(loc.canonicalRef.addressURI, lookupLoc.canonicalRef.path),\n                        lookupLoc.virtualRef,\n                        lookupLoc.haveID\n                    );\n                }\n\n                return [lookupLoc.canonicalRef.lookupRef(schema), lookupLoc];\n            }\n        }\n    }\n\n    public async resolveVirtualRef(base: Location, virtualRef: Ref): Promise<[JSONSchema, Location]> {\n        if (this._ctx.debugPrintSchemaResolving) {\n            console.log(`resolving ${virtualRef.toString()} relative to ${base.toString()}`);\n        }\n\n        // Try with the virtual base first.  If that doesn't work, use the\n        // canonical ref's address with the virtual base's path.\n        let result = await this.tryResolveVirtualRef(base, base, virtualRef);\n        let schema = result[0];\n        if (schema !== undefined) {\n            if (this._ctx.debugPrintSchemaResolving) {\n                console.log(`resolved to ${result[1].toString()}`);\n            }\n\n            return [schema, result[1]];\n        }\n\n        const altBase = new Location(\n            base.canonicalRef,\n            new Ref(base.canonicalRef.addressURI, base.virtualRef.path),\n            base.haveID\n        );\n        result = await this.tryResolveVirtualRef(altBase, base, virtualRef);\n        schema = result[0];\n        if (schema !== undefined) {\n            if (this._ctx.debugPrintSchemaResolving) {\n                console.log(`resolved to ${result[1].toString()}`);\n            }\n\n            return [schema, result[1]];\n        }\n\n        return schemaFetchError(base, virtualRef.address);\n    }\n\n    public async resolveTopLevelRef(ref: Ref): Promise<[JSONSchema, Location]> {\n        return await this.resolveVirtualRef(new Location(new Ref(ref.addressURI, [])), new Ref(undefined, ref.path));\n    }\n}\n\nasync function addTypesInSchema(\n    resolver: Resolver,\n    typeBuilder: TypeBuilder,\n    references: ReadonlyMap<string, Ref>,\n    attributeProducers: JSONSchemaAttributeProducer[]\n): Promise<void> {\n    let typeForCanonicalRef = new EqualityMap<Ref, TypeRef>();\n\n    function setTypeForLocation(loc: Location, t: TypeRef): void {\n        const maybeRef = typeForCanonicalRef.get(loc.canonicalRef);\n        if (maybeRef !== undefined) {\n            assert(maybeRef === t, \"Trying to set path again to different type\");\n        }\n\n        typeForCanonicalRef.set(loc.canonicalRef, t);\n    }\n\n    async function makeObject(\n        loc: Location,\n        attributes: TypeAttributes,\n        properties: StringMap,\n        requiredArray: string[],\n        additionalProperties: unknown,\n        sortKey: (k: string) => number | string = (k: string): string => k.toLowerCase()\n    ): Promise<TypeRef> {\n        const required = new Set(requiredArray);\n        const propertiesMap = mapSortBy(mapFromObject(properties), (_, k) => sortKey(k));\n        const props = await mapMapSync(propertiesMap, async (propSchema, propName) => {\n            const propLoc = loc.push(\"properties\", propName);\n            const t = await toType(\n                checkJSONSchema(propSchema, propLoc.canonicalRef),\n                propLoc,\n                makeNamesTypeAttributes(propName, true)\n            );\n            const isOptional = !required.has(propName);\n            return typeBuilder.makeClassProperty(t, isOptional);\n        });\n        let additionalPropertiesType: TypeRef | undefined;\n        if (additionalProperties === undefined || additionalProperties === true) {\n            additionalPropertiesType = typeBuilder.getPrimitiveType(\"any\");\n        } else if (additionalProperties === false) {\n            additionalPropertiesType = undefined;\n        } else {\n            const additionalLoc = loc.push(\"additionalProperties\");\n            additionalPropertiesType = await toType(\n                checkJSONSchema(additionalProperties, additionalLoc.canonicalRef),\n                additionalLoc,\n                singularizeTypeNames(attributes)\n            );\n        }\n\n        const additionalRequired = setSubtract(required, props.keys());\n        if (additionalRequired.size > 0) {\n            const t = additionalPropertiesType;\n            if (t === undefined) {\n                return messageError(\"SchemaAdditionalTypesForbidRequired\", withRef(loc));\n            }\n\n            const additionalProps = mapFromIterable(additionalRequired, _name =>\n                typeBuilder.makeClassProperty(t, false)\n            );\n            mapMergeInto(props, additionalProps);\n        }\n\n        return typeBuilder.getUniqueObjectType(attributes, props, additionalPropertiesType);\n    }\n\n    async function convertToType(schema: StringMap, loc: Location, typeAttributes: TypeAttributes): Promise<TypeRef> {\n        const enumArray = Array.isArray(schema.enum) ? schema.enum : undefined;\n        const isConst = schema.const !== undefined;\n        const typeSet = definedMap(schema.type, t => checkTypeList(t, loc));\n\n        function isTypeIncluded(name: JSONSchemaType): boolean {\n            if (typeSet !== undefined && !typeSet.has(name)) {\n                return false;\n            }\n\n            if (enumArray !== undefined) {\n                let predicate: (x: unknown) => boolean;\n                switch (name) {\n                    case \"null\":\n                        predicate = (x): x is null => x === null;\n                        break;\n                    case \"integer\":\n                        predicate = (x): x is number => typeof x === \"number\" && x === Math.floor(x);\n                        break;\n                    default:\n                        predicate = (x): x is typeof name => typeof x === name;\n                        break;\n                }\n\n                return enumArray.find(predicate) !== undefined;\n            }\n\n            if (isConst) {\n                return name === (schema.type ?? typeof schema.const);\n            }\n\n            return true;\n        }\n\n        const includedTypes = setFilter(schemaTypes, isTypeIncluded);\n        let producedAttributesForNoCases: JSONSchemaAttributes[] | undefined = undefined;\n\n        function forEachProducedAttribute(\n            cases: JSONSchema[] | undefined,\n            f: (attributes: JSONSchemaAttributes) => void\n        ): void {\n            let attributes: JSONSchemaAttributes[];\n            if (cases === undefined && producedAttributesForNoCases !== undefined) {\n                attributes = producedAttributesForNoCases;\n            } else {\n                attributes = [];\n                for (const producer of attributeProducers) {\n                    const newAttributes = producer(schema, loc.canonicalRef, includedTypes, cases);\n                    if (newAttributes === undefined) continue;\n                    attributes.push(newAttributes);\n                }\n\n                if (cases === undefined) {\n                    producedAttributesForNoCases = attributes;\n                }\n            }\n\n            for (const a of attributes) {\n                f(a);\n            }\n        }\n\n        function combineProducedAttributes(\n            f: (attributes: JSONSchemaAttributes) => TypeAttributes | undefined\n        ): TypeAttributes {\n            let result = emptyTypeAttributes;\n            forEachProducedAttribute(undefined, attr => {\n                const maybeAttributes = f(attr);\n                if (maybeAttributes === undefined) return;\n                result = combineTypeAttributes(\"union\", result, maybeAttributes);\n            });\n            return result;\n        }\n\n        function makeAttributes(attributes: TypeAttributes): TypeAttributes {\n            if (schema.oneOf === undefined) {\n                attributes = combineTypeAttributes(\n                    \"union\",\n                    attributes,\n                    combineProducedAttributes(({ forType, forUnion, forCases }) => {\n                        assert(\n                            forUnion === undefined && forCases === undefined,\n                            \"We can't have attributes for unions and cases if we don't have a union\"\n                        );\n                        return forType;\n                    })\n                );\n            }\n\n            return modifyTypeNames(attributes, maybeTypeNames => {\n                const typeNames = defined(maybeTypeNames);\n                if (!typeNames.areInferred) {\n                    return typeNames;\n                }\n\n                let title = schema.title;\n                if (typeof title !== \"string\") {\n                    title = loc.canonicalRef.definitionName;\n                }\n\n                if (typeof title === \"string\") {\n                    return TypeNames.make(new Set([title]), new Set(), schema.$ref !== undefined);\n                } else {\n                    return typeNames.makeInferred();\n                }\n            });\n        }\n\n        typeAttributes = makeAttributes(typeAttributes);\n        const inferredAttributes = makeTypeAttributesInferred(typeAttributes);\n\n        function makeStringType(attributes: TypeAttributes): TypeRef {\n            const kind = typeKindForJSONSchemaFormat(schema.format);\n            if (kind === undefined) {\n                return typeBuilder.getStringType(attributes, StringTypes.unrestricted);\n            } else {\n                return typeBuilder.getPrimitiveType(kind, attributes);\n            }\n        }\n\n        async function makeArrayType(): Promise<TypeRef> {\n            const singularAttributes = singularizeTypeNames(typeAttributes);\n            const items = schema.items;\n            let itemType: TypeRef;\n            if (Array.isArray(items)) {\n                const itemsLoc = loc.push(\"items\");\n                const itemTypes = await arrayMapSync(items, async (item, i) => {\n                    const itemLoc = itemsLoc.push(i.toString());\n                    return await toType(checkJSONSchema(item, itemLoc.canonicalRef), itemLoc, singularAttributes);\n                });\n                itemType = typeBuilder.getUnionType(emptyTypeAttributes, new Set(itemTypes));\n            } else if (typeof items === \"object\") {\n                const itemsLoc = loc.push(\"items\");\n                itemType = await toType(checkJSONSchema(items, itemsLoc.canonicalRef), itemsLoc, singularAttributes);\n            } else if (items !== undefined && items !== true) {\n                return messageError(\"SchemaArrayItemsMustBeStringOrArray\", withRef(loc, { actual: items }));\n            } else {\n                itemType = typeBuilder.getPrimitiveType(\"any\");\n            }\n\n            typeBuilder.addAttributes(itemType, singularAttributes);\n            return typeBuilder.getArrayType(emptyTypeAttributes, itemType);\n        }\n\n        async function makeObjectType(): Promise<TypeRef> {\n            let required: string[];\n            if (schema.required === undefined || typeof schema.required === \"boolean\") {\n                required = [];\n            } else {\n                required = Array.from(checkRequiredArray(schema.required, loc));\n            }\n\n            let properties: StringMap;\n            if (schema.properties === undefined) {\n                properties = {};\n            } else {\n                properties = checkJSONSchemaObject(schema.properties, loc.canonicalRef);\n            }\n\n            // In Schema Draft 3, `required` is `true` on a property that's required.\n            for (const p of Object.getOwnPropertyNames(properties)) {\n                if (properties[p].required === true && !required.includes(p)) {\n                    required.push(p);\n                }\n            }\n\n            let additionalProperties = schema.additionalProperties;\n            // This is an incorrect hack to fix an issue with a Go->Schema generator:\n            // https://github.com/quicktype/quicktype/issues/976\n            if (\n                additionalProperties === undefined &&\n                typeof schema.patternProperties === \"object\" &&\n                hasOwnProperty(schema.patternProperties, \".*\")\n            ) {\n                additionalProperties = schema.patternProperties[\".*\"];\n            }\n\n            const objectAttributes = combineTypeAttributes(\n                \"union\",\n                inferredAttributes,\n                combineProducedAttributes(({ forObject }) => forObject)\n            );\n            const order = schema.quicktypePropertyOrder ? schema.quicktypePropertyOrder : [];\n            const orderKey = (propertyName: string): string => {\n                // use the index of the order array\n                const index = order.indexOf(propertyName);\n                // if no index then use the property name\n                return index !== -1 ? index : propertyName.toLowerCase();\n            };\n\n            return await makeObject(loc, objectAttributes, properties, required, additionalProperties, orderKey);\n        }\n\n        async function makeTypesFromCases(cases: unknown[], kind: string): Promise<TypeRef[]> {\n            const kindLoc = loc.push(kind);\n            if (!Array.isArray(cases)) {\n                return messageError(\"SchemaSetOperationCasesIsNotArray\", withRef(kindLoc, { operation: kind, cases }));\n            }\n\n            return await arrayMapSync(cases, async (t, index) => {\n                const caseLoc = kindLoc.push(index.toString());\n                return await toType(\n                    checkJSONSchema(t, caseLoc.canonicalRef),\n                    caseLoc,\n                    makeTypeAttributesInferred(typeAttributes)\n                );\n            });\n        }\n\n        const intersectionType = typeBuilder.getUniqueIntersectionType(typeAttributes, undefined);\n        setTypeForLocation(loc, intersectionType);\n\n        async function convertOneOrAnyOf(cases: unknown[], kind: string): Promise<TypeRef> {\n            const typeRefs = await makeTypesFromCases(cases, kind);\n            let unionAttributes = makeTypeAttributesInferred(typeAttributes);\n            if (kind === \"oneOf\") {\n                forEachProducedAttribute(cases as JSONSchema[], ({ forType, forUnion, forCases }) => {\n                    if (forType !== undefined) {\n                        typeBuilder.addAttributes(intersectionType, forType);\n                    }\n\n                    if (forUnion !== undefined) {\n                        unionAttributes = combineTypeAttributes(\"union\", unionAttributes, forUnion);\n                    }\n\n                    if (forCases !== undefined) {\n                        assert(\n                            forCases.length === typeRefs.length,\n                            \"Number of case attributes doesn't match number of cases\"\n                        );\n                        for (let i = 0; i < typeRefs.length; i++) {\n                            typeBuilder.addAttributes(typeRefs[i], forCases[i]);\n                        }\n                    }\n                });\n            }\n\n            const unionType = typeBuilder.getUniqueUnionType(unionAttributes, undefined);\n            typeBuilder.setSetOperationMembers(unionType, new Set(typeRefs));\n            return unionType;\n        }\n\n        const includeObject = enumArray === undefined && !isConst && (typeSet === undefined || typeSet.has(\"object\"));\n        const includeArray = enumArray === undefined && !isConst && (typeSet === undefined || typeSet.has(\"array\"));\n        const needStringEnum =\n            includedTypes.has(\"string\") &&\n            enumArray !== undefined &&\n            enumArray.find(x => typeof x === \"string\") !== undefined;\n        const needUnion =\n            typeSet !== undefined ||\n            schema.properties !== undefined ||\n            schema.additionalProperties !== undefined ||\n            schema.items !== undefined ||\n            schema.required !== undefined ||\n            enumArray !== undefined ||\n            isConst;\n\n        const types: TypeRef[] = [];\n\n        if (needUnion) {\n            const unionTypes: TypeRef[] = [];\n\n            const numberAttributes = combineProducedAttributes(({ forNumber }) => forNumber);\n\n            for (const [name, kind] of [\n                [\"null\", \"null\"],\n                [\"number\", \"double\"],\n                [\"integer\", \"integer\"],\n                [\"boolean\", \"bool\"]\n            ] as Array<[JSONSchemaType, PrimitiveTypeKind]>) {\n                if (!includedTypes.has(name)) continue;\n\n                const attributes = isNumberTypeKind(kind) ? numberAttributes : undefined;\n                unionTypes.push(typeBuilder.getPrimitiveType(kind, attributes));\n            }\n\n            const stringAttributes = combineTypeAttributes(\n                \"union\",\n                inferredAttributes,\n                combineProducedAttributes(({ forString }) => forString)\n            );\n\n            if (needStringEnum || isConst) {\n                const cases = isConst ? [schema.const] : enumArray?.filter(x => typeof x === \"string\") ?? [];\n                unionTypes.push(typeBuilder.getStringType(stringAttributes, StringTypes.fromCases(cases)));\n            } else if (includedTypes.has(\"string\")) {\n                unionTypes.push(makeStringType(stringAttributes));\n            }\n\n            if (includeArray) {\n                unionTypes.push(await makeArrayType());\n            }\n\n            if (includeObject) {\n                unionTypes.push(await makeObjectType());\n            }\n\n            types.push(typeBuilder.getUniqueUnionType(inferredAttributes, new Set(unionTypes)));\n        }\n\n        if (schema.$ref !== undefined) {\n            if (typeof schema.$ref !== \"string\") {\n                return messageError(\"SchemaRefMustBeString\", withRef(loc, { actual: typeof schema.$ref }));\n            }\n\n            const virtualRef = Ref.parse(schema.$ref);\n            const [target, newLoc] = await resolver.resolveVirtualRef(loc, virtualRef);\n            const attributes = modifyTypeNames(typeAttributes, tn => {\n                if (!defined(tn).areInferred) return tn;\n                return TypeNames.make(new Set([newLoc.canonicalRef.name]), new Set(), true);\n            });\n            types.push(await toType(target, newLoc, attributes));\n        }\n\n        if (schema.allOf !== undefined) {\n            types.push(...(await makeTypesFromCases(schema.allOf, \"allOf\")));\n        }\n\n        if (schema.oneOf !== undefined) {\n            types.push(await convertOneOrAnyOf(schema.oneOf, \"oneOf\"));\n        }\n\n        if (schema.anyOf !== undefined) {\n            types.push(await convertOneOrAnyOf(schema.anyOf, \"anyOf\"));\n        }\n\n        typeBuilder.setSetOperationMembers(intersectionType, new Set(types));\n        return intersectionType;\n    }\n\n    async function toType(schema: JSONSchema, loc: Location, typeAttributes: TypeAttributes): Promise<TypeRef> {\n        const maybeType = typeForCanonicalRef.get(loc.canonicalRef);\n        if (maybeType !== undefined) {\n            return maybeType;\n        }\n\n        let result: TypeRef;\n        if (typeof schema === \"boolean\") {\n            // FIXME: Empty union.  We'd have to check that it's supported everywhere,\n            // in particular in union flattening.\n            messageAssert(schema === true, \"SchemaFalseNotSupported\", withRef(loc));\n            result = typeBuilder.getPrimitiveType(\"any\");\n        } else {\n            loc = loc.updateWithID(schema.$id);\n            result = await convertToType(schema, loc, typeAttributes);\n        }\n\n        setTypeForLocation(loc, result);\n        return result;\n    }\n\n    for (const [topLevelName, topLevelRef] of references) {\n        const [target, loc] = await resolver.resolveTopLevelRef(topLevelRef);\n        const t = await toType(target, loc, makeNamesTypeAttributes(topLevelName, false));\n        typeBuilder.addTopLevel(topLevelName, t);\n    }\n}\n\nfunction removeExtension(fn: string): string {\n    const lower = fn.toLowerCase();\n    const extensions = [\".json\", \".schema\"];\n    for (const ext of extensions) {\n        if (lower.endsWith(ext)) {\n            const base = fn.slice(0, fn.length - ext.length);\n            if (base.length > 0) {\n                return base;\n            }\n        }\n    }\n\n    return fn;\n}\n\nfunction nameFromURI(uri: URI): string | undefined {\n    const fragment = uri.fragment();\n    if (fragment !== \"\") {\n        const components = fragment.split(\"/\");\n        const len = components.length;\n        if (components[len - 1] !== \"\") {\n            return removeExtension(components[len - 1]);\n        }\n\n        if (len > 1 && components[len - 2] !== \"\") {\n            return removeExtension(components[len - 2]);\n        }\n    }\n\n    const filename = uri.filename();\n    if (filename !== \"\") {\n        return removeExtension(filename);\n    }\n\n    return messageError(\"DriverCannotInferNameForSchema\", { uri: uri.toString() });\n}\n\nasync function refsInSchemaForURI(\n    resolver: Resolver,\n    uri: URI,\n    defaultName: string\n): Promise<ReadonlyMap<string, Ref> | [string, Ref]> {\n    const fragment = uri.fragment();\n    let propertiesAreTypes = fragment.endsWith(\"/\");\n    if (propertiesAreTypes) {\n        uri = uri.clone().fragment(fragment.slice(0, -1));\n    }\n\n    const ref = Ref.parseURI(uri);\n    if (ref.isRoot) {\n        propertiesAreTypes = false;\n    }\n\n    const schema = (await resolver.resolveTopLevelRef(ref))[0];\n\n    if (propertiesAreTypes) {\n        if (typeof schema !== \"object\") {\n            return messageError(\"SchemaCannotGetTypesFromBoolean\", { ref: ref.toString() });\n        }\n\n        return mapMap(mapFromObject(schema), (_, name) => ref.push(name));\n    } else {\n        let name: string;\n        if (typeof schema === \"object\" && typeof schema.title === \"string\") {\n            name = schema.title;\n        } else {\n            const maybeName = nameFromURI(uri);\n            name = maybeName ?? defaultName;\n        }\n\n        return [name, ref];\n    }\n}\n\nclass InputJSONSchemaStore extends JSONSchemaStore {\n    public constructor(\n        private readonly _inputs: Map<string, string>,\n        private readonly _delegate?: JSONSchemaStore\n    ) {\n        super();\n    }\n\n    public async fetch(address: string): Promise<JSONSchema | undefined> {\n        const maybeInput = this._inputs.get(address);\n        if (maybeInput !== undefined) {\n            return checkJSONSchema(parseJSON(maybeInput, \"JSON Schema\", address), () => Ref.root(address));\n        }\n\n        if (this._delegate === undefined) {\n            return panic(`Schema URI ${address} requested, but no store given`);\n        }\n\n        return await this._delegate.fetch(address);\n    }\n}\n\nexport interface JSONSchemaSourceData {\n    isConverted?: boolean;\n    name: string;\n    schema?: string;\n    uris?: string[];\n}\n\nexport class JSONSchemaInput implements Input<JSONSchemaSourceData> {\n    public readonly kind: string = \"schema\";\n\n    public readonly needSchemaProcessing: boolean = true;\n\n    private readonly _attributeProducers: JSONSchemaAttributeProducer[];\n\n    private readonly _schemaInputs: Map<string, string> = new Map();\n\n    private _schemaSources: Array<[URI, JSONSchemaSourceData]> = [];\n\n    private readonly _topLevels: Map<string, Ref> = new Map();\n\n    private _needIR = false;\n\n    public constructor(\n        private _schemaStore: JSONSchemaStore | undefined,\n        additionalAttributeProducers: JSONSchemaAttributeProducer[] = [],\n        private readonly _additionalSchemaAddresses: readonly string[] = []\n    ) {\n        this._attributeProducers = [\n            descriptionAttributeProducer,\n            accessorNamesAttributeProducer,\n            enumValuesAttributeProducer,\n            uriSchemaAttributesProducer,\n            minMaxAttributeProducer,\n            minMaxLengthAttributeProducer,\n            patternAttributeProducer\n        ].concat(additionalAttributeProducers);\n    }\n\n    public get needIR(): boolean {\n        return this._needIR;\n    }\n\n    public addTopLevel(name: string, ref: Ref): void {\n        this._topLevels.set(name, ref);\n    }\n\n    public async addTypes(ctx: RunContext, typeBuilder: TypeBuilder): Promise<void> {\n        if (this._schemaSources.length === 0) return;\n\n        let maybeSchemaStore = this._schemaStore;\n        if (this._schemaInputs.size === 0) {\n            if (maybeSchemaStore === undefined) {\n                return panic(\"Must have a schema store to process JSON Schema\");\n            }\n        } else {\n            maybeSchemaStore = this._schemaStore = new InputJSONSchemaStore(this._schemaInputs, maybeSchemaStore);\n        }\n\n        const schemaStore = maybeSchemaStore;\n        const canonizer = new Canonizer(ctx);\n\n        for (const address of this._additionalSchemaAddresses) {\n            const schema = await schemaStore.get(address, ctx.debugPrintSchemaResolving);\n            if (schema === undefined) {\n                return messageError(\"SchemaFetchErrorAdditional\", { address });\n            }\n\n            canonizer.addSchema(schema, address);\n        }\n\n        const resolver = new Resolver(ctx, defined(this._schemaStore), canonizer);\n\n        for (const [normalizedURI, source] of this._schemaSources) {\n            const givenName = source.name;\n\n            const refs = await refsInSchemaForURI(resolver, normalizedURI, givenName);\n            if (Array.isArray(refs)) {\n                let name: string;\n                if (this._schemaSources.length === 1 && givenName !== undefined) {\n                    name = givenName;\n                } else {\n                    name = refs[0];\n                }\n\n                this.addTopLevel(name, refs[1]);\n            } else {\n                for (const [refName, ref] of refs) {\n                    this.addTopLevel(refName, ref);\n                }\n            }\n        }\n\n        await addTypesInSchema(resolver, typeBuilder, this._topLevels, this._attributeProducers);\n    }\n\n    public addTypesSync(): void {\n        return panic(\"addTypesSync not supported in JSONSchemaInput\");\n    }\n\n    public async addSource(schemaSource: JSONSchemaSourceData): Promise<void> {\n        this.addSourceSync(schemaSource);\n    }\n\n    public addSourceSync(schemaSource: JSONSchemaSourceData): void {\n        const { name, uris, schema, isConverted } = schemaSource;\n\n        if (isConverted !== true) {\n            this._needIR = true;\n        }\n\n        let normalizedURIs: URI[];\n        if (uris === undefined) {\n            normalizedURIs = [new URI(name)];\n        } else {\n            normalizedURIs = uris.map(uri => {\n                const normalizedURI = normalizeURI(uri);\n                if (normalizedURI.clone().hash(\"\").toString() === \"\") {\n                    normalizedURI.path(name);\n                }\n\n                return normalizedURI;\n            });\n        }\n\n        if (schema === undefined) {\n            assert(uris !== undefined, \"URIs must be given if schema source is not specified\");\n        } else {\n            for (let i = 0; i < normalizedURIs.length; i++) {\n                const normalizedURI = normalizedURIs[i];\n                const uri = normalizedURI.clone().hash(\"\");\n                const path = uri.path();\n                let suffix = 0;\n                do {\n                    if (suffix > 0) {\n                        uri.path(`${path}-${suffix}`);\n                    }\n\n                    suffix++;\n                } while (this._schemaInputs.has(uri.toString()));\n\n                this._schemaInputs.set(uri.toString(), schema);\n                normalizedURIs[i] = uri.hash(normalizedURI.hash());\n            }\n        }\n\n        // FIXME: Why do we need both _schemaSources and _schemaInputs?\n        for (const normalizedURI of normalizedURIs) {\n            this._schemaSources.push([normalizedURI, schemaSource]);\n        }\n    }\n\n    public singleStringSchemaSource(): string | undefined {\n        if (!this._schemaSources.every(([_, { schema }]) => typeof schema === \"string\")) {\n            return undefined;\n        }\n\n        const set = new Set(this._schemaSources.map(([_, { schema }]) => schema as string));\n        if (set.size === 1) {\n            return defined(iterableFirst(set));\n        }\n\n        return undefined;\n    }\n}\n","import {\n    iterableFirst,\n    mapFilterMap,\n    mapFromObject,\n    mapMergeWithInto,\n    setSubtract,\n    setUnion,\n    setUnionManyInto\n} from \"collection-utils\";\n\n// There's a cyclic import here. Ignoring now because it requires a large refactor.\n// skipcq: JS-E1008\n// FIXME: This is a circular import\n// eslint-disable-next-line import/no-cycle\nimport {\n    type JSONSchemaAttributes,\n    type JSONSchemaType,\n    type PathElement,\n    PathElementKind,\n    type Ref\n} from \"../input/JSONSchemaInput\";\nimport { type JSONSchema } from \"../input/JSONSchemaStore\";\nimport { type Type } from \"../Type\";\n\nimport { TypeAttributeKind, emptyTypeAttributes } from \"./TypeAttributes\";\n\nexport function addDescriptionToSchema(\n    schema: { [name: string]: unknown },\n    description: Iterable<string> | undefined\n): void {\n    if (description === undefined) return;\n    schema.description = Array.from(description).join(\"\\n\");\n}\n\nclass DescriptionTypeAttributeKind extends TypeAttributeKind<ReadonlySet<string>> {\n    public constructor() {\n        super(\"description\");\n    }\n\n    public combine(attrs: Array<ReadonlySet<string>>): ReadonlySet<string> {\n        return setUnionManyInto(new Set(), attrs);\n    }\n\n    public makeInferred(_: ReadonlySet<string>): undefined {\n        return undefined;\n    }\n\n    public addToSchema(schema: { [name: string]: unknown }, _t: Type, attrs: ReadonlySet<string>): void {\n        addDescriptionToSchema(schema, attrs);\n    }\n\n    public stringify(descriptions: ReadonlySet<string>): string | undefined {\n        let result = iterableFirst(descriptions);\n        if (result === undefined) return undefined;\n        if (result.length > 5 + 3) {\n            result = `${result.slice(0, 5)}...`;\n        }\n\n        if (descriptions.size > 1) {\n            result = `${result}, ...`;\n        }\n\n        return result;\n    }\n}\n\nexport const descriptionTypeAttributeKind: TypeAttributeKind<ReadonlySet<string>> = new DescriptionTypeAttributeKind();\n\nclass PropertyDescriptionsTypeAttributeKind extends TypeAttributeKind<Map<string, ReadonlySet<string>>> {\n    public constructor() {\n        super(\"propertyDescriptions\");\n    }\n\n    public combine(attrs: Array<Map<string, ReadonlySet<string>>>): Map<string, ReadonlySet<string>> {\n        // FIXME: Implement this with mutable sets\n        const result = new Map<string, ReadonlySet<string>>();\n        for (const attr of attrs) {\n            mapMergeWithInto(result, (sa, sb) => setUnion(sa, sb), attr);\n        }\n\n        return result;\n    }\n\n    public makeInferred(_: Map<string, ReadonlySet<string>>): undefined {\n        return undefined;\n    }\n\n    public stringify(propertyDescriptions: Map<string, ReadonlySet<string>>): string | undefined {\n        if (propertyDescriptions.size === 0) return undefined;\n        return `prop descs: ${propertyDescriptions.size}`;\n    }\n}\n\nexport const propertyDescriptionsTypeAttributeKind: TypeAttributeKind<Map<string, ReadonlySet<string>>> =\n    new PropertyDescriptionsTypeAttributeKind();\n\nfunction isPropertiesKey(el: PathElement): boolean {\n    return el.kind === PathElementKind.KeyOrIndex && el.key === \"properties\";\n}\n\nexport function descriptionAttributeProducer(\n    schema: JSONSchema,\n    ref: Ref,\n    types: Set<JSONSchemaType>\n): JSONSchemaAttributes | undefined {\n    if (!(typeof schema === \"object\")) return undefined;\n\n    let description = emptyTypeAttributes;\n    let propertyDescription = emptyTypeAttributes;\n\n    const pathLength = ref.path.length;\n    if (\n        types.has(\"object\") ||\n        setSubtract(types, [\"null\"]).size > 1 ||\n        schema.enum !== undefined ||\n        pathLength < 2 ||\n        !isPropertiesKey(ref.path[pathLength - 2])\n    ) {\n        const maybeDescription = schema.description;\n        if (typeof maybeDescription === \"string\") {\n            description = descriptionTypeAttributeKind.makeAttributes(new Set([maybeDescription]));\n        }\n    }\n\n    if (types.has(\"object\") && typeof schema.properties === \"object\") {\n        const propertyDescriptions = mapFilterMap(mapFromObject(schema.properties), propSchema => {\n            if (propSchema && typeof propSchema === \"object\" && \"description\" in propSchema) {\n                const desc = propSchema.description;\n                if (typeof desc === \"string\") {\n                    return new Set([desc]);\n                }\n            }\n\n            return undefined;\n        });\n        if (propertyDescriptions.size > 0) {\n            propertyDescription = propertyDescriptionsTypeAttributeKind.makeAttributes(propertyDescriptions);\n        }\n    }\n\n    return { forType: description, forObject: propertyDescription };\n}\n","import { iterableFirst, setFilter, setIntersect, setSubtract, setUnionInto } from \"collection-utils\";\n\nimport { Graph } from \"./Graph\";\nimport { messageError } from \"./Messages\";\nimport { assert, defined, panic } from \"./support/Support\";\nimport { type Type } from \"./Type\";\nimport { type TypeGraph } from \"./TypeGraph\";\n\nexport type DeclarationKind = \"forward\" | \"define\";\n\nexport interface Declaration {\n    readonly kind: DeclarationKind;\n    readonly type: Type;\n}\n\nexport class DeclarationIR {\n    public readonly declarations: readonly Declaration[];\n\n    public constructor(\n        declarations: Iterable<Declaration>,\n        public readonly forwardedTypes: Set<Type>\n    ) {\n        this.declarations = Array.from(declarations);\n    }\n}\n\nfunction findBreaker(t: Type, path: readonly Type[], canBreak: ((t: Type) => boolean) | undefined): Type | undefined {\n    const index = path.indexOf(t);\n    if (index < 0) return undefined;\n    if (canBreak === undefined) {\n        return path[index];\n    }\n\n    const potentialBreakers = path.slice(0, index + 1).reverse();\n    const maybeBreaker = potentialBreakers.find(canBreak);\n    if (maybeBreaker === undefined) {\n        return panic(\"Found a cycle that cannot be broken\");\n    }\n\n    return maybeBreaker;\n}\n\nexport function cycleBreakerTypesForGraph(\n    graph: TypeGraph,\n    isImplicitCycleBreaker: (t: Type) => boolean,\n    canBreakCycles: (t: Type) => boolean\n): Set<Type> {\n    const visitedTypes = new Set<Type>();\n    const cycleBreakerTypes = new Set<Type>();\n    const queue: Type[] = Array.from(graph.topLevels.values());\n\n    function visit(t: Type, path: Type[]): void {\n        if (visitedTypes.has(t)) return;\n\n        if (isImplicitCycleBreaker(t)) {\n            for (const c of t.getChildren()) {\n                queue.push(c);\n            }\n        } else {\n            const maybeBreaker = findBreaker(t, path, canBreakCycles);\n            if (maybeBreaker !== undefined) {\n                cycleBreakerTypes.add(maybeBreaker);\n                return;\n            }\n\n            for (const c of t.getChildren()) {\n                path.unshift(t);\n                visit(c, path);\n                path.shift();\n            }\n        }\n\n        visitedTypes.add(t);\n    }\n\n    for (;;) {\n        const maybeType = queue.pop();\n        if (maybeType === undefined) break;\n        const path: Type[] = [];\n        visit(maybeType, path);\n        assert(path.length === 0);\n    }\n\n    return cycleBreakerTypes;\n}\n\nexport function declarationsForGraph(\n    typeGraph: TypeGraph,\n    canBeForwardDeclared: ((t: Type) => boolean) | undefined,\n    childrenOfType: (t: Type) => ReadonlySet<Type>,\n    needsDeclaration: (t: Type) => boolean\n): DeclarationIR {\n    /*\n    function nodeTitle(t: Type): string {\n        const indexAndKind = `${t.typeRef.index} ${t.kind}`;\n        if (t.hasNames) {\n            return `${indexAndKind} ${t.getCombinedName()}`;\n        } else {\n            return indexAndKind;\n        }\n    }\n    function componentName(c: Iterable<Type>): string {\n        return Array.from(c).map(nodeTitle).join(\", \");\n    }\n    */\n\n    const topDown = canBeForwardDeclared === undefined;\n    const declarations: Declaration[] = [];\n    const forwardedTypes = new Set<Type>();\n    const visitedComponents = new Set<ReadonlySet<Type>>();\n\n    function processGraph(graph: Graph<Type>, _writeComponents: boolean): void {\n        const componentsGraph = graph.stronglyConnectedComponents();\n        function visitComponent(component: ReadonlySet<Type>): void {\n            if (visitedComponents.has(component)) return;\n            visitedComponents.add(component);\n\n            // console.log(`visiting component ${componentName(component)}`);\n\n            const declarationNeeded = setFilter(component, needsDeclaration);\n\n            // 1. Only one node in the cycle needs a declaration, in which\n            // case it's the breaker, and no forward declaration is necessary.\n            if (declarationNeeded.size === 1) {\n                declarations.push({ kind: \"define\", type: defined(iterableFirst(declarationNeeded)) });\n                return;\n            }\n\n            // 2. No node in the cycle needs a declaration, but it's also\n            // the only node, so we don't actually need a declaration at all.\n            if (declarationNeeded.size === 0 && component.size === 1) {\n                return;\n            }\n\n            // 3. No node in the cycle needs a declaration, but there's more.\n            // than one node total.  We have to pick a node to make a\n            // declaration, so we can pick any one. This is not a forward\n            // declaration, either.\n            if (declarationNeeded.size === 0) {\n                declarations.push({ kind: \"define\", type: defined(iterableFirst(component)) });\n                return;\n            }\n\n            // 4. More than one node needs a declaration, and we don't need\n            // forward declarations.  Just declare all of them and be done\n            // with it.\n            if (canBeForwardDeclared === undefined) {\n                for (const t of declarationNeeded) {\n                    declarations.push({ kind: \"define\", type: t });\n                }\n\n                return;\n            }\n\n            // 5. More than one node needs a declaration, and we have\n            // to make forward declarations.  We do the simple thing and first\n            // forward-declare all forward-declarable types in the SCC.  If\n            // there are none, we're stuck.  If there are, we take them out of\n            // the component and try the whole thing again recursively.  Then\n            // we declare the types we previously forward-declared.\n            const forwardDeclarable = setFilter(component, canBeForwardDeclared);\n            if (forwardDeclarable.size === 0) {\n                return messageError(\"IRNoForwardDeclarableTypeInCycle\", {});\n            }\n\n            for (const t of forwardDeclarable) {\n                declarations.push({ kind: \"forward\", type: t });\n            }\n\n            setUnionInto(forwardedTypes, forwardDeclarable);\n            const rest = setSubtract(component, forwardDeclarable);\n            const restGraph = new Graph(rest, true, t => setIntersect(childrenOfType(t), rest));\n            processGraph(restGraph, false);\n            for (const t of forwardDeclarable) {\n                declarations.push({ kind: \"define\", type: t });\n            }\n\n            return;\n        }\n\n        /*\n        if (_writeComponents) {\n            componentsGraph.nodes.forEach(types => {\n                console.log(\n                    `scc: ${types\n                        .filter(t => t instanceof ClassType)\n                        .map(t => t.getCombinedName())\n                        .join(\", \")}`\n                );\n            });\n        }\n        */\n\n        const rootsUnordered = componentsGraph.findRoots();\n        const roots = rootsUnordered;\n        for (const component of roots) {\n            componentsGraph.dfsTraversal(component, topDown, visitComponent);\n        }\n    }\n\n    const fullGraph = typeGraph.makeGraph(false, childrenOfType);\n    // fs.writeFileSync(\"graph.dot\", fullGraph.makeDot(t => !(t instanceof PrimitiveType), nodeTitle));\n    processGraph(fullGraph, true);\n\n    return new DeclarationIR(declarations, forwardedTypes);\n}\n","import {\n    iterableEvery,\n    iterableFind,\n    iterableFirst,\n    iterableMinBy,\n    iterableSome,\n    mapMergeInto,\n    setFilter,\n    setFilterMap,\n    setGroupBy,\n    setMap,\n    setUnion,\n    setUnionInto\n} from \"collection-utils\";\n\nimport { assert, defined, panic } from \"./support/Support\";\n\nexport class Namespace {\n    public readonly forbiddenNamespaces: ReadonlySet<Namespace>;\n\n    public readonly additionalForbidden: ReadonlySet<Name>;\n\n    private readonly _children = new Set<Namespace>();\n\n    private readonly _members = new Set<Name>();\n\n    public constructor(\n        _name: string,\n        parent: Namespace | undefined,\n        forbiddenNamespaces: Iterable<Namespace>,\n        additionalForbidden: Iterable<Name>\n    ) {\n        this.forbiddenNamespaces = new Set(forbiddenNamespaces);\n        this.additionalForbidden = new Set(additionalForbidden);\n        if (parent !== undefined) {\n            parent.addChild(this);\n        }\n    }\n\n    private addChild(child: Namespace): void {\n        this._children.add(child);\n    }\n\n    public get children(): ReadonlySet<Namespace> {\n        return this._children;\n    }\n\n    public get members(): ReadonlySet<Name> {\n        return this._members;\n    }\n\n    public get forbiddenNameds(): ReadonlySet<Name> {\n        // FIXME: cache\n        return setUnion(this.additionalForbidden, ...Array.from(this.forbiddenNamespaces).map(ns => ns.members));\n    }\n\n    public add<TName extends Name>(named: TName): TName {\n        this._members.add(named);\n        return named;\n    }\n}\n\nexport type NameStyle = (rawName: string) => string;\n\n// `Namer`s are invoked to figure out what names to assign non-fixed `Name`s,\n// and in particular to resolve conflicts.  Those arise under two circumstances,\n// which can also combine:\n//\n// 1. A proposed name is the same as an already assigned name that's forbidden\n//    for the name to be assigned.\n// 2. There is more than one `Name` about to be assigned a name that all have\n//    the same proposed name.\n//\n// The namer is invoked with the set of all assigned, forbidden names,\n// the requested name, and the `Name`s to assign names to.\n//\n// `Namer` is a class so that we can compare namers and put them into immutable\n// collections.\n\nexport class Namer {\n    private readonly _prefixes: ReadonlySet<string>;\n\n    public constructor(\n        public readonly name: string,\n        public readonly nameStyle: NameStyle,\n        public prefixes: string[]\n    ) {\n        this._prefixes = new Set(prefixes);\n    }\n\n    // The namesIterable comes directly out of the context and will\n    // be modified if we assign\n    public assignNames(\n        names: ReadonlyMap<Name, string>,\n        forbiddenNamesIterable: Iterable<string>,\n        namesToAssignIterable: Iterable<Name>\n    ): ReadonlyMap<Name, string> {\n        const forbiddenNames = new Set(forbiddenNamesIterable);\n        const namesToAssign = Array.from(namesToAssignIterable);\n\n        assert(namesToAssign.length > 0, \"Number of names can't be less than 1\");\n\n        const allAssignedNames = new Map<Name, string>();\n\n        let namesToPrefix: Name[] = [];\n        for (const name of namesToAssign) {\n            const proposedNames = name.proposeUnstyledNames(names);\n            const namingFunction = name.namingFunction;\n            // Find the first proposed name that isn't proposed by\n            // any of the other names and that isn't already forbidden.\n            const maybeUniqueName = iterableFind(\n                proposedNames,\n                proposed =>\n                    !forbiddenNames.has(namingFunction.nameStyle(proposed)) &&\n                    namesToAssign.every(n => n === name || !n.proposeUnstyledNames(names).has(proposed))\n            );\n            if (maybeUniqueName !== undefined) {\n                const styledName = namingFunction.nameStyle(maybeUniqueName);\n                const assigned = name.nameAssignments(forbiddenNames, styledName);\n                if (assigned !== null) {\n                    mapMergeInto(allAssignedNames, assigned);\n                    setUnionInto(forbiddenNames, assigned.values());\n                    continue;\n                }\n            }\n\n            // There's no unique name, or it couldn't be assigned, so\n            // we need to prefix-name this one.\n            namesToPrefix.push(name);\n        }\n\n        let prefixes = this._prefixes.values();\n        let suffixNumber = 1;\n        for (const name of namesToPrefix) {\n            const originalName: string = defined(iterableFirst(name.proposeUnstyledNames(names)));\n            for (;;) {\n                let nameToTry: string;\n                const { done, value: prefix } = prefixes.next();\n                if (!done) {\n                    nameToTry = `${prefix}_${originalName}`;\n                } else {\n                    nameToTry = `${originalName}_${suffixNumber.toString()}`;\n                    suffixNumber++;\n                }\n\n                const styledName = name.namingFunction.nameStyle(nameToTry);\n                const assigned = name.nameAssignments(forbiddenNames, styledName);\n                if (assigned === null) continue;\n                mapMergeInto(allAssignedNames, assigned);\n                setUnionInto(forbiddenNames, assigned.values());\n                break;\n            }\n        }\n\n        return allAssignedNames;\n    }\n}\n\nconst funPrefixes = [\n    \"Purple\",\n    \"Fluffy\",\n    \"Tentacled\",\n    \"Sticky\",\n    \"Indigo\",\n    \"Indecent\",\n    \"Hilarious\",\n    \"Ambitious\",\n    \"Cunning\",\n    \"Magenta\",\n    \"Frisky\",\n    \"Mischievous\",\n    \"Braggadocious\"\n];\n\nexport function funPrefixNamer(name: string, nameStyle: NameStyle): Namer {\n    return new Namer(name, nameStyle, funPrefixes);\n}\n\n// FIXME: I think the type hierarchy is somewhat wrong here.  `FixedName`\n// should be a `Name`, but the non-fixed names should probably have their\n// own common superclass.  Most methods of `Name` make sense only either\n// for `FixedName` or the non-fixed names.\n\nexport abstract class Name {\n    private readonly _associates = new Set<AssociatedName>();\n\n    // If a Named is fixed, the namingFunction is undefined.\n    public constructor(\n        private readonly _namingFunction: Namer | undefined,\n        public readonly order: number\n    ) {}\n\n    public addAssociate(associate: AssociatedName): void {\n        this._associates.add(associate);\n    }\n\n    public abstract get dependencies(): readonly Name[];\n\n    public isFixed(): this is FixedName {\n        return this instanceof FixedName;\n    }\n\n    public get namingFunction(): Namer {\n        return defined(this._namingFunction);\n    }\n\n    // Must return at least one proposal.  The proposals are considered in order.\n    public abstract proposeUnstyledNames(names: ReadonlyMap<Name, string>): ReadonlySet<string>;\n\n    public firstProposedName(names: ReadonlyMap<Name, string>): string {\n        return defined(iterableFirst(this.proposeUnstyledNames(names)));\n    }\n\n    public nameAssignments(\n        forbiddenNames: ReadonlySet<string>,\n        assignedName: string\n    ): ReadonlyMap<Name, string> | null {\n        if (forbiddenNames.has(assignedName)) return null;\n        const assignments = new Map<Name, string>([[this, assignedName]]);\n        for (const an of this._associates) {\n            const associatedAssignedName = an.getName(assignedName);\n            if (forbiddenNames.has(associatedAssignedName)) {\n                return null;\n            }\n\n            assignments.set(an, associatedAssignedName);\n        }\n\n        return assignments;\n    }\n}\n\n// FIXME: FixedNameds should optionally be user-configurable\nexport class FixedName extends Name {\n    public constructor(private readonly _fixedName: string) {\n        super(undefined, 0);\n    }\n\n    public get dependencies(): readonly Name[] {\n        return [];\n    }\n\n    public addAssociate(_: AssociatedName): never {\n        return panic(\"Cannot add associates to fixed names\");\n    }\n\n    public get fixedName(): string {\n        return this._fixedName;\n    }\n\n    public proposeUnstyledNames(_?: ReadonlyMap<Name, string>): ReadonlySet<string> {\n        return panic(\"Only fixedName should be called on FixedName.\");\n    }\n}\n\nexport class SimpleName extends Name {\n    private readonly _unstyledNames: ReadonlySet<string>;\n\n    public constructor(unstyledNames: Iterable<string>, namingFunction: Namer, order: number) {\n        super(namingFunction, order);\n        this._unstyledNames = new Set(unstyledNames);\n    }\n\n    public get dependencies(): readonly Name[] {\n        return [];\n    }\n\n    public proposeUnstyledNames(_?: ReadonlyMap<Name, string>): ReadonlySet<string> {\n        return this._unstyledNames;\n    }\n}\n\nexport class AssociatedName extends Name {\n    public constructor(\n        private readonly _sponsor: Name,\n        order: number,\n        public readonly getName: (sponsorName: string) => string\n    ) {\n        super(undefined, order);\n    }\n\n    public get dependencies(): readonly Name[] {\n        return [this._sponsor];\n    }\n\n    public proposeUnstyledNames(_?: ReadonlyMap<Name, string>): never {\n        return panic(\"AssociatedName must be assigned via its sponsor\");\n    }\n}\n\nexport class DependencyName extends Name {\n    private readonly _dependencies: ReadonlySet<Name>;\n\n    public constructor(\n        namingFunction: Namer | undefined,\n        order: number,\n        private readonly _proposeUnstyledName: (lookup: (n: Name) => string) => string\n    ) {\n        super(namingFunction, order);\n        const dependencies: Name[] = [];\n        _proposeUnstyledName(n => {\n            dependencies.push(n);\n            return \"0xDEADBEEF\";\n        });\n        this._dependencies = new Set(dependencies);\n    }\n\n    public get dependencies(): readonly Name[] {\n        return Array.from(this._dependencies);\n    }\n\n    public proposeUnstyledNames(names: ReadonlyMap<Name, string>): ReadonlySet<string> {\n        return new Set([\n            this._proposeUnstyledName(n => {\n                assert(this._dependencies.has(n), \"DependencyName proposer is not pure\");\n                return defined(names.get(n));\n            })\n        ]);\n    }\n}\n\nexport function keywordNamespace(name: string, keywords: string[]): Namespace {\n    const ns = new Namespace(name, undefined, [], []);\n    for (const kw of keywords) {\n        ns.add(new FixedName(kw));\n    }\n\n    return ns;\n}\n\nfunction allNamespacesRecursively(namespaces: Iterable<Namespace>): ReadonlySet<Namespace> {\n    return setUnion(namespaces, ...Array.from(setMap(namespaces, ns => allNamespacesRecursively(ns.children))));\n}\n\nclass NamingContext {\n    private readonly _names: Map<Name, string> = new Map();\n\n    private readonly _namedsForName: Map<string, Set<Name>> = new Map();\n\n    public readonly namespaces: ReadonlySet<Namespace>;\n\n    public constructor(rootNamespaces: Iterable<Namespace>) {\n        this.namespaces = allNamespacesRecursively(rootNamespaces);\n    }\n\n    public get names(): ReadonlyMap<Name, string> {\n        return this._names;\n    }\n\n    public isReadyToBeNamed(named: Name): boolean {\n        if (this._names.has(named)) return false;\n        return named.dependencies.every((n: Name) => this._names.has(n));\n    }\n\n    public areForbiddensFullyNamed(namespace: Namespace): boolean {\n        return iterableEvery(namespace.forbiddenNameds, n => this._names.has(n));\n    }\n\n    public isConflicting(namedNamespace: Namespace, proposed: string): boolean {\n        const namedsForProposed = this._namedsForName.get(proposed);\n        // If the name is not assigned at all, there is no conflict.\n        if (namedsForProposed === undefined) return false;\n        // The name is assigned, but it might still not be forbidden.\n        for (const n of namedsForProposed) {\n            if (namedNamespace.members.has(n) || namedNamespace.forbiddenNameds.has(n)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public assign(named: Name, namedNamespace: Namespace, name: string): void {\n        assert(!this.names.has(named), `Name \"${name}\" assigned twice`);\n        assert(!this.isConflicting(namedNamespace, name), `Assigned name \"${name}\" conflicts`);\n        this._names.set(named, name);\n        let namedsForName = this._namedsForName.get(name);\n        if (namedsForName === undefined) {\n            namedsForName = new Set();\n            this._namedsForName.set(name, namedsForName);\n        }\n\n        namedsForName.add(named);\n    }\n}\n\n// Naming algorithm\nexport function assignNames(rootNamespaces: Iterable<Namespace>): ReadonlyMap<Name, string> {\n    const ctx = new NamingContext(rootNamespaces);\n\n    // Assign all fixed names.\n    for (const ns of ctx.namespaces) {\n        for (const n of ns.members) {\n            if (!n.isFixed()) continue;\n            ctx.assign(n, ns, n.fixedName);\n        }\n    }\n\n    for (;;) {\n        // 1. Find a namespace whose forbiddens are all fully named, and which has\n        //    at least one unnamed Named that has all its dependencies satisfied.\n        //    If no such namespace exists we're either done, or there's an unallowed\n        //    cycle.\n\n        const unfinishedNamespaces = setFilter(ctx.namespaces, ns => ctx.areForbiddensFullyNamed(ns));\n        const readyNamespace = iterableFind(unfinishedNamespaces, ns =>\n            iterableSome(ns.members, member => ctx.isReadyToBeNamed(member))\n        );\n\n        if (readyNamespace === undefined) {\n            // FIXME: Check for cycles?\n            return ctx.names;\n        }\n\n        const allForbiddenNames = setUnion(readyNamespace.members, readyNamespace.forbiddenNameds);\n        let forbiddenNames = setFilterMap(allForbiddenNames, n => ctx.names.get(n));\n\n        // 2. From low order to high order, sort those names into sets where all\n        //    members of a set propose the same name and have the same naming\n        //    function.\n\n        for (;;) {\n            const allReadyNames = setFilter(readyNamespace.members, member => ctx.isReadyToBeNamed(member));\n            const minOrderName = iterableMinBy(allReadyNames, n => n.order);\n            if (minOrderName === undefined) break;\n            const minOrder = minOrderName.order;\n            const readyNames = setFilter(allReadyNames, n => n.order === minOrder);\n\n            // It would be nice if we had tuples, then we wouldn't have to do this in\n            // two steps.\n            const byNamingFunction = setGroupBy(readyNames, n => n.namingFunction);\n            for (const [namer, namedsForNamingFunction] of byNamingFunction) {\n                const byProposed = setGroupBy(namedsForNamingFunction, n =>\n                    n.namingFunction.nameStyle(n.firstProposedName(ctx.names))\n                );\n                for (const [, nameds] of byProposed) {\n                    // 3. Use each set's naming function to name its members.\n\n                    const names = namer.assignNames(ctx.names, forbiddenNames, nameds);\n                    for (const [name, assigned] of names) {\n                        ctx.assign(name, readyNamespace, assigned);\n                    }\n\n                    setUnionInto(forbiddenNames, names.values());\n                }\n            }\n        }\n    }\n}\n","// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport class AnnotationData {}\n\nexport class IssueAnnotationData extends AnnotationData {\n    public constructor(public readonly message: string) {\n        super();\n    }\n}\n\nexport const anyTypeIssueAnnotation = new IssueAnnotationData(\n    \"quicktype cannot infer this type because there is no data about it in the input.\"\n);\nexport const nullTypeIssueAnnotation = new IssueAnnotationData(\n    \"The only value for this in the input is null, which means you probably need a more complete input sample.\"\n);\n","import { arrayIntercalate, iterableMax, withDefault } from \"collection-utils\";\n\nimport { type AnnotationData } from \"./Annotation\";\nimport { Name } from \"./Naming\";\nimport { repeatString } from \"./support/Strings\";\nimport { assert, assertNever, defined, panic } from \"./support/Support\";\n\nexport type Source =\n    | TextSource\n    | NewlineSource\n    | SequenceSource\n    | TableSource\n    | AnnotatedSource\n    | NameSource\n    | ModifiedSource;\n\nexport interface TextSource {\n    kind: \"text\";\n    text: string;\n}\n\nexport interface NewlineSource {\n    // Number of indentation levels (not spaces!) to change\n    // the rest of the source by.  Positive numbers mean\n    // indent more, negative mean indent less.  The most\n    // common value will be zero, for no change in\n    // indentation.\n    indentationChange: number;\n    kind: \"newline\";\n}\n\nexport interface SequenceSource {\n    kind: \"sequence\";\n    sequence: readonly Source[];\n}\n\nexport interface TableSource {\n    kind: \"table\";\n    table: ReadonlyArray<readonly Source[]>;\n}\n\nexport interface AnnotatedSource {\n    annotation: AnnotationData;\n    kind: \"annotated\";\n    source: Source;\n}\n\nexport interface NameSource {\n    kind: \"name\";\n    named: Name;\n}\n\nexport interface ModifiedSource {\n    kind: \"modified\";\n    modifier: (serialized: string) => string;\n    source: Source;\n}\n\nexport function newline(): NewlineSource {\n    // We're returning a new object instead of using a singleton\n    // here because `Renderer` will modify `indentationChange`.\n    return { kind: \"newline\", indentationChange: 0 };\n}\n\nexport type Sourcelike = Source | string | Name | SourcelikeArray;\nexport type SourcelikeArray = Sourcelike[];\n\nexport function sourcelikeToSource(sl: Sourcelike): Source {\n    if (sl instanceof Array) {\n        return {\n            kind: \"sequence\",\n            sequence: sl.map(sourcelikeToSource)\n        };\n    }\n\n    if (typeof sl === \"string\") {\n        const lines = sl.split(\"\\n\");\n        if (lines.length === 1) {\n            return { kind: \"text\", text: sl };\n        }\n\n        return {\n            kind: \"sequence\",\n            sequence: arrayIntercalate(\n                newline(),\n                lines.map((l: string) => ({ kind: \"text\", text: l }) as Source)\n            )\n        };\n    }\n\n    if (sl instanceof Name) {\n        return { kind: \"name\", named: sl };\n    }\n\n    return sl;\n}\n\nexport function annotated(annotation: AnnotationData, sl: Sourcelike): Source {\n    return {\n        kind: \"annotated\",\n        annotation,\n        source: sourcelikeToSource(sl)\n    };\n}\n\nexport function maybeAnnotated(doAnnotate: boolean, annotation: AnnotationData, sl: Sourcelike): Sourcelike {\n    if (!doAnnotate) {\n        return sl;\n    }\n\n    return annotated(annotation, sl);\n}\n\nexport function modifySource(modifier: (serialized: string) => string, sl: Sourcelike): Sourcelike {\n    return {\n        kind: \"modified\",\n        modifier,\n        source: sourcelikeToSource(sl)\n    };\n}\n\nexport interface Location {\n    column: number;\n    // Both of these are zero-based.\n    line: number;\n}\n\nexport interface Span {\n    end: Location;\n    start: Location;\n}\n\nexport interface Annotation {\n    annotation: AnnotationData;\n    span: Span;\n}\n\nexport interface SerializedRenderResult {\n    annotations: readonly Annotation[];\n    lines: string[];\n}\n\nfunction sourceLineLength(source: Source, names: ReadonlyMap<Name, string>): number {\n    switch (source.kind) {\n        case \"text\":\n            return source.text.length;\n        case \"newline\":\n            return panic(\"Newline must not occur within a line.\");\n        case \"sequence\":\n            return source.sequence\n                .map((s: Source) => sourceLineLength(s, names))\n                .reduce((a: number, b: number) => a + b, 0);\n        case \"table\":\n            return panic(\"Table must not occur within a  line.\");\n        case \"annotated\":\n            return sourceLineLength(source.source, names);\n        case \"name\":\n            return defined(names.get(source.named)).length;\n        case \"modified\":\n            return serializeRenderResult(source, names, \"\").lines.join(\"\\n\").length;\n        default:\n            return assertNever(source);\n    }\n}\n\nexport function serializeRenderResult(\n    rootSource: Source,\n    names: ReadonlyMap<Name, string>,\n    indentation: string\n): SerializedRenderResult {\n    let indent = 0;\n    let indentNeeded = 0;\n\n    const lines: string[] = [];\n    let currentLine: string[] = [];\n    const annotations: Annotation[] = [];\n\n    function indentIfNeeded(): void {\n        if (indentNeeded === 0) return;\n        currentLine.push(repeatString(indentation, indentNeeded));\n        indentNeeded = 0;\n    }\n\n    function flattenCurrentLine(): string {\n        const str = currentLine.join(\"\");\n        currentLine = [str];\n        return str;\n    }\n\n    function currentLocation(): Location {\n        return { line: lines.length, column: flattenCurrentLine().length };\n    }\n\n    function finishLine(): void {\n        lines.push(flattenCurrentLine());\n        currentLine = [];\n    }\n\n    function serializeToStringArray(source: Source): void {\n        switch (source.kind) {\n            case \"text\":\n                indentIfNeeded();\n                currentLine.push(source.text);\n                break;\n            case \"newline\":\n                finishLine();\n                indent += source.indentationChange;\n                indentNeeded = indent;\n                break;\n            case \"sequence\":\n                for (const s of source.sequence) {\n                    serializeToStringArray(s);\n                }\n\n                break;\n            case \"table\":\n                const t = source.table;\n                const numRows = t.length;\n                if (numRows === 0) break;\n                const widths = t.map(l => l.map(s => sourceLineLength(s, names)));\n                const numColumns = defined(iterableMax(t.map(l => l.length)));\n                if (numColumns === 0) break;\n                const columnWidths: number[] = [];\n                for (let i = 0; i < numColumns; i++) {\n                    columnWidths.push(defined(iterableMax(widths.map(l => withDefault<number>(l[i], 0)))));\n                }\n\n                for (let y = 0; y < numRows; y++) {\n                    indentIfNeeded();\n                    const row = defined(t[y]);\n                    const rowWidths = defined(widths[y]);\n                    for (let x = 0; x < numColumns; x++) {\n                        const colWidth = columnWidths[x];\n                        const src = withDefault<Source>(row[x], { kind: \"text\", text: \"\" });\n                        const srcWidth = withDefault<number>(rowWidths[x], 0);\n                        serializeToStringArray(src);\n                        if (x < numColumns - 1 && srcWidth < colWidth) {\n                            currentLine.push(repeatString(\" \", colWidth - srcWidth));\n                        }\n                    }\n\n                    if (y < numRows - 1) {\n                        finishLine();\n                        indentNeeded = indent;\n                    }\n                }\n\n                break;\n            case \"annotated\":\n                const start = currentLocation();\n                serializeToStringArray(source.source);\n                const end = currentLocation();\n                annotations.push({ annotation: source.annotation, span: { start, end } });\n                break;\n            case \"name\":\n                assert(names.has(source.named), \"No name for Named\");\n                indentIfNeeded();\n                currentLine.push(defined(names.get(source.named)));\n                break;\n            case \"modified\":\n                indentIfNeeded();\n                const serialized = serializeRenderResult(source.source, names, indentation).lines;\n                assert(serialized.length === 1, \"Cannot modify more than one line.\");\n                currentLine.push(source.modifier(serialized[0]));\n                break;\n            default:\n                return assertNever(source);\n        }\n    }\n\n    serializeToStringArray(rootSource);\n    finishLine();\n    return { lines, annotations: annotations };\n}\n\nexport interface MultiWord {\n    needsParens: boolean;\n    source: Sourcelike;\n}\n\nexport function singleWord(...source: Sourcelike[]): MultiWord {\n    return { source, needsParens: false };\n}\n\nexport function multiWord(separator: Sourcelike, ...words: Sourcelike[]): MultiWord {\n    assert(words.length > 0, \"Zero words is not multiple\");\n    if (words.length === 1) {\n        return singleWord(words[0]);\n    }\n\n    const items: Sourcelike[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (i > 0) items.push(separator);\n        items.push(words[i]);\n    }\n\n    return { source: items, needsParens: true };\n}\n\nexport function parenIfNeeded({ source, needsParens }: MultiWord): Sourcelike {\n    if (needsParens) {\n        return [\"(\", source, \")\"];\n    }\n\n    return source;\n}\n","import { iterableEnumerate } from \"collection-utils\";\n\nimport { type AnnotationData, IssueAnnotationData } from \"./Annotation\";\nimport { type Name, type Namespace, assignNames } from \"./Naming\";\nimport { type NewlineSource, type Source, type Sourcelike, annotated, newline, sourcelikeToSource } from \"./Source\";\nimport { type Comment } from \"./support/Comments\";\nimport { assert, panic } from \"./support/Support\";\nimport { type TargetLanguage } from \"./TargetLanguage\";\nimport { type TypeGraph } from \"./TypeGraph\";\n\nexport interface RenderResult {\n    names: ReadonlyMap<Name, string>;\n    sources: ReadonlyMap<string, Source>;\n}\n\nexport type BlankLinePosition = \"none\" | \"interposing\" | \"leading\" | \"leading-and-interposing\";\nexport type BlankLineConfig = BlankLinePosition | [BlankLinePosition, number];\n\nfunction getBlankLineConfig(cfg: BlankLineConfig): { count: number; position: BlankLinePosition } {\n    if (Array.isArray(cfg)) {\n        return { position: cfg[0], count: cfg[1] };\n    }\n\n    return { position: cfg, count: 1 };\n}\n\nfunction lineIndentation(line: string): { indent: number; text: string | null } {\n    const len = line.length;\n    let indent = 0;\n    for (let i = 0; i < len; i++) {\n        const c = line.charAt(i);\n        if (c === \" \") {\n            indent += 1;\n        } else if (c === \"\\t\") {\n            indent = (indent / 4 + 1) * 4;\n        } else {\n            return { indent, text: line.substring(i) };\n        }\n    }\n\n    return { indent: 0, text: null };\n}\n\nexport interface RenderContext {\n    leadingComments?: Comment[];\n    typeGraph: TypeGraph;\n}\n\nexport type ForEachPosition = \"first\" | \"last\" | \"middle\" | \"only\";\n\nclass EmitContext {\n    private _lastNewline?: NewlineSource;\n\n    private readonly _emitted: Sourcelike[];\n\n    private readonly _currentEmitTarget: Sourcelike[];\n\n    private _numBlankLinesNeeded: number;\n\n    private _preventBlankLine: boolean;\n\n    public constructor() {\n        this._currentEmitTarget = this._emitted = [];\n        this._numBlankLinesNeeded = 0;\n        this._preventBlankLine = true; // no blank lines at start of file\n    }\n\n    public get isEmpty(): boolean {\n        return this._emitted.length === 0;\n    }\n\n    public get isNested(): boolean {\n        return this._emitted !== this._currentEmitTarget;\n    }\n\n    public get source(): Sourcelike[] {\n        return this._emitted;\n    }\n\n    public pushItem(item: Sourcelike): void {\n        this._currentEmitTarget.push(item);\n        this._preventBlankLine = false;\n    }\n\n    public emitNewline(): void {\n        const nl = newline();\n        this.pushItem(nl);\n        this._lastNewline = nl;\n    }\n\n    public emitItem(item: Sourcelike): void {\n        if (!this.isEmpty) {\n            for (let i = 0; i < this._numBlankLinesNeeded; i++) {\n                this.emitNewline();\n            }\n        }\n\n        this._numBlankLinesNeeded = 0;\n        this.pushItem(item);\n    }\n\n    public containsItem(item: Sourcelike): boolean {\n        const existingItem = this._currentEmitTarget.find((value: Sourcelike) => item === value);\n        return existingItem !== undefined;\n    }\n\n    public ensureBlankLine(numBlankLines: number): void {\n        if (this._preventBlankLine) return;\n        this._numBlankLinesNeeded = Math.max(this._numBlankLinesNeeded, numBlankLines);\n    }\n\n    public preventBlankLine(): void {\n        this._numBlankLinesNeeded = 0;\n        this._preventBlankLine = true;\n    }\n\n    public changeIndent(offset: number): void {\n        if (this._lastNewline === undefined) {\n            return panic(\"Cannot change indent for the first line\");\n        }\n\n        this._lastNewline.indentationChange += offset;\n    }\n}\n\nexport abstract class Renderer {\n    protected readonly typeGraph: TypeGraph;\n\n    protected readonly leadingComments: Comment[] | undefined;\n\n    private _names: ReadonlyMap<Name, string> | undefined;\n\n    private readonly _finishedFiles: Map<string, Source>;\n\n    private readonly _finishedEmitContexts: Map<string, EmitContext>;\n\n    private _emitContext: EmitContext;\n\n    public constructor(\n        protected readonly targetLanguage: TargetLanguage,\n        renderContext: RenderContext\n    ) {\n        this.typeGraph = renderContext.typeGraph;\n        this.leadingComments = renderContext.leadingComments;\n\n        this._finishedFiles = new Map();\n        this._finishedEmitContexts = new Map();\n        this._emitContext = new EmitContext();\n    }\n\n    // FIXME: make protected once JavaDateTimeRenderer is refactored\n    public ensureBlankLine(numBlankLines = 1): void {\n        this._emitContext.ensureBlankLine(numBlankLines);\n    }\n\n    protected preventBlankLine(): void {\n        this._emitContext.preventBlankLine();\n    }\n\n    protected emitItem(item: Sourcelike): void {\n        this._emitContext.emitItem(item);\n    }\n\n    protected emitItemOnce(item: Sourcelike): boolean {\n        if (this._emitContext.containsItem(item)) {\n            return false;\n        }\n\n        this.emitItem(item);\n        return true;\n    }\n\n    protected emitLineOnce(...lineParts: Sourcelike[]): void {\n        let lineEmitted = true;\n        if (lineParts.length === 1) {\n            lineEmitted = this.emitItemOnce(lineParts[0]);\n        } else if (lineParts.length > 1) {\n            lineEmitted = this.emitItemOnce(lineParts);\n        }\n\n        if (lineEmitted) {\n            this._emitContext.emitNewline();\n        }\n    }\n\n    // FIXME: make protected once JavaDateTimeRenderer is refactored\n    public emitLine(...lineParts: Sourcelike[]): void {\n        if (lineParts.length === 1) {\n            this._emitContext.emitItem(lineParts[0]);\n        } else if (lineParts.length > 1) {\n            this._emitContext.emitItem(lineParts);\n        }\n\n        this._emitContext.emitNewline();\n    }\n\n    protected emitMultiline(linesString: string): void {\n        const lines = linesString.split(\"\\n\");\n        const numLines = lines.length;\n        if (numLines === 0) return;\n        this.emitLine(lines[0]);\n        let currentIndent = 0;\n        for (let i = 1; i < numLines; i++) {\n            const line = lines[i];\n            const { indent, text } = lineIndentation(line);\n            assert(indent % 4 === 0, \"Indentation is not a multiple of 4.\");\n            if (text !== null) {\n                const newIndent = indent / 4;\n                this.changeIndent(newIndent - currentIndent);\n                currentIndent = newIndent;\n                this.emitLine(text);\n            } else {\n                this._emitContext.emitNewline();\n            }\n        }\n\n        if (currentIndent !== 0) {\n            this.changeIndent(-currentIndent);\n        }\n    }\n\n    protected gatherSource(emitter: () => void): Sourcelike[] {\n        const oldEmitContext = this._emitContext;\n        this._emitContext = new EmitContext();\n        emitter();\n        assert(!this._emitContext.isNested, \"emit context not restored correctly\");\n        const source = this._emitContext.source;\n        this._emitContext = oldEmitContext;\n        return source;\n    }\n\n    protected emitGatheredSource(items: Sourcelike[]): void {\n        for (const item of items) {\n            this._emitContext.emitItem(item);\n        }\n    }\n\n    protected emitAnnotated(annotation: AnnotationData, emitter: () => void): void {\n        const lines = this.gatherSource(emitter);\n        const source = sourcelikeToSource(lines);\n        this._emitContext.emitItem(annotated(annotation, source));\n    }\n\n    protected emitIssue(message: string, emitter: () => void): void {\n        this.emitAnnotated(new IssueAnnotationData(message), emitter);\n    }\n\n    protected emitTable = (tableArray: Sourcelike[][]): void => {\n        if (tableArray.length === 0) return;\n        const table = tableArray.map(r => r.map(sl => sourcelikeToSource(sl)));\n        this._emitContext.emitItem({ kind: \"table\", table });\n        this._emitContext.emitNewline();\n    };\n\n    protected changeIndent(offset: number): void {\n        this._emitContext.changeIndent(offset);\n    }\n\n    protected iterableForEach<T>(iterable: Iterable<T>, emitter: (v: T, position: ForEachPosition) => void): void {\n        const items = Array.from(iterable);\n        let onFirst = true;\n        for (const [i, v] of iterableEnumerate(items)) {\n            const position =\n                items.length === 1 ? \"only\" : onFirst ? \"first\" : i === items.length - 1 ? \"last\" : \"middle\";\n            emitter(v, position);\n            onFirst = false;\n        }\n    }\n\n    protected forEach<K, V>(\n        iterable: Iterable<[K, V]>,\n        interposedBlankLines: number,\n        leadingBlankLines: number,\n        emitter: (v: V, k: K, position: ForEachPosition) => void\n    ): boolean {\n        let didEmit = false;\n        this.iterableForEach(iterable, ([k, v], position) => {\n            if (position === \"only\" || position === \"first\") {\n                this.ensureBlankLine(leadingBlankLines);\n            } else {\n                this.ensureBlankLine(interposedBlankLines);\n            }\n\n            emitter(v, k, position);\n            didEmit = true;\n        });\n        return didEmit;\n    }\n\n    protected forEachWithBlankLines<K, V>(\n        iterable: Iterable<[K, V]>,\n        blankLineConfig: BlankLineConfig,\n        emitter: (v: V, k: K, position: ForEachPosition) => void\n    ): boolean {\n        const { position, count } = getBlankLineConfig(blankLineConfig);\n        const interposing = [\"interposing\", \"leading-and-interposing\"].includes(position);\n        const leading = [\"leading\", \"leading-and-interposing\"].includes(position);\n        return this.forEach(iterable, interposing ? count : 0, leading ? count : 0, emitter);\n    }\n\n    // FIXME: make protected once JavaDateTimeRenderer is refactored\n    public indent(fn: () => void): void {\n        this.changeIndent(1);\n        fn();\n        this.changeIndent(-1);\n    }\n\n    protected abstract setUpNaming(): Iterable<Namespace>;\n    protected abstract emitSource(givenOutputFilename: string): void;\n\n    protected assignNames(): ReadonlyMap<Name, string> {\n        return assignNames(this.setUpNaming());\n    }\n\n    protected initializeEmitContextForFilename(filename: string): void {\n        if (this._finishedEmitContexts.has(filename.toLowerCase())) {\n            const existingEmitContext = this._finishedEmitContexts.get(filename.toLowerCase());\n            if (existingEmitContext !== undefined) {\n                this._emitContext = existingEmitContext;\n            }\n        }\n    }\n\n    protected finishFile(filename: string): void {\n        if (this._finishedFiles.has(filename)) {\n            console.log(\n                `[WARNING] Tried to emit file ${filename} more than once. If performing multi-file output this warning can be safely ignored.`\n            );\n        }\n\n        const source = sourcelikeToSource(this._emitContext.source);\n        this._finishedFiles.set(filename, source);\n\n        // [Michael Fey (@MrRooni), 2019-5-9] We save the current EmitContext for possible reuse later. We put it into the map with a lowercased version of the key so we can do a case-insensitive lookup later. The reason we lowercase it is because some schema (looking at you keyword-unions.schema) define objects of the same name with different casing. BOOL vs. bool, for example.\n        this._finishedEmitContexts.set(filename.toLowerCase(), this._emitContext);\n        this._emitContext = new EmitContext();\n    }\n\n    public render(givenOutputFilename: string): RenderResult {\n        this._names = this.assignNames();\n        this.emitSource(givenOutputFilename);\n        if (!this._emitContext.isEmpty) {\n            this.finishFile(givenOutputFilename);\n        }\n\n        return { sources: this._finishedFiles, names: this._names };\n    }\n\n    public get names(): ReadonlyMap<Name, string> {\n        if (this._names === undefined) {\n            return panic(\"Names accessed before they were assigned\");\n        }\n\n        return this._names;\n    }\n}\n","import { type Sourcelike } from \"../Source\";\n\nexport interface CommentOptions {\n    afterComment?: string;\n    beforeComment?: string;\n    firstLineStart?: string;\n    lineEnd?: string;\n    lineStart?: string;\n}\n\ninterface DescriptionBlockCommentConfig {\n    descriptionBlock: Sourcelike[];\n}\ninterface InlineCommentConfig {\n    lines: Sourcelike[];\n}\ntype CustomCommentConfig = CommentOptions & {\n    customLines: Sourcelike[];\n};\n\nexport type CommentConfig = DescriptionBlockCommentConfig | InlineCommentConfig | CustomCommentConfig;\n\nexport type Comment = string | CommentConfig;\n\nexport const isStringComment = (comment: Comment): comment is string => {\n    return typeof comment === \"string\";\n};\n","import {\n    iterableEnumerate,\n    iterableSome,\n    mapFilter,\n    mapFilterMap,\n    mapSome,\n    mapSortBy,\n    setFilter,\n    setUnion\n} from \"collection-utils\";\nimport _wordwrap from \"wordwrap\";\n\nimport { enumCaseNames, getAccessorName, objectPropertyNames, unionMemberName } from \"./attributes/AccessorNames\";\nimport { descriptionTypeAttributeKind, propertyDescriptionsTypeAttributeKind } from \"./attributes/Description\";\nimport { TypeAttributeKind } from \"./attributes/TypeAttributes\";\nimport { type Declaration, type DeclarationIR, cycleBreakerTypesForGraph, declarationsForGraph } from \"./DeclarationIR\";\nimport { DependencyName, FixedName, type Name, type Namer, Namespace, SimpleName, keywordNamespace } from \"./Naming\";\nimport { type BlankLineConfig, type ForEachPosition, type RenderContext, Renderer } from \"./Renderer\";\nimport { type Sourcelike, serializeRenderResult, sourcelikeToSource } from \"./Source\";\nimport { type Comment, type CommentOptions, isStringComment } from \"./support/Comments\";\nimport { trimEnd } from \"./support/Strings\";\nimport { assert, defined, nonNull, panic } from \"./support/Support\";\nimport { type TargetLanguage } from \"./TargetLanguage\";\nimport { type Transformation, followTargetType, transformationForType } from \"./Transformers\";\nimport {\n    type ClassProperty,\n    ClassType,\n    EnumType,\n    MapType,\n    ObjectType,\n    type Type,\n    type TypeKind,\n    UnionType\n} from \"./Type\";\nimport { TypeAttributeStoreView } from \"./TypeGraph\";\nimport { isNamedType, matchTypeExhaustive, nullableFromUnion, separateNamedTypes } from \"./TypeUtils\";\n\nconst wordWrap: (s: string) => string = _wordwrap(90);\n\nexport const topLevelNameOrder = 1;\n\nconst givenNameOrder = 10;\nexport const inferredNameOrder = 30;\n\nconst classPropertyNameOrder = 20;\nconst assignedClassPropertyNameOrder = 10;\n\nconst enumCaseNameOrder = 20;\nconst assignedEnumCaseNameOrder = 10;\n\nconst unionMemberNameOrder = 40;\n\nfunction splitDescription(descriptions: Iterable<string> | undefined): string[] | undefined {\n    if (descriptions === undefined) return undefined;\n    const description = Array.from(descriptions).join(\"\\n\\n\").trim();\n    if (description === \"\") return undefined;\n    return wordWrap(description)\n        .split(\"\\n\")\n        .map(l => l.trim());\n}\n\nexport interface ForbiddenWordsInfo {\n    includeGlobalForbidden: boolean;\n    names: Array<Name | string>;\n}\n\nconst assignedNameAttributeKind = new TypeAttributeKind<Name>(\"assignedName\");\nconst assignedPropertyNamesAttributeKind = new TypeAttributeKind<ReadonlyMap<string, Name>>(\"assignedPropertyNames\");\nconst assignedMemberNamesAttributeKind = new TypeAttributeKind<ReadonlyMap<Type, Name>>(\"assignedMemberNames\");\nconst assignedCaseNamesAttributeKind = new TypeAttributeKind<ReadonlyMap<string, Name>>(\"assignedCaseNames\");\n\nexport abstract class ConvenienceRenderer extends Renderer {\n    private _globalForbiddenNamespace: Namespace | undefined;\n\n    private _otherForbiddenNamespaces: Map<string, Namespace> | undefined;\n\n    private _globalNamespace: Namespace | undefined;\n\n    private _nameStoreView: TypeAttributeStoreView<Name> | undefined;\n\n    private _propertyNamesStoreView: TypeAttributeStoreView<ReadonlyMap<string, Name>> | undefined;\n\n    private _memberNamesStoreView: TypeAttributeStoreView<ReadonlyMap<Type, Name>> | undefined;\n\n    private _caseNamesStoreView: TypeAttributeStoreView<ReadonlyMap<string, Name>> | undefined;\n\n    private _namesForTransformations: Map<Type, Name> | undefined;\n\n    private _namedTypeNamer: Namer | undefined;\n\n    // @ts-expect-error: FIXME: Make this `Namer | undefined`\n    private _unionMemberNamer: Namer | null;\n\n    // @ts-expect-error: FIXME: Make this `Namer | undefined`\n    private _enumCaseNamer: Namer | null;\n\n    private _declarationIR: DeclarationIR | undefined;\n\n    private _namedTypes: readonly Type[] | undefined;\n\n    private _namedObjects: Set<ObjectType> | undefined;\n\n    private _namedEnums: Set<EnumType> | undefined;\n\n    private _namedUnions: Set<UnionType> | undefined;\n\n    private _haveUnions: boolean | undefined;\n\n    private _haveMaps: boolean | undefined;\n\n    private _haveOptionalProperties: boolean | undefined;\n\n    private _cycleBreakerTypes?: Set<Type> | undefined;\n\n    private _alphabetizeProperties = false;\n\n    public constructor(targetLanguage: TargetLanguage, renderContext: RenderContext) {\n        super(targetLanguage, renderContext);\n    }\n\n    public get topLevels(): ReadonlyMap<string, Type> {\n        return this.typeGraph.topLevels;\n    }\n\n    /**\n     * Return an array of strings which are not allowed as names in the global\n     * namespace.  Since names of generated types are in the global namespace,\n     * this will include anything built into the language or default libraries\n     * that can conflict with that, such as reserved keywords or common type\n     * names.\n     */\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return [];\n    }\n\n    /**\n     * Returns which names are forbidden for the property names of an object\n     * type.  `names` can contain strings as well as `Name`s.  In some\n     * languages, the class name can't be used as the name for a property, for\n     * example, in which case `_className` would have to be return in `names`.\n     * If `includeGlobalForbidden` is set, then all names that are forbidden\n     * in the global namespace will also be forbidden for the properties.\n     * Note: That doesn't mean that the names in the global namespace will be\n     * forbidden, too!\n     */\n    protected forbiddenForObjectProperties(_o: ObjectType, _className: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: false };\n    }\n\n    protected forbiddenForUnionMembers(_u: UnionType, _unionName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: false };\n    }\n\n    protected forbiddenForEnumCases(_e: EnumType, _enumName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: false };\n    }\n\n    protected makeTopLevelDependencyNames(_t: Type, _topLevelName: Name): DependencyName[] {\n        return [];\n    }\n\n    protected makeNamedTypeDependencyNames(_t: Type, _name: Name): DependencyName[] {\n        return [];\n    }\n\n    protected abstract makeNamedTypeNamer(): Namer;\n    protected abstract namerForObjectProperty(o: ObjectType, p: ClassProperty): Namer | null;\n    protected abstract makeUnionMemberNamer(): Namer | null;\n    protected abstract makeEnumCaseNamer(): Namer | null;\n    protected abstract emitSourceStructure(givenOutputFilename: string): void;\n\n    protected makeNameForTransformation(_xf: Transformation, _typeName: Name | undefined): Name | undefined {\n        return undefined;\n    }\n\n    protected namedTypeToNameForTopLevel(type: Type): Type | undefined {\n        if (isNamedType(type)) {\n            return type;\n        }\n\n        return undefined;\n    }\n\n    protected get unionMembersInGlobalNamespace(): boolean {\n        return false;\n    }\n\n    protected get enumCasesInGlobalNamespace(): boolean {\n        return false;\n    }\n\n    protected get needsTypeDeclarationBeforeUse(): boolean {\n        return false;\n    }\n\n    protected canBeForwardDeclared(_t: Type): boolean {\n        return panic(\"If needsTypeDeclarationBeforeUse returns true, canBeForwardDeclared must be implemented\");\n    }\n\n    protected unionNeedsName(u: UnionType): boolean {\n        return nullableFromUnion(u) === null;\n    }\n\n    private get globalNamespace(): Namespace {\n        return defined(this._globalNamespace);\n    }\n\n    private get nameStoreView(): TypeAttributeStoreView<Name> {\n        return defined(this._nameStoreView);\n    }\n\n    protected descriptionForType(t: Type): string[] | undefined {\n        let description = this.typeGraph.attributeStore.tryGet(descriptionTypeAttributeKind, t);\n        return splitDescription(description);\n    }\n\n    protected descriptionForClassProperty(o: ObjectType, name: string): string[] | undefined {\n        const descriptions = this.typeGraph.attributeStore.tryGet(propertyDescriptionsTypeAttributeKind, o);\n        if (descriptions === undefined) return undefined;\n        return splitDescription(descriptions.get(name));\n    }\n\n    protected setUpNaming(): ReadonlySet<Namespace> {\n        this._nameStoreView = new TypeAttributeStoreView(this.typeGraph.attributeStore, assignedNameAttributeKind);\n        this._propertyNamesStoreView = new TypeAttributeStoreView(\n            this.typeGraph.attributeStore,\n            assignedPropertyNamesAttributeKind\n        );\n        this._memberNamesStoreView = new TypeAttributeStoreView(\n            this.typeGraph.attributeStore,\n            assignedMemberNamesAttributeKind\n        );\n        this._caseNamesStoreView = new TypeAttributeStoreView(\n            this.typeGraph.attributeStore,\n            assignedCaseNamesAttributeKind\n        );\n        this._namesForTransformations = new Map();\n\n        this._namedTypeNamer = this.makeNamedTypeNamer();\n        this._unionMemberNamer = this.makeUnionMemberNamer();\n        this._enumCaseNamer = this.makeEnumCaseNamer();\n\n        this._globalForbiddenNamespace = keywordNamespace(\"forbidden\", this.forbiddenNamesForGlobalNamespace());\n        this._otherForbiddenNamespaces = new Map();\n        this._globalNamespace = new Namespace(\"global\", undefined, [this._globalForbiddenNamespace], []);\n        const { objects, enums, unions } = this.typeGraph.allNamedTypesSeparated();\n        const namedUnions = setFilter(unions, u => this.unionNeedsName(u));\n        for (const [name, t] of this.topLevels) {\n            this.nameStoreView.setForTopLevel(name, this.addNameForTopLevel(t, name));\n        }\n\n        for (const o of objects) {\n            const name = this.addNameForNamedType(o);\n            this.addPropertyNames(o, name);\n        }\n\n        for (const e of enums) {\n            const name = this.addNameForNamedType(e);\n            this.addEnumCaseNames(e, name);\n        }\n\n        for (const u of namedUnions) {\n            const name = this.addNameForNamedType(u);\n            this.addUnionMemberNames(u, name);\n        }\n\n        for (const t of this.typeGraph.allTypesUnordered()) {\n            this.addNameForTransformation(t);\n        }\n\n        return setUnion(\n            [this._globalForbiddenNamespace, this._globalNamespace],\n            this._otherForbiddenNamespaces.values()\n        );\n    }\n\n    private addDependenciesForNamedType(type: Type, named: Name): void {\n        const dependencyNames = this.makeNamedTypeDependencyNames(type, named);\n        for (const dn of dependencyNames) {\n            this.globalNamespace.add(dn);\n        }\n    }\n\n    protected makeNameForTopLevel(_t: Type, givenName: string, _maybeNamedType: Type | undefined): Name {\n        return new SimpleName([givenName], defined(this._namedTypeNamer), topLevelNameOrder);\n    }\n\n    private addNameForTopLevel(type: Type, givenName: string): Name {\n        const maybeNamedType = this.namedTypeToNameForTopLevel(type);\n        const name = this.makeNameForTopLevel(type, givenName, maybeNamedType);\n        this.globalNamespace.add(name);\n        const dependencyNames = this.makeTopLevelDependencyNames(type, name);\n        for (const dn of dependencyNames) {\n            this.globalNamespace.add(dn);\n        }\n\n        if (maybeNamedType !== undefined) {\n            this.addDependenciesForNamedType(maybeNamedType, name);\n            this.nameStoreView.set(maybeNamedType, name);\n        }\n\n        return name;\n    }\n\n    private makeNameForType(t: Type, namer: Namer, givenOrder: number, inferredOrder: number): Name {\n        const names = t.getNames();\n        const order = names.areInferred ? inferredOrder : givenOrder;\n        return new SimpleName(names.proposedNames, namer, order);\n    }\n\n    protected makeNameForNamedType(t: Type): Name {\n        return this.makeNameForType(t, defined(this._namedTypeNamer), givenNameOrder, inferredNameOrder);\n    }\n\n    private addNameForNamedType(type: Type): Name {\n        const existing = this.nameStoreView.tryGet(type);\n        if (existing !== undefined) return existing;\n\n        const name = this.globalNamespace.add(this.makeNameForNamedType(type));\n\n        this.addDependenciesForNamedType(type, name);\n\n        this.nameStoreView.set(type, name);\n        return name;\n    }\n\n    protected get typesWithNamedTransformations(): ReadonlyMap<Type, Name> {\n        return defined(this._namesForTransformations);\n    }\n\n    protected nameForTransformation(t: Type): Name | undefined {\n        const xf = transformationForType(t);\n        if (xf === undefined) return undefined;\n\n        const name = defined(this._namesForTransformations).get(t);\n        if (name === undefined) {\n            return panic(\"No name for transformation\");\n        }\n\n        return name;\n    }\n\n    private addNameForTransformation(t: Type): void {\n        const xf = transformationForType(t);\n        if (xf === undefined) return;\n\n        assert(\n            defined(this._namesForTransformations).get(t) === undefined,\n            \"Tried to give two names to the same transformation\"\n        );\n\n        const name = this.makeNameForTransformation(xf, this.nameStoreView.tryGet(xf.targetType));\n        if (name === undefined) return;\n        this.globalNamespace.add(name);\n\n        defined(this._namesForTransformations).set(t, name);\n    }\n\n    private processForbiddenWordsInfo(\n        info: ForbiddenWordsInfo,\n        namespaceName: string\n    ): { forbiddenNames: ReadonlySet<Name>; forbiddenNamespaces: ReadonlySet<Namespace> } {\n        const forbiddenNames: Name[] = [];\n        const forbiddenStrings: string[] = [];\n        for (const nameOrString of info.names) {\n            if (typeof nameOrString === \"string\") {\n                forbiddenStrings.push(nameOrString);\n            } else {\n                forbiddenNames.push(nameOrString);\n            }\n        }\n\n        let namespace = defined(this._otherForbiddenNamespaces).get(namespaceName);\n        if (forbiddenStrings.length > 0 && namespace === undefined) {\n            namespace = keywordNamespace(namespaceName, forbiddenStrings);\n            this._otherForbiddenNamespaces = defined(this._otherForbiddenNamespaces).set(namespaceName, namespace);\n        }\n\n        let forbiddenNamespaces = new Set<Namespace>();\n        if (info.includeGlobalForbidden) {\n            forbiddenNamespaces = forbiddenNamespaces.add(defined(this._globalForbiddenNamespace));\n        }\n\n        if (namespace !== undefined) {\n            forbiddenNamespaces = forbiddenNamespaces.add(namespace);\n        }\n\n        return { forbiddenNames: new Set(forbiddenNames), forbiddenNamespaces };\n    }\n\n    protected makeNameForProperty(\n        o: ObjectType,\n        _className: Name,\n        p: ClassProperty,\n        jsonName: string,\n        assignedName: string | undefined\n    ): Name | undefined {\n        const namer = this.namerForObjectProperty(o, p);\n        if (namer === null) return undefined;\n        // FIXME: This alternative should really depend on what the\n        // actual name of the class ends up being.  We can do this\n        // with a DependencyName.\n        // Also, we currently don't have any languages where properties\n        // are global, so collisions here could only occur where two\n        // properties of the same class have the same name, in which case\n        // the alternative would also be the same, i.e. useless.  But\n        // maybe we'll need global properties for some weird language at\n        // some point.\n        const alternative = `${o.getCombinedName()}_${jsonName}`;\n        const order = assignedName === undefined ? classPropertyNameOrder : assignedClassPropertyNameOrder;\n        const names = assignedName === undefined ? [jsonName, alternative] : [assignedName];\n        return new SimpleName(names, namer, order);\n    }\n\n    protected makePropertyDependencyNames(\n        _o: ObjectType,\n        _className: Name,\n        _p: ClassProperty,\n        _jsonName: string,\n        _name: Name\n    ): Name[] {\n        return [];\n    }\n\n    private addPropertyNames(o: ObjectType, className: Name): void {\n        const { forbiddenNames, forbiddenNamespaces } = this.processForbiddenWordsInfo(\n            this.forbiddenForObjectProperties(o, className),\n            \"forbidden-for-properties\"\n        );\n\n        let ns: Namespace | undefined;\n\n        const accessorNames = objectPropertyNames(o, this.targetLanguage.name);\n        const names = mapFilterMap(o.getSortedProperties(), (p, jsonName) => {\n            const [assignedName, isFixed] = getAccessorName(accessorNames, jsonName);\n            let name: Name | undefined;\n            if (isFixed) {\n                name = new FixedName(defined(assignedName));\n            } else {\n                name = this.makeNameForProperty(o, className, p, jsonName, assignedName);\n            }\n\n            if (name === undefined) return undefined;\n            if (ns === undefined) {\n                ns = new Namespace(o.getCombinedName(), this.globalNamespace, forbiddenNamespaces, forbiddenNames);\n            }\n\n            ns.add(name);\n            for (const depName of this.makePropertyDependencyNames(o, className, p, jsonName, name)) {\n                ns.add(depName);\n            }\n\n            return name;\n        });\n        defined(this._propertyNamesStoreView).set(o, names);\n    }\n\n    protected makeNameForUnionMember(u: UnionType, unionName: Name, t: Type): Name {\n        const [assignedName, isFixed] = unionMemberName(u, t, this.targetLanguage.name);\n        if (isFixed) {\n            return new FixedName(defined(assignedName));\n        }\n\n        return new DependencyName(nonNull(this._unionMemberNamer), unionMemberNameOrder, lookup => {\n            if (assignedName !== undefined) return assignedName;\n            return this.proposeUnionMemberName(u, unionName, t, lookup);\n        });\n    }\n\n    private addUnionMemberNames(u: UnionType, unionName: Name): void {\n        const memberNamer = this._unionMemberNamer;\n        if (memberNamer === null) return;\n\n        const { forbiddenNames, forbiddenNamespaces } = this.processForbiddenWordsInfo(\n            this.forbiddenForUnionMembers(u, unionName),\n            \"forbidden-for-union-members\"\n        );\n\n        let ns: Namespace;\n        if (this.unionMembersInGlobalNamespace) {\n            ns = this.globalNamespace;\n        } else {\n            ns = new Namespace(u.getCombinedName(), this.globalNamespace, forbiddenNamespaces, forbiddenNames);\n        }\n\n        let names = new Map<Type, Name>();\n        for (const t of u.members) {\n            const name = this.makeNameForUnionMember(u, unionName, followTargetType(t));\n            names.set(t, ns.add(name));\n        }\n\n        defined(this._memberNamesStoreView).set(u, names);\n    }\n\n    protected makeNameForEnumCase(\n        e: EnumType,\n        _enumName: Name,\n        caseName: string,\n        assignedName: string | undefined\n    ): Name {\n        // FIXME: See the FIXME in `makeNameForProperty`.  We do have global\n        // enum cases, though (in Go), so this is actually useful already.\n        const alternative = `${e.getCombinedName()}_${caseName}`;\n        const order = assignedName === undefined ? enumCaseNameOrder : assignedEnumCaseNameOrder;\n        const names = assignedName === undefined ? [caseName, alternative] : [assignedName];\n        return new SimpleName(names, nonNull(this._enumCaseNamer), order);\n    }\n\n    // FIXME: this is very similar to addPropertyNameds and addUnionMemberNames\n    private addEnumCaseNames(e: EnumType, enumName: Name): void {\n        if (this._enumCaseNamer === null) return;\n\n        const { forbiddenNames, forbiddenNamespaces } = this.processForbiddenWordsInfo(\n            this.forbiddenForEnumCases(e, enumName),\n            \"forbidden-for-enum-cases\"\n        );\n\n        let ns: Namespace;\n        if (this.enumCasesInGlobalNamespace) {\n            ns = this.globalNamespace;\n        } else {\n            ns = new Namespace(e.getCombinedName(), this.globalNamespace, forbiddenNamespaces, forbiddenNames);\n        }\n\n        let names = new Map<string, Name>();\n        const accessorNames = enumCaseNames(e, this.targetLanguage.name);\n        for (const caseName of e.cases) {\n            const [assignedName, isFixed] = getAccessorName(accessorNames, caseName);\n            let name: Name;\n            if (isFixed) {\n                name = new FixedName(defined(assignedName));\n            } else {\n                name = this.makeNameForEnumCase(e, enumName, caseName, assignedName);\n            }\n\n            names.set(caseName, ns.add(name));\n        }\n\n        defined(this._caseNamesStoreView).set(e, names);\n    }\n\n    private childrenOfType(t: Type): ReadonlySet<Type> {\n        const names = this.names;\n        if (t instanceof ClassType) {\n            const propertyNameds = defined(this._propertyNamesStoreView).get(t);\n            const filteredMap = mapFilterMap(t.getProperties(), (p, n) => {\n                if (propertyNameds.get(n) === undefined) return undefined;\n                return p.type;\n            });\n            const sortedMap = mapSortBy(filteredMap, (_, n) => defined(names.get(defined(propertyNameds.get(n)))));\n            return new Set(sortedMap.values());\n        }\n\n        return t.getChildren();\n    }\n\n    protected get namedUnions(): ReadonlySet<UnionType> {\n        return defined(this._namedUnions);\n    }\n\n    protected get haveNamedUnions(): boolean {\n        return this.namedUnions.size > 0;\n    }\n\n    protected get haveNamedTypes(): boolean {\n        return defined(this._namedTypes).length > 0;\n    }\n\n    protected get haveUnions(): boolean {\n        return defined(this._haveUnions);\n    }\n\n    protected get haveMaps(): boolean {\n        return defined(this._haveMaps);\n    }\n\n    protected get haveOptionalProperties(): boolean {\n        return defined(this._haveOptionalProperties);\n    }\n\n    // FIXME: Inconsistently named, though technically correct.  Right now all enums are named,\n    // but this should really be called `namedEnums`.\n    protected get enums(): ReadonlySet<EnumType> {\n        return defined(this._namedEnums);\n    }\n\n    protected get haveEnums(): boolean {\n        return this.enums.size > 0;\n    }\n\n    protected proposedUnionMemberNameForTypeKind(_kind: TypeKind): string | null {\n        return null;\n    }\n\n    protected proposeUnionMemberName(\n        _u: UnionType,\n        _unionName: Name,\n        fieldType: Type,\n        lookup: (n: Name) => string\n    ): string {\n        const simpleName = this.proposedUnionMemberNameForTypeKind(fieldType.kind);\n        if (simpleName !== null) {\n            return simpleName;\n        }\n\n        const typeNameForUnionMember = (t: Type): string =>\n            matchTypeExhaustive(\n                t,\n                _noneType => {\n                    return panic(\"none type should have been replaced\");\n                },\n                _anyType => \"anything\",\n                _nullType => \"null\",\n                _boolType => \"bool\",\n                _integerType => \"integer\",\n                _doubleType => \"double\",\n                _stringType => \"string\",\n                arrayType => typeNameForUnionMember(arrayType.items) + \"_array\",\n                classType => lookup(this.nameForNamedType(classType)),\n                mapType => typeNameForUnionMember(mapType.values) + \"_map\",\n                objectType => {\n                    assert(\n                        this.targetLanguage.supportsFullObjectType,\n                        \"Object type should have been replaced in `replaceObjectType`\"\n                    );\n                    return lookup(this.nameForNamedType(objectType));\n                },\n                _enumType => \"enum\",\n                _unionType => \"union\",\n                transformedType => transformedType.kind.replace(\"-\", \"_\")\n            );\n\n        return typeNameForUnionMember(fieldType);\n    }\n\n    protected nameForNamedType(t: Type): Name {\n        return this.nameStoreView.get(t);\n    }\n\n    protected isForwardDeclaredType(t: Type): boolean {\n        return defined(this._declarationIR).forwardedTypes.has(t);\n    }\n\n    protected isImplicitCycleBreaker(_t: Type): boolean {\n        return panic(\"A renderer that invokes isCycleBreakerType must implement isImplicitCycleBreaker\");\n    }\n\n    protected canBreakCycles(_t: Type): boolean {\n        return true;\n    }\n\n    protected isCycleBreakerType(t: Type): boolean {\n        if (this._cycleBreakerTypes === undefined) {\n            this._cycleBreakerTypes = cycleBreakerTypesForGraph(\n                this.typeGraph,\n                s => this.isImplicitCycleBreaker(s),\n                s => this.canBreakCycles(s)\n            );\n        }\n\n        return this._cycleBreakerTypes.has(t);\n    }\n\n    protected forEachTopLevel(\n        blankLocations: BlankLineConfig,\n        f: (t: Type, name: Name, position: ForEachPosition) => void,\n        predicate?: (t: Type) => boolean\n    ): boolean {\n        let topLevels: ReadonlyMap<string, Type>;\n        if (predicate !== undefined) {\n            topLevels = mapFilter(this.topLevels, predicate);\n        } else {\n            topLevels = this.topLevels;\n        }\n\n        return this.forEachWithBlankLines(topLevels, blankLocations, (t, name, pos) =>\n            f(t, this.nameStoreView.getForTopLevel(name), pos)\n        );\n    }\n\n    protected forEachDeclaration(\n        blankLocations: BlankLineConfig,\n        f: (decl: Declaration, position: ForEachPosition) => void\n    ): void {\n        this.forEachWithBlankLines(\n            iterableEnumerate(defined(this._declarationIR).declarations),\n            blankLocations,\n            (decl, _, pos) => f(decl, pos)\n        );\n    }\n\n    public setAlphabetizeProperties(value: boolean): void {\n        this._alphabetizeProperties = value;\n    }\n\n    protected getAlphabetizeProperties(): boolean {\n        return this._alphabetizeProperties;\n    }\n\n    // Returns the number of properties defined for the specified object type.\n    protected propertyCount(o: ObjectType): number {\n        const propertyNames = defined(this._propertyNamesStoreView).get(o);\n        return propertyNames.size;\n    }\n\n    protected sortClassProperties(\n        properties: ReadonlyMap<string, ClassProperty>,\n        propertyNames: ReadonlyMap<string, Name>\n    ): ReadonlyMap<string, ClassProperty> {\n        if (this._alphabetizeProperties) {\n            return mapSortBy(properties, (_p: ClassProperty, jsonName: string) => {\n                const name = defined(propertyNames.get(jsonName));\n                return defined(this.names.get(name));\n            });\n        } else {\n            return properties;\n        }\n    }\n\n    protected forEachClassProperty(\n        o: ObjectType,\n        blankLocations: BlankLineConfig,\n        f: (name: Name, jsonName: string, p: ClassProperty, position: ForEachPosition) => void\n    ): void {\n        const propertyNames = defined(this._propertyNamesStoreView).get(o);\n        const sortedProperties = this.sortClassProperties(o.getProperties(), propertyNames);\n        this.forEachWithBlankLines(sortedProperties, blankLocations, (p, jsonName, pos) => {\n            const name = defined(propertyNames.get(jsonName));\n            f(name, jsonName, p, pos);\n        });\n    }\n\n    protected nameForUnionMember(u: UnionType, t: Type): Name {\n        return defined(defined(this._memberNamesStoreView).get(u).get(t));\n    }\n\n    protected nameForEnumCase(e: EnumType, caseName: string): Name {\n        const caseNames = defined(this._caseNamesStoreView).get(e);\n        return defined(caseNames.get(caseName));\n    }\n\n    protected forEachUnionMember(\n        u: UnionType,\n        members: ReadonlySet<Type> | null,\n        blankLocations: BlankLineConfig,\n        sortOrder: ((n: Name, t: Type) => string) | null,\n        f: (name: Name, t: Type, position: ForEachPosition) => void\n    ): void {\n        const iterateMembers = members ?? u.members;\n        if (sortOrder === null) {\n            sortOrder = (n): string => defined(this.names.get(n));\n        }\n\n        const memberNames = mapFilter(defined(this._memberNamesStoreView).get(u), (_, t) => iterateMembers.has(t));\n        const sortedMemberNames = mapSortBy(memberNames, sortOrder);\n        this.forEachWithBlankLines(sortedMemberNames, blankLocations, f);\n    }\n\n    protected forEachEnumCase(\n        e: EnumType,\n        blankLocations: BlankLineConfig,\n        f: (name: Name, jsonName: string, position: ForEachPosition) => void\n    ): void {\n        const caseNames = defined(this._caseNamesStoreView).get(e);\n        const sortedCaseNames = mapSortBy(caseNames, n => defined(this.names.get(n)));\n        this.forEachWithBlankLines(sortedCaseNames, blankLocations, f);\n    }\n\n    protected forEachTransformation(\n        blankLocations: BlankLineConfig,\n        f: (n: Name, t: Type, position: ForEachPosition) => void\n    ): void {\n        this.forEachWithBlankLines(defined(this._namesForTransformations), blankLocations, f);\n    }\n\n    protected forEachSpecificNamedType<T extends Type>(\n        blankLocations: BlankLineConfig,\n        types: Iterable<[T, T]>,\n        f: (t: T, name: Name, position: ForEachPosition) => void\n    ): void {\n        this.forEachWithBlankLines(types, blankLocations, (t, _, pos) => f(t, this.nameForNamedType(t), pos));\n    }\n\n    protected forEachObject(\n        blankLocations: BlankLineConfig,\n        f:\n            | ((c: ClassType, className: Name, position: ForEachPosition) => void)\n            | ((o: ObjectType, objectName: Name, position: ForEachPosition) => void)\n    ): void {\n        // FIXME: This is ugly.\n        this.forEachSpecificNamedType<ObjectType>(blankLocations, defined(this._namedObjects).entries(), f);\n    }\n\n    protected forEachEnum(\n        blankLocations: BlankLineConfig,\n        f: (u: EnumType, enumName: Name, position: ForEachPosition) => void\n    ): void {\n        this.forEachSpecificNamedType(blankLocations, this.enums.entries(), f);\n    }\n\n    protected forEachUnion(\n        blankLocations: BlankLineConfig,\n        f: (u: UnionType, unionName: Name, position: ForEachPosition) => void\n    ): void {\n        this.forEachSpecificNamedType(blankLocations, this.namedUnions.entries(), f);\n    }\n\n    protected forEachUniqueUnion<T>(\n        blankLocations: BlankLineConfig,\n        uniqueValue: (u: UnionType) => T,\n        f: (firstUnion: UnionType, value: T, position: ForEachPosition) => void\n    ): void {\n        const firstUnionByValue = new Map<T, UnionType>();\n        for (const u of this.namedUnions) {\n            const v = uniqueValue(u);\n            if (!firstUnionByValue.has(v)) {\n                firstUnionByValue.set(v, u);\n            }\n        }\n\n        this.forEachWithBlankLines(firstUnionByValue, blankLocations, f);\n    }\n\n    protected forEachNamedType(\n        blankLocations: BlankLineConfig,\n        objectFunc:\n            | ((c: ClassType, className: Name, position: ForEachPosition) => void)\n            | ((o: ObjectType, objectName: Name, position: ForEachPosition) => void),\n        enumFunc: (e: EnumType, enumName: Name, position: ForEachPosition) => void,\n        unionFunc: (u: UnionType, unionName: Name, position: ForEachPosition) => void\n    ): void {\n        this.forEachWithBlankLines(defined(this._namedTypes).entries(), blankLocations, (t, _, pos) => {\n            const name = this.nameForNamedType(t);\n            if (t instanceof ObjectType) {\n                // FIXME: This is ugly.  We can't runtime check that the function\n                // takes full object types if we have them.\n                objectFunc(t, name, pos);\n            } else if (t instanceof EnumType) {\n                enumFunc(t, name, pos);\n            } else if (t instanceof UnionType) {\n                unionFunc(t, name, pos);\n            } else {\n                return panic(\"Named type that's neither a class nor union\");\n            }\n        });\n    }\n\n    // You should never have to use this to produce parts of your generated\n    // code.  If you need to modify a Name, for example to change its casing,\n    // use `modifySource`.\n    protected sourcelikeToString(src: Sourcelike): string {\n        return serializeRenderResult(sourcelikeToSource(src), this.names, \"\").lines.join(\"\\n\");\n    }\n\n    protected get commentLineStart(): string {\n        return \"// \";\n    }\n\n    protected emitComments(comments: Comment[]): void {\n        comments.forEach(comment => {\n            if (isStringComment(comment)) {\n                this.emitCommentLines([comment]);\n            } else if (\"lines\" in comment) {\n                this.emitCommentLines(comment.lines);\n            } else if (\"descriptionBlock\" in comment) {\n                this.emitDescriptionBlock(comment.descriptionBlock);\n            } else {\n                this.emitCommentLines(comment.customLines, comment);\n            }\n\n            this.ensureBlankLine();\n        });\n    }\n\n    protected emitCommentLines(\n        lines: Sourcelike[],\n        {\n            lineStart = this.commentLineStart,\n            firstLineStart = lineStart,\n            lineEnd,\n            beforeComment,\n            afterComment\n        }: CommentOptions = {}\n    ): void {\n        if (beforeComment !== undefined) {\n            this.emitLine(beforeComment);\n        }\n\n        let first = true;\n        for (const line of lines) {\n            let start = first ? firstLineStart : lineStart;\n            first = false;\n\n            if (this.sourcelikeToString(line) === \"\") {\n                start = trimEnd(start);\n            }\n\n            if (lineEnd) {\n                this.emitLine(start, line, lineEnd);\n            } else {\n                this.emitLine(start, line);\n            }\n        }\n\n        if (afterComment !== undefined) {\n            this.emitLine(afterComment);\n        }\n    }\n\n    protected emitDescription(description: Sourcelike[] | undefined): void {\n        if (description === undefined) return;\n        // FIXME: word-wrap\n        this.emitDescriptionBlock(description);\n    }\n\n    protected emitDescriptionBlock(lines: Sourcelike[]): void {\n        this.emitCommentLines(lines);\n    }\n\n    protected emitPropertyTable(\n        c: ClassType,\n        makePropertyRow: (name: Name, jsonName: string, p: ClassProperty) => Sourcelike[]\n    ): void {\n        let table: Sourcelike[][] = [];\n        const emitTable = (): void => {\n            if (table.length === 0) return;\n            this.emitTable(table);\n            table = [];\n        };\n\n        this.forEachClassProperty(c, \"none\", (name, jsonName, p) => {\n            const description = this.descriptionForClassProperty(c, jsonName);\n            if (description !== undefined) {\n                emitTable();\n                this.emitDescription(description);\n            }\n\n            table.push(makePropertyRow(name, jsonName, p));\n        });\n        emitTable();\n    }\n\n    private processGraph(): void {\n        this._declarationIR = declarationsForGraph(\n            this.typeGraph,\n            this.needsTypeDeclarationBeforeUse ? (t): boolean => this.canBeForwardDeclared(t) : undefined,\n            t => this.childrenOfType(t),\n            t => {\n                if (t instanceof UnionType) {\n                    return this.unionNeedsName(t);\n                }\n\n                return isNamedType(t);\n            }\n        );\n\n        const types = this.typeGraph.allTypesUnordered();\n        this._haveUnions = iterableSome(types, t => t instanceof UnionType);\n        this._haveMaps = iterableSome(types, t => t instanceof MapType);\n        const classTypes = setFilter(types, t => t instanceof ClassType) as Set<ClassType>;\n        this._haveOptionalProperties = iterableSome(classTypes, c => mapSome(c.getProperties(), p => p.isOptional));\n        this._namedTypes = this._declarationIR.declarations.filter(d => d.kind === \"define\").map(d => d.type);\n        const { objects, enums, unions } = separateNamedTypes(this._namedTypes);\n        this._namedObjects = new Set(objects);\n        this._namedEnums = new Set(enums);\n        this._namedUnions = new Set(unions);\n    }\n\n    protected emitSource(givenOutputFilename: string): void {\n        this.processGraph();\n        this.emitSourceStructure(givenOutputFilename);\n    }\n\n    protected forEachType<TResult>(process: (t: Type) => TResult): Set<TResult> {\n        const visitedTypes = new Set<Type>();\n        const processed = new Set<TResult>();\n        const queue = Array.from(this.typeGraph.topLevels.values());\n\n        function visit(t: Type): void {\n            if (visitedTypes.has(t)) return;\n            for (const c of t.getChildren()) {\n                queue.push(c);\n            }\n\n            visitedTypes.add(t);\n            processed.add(process(t));\n        }\n\n        for (;;) {\n            const maybeType = queue.pop();\n            if (maybeType === undefined) {\n                break;\n            }\n\n            visit(maybeType);\n        }\n\n        return processed;\n    }\n}\n","/* eslint-disable */\n// https://github.com/epoberezkin/ajv/blob/4d76c6fb813b136b6ec4fe74990bc97233d75dea/lib/compile/formats.js\n\n/*\nThe MIT License (MIT)\n\nCopyright (c) 2015 Evgeny Poberezkin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\nconst DATE = /^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$/;\nconst DAYS = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst TIME = /^(\\d\\d):(\\d\\d):(\\d\\d)(\\.\\d+)?(z|[+-]\\d\\d:\\d\\d)?$/i;\n\nexport interface DateTimeRecognizer {\n    isDate: (s: string) => boolean;\n    isDateTime: (s: string) => boolean;\n    isTime: (s: string) => boolean;\n}\n\nconst DATE_TIME_SEPARATOR = /t|\\s/i;\n\nexport class DefaultDateTimeRecognizer implements DateTimeRecognizer {\n    isDate(str: string) {\n        // full-date from http://tools.ietf.org/html/rfc3339#section-5.6\n        const matches = DATE.exec(str);\n        if (matches === null) return false;\n\n        const month = +matches[2];\n        const day = +matches[3];\n        return month >= 1 && month <= 12 && day >= 1 && day <= DAYS[month];\n    }\n\n    isTime(str: string): boolean {\n        const matches = TIME.exec(str);\n        if (matches === null) return false;\n\n        const hour = +matches[1];\n        const minute = +matches[2];\n        const second = +matches[3];\n        return hour <= 23 && minute <= 59 && second <= 59;\n    }\n\n    isDateTime(str: string): boolean {\n        // http://tools.ietf.org/html/rfc3339#section-5.6\n        const dateTime = str.split(DATE_TIME_SEPARATOR);\n        return dateTime.length === 2 && this.isDate(dateTime[0]) && this.isTime(dateTime[1]);\n    }\n}\n","import { mapMap } from \"collection-utils\";\n\nimport { ConvenienceRenderer } from \"./ConvenienceRenderer\";\nimport { type DateTimeRecognizer, DefaultDateTimeRecognizer } from \"./DateTime\";\nimport { type RenderContext, type Renderer } from \"./Renderer\";\nimport { type Option, type OptionDefinition } from \"./RendererOptions\";\nimport { type SerializedRenderResult, serializeRenderResult } from \"./Source\";\nimport { type Comment } from \"./support/Comments\";\nimport { defined } from \"./support/Support\";\nimport { type Type } from \"./Type\";\nimport { type StringTypeMapping } from \"./TypeBuilder\";\nimport { type TypeGraph } from \"./TypeGraph\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"./types\";\n\nexport type MultiFileRenderResult = ReadonlyMap<string, SerializedRenderResult>;\n\nexport abstract class TargetLanguage {\n    public constructor(\n        public readonly displayName: string,\n        public readonly names: string[],\n        public readonly extension: string\n    ) {}\n\n    protected abstract getOptions(): Array<Option<FixMeOptionsAnyType>>;\n\n    public get optionDefinitions(): OptionDefinition[] {\n        return this.getOptions().map(o => o.definition);\n    }\n\n    public get cliOptionDefinitions(): { actual: OptionDefinition[]; display: OptionDefinition[] } {\n        let actual: OptionDefinition[] = [];\n        let display: OptionDefinition[] = [];\n        for (const { cliDefinitions } of this.getOptions()) {\n            actual = actual.concat(cliDefinitions.actual);\n            display = display.concat(cliDefinitions.display);\n        }\n\n        return { actual, display };\n    }\n\n    public get name(): string {\n        return defined(this.names[0]);\n    }\n\n    protected abstract makeRenderer(renderContext: RenderContext, optionValues: FixMeOptionsType): Renderer;\n\n    public renderGraphAndSerialize(\n        typeGraph: TypeGraph,\n        givenOutputFilename: string,\n        alphabetizeProperties: boolean,\n        leadingComments: Comment[] | undefined,\n        rendererOptions: FixMeOptionsType,\n        indentation?: string\n    ): MultiFileRenderResult {\n        if (indentation === undefined) {\n            indentation = this.defaultIndentation;\n        }\n\n        const renderContext = { typeGraph, leadingComments };\n        const renderer = this.makeRenderer(renderContext, rendererOptions);\n        if (renderer instanceof ConvenienceRenderer) {\n            renderer.setAlphabetizeProperties(alphabetizeProperties);\n        }\n\n        const renderResult = renderer.render(givenOutputFilename);\n        return mapMap(renderResult.sources, s => serializeRenderResult(s, renderResult.names, defined(indentation)));\n    }\n\n    protected get defaultIndentation(): string {\n        return \"    \";\n    }\n\n    public get stringTypeMapping(): StringTypeMapping {\n        return new Map();\n    }\n\n    public get supportsOptionalClassProperties(): boolean {\n        return false;\n    }\n\n    public get supportsUnionsWithBothNumberTypes(): boolean {\n        return false;\n    }\n\n    public get supportsFullObjectType(): boolean {\n        return false;\n    }\n\n    public needsTransformerForType(_t: Type): boolean {\n        return false;\n    }\n\n    public get dateTimeRecognizer(): DateTimeRecognizer {\n        return new DefaultDateTimeRecognizer();\n    }\n}\n","// FIXME: NEEDS REFACTOR\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * CJSON.ts\n * This file is used to generate cJSON code with quicktype\n * The generated code depends of https://github.com/DaveGamble/cJSON, https://github.com/joelguittet/c-list and https://github.com/joelguittet/c-hashtable\n *\n * Similarly to C++ generator, it is possible to generate a single header file or multiple header files.\n * To generate multiple header files, use the following option: --source-style multi-source\n *\n * JSON data are represented using structures, and functions in the cJSON style are created to use them.\n * To parse json data from json string use the following: struct <type> * data = cJSON_Parse<type>(<string>);\n * To get json data from cJSON object use the following: struct <type> * data = cJSON_Get<type>Value(<cjson>);\n * To get cJSON object from json data use the following: cJSON * cjson = cJSON_Create<type>(<data>);\n * To print json string from json data use the following: char * string = cJSON_Print<type>(<data>);\n * To delete json data use the following: cJSON_Delete<type>(<data>);\n *\n * TODO list for future enhancements:\n * - Management of Class, Union and TopLevel should be mutualized to reduce code size and to permit Union and TopLevel having recursive Array/Map\n * - Types check should be added to verify unwanted inputs (for example a Number passed while a String is expected, etc)\n * - Constraints should be implemented (verification of Enum values, min/max values for Numbers and min/max length for Strings, regex)\n * - Support of pure Any type for example providing a callback from the application to handle these cases dynamically\n * See test/languages.ts for the test cases which are not implmented/checked.\n */\n\n/* Imports */\nimport { getAccessorName } from \"../attributes/AccessorNames\";\nimport { enumCaseValues } from \"../attributes/EnumValues\";\nimport { ConvenienceRenderer, type ForbiddenWordsInfo } from \"../ConvenienceRenderer\";\nimport { type Name, type NameStyle, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { EnumOption, type Option, type OptionValues, StringOption, getOptionValues } from \"../RendererOptions\";\nimport { type Sourcelike } from \"../Source\";\nimport {\n    type NamingStyle,\n    allUpperWordStyle,\n    isAscii,\n    isLetterOrUnderscoreOrDigit,\n    legalizeCharacters,\n    makeNameStyle\n} from \"../support/Strings\";\nimport { assert, assertNever, defined, numberEnumValues, panic } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport { ArrayType, ClassType, EnumType, MapType, type Type, type TypeKind, UnionType } from \"../Type\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { matchType, nullableFromUnion, removeNullFromUnion } from \"../TypeUtils\";\n\n/* Naming styles */\nconst pascalValue: [string, NamingStyle] = [\"pascal-case\", \"pascal\"];\nconst underscoreValue: [string, NamingStyle] = [\"underscore-case\", \"underscore\"];\nconst camelValue: [string, NamingStyle] = [\"camel-case\", \"camel\"];\nconst upperUnderscoreValue: [string, NamingStyle] = [\"upper-underscore-case\", \"upper-underscore\"];\nconst pascalUpperAcronymsValue: [string, NamingStyle] = [\"pascal-case-upper-acronyms\", \"pascal-upper-acronyms\"];\nconst camelUpperAcronymsValue: [string, NamingStyle] = [\"camel-case-upper-acronyms\", \"camel-upper-acronyms\"];\n\n/* cJSON generator options */\nexport const cJSONOptions = {\n    typeSourceStyle: new EnumOption(\n        \"source-style\",\n        \"Source code generation type, whether to generate single or multiple source files\",\n        [\n            [\"single-source\", true],\n            [\"multi-source\", false]\n        ],\n        \"single-source\",\n        \"secondary\"\n    ),\n    typeIntegerSize: new EnumOption(\n        \"integer-size\",\n        \"Integer code generation type (int64_t by default)\",\n        [\n            [\"int8_t\", \"int8_t\"],\n            [\"int16_t\", \"int16_t\"],\n            [\"int32_t\", \"int32_t\"],\n            [\"int64_t\", \"int64_t\"]\n        ],\n        \"int64_t\",\n        \"secondary\"\n    ),\n    hashtableSize: new StringOption(\n        \"hashtable-size\",\n        \"Hashtable size, used when maps are created (64 by default)\",\n        \"SIZE\",\n        \"64\"\n    ),\n    addTypedefAlias: new EnumOption(\n        \"typedef-alias\",\n        \"Add typedef alias to unions, structs, and enums (no typedef by default)\",\n        [\n            [\"no-typedef\", false],\n            [\"add-typedef\", true]\n        ],\n        \"no-typedef\",\n        \"secondary\"\n    ),\n    printStyle: new EnumOption(\n        \"print-style\",\n        \"Which cJSON print should be used (formatted by default)\",\n        [\n            [\"print-formatted\", false],\n            [\"print-unformatted\", true]\n        ],\n        \"print-formatted\",\n        \"secondary\"\n    ),\n    typeNamingStyle: new EnumOption<NamingStyle>(\"type-style\", \"Naming style for types\", [\n        pascalValue,\n        underscoreValue,\n        camelValue,\n        upperUnderscoreValue,\n        pascalUpperAcronymsValue,\n        camelUpperAcronymsValue\n    ]),\n    memberNamingStyle: new EnumOption<NamingStyle>(\"member-style\", \"Naming style for members\", [\n        underscoreValue,\n        pascalValue,\n        camelValue,\n        upperUnderscoreValue,\n        pascalUpperAcronymsValue,\n        camelUpperAcronymsValue\n    ]),\n    enumeratorNamingStyle: new EnumOption<NamingStyle>(\"enumerator-style\", \"Naming style for enumerators\", [\n        upperUnderscoreValue,\n        underscoreValue,\n        pascalValue,\n        camelValue,\n        pascalUpperAcronymsValue,\n        camelUpperAcronymsValue\n    ])\n};\n\n/* cJSON generator target language */\nexport class CJSONTargetLanguage extends TargetLanguage {\n    /**\n     * Constructor\n     * @param displayName: display name\n     * @params names: names\n     * @param extension: extension of files\n     */\n    public constructor(displayName = \"C (cJSON)\", names: string[] = [\"cjson\", \"cJSON\"], extension = \"h\") {\n        super(displayName, names, extension);\n    }\n\n    /**\n     * Return cJSON generator options\n     * @return cJSON generator options array\n     */\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [\n            cJSONOptions.typeSourceStyle,\n            cJSONOptions.typeIntegerSize,\n            cJSONOptions.addTypedefAlias,\n            cJSONOptions.printStyle,\n            cJSONOptions.hashtableSize,\n            cJSONOptions.typeNamingStyle,\n            cJSONOptions.memberNamingStyle,\n            cJSONOptions.enumeratorNamingStyle\n        ];\n    }\n\n    /**\n     * Indicate if language support union with both number types\n     * @return true\n     */\n    public get supportsUnionsWithBothNumberTypes(): boolean {\n        return true;\n    }\n\n    /**\n     * Indicate if language support optional class properties\n     * @return true\n     */\n    public get supportsOptionalClassProperties(): boolean {\n        return true;\n    }\n\n    /**\n     * Create renderer\n     * @param renderContext: render context\n     * @param untypedOptionValues\n     * @return cJSON renderer\n     */\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): CJSONRenderer {\n        return new CJSONRenderer(this, renderContext, getOptionValues(cJSONOptions, untypedOptionValues));\n    }\n}\n\n/* Function used to format names */\nconst legalizeName = legalizeCharacters(cp => isAscii(cp) && isLetterOrUnderscoreOrDigit(cp));\n\n/* Forbidden names for namespace */\nconst keywords = [\n    /* C and C++ keywords */\n    \"alignas\",\n    \"alignof\",\n    \"and\",\n    \"and_eq\",\n    \"asm\",\n    \"atomic_cancel\",\n    \"atomic_commit\",\n    \"atomic_noexcept\",\n    \"auto\",\n    \"bitand\",\n    \"bitor\",\n    \"bool\",\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"char\",\n    \"char16_t\",\n    \"char32_t\",\n    \"class\",\n    \"compl\",\n    \"concept\",\n    \"const\",\n    \"constexpr\",\n    \"const_cast\",\n    \"continue\",\n    \"co_await\",\n    \"co_return\",\n    \"co_yield\",\n    \"decltype\",\n    \"default\",\n    \"delete\",\n    \"do\",\n    \"double\",\n    \"dynamic_cast\",\n    \"else\",\n    \"enum\",\n    \"explicit\",\n    \"export\",\n    \"extern\",\n    \"false\",\n    \"float\",\n    \"for\",\n    \"friend\",\n    \"goto\",\n    \"if\",\n    \"import\",\n    \"inline\",\n    \"int\",\n    \"long\",\n    \"module\",\n    \"mutable\",\n    \"namespace\",\n    \"new\",\n    \"noexcept\",\n    \"not\",\n    \"not_eq\",\n    \"nullptr\",\n    \"operator\",\n    \"or\",\n    \"or_eq\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"register\",\n    \"reinterpret_cast\",\n    \"requires\",\n    \"restrict\",\n    \"return\",\n    \"short\",\n    \"signed\",\n    \"sizeof\",\n    \"static\",\n    \"static_assert\",\n    \"static_cast\",\n    \"struct\",\n    \"switch\",\n    \"synchronized\",\n    \"template\",\n    \"this\",\n    \"thread_local\",\n    \"throw\",\n    \"true\",\n    \"try\",\n    \"typedef\",\n    \"typeid\",\n    \"typename\",\n    \"typeof\",\n    \"union\",\n    \"unsigned\",\n    \"using\",\n    \"virtual\",\n    \"void\",\n    \"volatile\",\n    \"wchar_t\",\n    \"while\",\n    \"xor\",\n    \"xor_eq\",\n    \"override\",\n    \"final\",\n    \"transaction_safe\",\n    \"transaction_safe_dynamic\",\n    \"NULL\",\n    /* cJSON keywords */\n    \"Array\",\n    \"ArrayReference\",\n    \"Bool\",\n    \"DoubleArray\",\n    \"False\",\n    \"FloatArray\",\n    \"IntArray\",\n    \"Object\",\n    \"Null\",\n    \"Number\",\n    \"Raw\",\n    \"String\",\n    \"StringArray\",\n    \"StringReference\",\n    \"True\"\n];\n\n/* Used to build forbidden global names */\nexport enum GlobalNames {\n    ClassMemberConstraints = 1,\n    ClassMemberConstraintException = 2,\n    ValueTooLowException = 3,\n    ValueTooHighException = 4,\n    ValueTooShortException = 5,\n    ValueTooLongException = 6,\n    InvalidPatternException = 7,\n    CheckConstraint = 8\n}\n\n/* To be able to support circles in multiple files - e.g. class#A using class#B using class#A (obviously not directly) we can forward declare them */\nexport enum IncludeKind {\n    ForwardDeclare = \"ForwardDeclare\",\n    Include = \"Include\"\n}\n\n/* Used to map includes */\nexport interface IncludeRecord {\n    kind: IncludeKind | undefined /* How to include that */;\n    typeKind: TypeKind | undefined /* What exactly to include */;\n}\n\n/* Used to map includes */\nexport interface TypeRecord {\n    forceInclude: boolean;\n    level: number;\n    name: Name;\n    type: Type;\n    variant: boolean;\n}\n\n/* Map each and every unique type to a include kind, e.g. how to include the given type */\nexport type IncludeMap = Map<string, IncludeRecord>;\n\n/* cJSON type */\nexport interface TypeCJSON {\n    addToObject: Sourcelike /* cJSON add to object function */;\n    cType: Sourcelike /* C type */;\n    cjsonType: string /* cJSON type */;\n    createObject: Sourcelike /* cJSON create object function */;\n    deleteType: Sourcelike /* cJSON delete function */;\n    getValue: Sourcelike /* cJSON get value function */;\n    isNullable: boolean /* True if the field is nullable */;\n    isType: Sourcelike /* cJSON check type function */;\n    items: TypeCJSON | undefined /* Sub-items, used for arrays and map */;\n    optionalQualifier: string /* C optional qualifier, empty string if not defined */;\n}\n\n/* cJSON renderer */\nexport class CJSONRenderer extends ConvenienceRenderer {\n    private currentFilename: string | undefined; /* Current filename */\n\n    private readonly memberNameStyle: NameStyle; /* Member name style */\n\n    private readonly namedTypeNameStyle: NameStyle; /* Named type name style */\n\n    private readonly forbiddenGlobalNames: string[]; /* Forbidden global names */\n\n    protected readonly typeIntegerSize: string; /* Integer code generation type */\n\n    protected readonly hashtableSize: string; /* Hashtable default size */\n\n    protected readonly typeNamingStyle: NamingStyle; /* Type naming style */\n\n    protected readonly enumeratorNamingStyle: NamingStyle; /* Enum naming style */\n\n    /**\n     * Constructor\n     * @param targetLanguage: target language\n     * @param renderContext: render context\n     * @param _options: renderer options\n     */\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        private readonly _options: OptionValues<typeof cJSONOptions>\n    ) {\n        super(targetLanguage, renderContext);\n        this.typeIntegerSize = _options.typeIntegerSize;\n        this.hashtableSize = _options.hashtableSize;\n        this.typeNamingStyle = _options.typeNamingStyle;\n        this.namedTypeNameStyle = makeNameStyle(this.typeNamingStyle, legalizeName);\n        this.enumeratorNamingStyle = _options.enumeratorNamingStyle;\n        this.memberNameStyle = makeNameStyle(_options.memberNamingStyle, legalizeName);\n        this.forbiddenGlobalNames = [];\n        for (const type of numberEnumValues(GlobalNames)) {\n            const genName = this.namedTypeNameStyle(GlobalNames[type]);\n            this.forbiddenGlobalNames.push(genName);\n        }\n    }\n\n    /**\n     * Build forbidden names for namespace\n     * @return Forbidden names for namespace\n     */\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return [...keywords, ...this.forbiddenGlobalNames];\n    }\n\n    /**\n     * Build forbidden names for enums\n     * @return Forbidden names for enums\n     */\n    protected forbiddenForEnumCases(_enumType: EnumType, _enumName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    /**\n     * Build forbidden names for unions members\n     * @return Forbidden names for unions members\n     */\n    protected forbiddenForUnionMembers(_u: UnionType, _unionName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    /**\n     * Build forbidden names for objects\n     * @return Forbidden names for objects\n     */\n    protected forbiddenForObjectProperties(_c: ClassType, _className: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    /**\n     * Build types member names\n     * @return types member namer\n     */\n    protected makeNamedTypeNamer(): Namer {\n        return funPrefixNamer(\"types\", this.namedTypeNameStyle);\n    }\n\n    /**\n     * Build object properties member names\n     * @return object properties member namer\n     */\n    protected namerForObjectProperty(): Namer {\n        return funPrefixNamer(\"members\", this.memberNameStyle);\n    }\n\n    /**\n     * Build union member names\n     * @return union member namer\n     */\n    protected makeUnionMemberNamer(): Namer {\n        return funPrefixNamer(\"members\", this.memberNameStyle);\n    }\n\n    /**\n     * Build enum member names\n     * @return enum member namer\n     */\n    protected makeEnumCaseNamer(): Namer {\n        return funPrefixNamer(\"enumerators\", makeNameStyle(this.enumeratorNamingStyle, legalizeName));\n    }\n\n    /**\n     * Override of super proposeUnionMemberName function\n     * @param unionType: union type\n     * @param unionName: union name\n     * @param fieldType: field type\n     * @param lookup: Lookup function\n     * @return Proposed union member name\n     */\n    protected proposeUnionMemberName(\n        unionType: UnionType,\n        unionName: Name,\n        fieldType: Type,\n        lookup: (n: Name) => string\n    ): string {\n        let fieldName = super.proposeUnionMemberName(unionType, unionName, fieldType, lookup);\n        if (\"bool\" === fieldName) {\n            fieldName = \"boolean\";\n        } else if (\"double\" === fieldName) {\n            fieldName = \"number\";\n        }\n\n        return fieldName;\n    }\n\n    /**\n     * Function called to emit typedef alias for a a given type\n     * @param fieldType: the variable type\n     * @param fieldName: name of the variable\n     */\n    protected emitTypedefAlias(fieldType: Type, fieldName: Name): void {\n        if (this._options.addTypedefAlias) {\n            this.emitLine(\"typedef \", this.quicktypeTypeToCJSON(fieldType, false).cType, \" \", fieldName, \";\");\n            this.ensureBlankLine();\n        }\n    }\n\n    /**\n     * Function called to create header file(s)\n     * @param proposedFilename: source filename provided from stdin\n     */\n    protected emitSourceStructure(proposedFilename: string): void {\n        /* Depending of source style option, generate a unique header or multiple header files */\n        if (this._options.typeSourceStyle) {\n            this.emitSingleSourceStructure(proposedFilename);\n        } else {\n            this.emitMultiSourceStructure();\n        }\n    }\n\n    /**\n     * Function called to create a single header file with types and generators\n     * @param proposedFilename: source filename provided from stdin\n     */\n    protected emitSingleSourceStructure(proposedFilename: string): void {\n        /* Create file */\n        this.startFile(proposedFilename);\n\n        /* Create types */\n        this.forEachDeclaration(\"leading-and-interposing\", decl => {\n            if (decl.kind === \"forward\") {\n                this.emitLine(\"struct \", this.nameForNamedType(decl.type), \";\");\n            } else if (decl.kind === \"define\") {\n                const type = decl.type;\n                if (type instanceof ClassType) {\n                    this.emitClassTypedef(type);\n                } else if (type instanceof EnumType) {\n                    this.emitEnumTypedef(type);\n                } else if (type instanceof UnionType) {\n                    this.emitUnionTypedef(type);\n                } else {\n                    panic(\"Cannot declare type\");\n                }\n            } else {\n                assertNever(decl.kind);\n            }\n        });\n\n        /* Create top level type */\n        this.forEachTopLevel(\n            \"leading\",\n            (type: Type, className: Name) => this.emitTopLevelTypedef(type, className),\n            type => this.namedTypeToNameForTopLevel(type) === undefined\n        );\n\n        /* Create enum prototypes */\n        this.forEachEnum(\"leading-and-interposing\", (enumType: EnumType, _enumName: Name) =>\n            this.emitEnumPrototypes(enumType)\n        );\n\n        /* Create union prototypes */\n        this.forEachUnion(\"leading-and-interposing\", (unionType: UnionType) => this.emitUnionPrototypes(unionType));\n\n        /* Create class prototypes */\n        this.forEachObject(\"leading-and-interposing\", (classType: ClassType, _className: Name) =>\n            this.emitClassPrototypes(classType)\n        );\n\n        /* Create top level prototypes */\n        this.forEachTopLevel(\n            \"leading\",\n            (type: Type, className: Name) => this.emitTopLevelPrototypes(type, className),\n            type => this.namedTypeToNameForTopLevel(type) === undefined\n        );\n\n        /* Create enum functions */\n        this.forEachEnum(\"leading-and-interposing\", (enumType: EnumType, _enumName: Name) =>\n            this.emitEnumFunctions(enumType)\n        );\n\n        /* Create union functions */\n        this.forEachUnion(\"leading-and-interposing\", (unionType: UnionType) => this.emitUnionFunctions(unionType));\n\n        /* Create class functions */\n        this.forEachObject(\"leading-and-interposing\", (classType: ClassType, _className: Name) =>\n            this.emitClassFunctions(classType)\n        );\n\n        /* Create top level functions */\n        this.forEachTopLevel(\n            \"leading\",\n            (type: Type, className: Name) => this.emitTopLevelFunctions(type, className),\n            type => this.namedTypeToNameForTopLevel(type) === undefined\n        );\n\n        /* Close file */\n        this.finishFile();\n    }\n\n    /**\n     * Function called to create a multiple header files with types and generators\n     */\n    protected emitMultiSourceStructure(): void {\n        /* Array of includes */\n        let includes: string[];\n\n        /* Create each file */\n        this.forEachNamedType(\n            \"leading-and-interposing\",\n            (classType: ClassType, _name: Name) => {\n                this.emitClass(classType, includes);\n            },\n            (enumType, _name) => {\n                this.emitEnum(enumType, includes);\n            },\n            (unionType, _name) => {\n                this.emitUnion(unionType, includes);\n            }\n        );\n\n        /* Create top level file */\n        this.forEachTopLevel(\n            \"leading\",\n            (type: Type, className: Name) => this.emitTopLevel(type, className, includes),\n            type => this.namedTypeToNameForTopLevel(type) === undefined\n        );\n    }\n\n    /**\n     * Function called to create an enum header files with types and generators\n     * @param enumType: enum type\n     * @param includes: Array of includes\n     */\n    protected emitEnum(enumType: EnumType, includes: string[]): void {\n        /* Create file */\n        const enumName = this.nameForNamedType(enumType);\n        const filename = this.sourcelikeToString(enumName).concat(\".h\");\n        includes.push(filename);\n        this.startFile(filename);\n\n        /* Create includes */\n        this.emitIncludes(enumType, this.sourcelikeToString(filename));\n\n        /* Create types */\n        this.emitEnumTypedef(enumType);\n\n        /* Create prototypes */\n        this.emitEnumPrototypes(enumType);\n\n        /* Create functions */\n        this.emitEnumFunctions(enumType);\n\n        /* Close file */\n        this.finishFile();\n    }\n\n    /**\n     * Function called to create enum typedef\n     * @param enumType: enum type\n     */\n    protected emitEnumTypedef(enumType: EnumType): void {\n        /* FIXME: Now there is a language with need of global enum name, see FIXME in makeNameForEnumCase of ConvenienceRenderer.ts, should simplify here when fixed */\n\n        const enumName = this.nameForNamedType(enumType);\n        const enumValues = enumCaseValues(enumType, this.targetLanguage.name);\n\n        this.emitDescription(this.descriptionForType(enumType));\n        this.emitBlock(\n            [\"enum \", enumName],\n            () => {\n                const combinedName = allUpperWordStyle(this.sourcelikeToString(enumName));\n                this.forEachEnumCase(enumType, \"none\", (name, jsonName) => {\n                    if (enumValues !== undefined) {\n                        const [enumValue] = getAccessorName(enumValues, jsonName);\n                        if (enumValue !== undefined) {\n                            this.emitLine(combinedName, \"_\", name, \" = \", enumValue.toString(), \",\");\n                        } else {\n                            this.emitLine(combinedName, \"_\", name, \",\");\n                        }\n                    } else {\n                        this.emitLine(combinedName, \"_\", name, \",\");\n                    }\n                });\n            },\n            \"\",\n            true\n        );\n        this.ensureBlankLine();\n        this.emitTypedefAlias(enumType, enumName);\n    }\n\n    /**\n     * Function called to create enum prototypes\n     * @param enumType: enum type\n     */\n    protected emitEnumPrototypes(enumType: EnumType): void {\n        const enumName = this.nameForNamedType(enumType);\n\n        this.emitLine(\"enum \", enumName, \" cJSON_Get\", enumName, \"Value(\", this.withConst(\"cJSON\"), \" * j);\");\n        this.emitLine(\"cJSON * cJSON_Create\", enumName, \"(\", this.withConst([\"enum \", enumName]), \" x);\");\n        this.ensureBlankLine();\n    }\n\n    /**\n     * Function called to create enum functions\n     * @param enumType: enum type\n     */\n    protected emitEnumFunctions(enumType: EnumType): void {\n        const enumName = this.nameForNamedType(enumType);\n\n        /* Create cJSON to enumName generator function */\n        this.emitBlock([\"enum \", enumName, \" cJSON_Get\", enumName, \"Value(\", this.withConst(\"cJSON\"), \" * j)\"], () => {\n            this.emitLine(\"enum \", enumName, \" x = 0;\");\n            this.emitBlock([\"if (NULL != j)\"], () => {\n                let onFirst = true;\n                const combinedName = allUpperWordStyle(this.sourcelikeToString(enumName));\n                this.forEachEnumCase(enumType, \"none\", (name, jsonName) => {\n                    this.emitLine(\n                        onFirst ? \"\" : \"else \",\n                        'if (!strcmp(cJSON_GetStringValue(j), \"',\n                        jsonName,\n                        '\")) x = ',\n                        combinedName,\n                        \"_\",\n                        name,\n                        \";\"\n                    );\n                    onFirst = false;\n                });\n            });\n            this.emitLine(\"return x;\");\n        });\n        this.ensureBlankLine();\n\n        /* Create enumName to cJSON generator function */\n        this.emitBlock([\"cJSON * cJSON_Create\", enumName, \"(\", this.withConst([\"enum \", enumName]), \" x)\"], () => {\n            this.emitLine(\"cJSON * j = NULL;\");\n            this.emitBlock([\"switch (x)\"], () => {\n                const combinedName = allUpperWordStyle(this.sourcelikeToString(enumName));\n                this.forEachEnumCase(enumType, \"none\", (name, jsonName) => {\n                    this.emitLine(\n                        \"case \",\n                        combinedName,\n                        \"_\",\n                        name,\n                        ': j = cJSON_CreateString(\"',\n                        jsonName,\n                        '\"); break;'\n                    );\n                });\n            });\n            this.emitLine(\"return j;\");\n        });\n        this.ensureBlankLine();\n    }\n\n    /**\n     * Function called to create a union header files with types and generators\n     * @param unionType: union type\n     * @param includes: Array of includes\n     */\n    protected emitUnion(unionType: UnionType, includes: string[]): void {\n        /* Create file */\n        const unionName = this.nameForNamedType(unionType);\n        const filename = this.sourcelikeToString(unionName).concat(\".h\");\n        includes.push(filename);\n        this.startFile(filename);\n\n        /* Create includes */\n        this.emitIncludes(unionType, this.sourcelikeToString(filename));\n\n        /* Create types */\n        this.emitUnionTypedef(unionType);\n\n        /* Create prototypes */\n        this.emitUnionPrototypes(unionType);\n\n        /* Create functions */\n        this.emitUnionFunctions(unionType);\n\n        /* Close file */\n        this.finishFile();\n    }\n\n    /**\n     * Function called to create union typedef\n     * @param unionType: union type\n     */\n    protected emitUnionTypedef(unionType: UnionType): void {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const [_hasNull, nonNulls] = removeNullFromUnion(unionType);\n        const unionName = this.nameForNamedType(unionType);\n\n        this.emitDescription(this.descriptionForType(unionType));\n        this.emitBlock(\n            [\"struct \", unionName],\n            () => {\n                this.emitLine(\"int type;\");\n                this.emitBlock(\n                    [\"union\"],\n                    () => {\n                        for (const type of nonNulls) {\n                            const cJSON = this.quicktypeTypeToCJSON(type, false);\n                            this.emitLine(\n                                cJSON.cType,\n                                cJSON.optionalQualifier !== \"\" ? \" \" : \"\",\n                                cJSON.optionalQualifier,\n                                \" \",\n                                this.nameForUnionMember(unionType, type),\n                                \";\"\n                            );\n                        }\n                    },\n                    \"value\",\n                    true\n                );\n            },\n            \"\",\n            true\n        );\n        this.ensureBlankLine();\n        this.emitTypedefAlias(unionType, unionName);\n    }\n\n    /**\n     * Function called to create union prototypes\n     * @param unionType: union type\n     */\n    protected emitUnionPrototypes(unionType: UnionType): void {\n        const unionName = this.nameForNamedType(unionType);\n\n        this.emitLine(\"struct \", unionName, \" * cJSON_Get\", unionName, \"Value(const cJSON * j);\");\n        this.emitLine(\"cJSON * cJSON_Create\", unionName, \"(\", this.withConst([\"struct \", unionName]), \" * x);\");\n        this.emitLine(\"void cJSON_Delete\", unionName, \"(struct \", unionName, \" * x);\");\n        this.ensureBlankLine();\n    }\n\n    /**\n     * Function called to create union functions\n     * @param unionType: union type\n     */\n    protected emitUnionFunctions(unionType: UnionType): void {\n        const [hasNull, nonNulls] = removeNullFromUnion(unionType);\n        const unionName = this.nameForNamedType(unionType);\n\n        /* Create cJSON to unionType generator function */\n        this.emitBlock([\"struct \", unionName, \" * cJSON_Get\", unionName, \"Value(const cJSON * j)\"], () => {\n            let onFirst = true;\n            this.emitLine(\"struct \", unionName, \" * x = cJSON_malloc(sizeof(struct \", unionName, \"));\");\n            this.emitBlock([\"if (NULL != x)\"], () => {\n                this.emitLine(\"memset(x, 0, sizeof(struct \", unionName, \"));\");\n                if (hasNull !== null) {\n                    this.emitBlock([\"if (cJSON_IsNull(j))\"], () => {\n                        this.emitLine(\"x->type = cJSON_NULL;\");\n                    });\n                    onFirst = false;\n                }\n\n                for (const type of nonNulls) {\n                    const cJSON = this.quicktypeTypeToCJSON(type, false);\n                    this.emitBlock([onFirst === true ? \"if (\" : \"else if (\", cJSON.isType, \"(j))\"], () => {\n                        this.emitLine(\"x->type = \", cJSON.cjsonType, \";\");\n                        if (cJSON.cjsonType === \"cJSON_Array\" && cJSON.items !== undefined) {\n                            const level = 0;\n                            const child_level = 1;\n                            this.emitLine(cJSON.cType, \" * x\", child_level.toString(), \" = list_create(false, NULL);\");\n                            this.emitBlock([\"if (NULL != x\", child_level.toString(), \")\"], () => {\n                                this.emitLine(\"cJSON * e\", child_level.toString(), \" = NULL;\");\n                                this.emitBlock(\n                                    [\n                                        \"cJSON_ArrayForEach(e\",\n                                        child_level.toString(),\n                                        \", j\",\n                                        level > 0 ? level.toString() : \"\",\n                                        \")\"\n                                    ],\n                                    () => {\n                                        const add = (cJSON: TypeCJSON, level: number, child_level: number) => {\n                                            if (cJSON.items?.cjsonType === \"cJSON_Array\") {\n                                                /* Not supported */\n                                            } else if (cJSON.items?.cjsonType === \"cJSON_Map\") {\n                                                /* Not supported */\n                                            } else if (\n                                                cJSON.items?.cjsonType === \"cJSON_Invalid\" ||\n                                                cJSON.items?.cjsonType === \"cJSON_NULL\"\n                                            ) {\n                                                this.emitLine(\n                                                    \"list_add_tail(x\",\n                                                    child_level.toString(),\n                                                    \", (\",\n                                                    cJSON.items?.cType,\n                                                    \" *)0xDEADBEEF, sizeof(\",\n                                                    cJSON.items?.cType,\n                                                    \" *));\"\n                                                );\n                                            } else if (cJSON.items?.cjsonType === \"cJSON_String\") {\n                                                this.emitLine(\n                                                    \"list_add_tail(x\",\n                                                    child_level.toString(),\n                                                    \", strdup(\",\n                                                    cJSON.items?.getValue,\n                                                    \"(e\",\n                                                    child_level.toString(),\n                                                    \")), sizeof(\",\n                                                    cJSON.items?.cType,\n                                                    \" *));\"\n                                                );\n                                            } else if (\n                                                cJSON.items?.cjsonType === \"cJSON_Object\" ||\n                                                cJSON.items?.cjsonType === \"cJSON_Union\"\n                                            ) {\n                                                this.emitLine(\n                                                    \"list_add_tail(x\",\n                                                    child_level.toString(),\n                                                    \", \",\n                                                    cJSON.items?.getValue,\n                                                    \"(e\",\n                                                    child_level.toString(),\n                                                    \"), sizeof(\",\n                                                    cJSON.items?.cType,\n                                                    \" *));\"\n                                                );\n                                            } else {\n                                                this.emitLine(\n                                                    // @ts-expect-error awaiting refactor\n                                                    cJSON.items?.cType,\n                                                    \" * tmp\",\n                                                    level > 0 ? level.toString() : \"\",\n                                                    \" = cJSON_malloc(sizeof(\",\n                                                    cJSON.items?.cType,\n                                                    \"));\"\n                                                );\n                                                this.emitBlock(\n                                                    [\"if (NULL != tmp\", level > 0 ? level.toString() : \"\", \")\"],\n                                                    () => {\n                                                        this.emitLine(\n                                                            \"* tmp\",\n                                                            level > 0 ? level.toString() : \"\",\n                                                            \" = \",\n                                                            // @ts-expect-error awaiting refactor\n                                                            cJSON.items?.getValue,\n                                                            \"(e\",\n                                                            child_level.toString(),\n                                                            \");\"\n                                                        );\n                                                        this.emitLine(\n                                                            \"list_add_tail(x\",\n                                                            child_level.toString(),\n                                                            \", tmp\",\n                                                            level > 0 ? level.toString() : \"\",\n                                                            \", sizeof(\",\n                                                            // @ts-expect-error awaiting refactor\n                                                            cJSON.items?.cType,\n                                                            \" *));\"\n                                                        );\n                                                    }\n                                                );\n                                            }\n                                        };\n\n                                        if (cJSON.items?.isNullable) {\n                                            this.emitBlock(\n                                                [\"if (!cJSON_IsNull(e\", child_level.toString(), \"))\"],\n                                                () => {\n                                                    add(cJSON, level, child_level);\n                                                }\n                                            );\n                                            this.emitBlock([\"else\"], () => {\n                                                this.emitLine(\n                                                    \"list_add_tail(x\",\n                                                    child_level.toString(),\n                                                    \", (void *)0xDEADBEEF, sizeof(void *));\"\n                                                );\n                                            });\n                                        } else {\n                                            add(cJSON, level, child_level);\n                                        }\n                                    }\n                                );\n                                this.emitLine(\n                                    \"x->value.\",\n                                    this.nameForUnionMember(unionType, type),\n                                    \" = x\",\n                                    child_level.toString(),\n                                    \";\"\n                                );\n                            });\n                        } else if (cJSON.cjsonType === \"cJSON_Map\" && cJSON.items !== undefined) {\n                            const level = 0;\n                            const child_level = 1;\n                            this.emitLine(\n                                cJSON.cType,\n                                \" * x\",\n                                child_level.toString(),\n                                \" = hashtable_create(\",\n                                this.hashtableSize,\n                                \", false);\"\n                            );\n                            this.emitBlock([\"if (NULL != x\", child_level.toString(), \")\"], () => {\n                                this.emitLine(\"cJSON * e\", child_level.toString(), \" = NULL;\");\n                                this.emitBlock(\n                                    [\n                                        \"cJSON_ArrayForEach(e\",\n                                        child_level.toString(),\n                                        \", j\",\n                                        level > 0 ? level.toString() : \"\",\n                                        \")\"\n                                    ],\n                                    () => {\n                                        const add = (cJSON: TypeCJSON, level: number, child_level: number) => {\n                                            if (cJSON.items?.cjsonType === \"cJSON_Array\") {\n                                                /* Not supported */\n                                            } else if (cJSON.items?.cjsonType === \"cJSON_Map\") {\n                                                /* Not supported */\n                                            } else if (\n                                                cJSON.items?.cjsonType === \"cJSON_Invalid\" ||\n                                                cJSON.items?.cjsonType === \"cJSON_NULL\"\n                                            ) {\n                                                this.emitLine(\n                                                    \"hashtable_add(x\",\n                                                    child_level.toString(),\n                                                    \", e\",\n                                                    child_level.toString(),\n                                                    \"->string, (\",\n                                                    cJSON.items?.cType,\n                                                    \" *)0xDEADBEEF, sizeof(\",\n                                                    cJSON.items?.cType,\n                                                    \" *));\"\n                                                );\n                                            } else if (cJSON.items?.cjsonType === \"cJSON_String\") {\n                                                this.emitLine(\n                                                    \"hashtable_add(x\",\n                                                    child_level.toString(),\n                                                    \", e\",\n                                                    child_level.toString(),\n                                                    \"->string, strdup(\",\n                                                    cJSON.items?.getValue,\n                                                    \"(e\",\n                                                    child_level.toString(),\n                                                    \")), sizeof(\",\n                                                    cJSON.items?.cType,\n                                                    \" *));\"\n                                                );\n                                            } else if (\n                                                cJSON.items?.cjsonType === \"cJSON_Object\" ||\n                                                cJSON.items?.cjsonType === \"cJSON_Union\"\n                                            ) {\n                                                this.emitLine(\n                                                    \"hashtable_add(x\",\n                                                    child_level.toString(),\n                                                    \", e\",\n                                                    child_level.toString(),\n                                                    \"->string, \",\n                                                    cJSON.items?.getValue,\n                                                    \"(e\",\n                                                    child_level.toString(),\n                                                    \"), sizeof(\",\n                                                    cJSON.items?.cType,\n                                                    \" *));\"\n                                                );\n                                            } else {\n                                                this.emitLine(\n                                                    // @ts-expect-error awaiting refactor\n                                                    cJSON.items?.cType,\n                                                    \" * tmp\",\n                                                    level > 0 ? level.toString() : \"\",\n                                                    \" = cJSON_malloc(sizeof(\",\n                                                    cJSON.items?.cType,\n                                                    \"));\"\n                                                );\n                                                this.emitBlock(\n                                                    [\"if (NULL != tmp\", level > 0 ? level.toString() : \"\", \")\"],\n                                                    () => {\n                                                        this.emitLine(\n                                                            \"* tmp\",\n                                                            level > 0 ? level.toString() : \"\",\n                                                            \" = \",\n                                                            // @ts-expect-error awaiting refactor\n                                                            cJSON.items?.getValue,\n                                                            \"(e\",\n                                                            child_level.toString(),\n                                                            \");\"\n                                                        );\n                                                        this.emitLine(\n                                                            \"hashtable_add(x\",\n                                                            child_level.toString(),\n                                                            \", e\",\n                                                            child_level.toString(),\n                                                            \"->string, tmp\",\n                                                            level > 0 ? level.toString() : \"\",\n                                                            \", sizeof(\",\n                                                            // @ts-expect-error awaiting refactor\n                                                            cJSON.items?.cType,\n                                                            \" *));\"\n                                                        );\n                                                    }\n                                                );\n                                            }\n                                        };\n\n                                        if (cJSON.items?.isNullable) {\n                                            this.emitBlock(\n                                                [\"if (!cJSON_IsNull(e\", child_level.toString(), \"))\"],\n                                                () => {\n                                                    add(cJSON, level, child_level);\n                                                }\n                                            );\n                                            this.emitBlock([\"else\"], () => {\n                                                this.emitLine(\n                                                    \"hashtable_add(x\",\n                                                    child_level.toString(),\n                                                    \", e\",\n                                                    child_level.toString(),\n                                                    \"->string, (void *)0xDEADBEEF, sizeof(void *));\"\n                                                );\n                                            });\n                                        } else {\n                                            add(cJSON, level, child_level);\n                                        }\n                                    }\n                                );\n                                this.emitLine(\n                                    \"x->value.\",\n                                    this.nameForUnionMember(unionType, type),\n                                    \" = x\",\n                                    child_level.toString(),\n                                    \";\"\n                                );\n                            });\n                        } else if (cJSON.cjsonType === \"cJSON_Invalid\" || cJSON.cjsonType === \"cJSON_NULL\") {\n                            this.emitLine(\n                                \"x->value.\",\n                                this.nameForUnionMember(unionType, type),\n                                \" = (\",\n                                cJSON.cType,\n                                \" *)0xDEADBEEF;\"\n                            );\n                        } else if (cJSON.cjsonType === \"cJSON_String\") {\n                            this.emitLine(\n                                \"x->value.\",\n                                this.nameForUnionMember(unionType, type),\n                                \" = strdup(\",\n                                cJSON.getValue,\n                                \"(j));\"\n                            );\n                        } else {\n                            this.emitLine(\n                                \"x->value.\",\n                                this.nameForUnionMember(unionType, type),\n                                \" = \",\n                                cJSON.getValue,\n                                \"(j);\"\n                            );\n                        }\n                    });\n                    onFirst = false;\n                }\n            });\n            this.emitLine(\"return x;\");\n        });\n        this.ensureBlankLine();\n\n        /* Create unionName to cJSON generator function */\n        this.emitBlock(\n            [\"cJSON * cJSON_Create\", unionName, \"(\", this.withConst([\"struct \", unionName]), \" * x)\"],\n            () => {\n                this.emitLine(\"cJSON * j = NULL;\");\n                this.emitBlock([\"if (NULL != x)\"], () => {\n                    let onFirst = true;\n                    if (hasNull !== null) {\n                        this.emitBlock([\"if (cJSON_NULL == x->type)\"], () => {\n                            this.emitLine(\"j = cJSON_CreateNull();\");\n                        });\n                        onFirst = false;\n                    }\n\n                    for (const type of nonNulls) {\n                        const cJSON = this.quicktypeTypeToCJSON(type, false);\n                        this.emitBlock(\n                            [onFirst === true ? \"if (\" : \"else if (\", cJSON.cjsonType, \" == x->type)\"],\n                            () => {\n                                if (cJSON.cjsonType === \"cJSON_Array\" && cJSON.items !== undefined) {\n                                    const level = 0;\n                                    const child_level = 1;\n                                    this.emitLine(\n                                        \"cJSON * j\",\n                                        child_level.toString(),\n                                        \" = \",\n                                        cJSON.createObject,\n                                        \"();\"\n                                    );\n                                    this.emitBlock([\"if (NULL != j\", child_level.toString(), \")\"], () => {\n                                        this.emitLine(\n                                            // @ts-expect-error awaiting refactor\n                                            cJSON.items?.cType,\n                                            \" * x\",\n                                            child_level.toString(),\n                                            \" = list_get_head(x\",\n                                            level > 0 ? level.toString() : \"\",\n                                            \"->value.\",\n                                            this.nameForUnionMember(unionType, type),\n                                            \");\"\n                                        );\n                                        this.emitBlock([\"while (NULL != x\", child_level.toString(), \")\"], () => {\n                                            const add = (cJSON: TypeCJSON, child_level: number) => {\n                                                if (cJSON.items?.cjsonType === \"cJSON_Array\") {\n                                                    /* Not supported */\n                                                } else if (cJSON.items?.cjsonType === \"cJSON_Map\") {\n                                                    /* Not supported */\n                                                } else if (cJSON.items?.cjsonType === \"cJSON_Invalid\") {\n                                                    /* Nothing to do */\n                                                } else if (cJSON.items?.cjsonType === \"cJSON_NULL\") {\n                                                    this.emitLine(\n                                                        \"cJSON_AddItemToArray(j\",\n                                                        child_level.toString(),\n                                                        \", \",\n                                                        cJSON.items?.createObject,\n                                                        \"());\"\n                                                    );\n                                                } else if (\n                                                    cJSON.items?.cjsonType === \"cJSON_String\" ||\n                                                    cJSON.items?.cjsonType === \"cJSON_Object\" ||\n                                                    cJSON.items?.cjsonType === \"cJSON_Union\"\n                                                ) {\n                                                    this.emitLine(\n                                                        \"cJSON_AddItemToArray(j\",\n                                                        child_level.toString(),\n                                                        \", \",\n                                                        cJSON.items?.createObject,\n                                                        \"(x\",\n                                                        child_level.toString(),\n                                                        \"));\"\n                                                    );\n                                                } else {\n                                                    this.emitLine(\n                                                        \"cJSON_AddItemToArray(j\",\n                                                        child_level.toString(),\n                                                        \", \",\n                                                        // @ts-expect-error awaiting refactor\n                                                        cJSON.items?.createObject,\n                                                        \"(*x\",\n                                                        child_level.toString(),\n                                                        \"));\"\n                                                    );\n                                                }\n                                            };\n\n                                            if (cJSON.items?.isNullable) {\n                                                this.emitBlock(\n                                                    [\"if ((void *)0xDEADBEEF != x\", child_level.toString(), \")\"],\n                                                    () => {\n                                                        add(cJSON, child_level);\n                                                    }\n                                                );\n                                                this.emitBlock([\"else\"], () => {\n                                                    this.emitLine(\n                                                        \"cJSON_AddItemToArray(j\",\n                                                        child_level.toString(),\n                                                        \", cJSON_CreateNull());\"\n                                                    );\n                                                });\n                                            } else {\n                                                add(cJSON, child_level);\n                                            }\n\n                                            this.emitLine(\n                                                \"x\",\n                                                child_level.toString(),\n                                                \" = list_get_next(x\",\n                                                level > 0 ? level.toString() : \"\",\n                                                \"->value.\",\n                                                this.nameForUnionMember(unionType, type),\n                                                \");\"\n                                            );\n                                        });\n                                        this.emitLine(\"j = j\", child_level.toString(), \";\");\n                                    });\n                                } else if (cJSON.cjsonType === \"cJSON_Map\" && cJSON.items !== undefined) {\n                                    const level = 0;\n                                    const child_level = 1;\n                                    this.emitLine(\n                                        \"cJSON * j\",\n                                        child_level.toString(),\n                                        \" = \",\n                                        cJSON.createObject,\n                                        \"();\"\n                                    );\n                                    this.emitBlock([\"if (NULL != j\", child_level.toString(), \")\"], () => {\n                                        this.emitLine(\"char **keys\", child_level.toString(), \" = NULL;\");\n                                        this.emitLine(\n                                            \"size_t count\",\n                                            child_level.toString(),\n                                            \" = hashtable_get_keys(x\",\n                                            level > 0 ? level.toString() : \"\",\n                                            \"->value.\",\n                                            this.nameForUnionMember(unionType, type),\n                                            \", &keys\",\n                                            child_level.toString(),\n                                            \");\"\n                                        );\n                                        this.emitBlock([\"if (NULL != keys\", child_level.toString(), \")\"], () => {\n                                            this.emitBlock(\n                                                [\n                                                    \"for (size_t index\",\n                                                    child_level.toString(),\n                                                    \" = 0; index\",\n                                                    child_level.toString(),\n                                                    \" < count\",\n                                                    child_level.toString(),\n                                                    \"; index\",\n                                                    child_level.toString(),\n                                                    \"++)\"\n                                                ],\n                                                () => {\n                                                    this.emitLine(\n                                                        // @ts-expect-error awaiting refactor\n                                                        cJSON.items?.cType,\n                                                        \" *x\",\n                                                        child_level.toString(),\n                                                        \" = hashtable_lookup(x\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        \"->value.\",\n                                                        this.nameForUnionMember(unionType, type),\n                                                        \", keys\",\n                                                        child_level.toString(),\n                                                        \"[index\",\n                                                        child_level.toString(),\n                                                        \"]);\"\n                                                    );\n                                                    const add = (cJSON: TypeCJSON, child_level: number) => {\n                                                        if (cJSON.items?.cjsonType === \"cJSON_Array\") {\n                                                            /* Not supported */\n                                                        } else if (cJSON.items?.cjsonType === \"cJSON_Map\") {\n                                                            /* Not supported */\n                                                        } else if (cJSON.items?.cjsonType === \"cJSON_Invalid\") {\n                                                            /* Nothing to do */\n                                                        } else if (cJSON.items?.cjsonType === \"cJSON_NULL\") {\n                                                            this.emitLine(\n                                                                cJSON.addToObject,\n                                                                \"(j\",\n                                                                child_level.toString(),\n                                                                \", keys\",\n                                                                child_level.toString(),\n                                                                \"[index\",\n                                                                child_level.toString(),\n                                                                \"], \",\n                                                                cJSON.items?.createObject,\n                                                                \"());\"\n                                                            );\n                                                        } else if (\n                                                            cJSON.items?.cjsonType === \"cJSON_String\" ||\n                                                            cJSON.items?.cjsonType === \"cJSON_Object\" ||\n                                                            cJSON.items?.cjsonType === \"cJSON_Union\"\n                                                        ) {\n                                                            this.emitLine(\n                                                                cJSON.addToObject,\n                                                                \"(j\",\n                                                                child_level.toString(),\n                                                                \", keys\",\n                                                                child_level.toString(),\n                                                                \"[index\",\n                                                                child_level.toString(),\n                                                                \"], \",\n                                                                cJSON.items?.createObject,\n                                                                \"(x\",\n                                                                child_level.toString(),\n                                                                \"));\"\n                                                            );\n                                                        } else {\n                                                            this.emitLine(\n                                                                cJSON.addToObject,\n                                                                \"(j\",\n                                                                child_level.toString(),\n                                                                \", keys\",\n                                                                child_level.toString(),\n                                                                \"[index\",\n                                                                child_level.toString(),\n                                                                \"], \",\n                                                                // @ts-expect-error awaiting refactor\n                                                                cJSON.items?.createObject,\n                                                                \"(*x\",\n                                                                child_level.toString(),\n                                                                \"));\"\n                                                            );\n                                                        }\n                                                    };\n\n                                                    if (cJSON.items?.isNullable) {\n                                                        this.emitBlock(\n                                                            [\n                                                                \"if ((void *)0xDEADBEEF != x\",\n                                                                child_level.toString(),\n                                                                \")\"\n                                                            ],\n                                                            () => {\n                                                                add(cJSON, child_level);\n                                                            }\n                                                        );\n                                                        this.emitBlock([\"else\"], () => {\n                                                            this.emitLine(\n                                                                cJSON.addToObject,\n                                                                \"(j\",\n                                                                child_level.toString(),\n                                                                \", keys\",\n                                                                child_level.toString(),\n                                                                \"[index\",\n                                                                child_level.toString(),\n                                                                \"], cJSON_CreateNull());\"\n                                                            );\n                                                        });\n                                                    } else {\n                                                        add(cJSON, child_level);\n                                                    }\n                                                }\n                                            );\n                                            this.emitLine(\"cJSON_free(keys\", child_level.toString(), \");\");\n                                        });\n                                        this.emitLine(\"j = j\", child_level.toString(), \";\");\n                                    });\n                                } else if (cJSON.cjsonType === \"cJSON_Invalid\") {\n                                    /* Nothing to do */\n                                } else if (cJSON.cjsonType === \"cJSON_NULL\") {\n                                    this.emitLine(\"j = \", cJSON.createObject, \"();\");\n                                } else {\n                                    this.emitLine(\n                                        \"j = \",\n                                        cJSON.createObject,\n                                        \"(x->value.\",\n                                        this.nameForUnionMember(unionType, type),\n                                        \");\"\n                                    );\n                                }\n                            }\n                        );\n                        onFirst = false;\n                    }\n                });\n                this.emitLine(\"return j;\");\n            }\n        );\n        this.ensureBlankLine();\n\n        /* Create unionName delete function */\n        this.emitBlock([\"void cJSON_Delete\", unionName, \"(struct \", unionName, \" * x)\"], () => {\n            this.emitBlock([\"if (NULL != x)\"], () => {\n                let onFirst = true;\n                for (const type of nonNulls) {\n                    const cJSON = this.quicktypeTypeToCJSON(type, false);\n                    this.emitBlock([onFirst === true ? \"if (\" : \"else if (\", cJSON.cjsonType, \" == x->type)\"], () => {\n                        if (cJSON.cjsonType === \"cJSON_Array\" && cJSON.items !== undefined) {\n                            const level = 0;\n                            const child_level = 1;\n                            this.emitBlock(\n                                [\n                                    \"if (NULL != x\",\n                                    level > 0 ? level.toString() : \"\",\n                                    \"->value.\",\n                                    this.nameForUnionMember(unionType, type),\n                                    \")\"\n                                ],\n                                () => {\n                                    this.emitLine(\n                                        // @ts-expect-error awaiting refactor\n                                        cJSON.items?.cType,\n                                        \" * x\",\n                                        child_level.toString(),\n                                        \" = list_get_head(x\",\n                                        level > 0 ? level.toString() : \"\",\n                                        \"->value.\",\n                                        this.nameForUnionMember(unionType, type),\n                                        \");\"\n                                    );\n                                    this.emitBlock([\"while (NULL != x\", child_level.toString(), \")\"], () => {\n                                        if (cJSON.items?.cjsonType === \"cJSON_Array\") {\n                                            /* Not supported */\n                                        } else if (cJSON.items?.cjsonType === \"cJSON_Map\") {\n                                            /* Not supported */\n                                        } else if (\n                                            cJSON.items?.cjsonType === \"cJSON_Invalid\" ||\n                                            cJSON.items?.cjsonType === \"cJSON_NULL\"\n                                        ) {\n                                            /* Nothing to do */\n                                        } else {\n                                            if (cJSON.items?.isNullable) {\n                                                this.emitBlock(\n                                                    [\"if ((void *)0xDEADBEEF != x\", child_level.toString(), \")\"],\n                                                    () => {\n                                                        this.emitLine(\n                                                            // @ts-expect-error awaiting refactor\n                                                            cJSON.items?.deleteType,\n                                                            \"(x\",\n                                                            child_level.toString(),\n                                                            \");\"\n                                                        );\n                                                    }\n                                                );\n                                            } else {\n                                                this.emitLine(\n                                                    // @ts-expect-error awaiting refactor\n                                                    cJSON.items?.deleteType,\n                                                    \"(x\",\n                                                    child_level.toString(),\n                                                    \");\"\n                                                );\n                                            }\n                                        }\n\n                                        this.emitLine(\n                                            \"x\",\n                                            child_level.toString(),\n                                            \" = list_get_next(x\",\n                                            level > 0 ? level.toString() : \"\",\n                                            \"->value.\",\n                                            this.nameForUnionMember(unionType, type),\n                                            \");\"\n                                        );\n                                    });\n                                    this.emitLine(\n                                        cJSON.deleteType,\n                                        \"(x\",\n                                        level > 0 ? level.toString() : \"\",\n                                        \"->value.\",\n                                        this.nameForUnionMember(unionType, type),\n                                        \");\"\n                                    );\n                                }\n                            );\n                        } else if (cJSON.cjsonType === \"cJSON_Map\" && cJSON.items !== undefined) {\n                            const level = 0;\n                            const child_level = 1;\n                            this.emitBlock(\n                                [\n                                    \"if (NULL != x\",\n                                    level > 0 ? level.toString() : \"\",\n                                    \"->value.\",\n                                    this.nameForUnionMember(unionType, type),\n                                    \")\"\n                                ],\n                                () => {\n                                    this.emitLine(\"char **keys\", child_level.toString(), \" = NULL;\");\n                                    this.emitLine(\n                                        \"size_t count\",\n                                        child_level.toString(),\n                                        \" = hashtable_get_keys(x\",\n                                        level > 0 ? level.toString() : \"\",\n                                        \"->value.\",\n                                        this.nameForUnionMember(unionType, type),\n                                        \", &keys\",\n                                        child_level.toString(),\n                                        \");\"\n                                    );\n                                    this.emitBlock([\"if (NULL != keys\", child_level.toString(), \")\"], () => {\n                                        this.emitBlock(\n                                            [\n                                                \"for (size_t index\",\n                                                child_level.toString(),\n                                                \" = 0; index\",\n                                                child_level.toString(),\n                                                \" < count\",\n                                                child_level.toString(),\n                                                \"; index\",\n                                                child_level.toString(),\n                                                \"++)\"\n                                            ],\n                                            () => {\n                                                this.emitLine(\n                                                    // @ts-expect-error awaiting refactor\n                                                    cJSON.items?.cType,\n                                                    \" *x\",\n                                                    child_level.toString(),\n                                                    \" = hashtable_lookup(x\",\n                                                    level > 0 ? level.toString() : \"\",\n                                                    \"->value.\",\n                                                    this.nameForUnionMember(unionType, type),\n                                                    \", keys\",\n                                                    child_level.toString(),\n                                                    \"[index\",\n                                                    child_level.toString(),\n                                                    \"]);\"\n                                                );\n                                                this.emitBlock([\"if (NULL != x\", child_level.toString(), \")\"], () => {\n                                                    if (cJSON.items?.cjsonType === \"cJSON_Array\") {\n                                                        /* Not supported */\n                                                    } else if (cJSON.items?.cjsonType === \"cJSON_Map\") {\n                                                        /* Not supported */\n                                                    } else if (\n                                                        cJSON.items?.cjsonType === \"cJSON_Invalid\" ||\n                                                        cJSON.items?.cjsonType === \"cJSON_NULL\"\n                                                    ) {\n                                                        /* Nothing to do */\n                                                    } else {\n                                                        if (cJSON.items?.isNullable) {\n                                                            this.emitBlock(\n                                                                [\n                                                                    \"if ((void *)0xDEADBEEF != x\",\n                                                                    child_level.toString(),\n                                                                    \")\"\n                                                                ],\n                                                                () => {\n                                                                    this.emitLine(\n                                                                        // @ts-expect-error awaiting refactor\n                                                                        cJSON.items?.deleteType,\n                                                                        \"(x\",\n                                                                        child_level.toString(),\n                                                                        \");\"\n                                                                    );\n                                                                }\n                                                            );\n                                                        } else {\n                                                            this.emitLine(\n                                                                // @ts-expect-error awaiting refactor\n                                                                cJSON.items?.deleteType,\n                                                                \"(x\",\n                                                                child_level.toString(),\n                                                                \");\"\n                                                            );\n                                                        }\n                                                    }\n                                                });\n                                            }\n                                        );\n                                        this.emitLine(\"cJSON_free(keys\", child_level.toString(), \");\");\n                                    });\n                                    this.emitLine(\n                                        cJSON.deleteType,\n                                        \"(x\",\n                                        level > 0 ? level.toString() : \"\",\n                                        \"->value.\",\n                                        this.nameForUnionMember(unionType, type),\n                                        \");\"\n                                    );\n                                }\n                            );\n                        } else if (cJSON.cjsonType === \"cJSON_Invalid\" || cJSON.cjsonType === \"cJSON_NULL\") {\n                            /* Nothing to do */\n                        } else if (\n                            cJSON.cjsonType === \"cJSON_String\" ||\n                            cJSON.cjsonType === \"cJSON_Object\" ||\n                            cJSON.cjsonType === \"cJSON_Union\"\n                        ) {\n                            this.emitLine(\n                                cJSON.deleteType,\n                                \"(x->value.\",\n                                this.nameForUnionMember(unionType, type),\n                                \");\"\n                            );\n                        } else {\n                            /* Nothing to do */\n                        }\n                    });\n                    onFirst = false;\n                }\n\n                this.emitLine(\"cJSON_free(x);\");\n            });\n        });\n        this.ensureBlankLine();\n    }\n\n    /**\n     * Function called to create a class header files with types and generators\n     * @param classType: class type\n     * @param includes: Array of includes\n     */\n    protected emitClass(classType: ClassType, includes: string[]): void {\n        /* Create file */\n        const className = this.nameForNamedType(classType);\n        const filename = this.sourcelikeToString(className).concat(\".h\");\n        includes.push(filename);\n        this.startFile(filename);\n\n        /* Create includes */\n        this.emitIncludes(classType, this.sourcelikeToString(filename));\n\n        /* Create types */\n        this.emitClassTypedef(classType);\n\n        /* Create prototypes */\n        this.emitClassPrototypes(classType);\n\n        /* Create functions */\n        this.emitClassFunctions(classType);\n\n        /* Close file */\n        this.finishFile();\n    }\n\n    /**\n     * Function called to create class typedef\n     * @param classType: class type\n     */\n    protected emitClassTypedef(classType: ClassType): void {\n        const className = this.nameForNamedType(classType);\n\n        this.emitDescription(this.descriptionForType(classType));\n        this.emitBlock(\n            [\"struct \", className],\n            () => {\n                this.forEachClassProperty(classType, \"none\", (name, jsonName, property) => {\n                    this.emitDescription(this.descriptionForClassProperty(classType, jsonName));\n                    const cJSON = this.quicktypeTypeToCJSON(property.type, property.isOptional);\n                    this.emitLine(\n                        cJSON.cType,\n                        cJSON.optionalQualifier !== \"\" ? \" \" : \"\",\n                        cJSON.optionalQualifier,\n                        \" \",\n                        name,\n                        \";\"\n                    );\n                });\n            },\n            \"\",\n            true\n        );\n        this.ensureBlankLine();\n        this.emitTypedefAlias(classType, className);\n    }\n\n    /**\n     * Function called to create class prototypes\n     * @param classType: class type\n     */\n    protected emitClassPrototypes(classType: ClassType): void {\n        const className = this.nameForNamedType(classType);\n\n        this.emitLine(\"struct \", className, \" * cJSON_Parse\", className, \"(\", this.withConst(\"char\"), \" * s);\");\n        this.emitLine(\"struct \", className, \" * cJSON_Get\", className, \"Value(\", this.withConst(\"cJSON\"), \" * j);\");\n        this.emitLine(\"cJSON * cJSON_Create\", className, \"(\", this.withConst([\"struct \", className]), \" * x);\");\n        this.emitLine(\"char * cJSON_Print\", className, \"(\", this.withConst([\"struct \", className]), \" * x);\");\n        this.emitLine(\"void cJSON_Delete\", className, \"(struct \", className, \" * x);\");\n        this.ensureBlankLine();\n    }\n\n    /**\n     * Function called to create class functions\n     * @param classType: class type\n     */\n    protected emitClassFunctions(classType: ClassType): void {\n        const className = this.nameForNamedType(classType);\n\n        /* Create string to className generator function */\n        this.emitBlock(\n            [\"struct \", className, \" * cJSON_Parse\", className, \"(\", this.withConst(\"char\"), \" * s)\"],\n            () => {\n                this.emitLine(\"struct \", className, \" * x = NULL;\");\n                this.emitBlock([\"if (NULL != s)\"], () => {\n                    this.emitLine(\"cJSON * j = cJSON_Parse(s);\");\n                    this.emitBlock([\"if (NULL != j)\"], () => {\n                        this.emitLine(\"x = cJSON_Get\", className, \"Value(j);\");\n                        this.emitLine(\"cJSON_Delete(j);\");\n                    });\n                });\n                this.emitLine(\"return x;\");\n            }\n        );\n        this.ensureBlankLine();\n\n        /* Create cJSON to className generator function */\n        this.emitBlock(\n            [\"struct \", className, \" * cJSON_Get\", className, \"Value(\", this.withConst(\"cJSON\"), \" * j)\"],\n            () => {\n                this.emitLine(\"struct \", className, \" * x = NULL;\");\n                this.emitBlock([\"if (NULL != j)\"], () => {\n                    this.emitBlock([\"if (NULL != (x = cJSON_malloc(sizeof(struct \", className, \"))))\"], () => {\n                        this.emitLine(\"memset(x, 0, sizeof(struct \", className, \"));\");\n                        const recur = (type: Type, level: number) => {\n                            if (type instanceof ArrayType) {\n                                const child_level = level + 1;\n                                const cJSON = this.quicktypeTypeToCJSON(type.items, false);\n                                this.emitLine(\"list_t * x\", child_level.toString(), \" = list_create(false, NULL);\");\n                                this.emitBlock([\"if (NULL != x\", child_level.toString(), \")\"], () => {\n                                    this.emitLine(\"cJSON * e\", child_level.toString(), \" = NULL;\");\n                                    this.emitBlock(\n                                        [\"cJSON_ArrayForEach(e\", child_level.toString(), \", e\", level.toString(), \")\"],\n                                        () => {\n                                            if (cJSON.cjsonType === \"cJSON_Array\") {\n                                                const child_level2 = child_level + 1;\n                                                recur(type.items, child_level);\n                                                this.emitLine(\n                                                    \"list_add_tail(x\",\n                                                    child_level.toString(),\n                                                    \", x\",\n                                                    child_level2.toString(),\n                                                    \", sizeof(\",\n                                                    // @ts-expect-error awaiting refactor\n                                                    cJSON.items?.cType,\n                                                    \" *));\"\n                                                );\n                                            } else if (cJSON.cjsonType === \"cJSON_Map\") {\n                                                /* Not supported */\n                                            } else if (\n                                                cJSON.cjsonType === \"cJSON_Invalid\" ||\n                                                cJSON.cjsonType === \"cJSON_NULL\"\n                                            ) {\n                                                this.emitLine(\n                                                    \"list_add_tail(x\",\n                                                    child_level.toString(),\n                                                    \", (\",\n                                                    cJSON.cType,\n                                                    \" *)0xDEADBEEF, sizeof(\",\n                                                    cJSON.cType,\n                                                    \" *));\"\n                                                );\n                                            } else if (cJSON.cjsonType === \"cJSON_String\") {\n                                                this.emitLine(\n                                                    \"list_add_tail(x\",\n                                                    child_level.toString(),\n                                                    \", strdup(\",\n                                                    cJSON.getValue,\n                                                    \"(e\",\n                                                    child_level.toString(),\n                                                    \")), sizeof(\",\n                                                    cJSON.cType,\n                                                    \" *));\"\n                                                );\n                                            } else if (\n                                                cJSON.cjsonType === \"cJSON_Object\" ||\n                                                cJSON.cjsonType === \"cJSON_Union\"\n                                            ) {\n                                                this.emitLine(\n                                                    \"list_add_tail(x\",\n                                                    child_level.toString(),\n                                                    \", \",\n                                                    cJSON.getValue,\n                                                    \"(e\",\n                                                    child_level.toString(),\n                                                    \"), sizeof(\",\n                                                    cJSON.cType,\n                                                    \" *));\"\n                                                );\n                                            } else {\n                                                this.emitLine(\n                                                    cJSON.cType,\n                                                    \" * tmp\",\n                                                    level > 0 ? level.toString() : \"\",\n                                                    \" = cJSON_malloc(sizeof(\",\n                                                    cJSON.cType,\n                                                    \"));\"\n                                                );\n                                                this.emitBlock(\n                                                    [\"if (NULL != tmp\", level > 0 ? level.toString() : \"\", \")\"],\n                                                    () => {\n                                                        this.emitLine(\n                                                            \"* tmp\",\n                                                            level > 0 ? level.toString() : \"\",\n                                                            \" = \",\n                                                            cJSON.getValue,\n                                                            \"(e\",\n                                                            child_level.toString(),\n                                                            \");\"\n                                                        );\n                                                        this.emitLine(\n                                                            \"list_add_tail(x\",\n                                                            child_level.toString(),\n                                                            \", tmp\",\n                                                            level > 0 ? level.toString() : \"\",\n                                                            \", sizeof(\",\n                                                            cJSON.cType,\n                                                            \" *));\"\n                                                        );\n                                                    }\n                                                );\n                                            }\n                                        }\n                                    );\n                                });\n                            } else if (type instanceof ClassType) {\n                                this.forEachClassProperty(type, \"none\", (name, jsonName, property) => {\n                                    const cJSON = this.quicktypeTypeToCJSON(property.type, property.isOptional);\n                                    this.emitBlock(\n                                        !cJSON.isNullable\n                                            ? [\n                                                  \"if (cJSON_HasObjectItem(j\",\n                                                  level > 0 ? level.toString() : \"\",\n                                                  ', \"',\n                                                  jsonName,\n                                                  '\"))'\n                                              ]\n                                            : [\n                                                  \"if ((cJSON_HasObjectItem(j\",\n                                                  level > 0 ? level.toString() : \"\",\n                                                  ', \"',\n                                                  jsonName,\n                                                  '\")) && (!cJSON_IsNull(cJSON_GetObjectItemCaseSensitive(j',\n                                                  level > 0 ? level.toString() : \"\",\n                                                  ', \"',\n                                                  jsonName,\n                                                  '\"))))'\n                                              ],\n                                        () => {\n                                            if (cJSON.cjsonType === \"cJSON_Array\" && cJSON.items !== undefined) {\n                                                const child_level = level + 1;\n                                                this.emitLine(\n                                                    cJSON.cType,\n                                                    \" * x\",\n                                                    child_level.toString(),\n                                                    \" = list_create(false, NULL);\"\n                                                );\n                                                this.emitBlock([\"if (NULL != x\", child_level.toString(), \")\"], () => {\n                                                    this.emitLine(\"cJSON * e\", child_level.toString(), \" = NULL;\");\n                                                    this.emitLine(\n                                                        \"cJSON * j\",\n                                                        child_level.toString(),\n                                                        \" = cJSON_GetObjectItemCaseSensitive(j\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        ', \"',\n                                                        jsonName,\n                                                        '\");'\n                                                    );\n                                                    this.emitBlock(\n                                                        [\n                                                            \"cJSON_ArrayForEach(e\",\n                                                            child_level.toString(),\n                                                            \", j\",\n                                                            child_level.toString(),\n                                                            \")\"\n                                                        ],\n                                                        () => {\n                                                            const add = (\n                                                                type: Type,\n                                                                cJSON: TypeCJSON,\n                                                                level: number,\n                                                                child_level: number\n                                                            ) => {\n                                                                if (cJSON.items?.cjsonType === \"cJSON_Array\") {\n                                                                    if (type instanceof ArrayType) {\n                                                                        const child_level2 = child_level + 1;\n                                                                        recur(type.items, child_level);\n                                                                        this.emitLine(\n                                                                            \"list_add_tail(x\",\n                                                                            child_level.toString(),\n                                                                            \", x\",\n                                                                            child_level2.toString(),\n                                                                            \", sizeof(\",\n                                                                            cJSON.items?.cType,\n                                                                            \" *));\"\n                                                                        );\n                                                                    } else {\n                                                                        panic(\"Invalid type\");\n                                                                    }\n                                                                } else if (cJSON.items?.cjsonType === \"cJSON_Map\") {\n                                                                    /* Not supported */\n                                                                } else if (\n                                                                    cJSON.items?.cjsonType === \"cJSON_Invalid\" ||\n                                                                    cJSON.items?.cjsonType === \"cJSON_NULL\"\n                                                                ) {\n                                                                    this.emitLine(\n                                                                        \"list_add_tail(x\",\n                                                                        child_level.toString(),\n                                                                        \", (\",\n                                                                        cJSON.items?.cType,\n                                                                        \" *)0xDEADBEEF, sizeof(\",\n                                                                        cJSON.items?.cType,\n                                                                        \" *));\"\n                                                                    );\n                                                                } else if (cJSON.items?.cjsonType === \"cJSON_String\") {\n                                                                    this.emitLine(\n                                                                        \"list_add_tail(x\",\n                                                                        child_level.toString(),\n                                                                        \", strdup(\",\n                                                                        cJSON.items?.getValue,\n                                                                        \"(e\",\n                                                                        child_level.toString(),\n                                                                        \")), sizeof(\",\n                                                                        cJSON.items?.cType,\n                                                                        \" *));\"\n                                                                    );\n                                                                } else if (\n                                                                    cJSON.items?.cjsonType === \"cJSON_Object\" ||\n                                                                    cJSON.items?.cjsonType === \"cJSON_Union\"\n                                                                ) {\n                                                                    this.emitLine(\n                                                                        \"list_add_tail(x\",\n                                                                        child_level.toString(),\n                                                                        \", \",\n                                                                        cJSON.items?.getValue,\n                                                                        \"(e\",\n                                                                        child_level.toString(),\n                                                                        \"), sizeof(\",\n                                                                        cJSON.items?.cType,\n                                                                        \" *));\"\n                                                                    );\n                                                                } else {\n                                                                    this.emitLine(\n                                                                        // @ts-expect-error awaiting refactor\n                                                                        cJSON.items?.cType,\n                                                                        \" * tmp\",\n                                                                        level > 0 ? level.toString() : \"\",\n                                                                        \" = cJSON_malloc(sizeof(\",\n                                                                        cJSON.items?.cType,\n                                                                        \"));\"\n                                                                    );\n                                                                    this.emitBlock(\n                                                                        [\n                                                                            \"if (NULL != tmp\",\n                                                                            level > 0 ? level.toString() : \"\",\n                                                                            \")\"\n                                                                        ],\n                                                                        () => {\n                                                                            this.emitLine(\n                                                                                \"* tmp\",\n                                                                                level > 0 ? level.toString() : \"\",\n                                                                                \" = \",\n                                                                                // @ts-expect-error awaiting refactor\n                                                                                cJSON.items?.getValue,\n                                                                                \"(e\",\n                                                                                child_level.toString(),\n                                                                                \");\"\n                                                                            );\n                                                                            this.emitLine(\n                                                                                \"list_add_tail(x\",\n                                                                                child_level.toString(),\n                                                                                \", tmp\",\n                                                                                level > 0 ? level.toString() : \"\",\n                                                                                \", sizeof(\",\n                                                                                // @ts-expect-error awaiting refactor\n                                                                                cJSON.items?.cType,\n                                                                                \" *));\"\n                                                                            );\n                                                                        }\n                                                                    );\n                                                                }\n                                                            };\n\n                                                            if (cJSON.items?.isNullable) {\n                                                                this.emitBlock(\n                                                                    [\n                                                                        \"if (!cJSON_IsNull(e\",\n                                                                        child_level.toString(),\n                                                                        \"))\"\n                                                                    ],\n                                                                    () => {\n                                                                        add(property.type, cJSON, level, child_level);\n                                                                    }\n                                                                );\n                                                                this.emitBlock([\"else\"], () => {\n                                                                    this.emitLine(\n                                                                        \"list_add_tail(x\",\n                                                                        child_level.toString(),\n                                                                        \", (void *)0xDEADBEEF, sizeof(void *));\"\n                                                                    );\n                                                                });\n                                                            } else {\n                                                                add(property.type, cJSON, level, child_level);\n                                                            }\n                                                        }\n                                                    );\n                                                    this.emitLine(\n                                                        \"x\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        \"->\",\n                                                        name,\n                                                        \" = x\",\n                                                        child_level.toString(),\n                                                        \";\"\n                                                    );\n                                                });\n                                            } else if (cJSON.cjsonType === \"cJSON_Map\" && cJSON.items !== undefined) {\n                                                const child_level = level + 1;\n                                                this.emitLine(\n                                                    cJSON.cType,\n                                                    \" * x\",\n                                                    child_level.toString(),\n                                                    \" = hashtable_create(\",\n                                                    this.hashtableSize,\n                                                    \", false);\"\n                                                );\n                                                this.emitBlock([\"if (NULL != x\", child_level.toString(), \")\"], () => {\n                                                    this.emitLine(\"cJSON * e\", child_level.toString(), \" = NULL;\");\n                                                    this.emitLine(\n                                                        \"cJSON * j\",\n                                                        child_level.toString(),\n                                                        \" = cJSON_GetObjectItemCaseSensitive(j\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        ', \"',\n                                                        jsonName,\n                                                        '\");'\n                                                    );\n                                                    this.emitBlock(\n                                                        [\n                                                            \"cJSON_ArrayForEach(e\",\n                                                            child_level.toString(),\n                                                            \", j\",\n                                                            child_level.toString(),\n                                                            \")\"\n                                                        ],\n                                                        () => {\n                                                            const add = (\n                                                                type: Type,\n                                                                cJSON: TypeCJSON,\n                                                                level: number,\n                                                                child_level: number\n                                                            ) => {\n                                                                if (cJSON.items?.cjsonType === \"cJSON_Array\") {\n                                                                    if (type instanceof MapType) {\n                                                                        const child_level2 = child_level + 1;\n                                                                        recur(type.values, child_level);\n                                                                        this.emitLine(\n                                                                            \"hashtable_add(x\",\n                                                                            child_level.toString(),\n                                                                            \", e\",\n                                                                            child_level.toString(),\n                                                                            \"->string, x\",\n                                                                            child_level2.toString(),\n                                                                            \", sizeof(\",\n                                                                            cJSON.items?.cType,\n                                                                            \" *));\"\n                                                                        );\n                                                                    } else {\n                                                                        panic(\"Invalid type\");\n                                                                    }\n                                                                } else if (cJSON.items?.cjsonType === \"cJSON_Map\") {\n                                                                    /* Not supported */\n                                                                } else if (\n                                                                    cJSON.items?.cjsonType === \"cJSON_Invalid\" ||\n                                                                    cJSON.items?.cjsonType === \"cJSON_NULL\"\n                                                                ) {\n                                                                    this.emitLine(\n                                                                        \"hashtable_add(x\",\n                                                                        child_level.toString(),\n                                                                        \", e\",\n                                                                        child_level.toString(),\n                                                                        \"->string, (\",\n                                                                        cJSON.items?.cType,\n                                                                        \" *)0xDEADBEEF, sizeof(\",\n                                                                        cJSON.items?.cType,\n                                                                        \" *));\"\n                                                                    );\n                                                                } else if (cJSON.items?.cjsonType === \"cJSON_String\") {\n                                                                    this.emitLine(\n                                                                        \"hashtable_add(x\",\n                                                                        child_level.toString(),\n                                                                        \", e\",\n                                                                        child_level.toString(),\n                                                                        \"->string, strdup(\",\n                                                                        cJSON.items?.getValue,\n                                                                        \"(e\",\n                                                                        child_level.toString(),\n                                                                        \")), sizeof(\",\n                                                                        cJSON.items?.cType,\n                                                                        \" *));\"\n                                                                    );\n                                                                } else if (\n                                                                    cJSON.items?.cjsonType === \"cJSON_Object\" ||\n                                                                    cJSON.items?.cjsonType === \"cJSON_Union\"\n                                                                ) {\n                                                                    this.emitLine(\n                                                                        \"hashtable_add(x\",\n                                                                        child_level.toString(),\n                                                                        \", e\",\n                                                                        child_level.toString(),\n                                                                        \"->string, \",\n                                                                        cJSON.items?.getValue,\n                                                                        \"(e\",\n                                                                        child_level.toString(),\n                                                                        \"), sizeof(\",\n                                                                        cJSON.items?.cType,\n                                                                        \" *));\"\n                                                                    );\n                                                                } else {\n                                                                    this.emitLine(\n                                                                        // @ts-expect-error awaiting refactor\n                                                                        cJSON.items?.cType,\n                                                                        \" * tmp\",\n                                                                        level > 0 ? level.toString() : \"\",\n                                                                        \" = cJSON_malloc(sizeof(\",\n                                                                        cJSON.items?.cType,\n                                                                        \"));\"\n                                                                    );\n                                                                    this.emitBlock(\n                                                                        [\n                                                                            \"if (NULL != tmp\",\n                                                                            level > 0 ? level.toString() : \"\",\n                                                                            \")\"\n                                                                        ],\n                                                                        () => {\n                                                                            this.emitLine(\n                                                                                \"* tmp\",\n                                                                                level > 0 ? level.toString() : \"\",\n                                                                                \" = \",\n                                                                                // @ts-expect-error awaiting refactor\n                                                                                cJSON.items?.getValue,\n                                                                                \"(e\",\n                                                                                child_level.toString(),\n                                                                                \");\"\n                                                                            );\n                                                                            this.emitLine(\n                                                                                \"hashtable_add(x\",\n                                                                                child_level.toString(),\n                                                                                \", e\",\n                                                                                child_level.toString(),\n                                                                                \"->string, tmp\",\n                                                                                level > 0 ? level.toString() : \"\",\n                                                                                \", sizeof(\",\n                                                                                // @ts-expect-error awaiting refactor\n                                                                                cJSON.items?.cType,\n                                                                                \" *));\"\n                                                                            );\n                                                                        }\n                                                                    );\n                                                                }\n                                                            };\n\n                                                            if (cJSON.items?.isNullable) {\n                                                                this.emitBlock(\n                                                                    [\n                                                                        \"if (!cJSON_IsNull(e\",\n                                                                        child_level.toString(),\n                                                                        \"))\"\n                                                                    ],\n                                                                    () => {\n                                                                        add(property.type, cJSON, level, child_level);\n                                                                    }\n                                                                );\n                                                                this.emitBlock([\"else\"], () => {\n                                                                    this.emitLine(\n                                                                        \"hashtable_add(x\",\n                                                                        child_level.toString(),\n                                                                        \", e\",\n                                                                        child_level.toString(),\n                                                                        \"->string, (void *)0xDEADBEEF, sizeof(void *));\"\n                                                                    );\n                                                                });\n                                                            } else {\n                                                                add(property.type, cJSON, level, child_level);\n                                                            }\n                                                        }\n                                                    );\n                                                    this.emitLine(\n                                                        \"x\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        \"->\",\n                                                        name,\n                                                        \" = x\",\n                                                        child_level.toString(),\n                                                        \";\"\n                                                    );\n                                                });\n                                            } else if (\n                                                cJSON.cjsonType === \"cJSON_Invalid\" ||\n                                                cJSON.cjsonType === \"cJSON_NULL\"\n                                            ) {\n                                                this.emitLine(\n                                                    \"x\",\n                                                    level > 0 ? level.toString() : \"\",\n                                                    \"->\",\n                                                    name,\n                                                    \" = (\",\n                                                    cJSON.cType,\n                                                    \" *)0xDEADBEEF;\"\n                                                );\n                                            } else if (cJSON.cjsonType === \"cJSON_String\") {\n                                                this.emitLine(\n                                                    \"x\",\n                                                    level > 0 ? level.toString() : \"\",\n                                                    \"->\",\n                                                    name,\n                                                    \" = strdup(\",\n                                                    cJSON.getValue,\n                                                    \"(cJSON_GetObjectItemCaseSensitive(j\",\n                                                    level > 0 ? level.toString() : \"\",\n                                                    ', \"',\n                                                    jsonName,\n                                                    '\")));'\n                                                );\n                                            } else if (\n                                                cJSON.cjsonType === \"cJSON_Object\" ||\n                                                cJSON.cjsonType === \"cJSON_Union\"\n                                            ) {\n                                                this.emitLine(\n                                                    \"x\",\n                                                    level > 0 ? level.toString() : \"\",\n                                                    \"->\",\n                                                    name,\n                                                    \" = \",\n                                                    cJSON.getValue,\n                                                    \"(cJSON_GetObjectItemCaseSensitive(j\",\n                                                    level > 0 ? level.toString() : \"\",\n                                                    ', \"',\n                                                    jsonName,\n                                                    '\"));'\n                                                );\n                                            } else {\n                                                if (property.isOptional || cJSON.isNullable) {\n                                                    this.emitBlock(\n                                                        [\n                                                            \"if (NULL != (x\",\n                                                            level > 0 ? level.toString() : \"\",\n                                                            \"->\",\n                                                            name,\n                                                            \" = cJSON_malloc(sizeof(\",\n                                                            cJSON.cType,\n                                                            \"))))\"\n                                                        ],\n                                                        () => {\n                                                            this.emitLine(\n                                                                \"*x\",\n                                                                level > 0 ? level.toString() : \"\",\n                                                                \"->\",\n                                                                name,\n                                                                \" = \",\n                                                                cJSON.getValue,\n                                                                \"(cJSON_GetObjectItemCaseSensitive(j\",\n                                                                level > 0 ? level.toString() : \"\",\n                                                                ', \"',\n                                                                jsonName,\n                                                                '\"));'\n                                                            );\n                                                        }\n                                                    );\n                                                } else {\n                                                    this.emitLine(\n                                                        \"x\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        \"->\",\n                                                        name,\n                                                        \" = \",\n                                                        cJSON.getValue,\n                                                        \"(cJSON_GetObjectItemCaseSensitive(j\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        ', \"',\n                                                        jsonName,\n                                                        '\"));'\n                                                    );\n                                                }\n                                            }\n                                        }\n                                    );\n                                    if (!property.isOptional && !cJSON.isNullable) {\n                                        if (cJSON.cjsonType === \"cJSON_Array\") {\n                                            this.emitBlock([\"else\"], () => {\n                                                this.emitLine(\n                                                    \"x\",\n                                                    level > 0 ? level.toString() : \"\",\n                                                    \"->\",\n                                                    name,\n                                                    \" = list_create(false, NULL);\"\n                                                );\n                                            });\n                                        } else if (cJSON.cjsonType === \"cJSON_Map\") {\n                                            this.emitBlock([\"else\"], () => {\n                                                this.emitLine(\n                                                    \"x\",\n                                                    level > 0 ? level.toString() : \"\",\n                                                    \"->\",\n                                                    name,\n                                                    \" = hashtable_create(\",\n                                                    this.hashtableSize,\n                                                    \", false);\"\n                                                );\n                                            });\n                                        } else if (\n                                            cJSON.cjsonType === \"cJSON_Invalid\" ||\n                                            cJSON.cjsonType === \"cJSON_NULL\"\n                                        ) {\n                                            this.emitBlock([\"else\"], () => {\n                                                this.emitLine(\n                                                    \"x\",\n                                                    level > 0 ? level.toString() : \"\",\n                                                    \"->\",\n                                                    name,\n                                                    \" = (\",\n                                                    cJSON.cType,\n                                                    \" *)0xDEADBEEF;\"\n                                                );\n                                            });\n                                        } else if (cJSON.cjsonType === \"cJSON_String\") {\n                                            this.emitBlock([\"else\"], () => {\n                                                this.emitBlock(\n                                                    [\n                                                        \"if (NULL != (x\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        \"->\",\n                                                        name,\n                                                        \" = cJSON_malloc(sizeof(\",\n                                                        cJSON.cType,\n                                                        \"))))\"\n                                                    ],\n                                                    () => {\n                                                        this.emitLine(\n                                                            \"x\",\n                                                            level > 0 ? level.toString() : \"\",\n                                                            \"->\",\n                                                            name,\n                                                            \"[0] = '\\\\0';\"\n                                                        );\n                                                    }\n                                                );\n                                            });\n                                        } else {\n                                            /* Nothing to do */\n                                        }\n                                    }\n                                });\n                            }\n                        };\n\n                        recur(classType, 0);\n                    });\n                });\n                this.emitLine(\"return x;\");\n            }\n        );\n        this.ensureBlankLine();\n\n        /* Create className to cJSON generator function */\n        this.emitBlock(\n            [\"cJSON * cJSON_Create\", className, \"(\", this.withConst([\"struct \", className]), \" * x)\"],\n            () => {\n                this.emitLine(\"cJSON * j = NULL;\");\n                this.emitBlock([\"if (NULL != x)\"], () => {\n                    this.emitBlock([\"if (NULL != (j = cJSON_CreateObject()))\"], () => {\n                        const recur = (type: Type, level: number) => {\n                            if (type instanceof ArrayType) {\n                                const child_level = level + 1;\n                                const cJSON = this.quicktypeTypeToCJSON(type.items, false);\n                                this.emitLine(\"cJSON * j\", child_level.toString(), \" = cJSON_CreateArray();\");\n                                this.emitBlock([\"if (NULL != j\", child_level.toString(), \")\"], () => {\n                                    this.emitLine(\n                                        cJSON.cType,\n                                        \" * x\",\n                                        child_level.toString(),\n                                        \" = list_get_head(x\",\n                                        level.toString(),\n                                        \");\"\n                                    );\n                                    this.emitBlock([\"while (NULL != x\", child_level.toString(), \")\"], () => {\n                                        if (cJSON.cjsonType === \"cJSON_Array\") {\n                                            const child_level2 = child_level + 1;\n                                            recur(type.items, child_level);\n                                            this.emitLine(\n                                                \"cJSON_AddItemToArray(j\",\n                                                child_level.toString(),\n                                                \", j\",\n                                                child_level2.toString(),\n                                                \");\"\n                                            );\n                                        } else if (cJSON.cjsonType === \"cJSON_Map\") {\n                                            /* Not supported */\n                                        } else if (cJSON.cjsonType === \"cJSON_Invalid\") {\n                                            /* Nothing to do */\n                                        } else if (cJSON.cjsonType === \"cJSON_NULL\") {\n                                            this.emitLine(\n                                                \"cJSON_AddItemToArray(j\",\n                                                child_level.toString(),\n                                                \", \",\n                                                cJSON.createObject,\n                                                \"());\"\n                                            );\n                                        } else if (\n                                            cJSON.cjsonType === \"cJSON_String\" ||\n                                            cJSON.cjsonType === \"cJSON_Object\" ||\n                                            cJSON.cjsonType === \"cJSON_Union\"\n                                        ) {\n                                            this.emitLine(\n                                                \"cJSON_AddItemToArray(j\",\n                                                child_level.toString(),\n                                                \", \",\n                                                cJSON.createObject,\n                                                \"(x\",\n                                                child_level.toString(),\n                                                \"));\"\n                                            );\n                                        } else {\n                                            this.emitLine(\n                                                \"cJSON_AddItemToArray(j\",\n                                                child_level.toString(),\n                                                \", \",\n                                                cJSON.createObject,\n                                                \"(*x\",\n                                                child_level.toString(),\n                                                \"));\"\n                                            );\n                                        }\n\n                                        this.emitLine(\n                                            \"x\",\n                                            child_level.toString(),\n                                            \" = list_get_next(x\",\n                                            level.toString(),\n                                            \");\"\n                                        );\n                                    });\n                                });\n                            } else if (type instanceof ClassType) {\n                                this.forEachClassProperty(type, \"none\", (name, jsonName, property) => {\n                                    const cJSON = this.quicktypeTypeToCJSON(property.type, property.isOptional);\n                                    if (cJSON.cjsonType === \"cJSON_Array\" && cJSON.items !== undefined) {\n                                        const child_level = level + 1;\n                                        this.emitBlock(\n                                            [\"if (NULL != x\", level > 0 ? level.toString() : \"\", \"->\", name, \")\"],\n                                            () => {\n                                                this.emitLine(\n                                                    \"cJSON * j\",\n                                                    child_level.toString(),\n                                                    \" = cJSON_AddArrayToObject(j\",\n                                                    level > 0 ? level.toString() : \"\",\n                                                    ', \"',\n                                                    jsonName,\n                                                    '\");'\n                                                );\n                                                this.emitBlock([\"if (NULL != j\", child_level.toString(), \")\"], () => {\n                                                    this.emitLine(\n                                                        // @ts-expect-error awaiting refactor\n                                                        cJSON.items?.cType,\n                                                        \" * x\",\n                                                        child_level.toString(),\n                                                        \" = list_get_head(x\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        \"->\",\n                                                        name,\n                                                        \");\"\n                                                    );\n                                                    this.emitBlock(\n                                                        [\"while (NULL != x\", child_level.toString(), \")\"],\n                                                        () => {\n                                                            const add = (\n                                                                type: Type,\n                                                                cJSON: TypeCJSON,\n                                                                child_level: number\n                                                            ) => {\n                                                                if (cJSON.items?.cjsonType === \"cJSON_Array\") {\n                                                                    if (type instanceof ArrayType) {\n                                                                        const child_level2 = child_level + 1;\n                                                                        recur(type.items, child_level);\n                                                                        this.emitLine(\n                                                                            \"cJSON_AddItemToArray(j\",\n                                                                            child_level.toString(),\n                                                                            \", j\",\n                                                                            child_level2.toString(),\n                                                                            \");\"\n                                                                        );\n                                                                    } else {\n                                                                        panic(\"Invalid type\");\n                                                                    }\n                                                                } else if (cJSON.items?.cjsonType === \"cJSON_Map\") {\n                                                                    /* Not supported */\n                                                                } else if (cJSON.items?.cjsonType === \"cJSON_Invalid\") {\n                                                                    /* Nothing to do */\n                                                                } else if (cJSON.items?.cjsonType === \"cJSON_NULL\") {\n                                                                    this.emitLine(\n                                                                        \"cJSON_AddItemToArray(j\",\n                                                                        child_level.toString(),\n                                                                        \", \",\n                                                                        cJSON.items?.createObject,\n                                                                        \"());\"\n                                                                    );\n                                                                } else if (\n                                                                    cJSON.items?.cjsonType === \"cJSON_String\" ||\n                                                                    cJSON.items?.cjsonType === \"cJSON_Object\" ||\n                                                                    cJSON.items?.cjsonType === \"cJSON_Union\"\n                                                                ) {\n                                                                    this.emitLine(\n                                                                        \"cJSON_AddItemToArray(j\",\n                                                                        child_level.toString(),\n                                                                        \", \",\n                                                                        cJSON.items?.createObject,\n                                                                        \"(x\",\n                                                                        child_level.toString(),\n                                                                        \"));\"\n                                                                    );\n                                                                } else {\n                                                                    this.emitLine(\n                                                                        \"cJSON_AddItemToArray(j\",\n                                                                        child_level.toString(),\n                                                                        \", \",\n                                                                        // @ts-expect-error awaiting refactor\n                                                                        cJSON.items?.createObject,\n                                                                        \"(*x\",\n                                                                        child_level.toString(),\n                                                                        \"));\"\n                                                                    );\n                                                                }\n                                                            };\n\n                                                            if (cJSON.items?.isNullable) {\n                                                                this.emitBlock(\n                                                                    [\n                                                                        \"if ((void *)0xDEADBEEF != x\",\n                                                                        child_level.toString(),\n                                                                        \")\"\n                                                                    ],\n                                                                    () => {\n                                                                        add(property.type, cJSON, child_level);\n                                                                    }\n                                                                );\n                                                                this.emitBlock([\"else\"], () => {\n                                                                    this.emitLine(\n                                                                        \"cJSON_AddItemToArray(j\",\n                                                                        child_level.toString(),\n                                                                        \", cJSON_CreateNull());\"\n                                                                    );\n                                                                });\n                                                            } else {\n                                                                add(property.type, cJSON, child_level);\n                                                            }\n\n                                                            this.emitLine(\n                                                                \"x\",\n                                                                child_level.toString(),\n                                                                \" = list_get_next(x\",\n                                                                level > 0 ? level.toString() : \"\",\n                                                                \"->\",\n                                                                name,\n                                                                \");\"\n                                                            );\n                                                        }\n                                                    );\n                                                });\n                                            }\n                                        );\n                                    } else if (cJSON.cjsonType === \"cJSON_Map\" && cJSON.items !== undefined) {\n                                        const child_level = level + 1;\n                                        this.emitBlock(\n                                            [\"if (NULL != x\", level > 0 ? level.toString() : \"\", \"->\", name, \")\"],\n                                            () => {\n                                                this.emitLine(\n                                                    \"cJSON * j\",\n                                                    child_level.toString(),\n                                                    \" = \",\n                                                    cJSON.createObject,\n                                                    \"();\"\n                                                );\n                                                this.emitBlock([\"if (NULL != j\", child_level.toString(), \")\"], () => {\n                                                    this.emitLine(\"char **keys\", child_level.toString(), \" = NULL;\");\n                                                    this.emitLine(\n                                                        \"size_t count\",\n                                                        child_level.toString(),\n                                                        \" = hashtable_get_keys(x\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        \"->\",\n                                                        name,\n                                                        \", &keys\",\n                                                        child_level.toString(),\n                                                        \");\"\n                                                    );\n                                                    this.emitBlock(\n                                                        [\"if (NULL != keys\", child_level.toString(), \")\"],\n                                                        () => {\n                                                            this.emitBlock(\n                                                                [\n                                                                    \"for (size_t index\",\n                                                                    child_level.toString(),\n                                                                    \" = 0; index\",\n                                                                    child_level.toString(),\n                                                                    \" < count\",\n                                                                    child_level.toString(),\n                                                                    \"; index\",\n                                                                    child_level.toString(),\n                                                                    \"++)\"\n                                                                ],\n                                                                () => {\n                                                                    this.emitLine(\n                                                                        // @ts-expect-error awaiting refactor\n                                                                        cJSON.items?.cType,\n                                                                        \" *x\",\n                                                                        child_level.toString(),\n                                                                        \" = hashtable_lookup(x\",\n                                                                        level > 0 ? level.toString() : \"\",\n                                                                        \"->\",\n                                                                        name,\n                                                                        \", keys\",\n                                                                        child_level.toString(),\n                                                                        \"[index\",\n                                                                        child_level.toString(),\n                                                                        \"]);\"\n                                                                    );\n                                                                    const add = (\n                                                                        type: Type,\n                                                                        cJSON: TypeCJSON,\n                                                                        child_level: number\n                                                                    ) => {\n                                                                        if (cJSON.items?.cjsonType === \"cJSON_Array\") {\n                                                                            if (type instanceof MapType) {\n                                                                                const child_level2 = child_level + 1;\n                                                                                recur(type.values, child_level);\n                                                                                this.emitLine(\n                                                                                    cJSON.addToObject,\n                                                                                    \"(j\",\n                                                                                    child_level.toString(),\n                                                                                    \", keys\",\n                                                                                    child_level.toString(),\n                                                                                    \"[index\",\n                                                                                    child_level.toString(),\n                                                                                    \"], j\",\n                                                                                    child_level2.toString(),\n                                                                                    \");\"\n                                                                                );\n                                                                            } else {\n                                                                                panic(\"Invalid type\");\n                                                                            }\n                                                                        } else if (\n                                                                            cJSON.items?.cjsonType === \"cJSON_Map\"\n                                                                        ) {\n                                                                            /* Not supported */\n                                                                        } else if (\n                                                                            cJSON.items?.cjsonType === \"cJSON_Invalid\"\n                                                                        ) {\n                                                                            /* Nothing to do */\n                                                                        } else if (\n                                                                            cJSON.items?.cjsonType === \"cJSON_NULL\"\n                                                                        ) {\n                                                                            this.emitLine(\n                                                                                cJSON.addToObject,\n                                                                                \"(j\",\n                                                                                child_level.toString(),\n                                                                                \", keys\",\n                                                                                child_level.toString(),\n                                                                                \"[index\",\n                                                                                child_level.toString(),\n                                                                                \"], \",\n                                                                                cJSON.items?.createObject,\n                                                                                \"());\"\n                                                                            );\n                                                                        } else if (\n                                                                            cJSON.items?.cjsonType === \"cJSON_String\" ||\n                                                                            cJSON.items?.cjsonType === \"cJSON_Object\" ||\n                                                                            cJSON.items?.cjsonType === \"cJSON_Union\"\n                                                                        ) {\n                                                                            this.emitLine(\n                                                                                cJSON.addToObject,\n                                                                                \"(j\",\n                                                                                child_level.toString(),\n                                                                                \", keys\",\n                                                                                child_level.toString(),\n                                                                                \"[index\",\n                                                                                child_level.toString(),\n                                                                                \"], \",\n                                                                                cJSON.items?.createObject,\n                                                                                \"(x\",\n                                                                                child_level.toString(),\n                                                                                \"));\"\n                                                                            );\n                                                                        } else {\n                                                                            this.emitLine(\n                                                                                cJSON.addToObject,\n                                                                                \"(j\",\n                                                                                child_level.toString(),\n                                                                                \", keys\",\n                                                                                child_level.toString(),\n                                                                                \"[index\",\n                                                                                child_level.toString(),\n                                                                                \"], \",\n                                                                                // @ts-expect-error awaiting refactor\n                                                                                cJSON.items?.createObject,\n                                                                                \"(*x\",\n                                                                                child_level.toString(),\n                                                                                \"));\"\n                                                                            );\n                                                                        }\n                                                                    };\n\n                                                                    if (cJSON.items?.isNullable) {\n                                                                        this.emitBlock(\n                                                                            [\n                                                                                \"if ((void *)0xDEADBEEF != x\",\n                                                                                child_level.toString(),\n                                                                                \")\"\n                                                                            ],\n                                                                            () => {\n                                                                                add(property.type, cJSON, child_level);\n                                                                            }\n                                                                        );\n                                                                        this.emitBlock([\"else\"], () => {\n                                                                            this.emitLine(\n                                                                                cJSON.addToObject,\n                                                                                \"(j\",\n                                                                                child_level.toString(),\n                                                                                \", keys\",\n                                                                                child_level.toString(),\n                                                                                \"[index\",\n                                                                                child_level.toString(),\n                                                                                \"], cJSON_CreateNull());\"\n                                                                            );\n                                                                        });\n                                                                    } else {\n                                                                        add(property.type, cJSON, child_level);\n                                                                    }\n                                                                }\n                                                            );\n                                                            this.emitLine(\n                                                                \"cJSON_free(keys\",\n                                                                child_level.toString(),\n                                                                \");\"\n                                                            );\n                                                        }\n                                                    );\n                                                    this.emitLine(\n                                                        cJSON.addToObject,\n                                                        \"(j\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        ', \"',\n                                                        jsonName,\n                                                        '\", j',\n                                                        child_level.toString(),\n                                                        \");\"\n                                                    );\n                                                });\n                                            }\n                                        );\n                                    } else if (cJSON.cjsonType === \"cJSON_Invalid\") {\n                                        /* Nothing to do */\n                                    } else if (cJSON.cjsonType === \"cJSON_NULL\") {\n                                        if (property.isOptional) {\n                                            this.emitBlock(\n                                                [\"if (NULL != x\", level > 0 ? level.toString() : \"\", \"->\", name, \")\"],\n                                                () => {\n                                                    this.emitLine(\n                                                        cJSON.addToObject,\n                                                        \"(j\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        ', \"',\n                                                        jsonName,\n                                                        '\");'\n                                                    );\n                                                }\n                                            );\n                                        } else {\n                                            this.emitLine(\n                                                cJSON.addToObject,\n                                                \"(j\",\n                                                level > 0 ? level.toString() : \"\",\n                                                ', \"',\n                                                jsonName,\n                                                '\");'\n                                            );\n                                        }\n                                    } else if (cJSON.cjsonType === \"cJSON_String\") {\n                                        this.emitBlock(\n                                            [\"if (NULL != x\", level > 0 ? level.toString() : \"\", \"->\", name, \")\"],\n                                            () => {\n                                                this.emitLine(\n                                                    cJSON.addToObject,\n                                                    \"(j\",\n                                                    level > 0 ? level.toString() : \"\",\n                                                    ', \"',\n                                                    jsonName,\n                                                    '\", x',\n                                                    level > 0 ? level.toString() : \"\",\n                                                    \"->\",\n                                                    name,\n                                                    \");\"\n                                                );\n                                            }\n                                        );\n                                        if (!property.isOptional && !cJSON.isNullable) {\n                                            this.emitBlock([\"else\"], () => {\n                                                this.emitLine(\n                                                    cJSON.addToObject,\n                                                    \"(j\",\n                                                    level > 0 ? level.toString() : \"\",\n                                                    ', \"',\n                                                    jsonName,\n                                                    '\", \"\");'\n                                                );\n                                            });\n                                        }\n                                    } else if (\n                                        cJSON.cjsonType === \"cJSON_Object\" ||\n                                        cJSON.cjsonType === \"cJSON_Union\"\n                                    ) {\n                                        if (property.isOptional || cJSON.isNullable) {\n                                            this.emitBlock(\n                                                [\"if (NULL != x\", level > 0 ? level.toString() : \"\", \"->\", name, \")\"],\n                                                () => {\n                                                    this.emitLine(\n                                                        cJSON.addToObject,\n                                                        \"(j\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        ', \"',\n                                                        jsonName,\n                                                        '\", ',\n                                                        cJSON.createObject,\n                                                        \"(x\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        \"->\",\n                                                        name,\n                                                        \"));\"\n                                                    );\n                                                }\n                                            );\n                                        } else {\n                                            this.emitLine(\n                                                cJSON.addToObject,\n                                                \"(j\",\n                                                level > 0 ? level.toString() : \"\",\n                                                ', \"',\n                                                jsonName,\n                                                '\", ',\n                                                cJSON.createObject,\n                                                \"(x\",\n                                                level > 0 ? level.toString() : \"\",\n                                                \"->\",\n                                                name,\n                                                \"));\"\n                                            );\n                                        }\n                                    } else if (cJSON.cjsonType === \"cJSON_Enum\") {\n                                        if (property.isOptional || cJSON.isNullable) {\n                                            this.emitBlock(\n                                                [\"if (NULL != x\", level > 0 ? level.toString() : \"\", \"->\", name, \")\"],\n                                                () => {\n                                                    this.emitLine(\n                                                        cJSON.addToObject,\n                                                        \"(j\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        ', \"',\n                                                        jsonName,\n                                                        '\", ',\n                                                        cJSON.createObject,\n                                                        \"(*x\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        \"->\",\n                                                        name,\n                                                        \"));\"\n                                                    );\n                                                }\n                                            );\n                                        } else {\n                                            this.emitLine(\n                                                cJSON.addToObject,\n                                                \"(j\",\n                                                level > 0 ? level.toString() : \"\",\n                                                ', \"',\n                                                jsonName,\n                                                '\", ',\n                                                cJSON.createObject,\n                                                \"(x\",\n                                                level > 0 ? level.toString() : \"\",\n                                                \"->\",\n                                                name,\n                                                \"));\"\n                                            );\n                                        }\n                                    } else {\n                                        if (property.isOptional || cJSON.isNullable) {\n                                            this.emitBlock(\n                                                [\"if (NULL != x\", level > 0 ? level.toString() : \"\", \"->\", name, \")\"],\n                                                () => {\n                                                    this.emitLine(\n                                                        cJSON.addToObject,\n                                                        \"(j\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        ', \"',\n                                                        jsonName,\n                                                        '\", *x',\n                                                        level > 0 ? level.toString() : \"\",\n                                                        \"->\",\n                                                        name,\n                                                        \");\"\n                                                    );\n                                                }\n                                            );\n                                        } else {\n                                            this.emitLine(\n                                                cJSON.addToObject,\n                                                \"(j\",\n                                                level > 0 ? level.toString() : \"\",\n                                                ', \"',\n                                                jsonName,\n                                                '\", x',\n                                                level > 0 ? level.toString() : \"\",\n                                                \"->\",\n                                                name,\n                                                \");\"\n                                            );\n                                        }\n                                    }\n\n                                    if (cJSON.isNullable) {\n                                        this.emitBlock([\"else\"], () => {\n                                            this.emitLine(\n                                                \"cJSON_AddNullToObject(j\",\n                                                level > 0 ? level.toString() : \"\",\n                                                ', \"',\n                                                jsonName,\n                                                '\");'\n                                            );\n                                        });\n                                    }\n                                });\n                            }\n                        };\n\n                        recur(classType, 0);\n                    });\n                });\n                this.emitLine(\"return j;\");\n            }\n        );\n        this.ensureBlankLine();\n\n        /* Create className to string generator function */\n        this.emitBlock([\"char * cJSON_Print\", className, \"(\", this.withConst([\"struct \", className]), \" * x)\"], () => {\n            this.emitLine(\"char * s = NULL;\");\n            this.emitBlock([\"if (NULL != x)\"], () => {\n                this.emitLine(\"cJSON * j = cJSON_Create\", className, \"(x);\");\n                this.emitBlock([\"if (NULL != j)\"], () => {\n                    this.emitLine(this._options.printStyle ? \"s = cJSON_PrintUnformatted(j);\" : \"s = cJSON_Print(j);\");\n                    this.emitLine(\"cJSON_Delete(j);\");\n                });\n            });\n            this.emitLine(\"return s;\");\n        });\n        this.ensureBlankLine();\n\n        /* Create className delete function */\n        this.emitBlock([\"void cJSON_Delete\", className, \"(struct \", className, \" * x)\"], () => {\n            this.emitBlock([\"if (NULL != x)\"], () => {\n                const recur = (type: Type, level: number) => {\n                    if (type instanceof ArrayType) {\n                        const child_level = level + 1;\n                        const cJSON = this.quicktypeTypeToCJSON(type.items, false);\n                        this.emitLine(\n                            cJSON.cType,\n                            \" * x\",\n                            child_level.toString(),\n                            \" = list_get_head(x\",\n                            level.toString(),\n                            \");\"\n                        );\n                        this.emitBlock([\"while (NULL != x\", child_level.toString(), \")\"], () => {\n                            if (cJSON.cjsonType === \"cJSON_Array\") {\n                                recur(type.items, child_level);\n                                this.emitLine(cJSON.deleteType, \"(x\", child_level.toString(), \");\");\n                            } else if (cJSON.cjsonType === \"cJSON_Map\") {\n                                /* Not supported */\n                            } else if (cJSON.cjsonType === \"cJSON_Invalid\" || cJSON.cjsonType === \"cJSON_NULL\") {\n                                /* Nothing to do */\n                            } else {\n                                this.emitLine(cJSON.deleteType, \"(x\", child_level.toString(), \");\");\n                            }\n\n                            this.emitLine(\"x\", child_level.toString(), \" = list_get_next(x\", level.toString(), \");\");\n                        });\n                    } else if (type instanceof ClassType) {\n                        this.forEachClassProperty(type, \"none\", (name, _jsonName, property) => {\n                            const cJSON = this.quicktypeTypeToCJSON(property.type, property.isOptional);\n                            if (cJSON.cjsonType === \"cJSON_Array\" && cJSON.items !== undefined) {\n                                const child_level = level + 1;\n                                this.emitBlock(\n                                    [\"if (NULL != x\", level > 0 ? level.toString() : \"\", \"->\", name, \")\"],\n                                    () => {\n                                        this.emitLine(\n                                            // @ts-expect-error awaiting refactor\n                                            cJSON.items?.cType,\n                                            \" * x\",\n                                            child_level.toString(),\n                                            \" = list_get_head(x\",\n                                            level > 0 ? level.toString() : \"\",\n                                            \"->\",\n                                            name,\n                                            \");\"\n                                        );\n                                        this.emitBlock([\"while (NULL != x\", child_level.toString(), \")\"], () => {\n                                            if (cJSON.items?.cjsonType === \"cJSON_Array\") {\n                                                if (property.type instanceof ArrayType) {\n                                                    recur(property.type.items, child_level);\n                                                    this.emitLine(\n                                                        cJSON.items?.deleteType,\n                                                        \"(x\",\n                                                        child_level.toString(),\n                                                        \");\"\n                                                    );\n                                                } else {\n                                                    panic(\"Invalid type\");\n                                                }\n                                            } else if (cJSON.items?.cjsonType === \"cJSON_Map\") {\n                                                /* Not supported */\n                                            } else if (\n                                                cJSON.items?.cjsonType === \"cJSON_Invalid\" ||\n                                                cJSON.items?.cjsonType === \"cJSON_NULL\"\n                                            ) {\n                                                /* Nothing to do */\n                                            } else {\n                                                if (cJSON.items?.isNullable) {\n                                                    this.emitBlock(\n                                                        [\"if ((void *)0xDEADBEEF != x\", child_level.toString(), \")\"],\n                                                        () => {\n                                                            this.emitLine(\n                                                                // @ts-expect-error awaiting refactor\n                                                                cJSON.items?.deleteType,\n                                                                \"(x\",\n                                                                child_level.toString(),\n                                                                \");\"\n                                                            );\n                                                        }\n                                                    );\n                                                } else {\n                                                    this.emitLine(\n                                                        // @ts-expect-error awaiting refactor\n                                                        cJSON.items?.deleteType,\n                                                        \"(x\",\n                                                        child_level.toString(),\n                                                        \");\"\n                                                    );\n                                                }\n                                            }\n\n                                            this.emitLine(\n                                                \"x\",\n                                                child_level.toString(),\n                                                \" = list_get_next(x\",\n                                                level > 0 ? level.toString() : \"\",\n                                                \"->\",\n                                                name,\n                                                \");\"\n                                            );\n                                        });\n                                        this.emitLine(\n                                            cJSON.deleteType,\n                                            \"(x\",\n                                            level > 0 ? level.toString() : \"\",\n                                            \"->\",\n                                            name,\n                                            \");\"\n                                        );\n                                    }\n                                );\n                            } else if (cJSON.cjsonType === \"cJSON_Map\" && cJSON.items !== undefined) {\n                                const child_level = level + 1;\n                                this.emitBlock(\n                                    [\"if (NULL != x\", level > 0 ? level.toString() : \"\", \"->\", name, \")\"],\n                                    () => {\n                                        this.emitLine(\"char **keys\", child_level.toString(), \" = NULL;\");\n                                        this.emitLine(\n                                            \"size_t count\",\n                                            child_level.toString(),\n                                            \" = hashtable_get_keys(x\",\n                                            level > 0 ? level.toString() : \"\",\n                                            \"->\",\n                                            name,\n                                            \", &keys\",\n                                            child_level.toString(),\n                                            \");\"\n                                        );\n                                        this.emitBlock([\"if (NULL != keys\", child_level.toString(), \")\"], () => {\n                                            this.emitBlock(\n                                                [\n                                                    \"for (size_t index\",\n                                                    child_level.toString(),\n                                                    \" = 0; index\",\n                                                    child_level.toString(),\n                                                    \" < count\",\n                                                    child_level.toString(),\n                                                    \"; index\",\n                                                    child_level.toString(),\n                                                    \"++)\"\n                                                ],\n                                                () => {\n                                                    this.emitLine(\n                                                        // @ts-expect-error awaiting refactor\n                                                        cJSON.items?.cType,\n                                                        \" *x\",\n                                                        child_level.toString(),\n                                                        \" = hashtable_lookup(x\",\n                                                        level > 0 ? level.toString() : \"\",\n                                                        \"->\",\n                                                        name,\n                                                        \", keys\",\n                                                        child_level.toString(),\n                                                        \"[index\",\n                                                        child_level.toString(),\n                                                        \"]);\"\n                                                    );\n                                                    this.emitBlock(\n                                                        [\"if (NULL != x\", child_level.toString(), \")\"],\n                                                        () => {\n                                                            if (cJSON.items?.cjsonType === \"cJSON_Array\") {\n                                                                if (property.type instanceof MapType) {\n                                                                    recur(property.type.values, child_level);\n                                                                    this.emitLine(\n                                                                        cJSON.items?.deleteType,\n                                                                        \"(x\",\n                                                                        child_level.toString(),\n                                                                        \");\"\n                                                                    );\n                                                                } else {\n                                                                    panic(\"Invalid type\");\n                                                                }\n                                                            } else if (cJSON.items?.cjsonType === \"cJSON_Map\") {\n                                                                /* Not supported */\n                                                            } else if (\n                                                                cJSON.items?.cjsonType === \"cJSON_Invalid\" ||\n                                                                cJSON.items?.cjsonType === \"cJSON_NULL\"\n                                                            ) {\n                                                                /* Nothing to do */\n                                                            } else {\n                                                                if (cJSON.items?.isNullable) {\n                                                                    this.emitBlock(\n                                                                        [\n                                                                            \"if ((void *)0xDEADBEEF != x\",\n                                                                            child_level.toString(),\n                                                                            \")\"\n                                                                        ],\n                                                                        () => {\n                                                                            this.emitLine(\n                                                                                // @ts-expect-error awaiting refactor\n                                                                                cJSON.items?.deleteType,\n                                                                                \"(x\",\n                                                                                child_level.toString(),\n                                                                                \");\"\n                                                                            );\n                                                                        }\n                                                                    );\n                                                                } else {\n                                                                    this.emitLine(\n                                                                        // @ts-expect-error awaiting refactor\n                                                                        cJSON.items?.deleteType,\n                                                                        \"(x\",\n                                                                        child_level.toString(),\n                                                                        \");\"\n                                                                    );\n                                                                }\n                                                            }\n                                                        }\n                                                    );\n                                                }\n                                            );\n                                            this.emitLine(\"cJSON_free(keys\", child_level.toString(), \");\");\n                                        });\n                                        this.emitLine(\n                                            cJSON.deleteType,\n                                            \"(x\",\n                                            level > 0 ? level.toString() : \"\",\n                                            \"->\",\n                                            name,\n                                            \");\"\n                                        );\n                                    }\n                                );\n                            } else if (cJSON.cjsonType === \"cJSON_Invalid\" || cJSON.cjsonType === \"cJSON_NULL\") {\n                                /* Nothing to do */\n                            } else if (\n                                cJSON.cjsonType === \"cJSON_String\" ||\n                                cJSON.cjsonType === \"cJSON_Object\" ||\n                                cJSON.cjsonType === \"cJSON_Union\"\n                            ) {\n                                this.emitBlock(\n                                    [\"if (NULL != x\", level > 0 ? level.toString() : \"\", \"->\", name, \")\"],\n                                    () => {\n                                        this.emitLine(\n                                            cJSON.deleteType,\n                                            \"(x\",\n                                            level > 0 ? level.toString() : \"\",\n                                            \"->\",\n                                            name,\n                                            \");\"\n                                        );\n                                    }\n                                );\n                            } else {\n                                if (property.isOptional || cJSON.isNullable) {\n                                    this.emitBlock(\n                                        [\"if (NULL != x\", level > 0 ? level.toString() : \"\", \"->\", name, \")\"],\n                                        () => {\n                                            this.emitLine(\n                                                cJSON.deleteType,\n                                                \"(x\",\n                                                level > 0 ? level.toString() : \"\",\n                                                \"->\",\n                                                name,\n                                                \");\"\n                                            );\n                                        }\n                                    );\n                                }\n                            }\n                        });\n                    }\n                };\n\n                recur(classType, 0);\n                this.emitLine(\"cJSON_free(x);\");\n            });\n        });\n        this.ensureBlankLine();\n    }\n\n    /**\n     * Function called to create a top level header files with types and generators\n     * @param type: type of the top level element\n     * @param className: top level class name\n     * @param includes: Array of includes\n     */\n    protected emitTopLevel(type: Type, className: Name, includes: string[]): void {\n        /* Create file */\n        const filename = this.sourcelikeToString(className).concat(\".h\");\n        this.startFile(filename);\n\n        /* Create includes - This create too much includes but this is safer because of specific corner cases */\n        includes.forEach(name => {\n            this.emitIncludeLine(name);\n        });\n        this.ensureBlankLine();\n\n        /* Create types */\n        this.emitTopLevelTypedef(type, className);\n\n        /* Create prototypes */\n        this.emitTopLevelPrototypes(type, className);\n\n        /* Create functions */\n        this.emitTopLevelFunctions(type, className);\n\n        /* Close file */\n        this.finishFile();\n    }\n\n    /**\n     * Function called to create top level typedef\n     * @param type: type of the top level element\n     * @param className: top level class name\n     */\n    protected emitTopLevelTypedef(type: Type, className: Name): void {\n        this.emitBlock(\n            [\"struct \", className],\n            () => {\n                const cJSON = this.quicktypeTypeToCJSON(type, false);\n                this.emitLine(\n                    cJSON.cType,\n                    cJSON.optionalQualifier !== \"\" ? \" \" : \"\",\n                    cJSON.optionalQualifier,\n                    \" value;\"\n                );\n            },\n            \"\",\n            true\n        );\n        this.ensureBlankLine();\n        this.emitTypedefAlias(type, className);\n    }\n\n    /**\n     * Function called to create top level prototypes\n     * @param type: type of the top level element\n     * @param className: top level class name\n     */\n    protected emitTopLevelPrototypes(_type: Type, className: Name): void {\n        this.emitLine(\"struct \", className, \" * cJSON_Parse\", className, \"(\", this.withConst(\"char\"), \" * s);\");\n        this.emitLine(\"struct \", className, \" * cJSON_Get\", className, \"Value(\", this.withConst(\"cJSON\"), \" * j);\");\n        this.emitLine(\"cJSON * cJSON_Create\", className, \"(\", this.withConst([\"struct \", className]), \" * x);\");\n        this.emitLine(\"char * cJSON_Print\", className, \"(\", this.withConst([\"struct \", className]), \" * x);\");\n        this.emitLine(\"void cJSON_Delete\", className, \"(struct \", className, \" * x);\");\n        this.ensureBlankLine();\n    }\n\n    /**\n     * Function called to create top level functions\n     * @param type: type of the top level element\n     * @param className: top level class name\n     */\n    protected emitTopLevelFunctions(type: Type, className: Name): void {\n        /* Create string to className generator function */\n        this.emitBlock(\n            [\"struct \", className, \" * cJSON_Parse\", className, \"(\", this.withConst(\"char\"), \" * s)\"],\n            () => {\n                this.emitLine(\"struct \", className, \" * x = NULL;\");\n                this.emitBlock([\"if (NULL != s)\"], () => {\n                    this.emitLine(\"cJSON * j = cJSON_Parse(s);\");\n                    this.emitBlock([\"if (NULL != j)\"], () => {\n                        this.emitLine(\"x = cJSON_Get\", className, \"Value(j);\");\n                        this.emitLine(\"cJSON_Delete(j);\");\n                    });\n                });\n                this.emitLine(\"return x;\");\n            }\n        );\n        this.ensureBlankLine();\n\n        /* Create cJSON to className generator function */\n        this.emitBlock(\n            [\"struct \", className, \" * cJSON_Get\", className, \"Value(\", this.withConst(\"cJSON\"), \" * j)\"],\n            () => {\n                this.emitLine(\"struct \", className, \" * x = NULL;\");\n                this.emitBlock([\"if (NULL != j)\"], () => {\n                    this.emitBlock([\"if (NULL != (x = cJSON_malloc(sizeof(struct \", className, \"))))\"], () => {\n                        this.emitLine(\"memset(x, 0, sizeof(struct \", className, \"));\");\n                        const cJSON = this.quicktypeTypeToCJSON(type, false);\n                        if (cJSON.cjsonType === \"cJSON_Array\" && cJSON.items !== undefined) {\n                            this.emitLine(\"x->value = list_create(false, NULL);\");\n                            this.emitBlock([\"if (NULL != x->value)\"], () => {\n                                this.emitLine(\"cJSON * e = NULL;\");\n                                this.emitBlock([\"cJSON_ArrayForEach(e, j)\"], () => {\n                                    const add = (cJSON: TypeCJSON) => {\n                                        if (cJSON.items?.cjsonType === \"cJSON_Array\") {\n                                            /* Not supported */\n                                        } else if (cJSON.items?.cjsonType === \"cJSON_Map\") {\n                                            /* Not supported */\n                                        } else if (\n                                            cJSON.items?.cjsonType === \"cJSON_Invalid\" ||\n                                            cJSON.items?.cjsonType === \"cJSON_NULL\"\n                                        ) {\n                                            this.emitLine(\n                                                \"list_add_tail(x->value, (\",\n                                                cJSON.items?.cType,\n                                                \" *)0xDEADBEAF, sizeof(\",\n                                                cJSON.items?.cType,\n                                                \" *));\"\n                                            );\n                                        } else if (cJSON.items?.cjsonType === \"cJSON_String\") {\n                                            this.emitLine(\n                                                \"list_add_tail(x->value, strdup(\",\n                                                cJSON.items?.getValue,\n                                                \"(e)), sizeof(\",\n                                                cJSON.items?.cType,\n                                                \" *));\"\n                                            );\n                                        } else {\n                                            this.emitLine(\n                                                \"list_add_tail(x->value, \",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// @ts-expect-error awaiting refactor\n                                                cJSON.items?.getValue,\n                                                \"(e), sizeof(\",\n                                                cJSON.items?.cType,\n                                                \" *));\"\n                                            );\n                                        }\n                                    };\n\n                                    if (cJSON.items?.isNullable) {\n                                        this.emitBlock([\"if (!cJSON_IsNull(e))\"], () => {\n                                            add(cJSON);\n                                        });\n                                        this.emitBlock([\"else\"], () => {\n                                            this.emitLine(\n                                                \"list_add_tail(x->value, (void *)0xDEADBEEF, sizeof(void *));\"\n                                            );\n                                        });\n                                    } else {\n                                        add(cJSON);\n                                    }\n                                });\n                            });\n                        } else if (cJSON.cjsonType === \"cJSON_Map\" && cJSON.items !== undefined) {\n                            this.emitLine(\"x->value = hashtable_create(\", this.hashtableSize, \", false);\");\n                            this.emitBlock([\"if (NULL != x->value)\"], () => {\n                                this.emitLine(\"cJSON * e = NULL;\");\n                                this.emitBlock([\"cJSON_ArrayForEach(e, j)\"], () => {\n                                    const add = (cJSON: TypeCJSON) => {\n                                        if (cJSON.items?.cjsonType === \"cJSON_Array\") {\n                                            /* Not supported */\n                                        } else if (cJSON.items?.cjsonType === \"cJSON_Map\") {\n                                            /* Not supported */\n                                        } else if (\n                                            cJSON.items?.cjsonType === \"cJSON_Invalid\" ||\n                                            cJSON.items?.cjsonType === \"cJSON_NULL\"\n                                        ) {\n                                            this.emitLine(\n                                                \"hashtable_add(x->value, e->string, (\",\n                                                cJSON.items?.cType,\n                                                \" *)0xDEADBEEF, sizeof(\",\n                                                cJSON.items?.cType,\n                                                \" *));\"\n                                            );\n                                        } else if (cJSON.items?.cjsonType === \"cJSON_String\") {\n                                            this.emitLine(\n                                                \"hashtable_add(x->value, e->string, strdup(\",\n                                                cJSON.items?.getValue,\n                                                \"(e)), sizeof(\",\n                                                cJSON.items?.cType,\n                                                \" *));\"\n                                            );\n                                        } else {\n                                            this.emitLine(\n                                                \"hashtable_add(x->value, e->string, \",\n                                                // @ts-expect-error awaiting refactor\n                                                cJSON.items?.getValue,\n                                                \"(e), sizeof(\",\n                                                cJSON.items?.cType,\n                                                \" *));\"\n                                            );\n                                        }\n                                    };\n\n                                    if (cJSON.items?.isNullable) {\n                                        this.emitBlock([\"if (!cJSON_IsNull(e))\"], () => {\n                                            add(cJSON);\n                                        });\n                                        this.emitBlock([\"else\"], () => {\n                                            this.emitLine(\n                                                \"hashtable_add(x->value, e->string, (void *)0xDEADBEEF, sizeof(void *));\"\n                                            );\n                                        });\n                                    } else {\n                                        add(cJSON);\n                                    }\n                                });\n                            });\n                        } else if (cJSON.cjsonType === \"cJSON_Invalid\") {\n                            /* Nothing to do */\n                        } else if (cJSON.cjsonType === \"cJSON_NULL\") {\n                            this.emitLine(\"x->value = (\", cJSON.cType, \" *)0xDEADBEEF;\");\n                        } else if (cJSON.cjsonType === \"cJSON_String\") {\n                            this.emitLine(\"x->value = strdup(\", cJSON.getValue, \"(j));\");\n                        } else {\n                            this.emitLine(\"x->value = \", cJSON.getValue, \"(j);\");\n                        }\n                    });\n                });\n                this.emitLine(\"return x;\");\n            }\n        );\n        this.ensureBlankLine();\n\n        /* Create className to cJSON generator function */\n        this.emitBlock(\n            [\"cJSON * cJSON_Create\", className, \"(\", this.withConst([\"struct \", className]), \" * x)\"],\n            () => {\n                this.emitLine(\"cJSON * j = NULL;\");\n                this.emitBlock([\"if (NULL != x)\"], () => {\n                    const cJSON = this.quicktypeTypeToCJSON(type, false);\n                    if (cJSON.cjsonType === \"cJSON_Array\" && cJSON.items !== undefined) {\n                        this.emitBlock([\"if (NULL != x->value)\"], () => {\n                            this.emitLine(\"j = \", cJSON.createObject, \"();\");\n                            this.emitBlock([\"if (NULL != j)\"], () => {\n                                // @ts-expect-error awaiting refactor\n                                this.emitLine(cJSON.items?.cType, \" * x1 = list_get_head(x->value);\");\n                                this.emitBlock([\"while (NULL != x1)\"], () => {\n                                    const add = (cJSON: TypeCJSON) => {\n                                        if (cJSON.items?.cjsonType === \"cJSON_Array\") {\n                                            /* Not supported */\n                                        } else if (cJSON.items?.cjsonType === \"cJSON_Map\") {\n                                            /* Not supported */\n                                        } else if (cJSON.items?.cjsonType === \"cJSON_Invalid\") {\n                                            /* Nothing to do */\n                                        } else if (cJSON.items?.cjsonType === \"cJSON_NULL\") {\n                                            this.emitLine(\n                                                \"cJSON_AddItemToArray(j, \",\n                                                cJSON.items?.createObject,\n                                                \"());\"\n                                            );\n                                        } else if (\n                                            cJSON.items?.cjsonType === \"cJSON_String\" ||\n                                            cJSON.items?.cjsonType === \"cJSON_Object\" ||\n                                            cJSON.items?.cjsonType === \"cJSON_Union\"\n                                        ) {\n                                            this.emitLine(\n                                                \"cJSON_AddItemToArray(j, \",\n                                                cJSON.items?.createObject,\n                                                \"(x1));\"\n                                            );\n                                        } else {\n                                            this.emitLine(\n                                                \"cJSON_AddItemToArray(j, \",\n                                                // @ts-expect-error awaiting refactor\n                                                cJSON.items?.createObject,\n                                                \"(*x1));\"\n                                            );\n                                        }\n                                    };\n\n                                    if (cJSON.items?.isNullable) {\n                                        this.emitBlock([\"if ((void *)0xDEADBEEF != x1)\"], () => {\n                                            add(cJSON);\n                                        });\n                                        this.emitBlock([\"else\"], () => {\n                                            this.emitLine(\"cJSON_AddItemToArray(j, cJSON_CreateNull());\");\n                                        });\n                                    } else {\n                                        add(cJSON);\n                                    }\n\n                                    this.emitLine(\"x1 = list_get_next(x->value);\");\n                                });\n                            });\n                        });\n                    } else if (cJSON.cjsonType === \"cJSON_Map\" && cJSON.items !== undefined) {\n                        this.emitBlock([\"if (NULL != x->value)\"], () => {\n                            this.emitLine(\"j = \", cJSON.createObject, \"();\");\n                            this.emitBlock([\"if (NULL != j)\"], () => {\n                                this.emitLine(\"char **keys = NULL;\");\n                                this.emitLine(\"size_t count = hashtable_get_keys(x->value, &keys);\");\n                                this.emitBlock([\"if (NULL != keys)\"], () => {\n                                    this.emitBlock([\"for (size_t index = 0; index < count; index++)\"], () => {\n                                        this.emitLine(\n                                            // @ts-expect-error awaiting refactor\n                                            cJSON.items?.cType,\n                                            \" *x2 = hashtable_lookup(x->value, keys[index]);\"\n                                        );\n                                        const add = (cJSON: TypeCJSON) => {\n                                            if (cJSON.items?.cjsonType === \"cJSON_Array\") {\n                                                /* Not supported */\n                                            } else if (cJSON.items?.cjsonType === \"cJSON_Map\") {\n                                                /* Not supported */\n                                            } else if (cJSON.items?.cjsonType === \"cJSON_Invalid\") {\n                                                /* Nothing to do */\n                                            } else if (cJSON.items?.cjsonType === \"cJSON_NULL\") {\n                                                this.emitLine(\n                                                    cJSON.addToObject,\n                                                    \"(j, keys[index], \",\n                                                    cJSON.items?.createObject,\n                                                    \"());\"\n                                                );\n                                            } else if (\n                                                cJSON.items?.cjsonType === \"cJSON_String\" ||\n                                                cJSON.items?.cjsonType === \"cJSON_Object\" ||\n                                                cJSON.items?.cjsonType === \"cJSON_Union\"\n                                            ) {\n                                                this.emitLine(\n                                                    cJSON.addToObject,\n                                                    \"(j, keys[index], \",\n                                                    cJSON.items?.createObject,\n                                                    \"(x2));\"\n                                                );\n                                            } else {\n                                                this.emitLine(\n                                                    cJSON.addToObject,\n                                                    \"(j, keys[index], \",\n                                                    // @ts-expect-error awaiting refactor\n                                                    cJSON.items?.createObject,\n                                                    \"(*x2));\"\n                                                );\n                                            }\n                                        };\n\n                                        if (cJSON.items?.isNullable) {\n                                            this.emitBlock([\"if ((void *)0xDEADBEEF != x2)\"], () => {\n                                                add(cJSON);\n                                            });\n                                            this.emitBlock([\"else\"], () => {\n                                                this.emitLine(\n                                                    cJSON.addToObject,\n                                                    \"(j, keys[index], cJSON_CreateNull());\"\n                                                );\n                                            });\n                                        } else {\n                                            add(cJSON);\n                                        }\n                                    });\n                                    this.emitLine(\"cJSON_free(keys);\");\n                                });\n                            });\n                        });\n                    } else if (cJSON.cjsonType === \"cJSON_Invalid\") {\n                        /* Nothing to do */\n                    } else if (cJSON.cjsonType === \"cJSON_NULL\") {\n                        this.emitLine(\"j = \", cJSON.createObject, \"();\");\n                    } else {\n                        this.emitLine(\"j = \", cJSON.createObject, \"(x->value);\");\n                    }\n                });\n                this.emitLine(\"return j;\");\n            }\n        );\n        this.ensureBlankLine();\n\n        /* Create className to string generator function */\n        this.emitBlock([\"char * cJSON_Print\", className, \"(\", this.withConst([\"struct \", className]), \" * x)\"], () => {\n            this.emitLine(\"char * s = NULL;\");\n            this.emitBlock([\"if (NULL != x)\"], () => {\n                this.emitLine(\"cJSON * j = cJSON_Create\", className, \"(x);\");\n                this.emitBlock([\"if (NULL != j)\"], () => {\n                    this.emitLine(\"s = cJSON_Print(j);\");\n                    this.emitLine(\"cJSON_Delete(j);\");\n                });\n            });\n            this.emitLine(\"return s;\");\n        });\n        this.ensureBlankLine();\n\n        /* Create className delete function */\n        this.emitBlock([\"void cJSON_Delete\", className, \"(struct \", className, \" * x)\"], () => {\n            this.emitBlock([\"if (NULL != x)\"], () => {\n                const cJSON = this.quicktypeTypeToCJSON(type, false);\n                if (cJSON.cjsonType === \"cJSON_Array\" && cJSON.items !== undefined) {\n                    this.emitBlock([\"if (NULL != x->value)\"], () => {\n                        // @ts-expect-error awaiting refactor\n                        this.emitLine(cJSON.items?.cType, \" * x1 = list_get_head(x->value);\");\n                        this.emitBlock([\"while (NULL != x1)\"], () => {\n                            if (cJSON.items?.isNullable) {\n                                this.emitBlock([\"if ((void *)0xDEADBEEF != x1)\"], () => {\n                                    // @ts-expect-error awaiting refactor\n                                    this.emitLine(cJSON.items?.deleteType, \"(x1);\");\n                                });\n                            } else {\n                                // @ts-expect-error awaiting refactor\n                                this.emitLine(cJSON.items?.deleteType, \"(x1);\");\n                            }\n\n                            this.emitLine(\"x1 = list_get_next(x->value);\");\n                        });\n                        this.emitLine(cJSON.deleteType, \"(x->value);\");\n                    });\n                } else if (cJSON.cjsonType === \"cJSON_Map\" && cJSON.items !== undefined) {\n                    this.emitBlock([\"if (NULL != x->value)\"], () => {\n                        this.emitLine(\"char **keys = NULL;\");\n                        this.emitLine(\"size_t count = hashtable_get_keys(x->value, &keys);\");\n                        this.emitBlock([\"if (NULL != keys)\"], () => {\n                            this.emitBlock([\"for (size_t index = 0; index < count; index++)\"], () => {\n                                // @ts-expect-error awaiting refactor\n                                this.emitLine(cJSON.items?.cType, \" *x2 = hashtable_lookup(x->value, keys[index]);\");\n                                this.emitBlock([\"if (NULL != x2)\"], () => {\n                                    if (cJSON.items?.isNullable) {\n                                        this.emitBlock([\"if ((\", cJSON.items?.cType, \" *)0xDEADBEEF != x2)\"], () => {\n                                            // @ts-expect-error awaiting refactor\n                                            this.emitLine(cJSON.items?.deleteType, \"(x2);\");\n                                        });\n                                    } else {\n                                        // @ts-expect-error awaiting refactor\n                                        this.emitLine(cJSON.items?.deleteType, \"(x2);\");\n                                    }\n                                });\n                            });\n                            this.emitLine(\"cJSON_free(keys);\");\n                        });\n                        this.emitLine(cJSON.deleteType, \"(x->value);\");\n                    });\n                } else if (cJSON.cjsonType === \"cJSON_Invalid\" || cJSON.cjsonType === \"cJSON_NULL\") {\n                    /* Nothing to do */\n                } else if (\n                    cJSON.cjsonType === \"cJSON_String\" ||\n                    cJSON.cjsonType === \"cJSON_Object\" ||\n                    cJSON.cjsonType === \"cJSON_Union\"\n                ) {\n                    this.emitLine(cJSON.deleteType, \"(x->value);\");\n                } else {\n                    /* Nothing to do */\n                }\n\n                this.emitLine(\"cJSON_free(x);\");\n            });\n        });\n        this.ensureBlankLine();\n    }\n\n    /**\n     * Convert quicktype type to cJSON type\n     * @param t: quicktype type\n     * @param isOptional: true if the field is optional\n     * @param isNullable: true if the field is nullable\n     * @return cJSON type\n     */\n    protected quicktypeTypeToCJSON(t: Type, isOptional: boolean, isNullable = false): TypeCJSON {\n        /* Compute cJSON type */\n        return matchType<TypeCJSON>(\n            t,\n            _anyType => {\n                return {\n                    cType: \"void\",\n                    optionalQualifier: \"*\",\n                    cjsonType: \"cJSON_Invalid\",\n                    isType: \"cJSON_IsInvalid\",\n                    getValue: \"\",\n                    addToObject: \"\",\n                    createObject: \"\",\n                    deleteType: \"\",\n                    items: undefined,\n                    isNullable\n                };\n            },\n            _nullType => {\n                return {\n                    cType: \"void\",\n                    optionalQualifier: \"*\",\n                    cjsonType: \"cJSON_NULL\",\n                    isType: \"cJSON_IsNull\",\n                    getValue: \"\",\n                    addToObject: \"cJSON_AddNullToObject\",\n                    createObject: \"cJSON_CreateNull\",\n                    deleteType: \"cJSON_free\",\n                    items: undefined,\n                    isNullable\n                };\n            },\n            _boolType => {\n                return {\n                    cType: \"bool\",\n                    optionalQualifier: isOptional === true ? \"*\" : \"\",\n                    cjsonType: \"cJSON_Bool\",\n                    isType: \"cJSON_IsBool\",\n                    getValue: \"cJSON_IsTrue\",\n                    addToObject: \"cJSON_AddBoolToObject\",\n                    createObject: \"cJSON_CreateBool\",\n                    deleteType: \"cJSON_free\",\n                    items: undefined,\n                    isNullable\n                };\n            },\n            _integerType => {\n                return {\n                    cType: this.typeIntegerSize,\n                    optionalQualifier: isOptional === true ? \"*\" : \"\",\n                    cjsonType: \"cJSON_Number\",\n                    isType: \"cJSON_IsNumber\",\n                    getValue: \"cJSON_GetNumberValue\",\n                    addToObject: \"cJSON_AddNumberToObject\",\n                    createObject: \"cJSON_CreateNumber\",\n                    deleteType: \"cJSON_free\",\n                    items: undefined,\n                    isNullable\n                };\n            },\n            _doubleType => {\n                return {\n                    cType: \"double\",\n                    optionalQualifier: isOptional === true ? \"*\" : \"\",\n                    cjsonType: \"cJSON_Number\",\n                    isType: \"cJSON_IsNumber\",\n                    getValue: \"cJSON_GetNumberValue\",\n                    addToObject: \"cJSON_AddNumberToObject\",\n                    createObject: \"cJSON_CreateNumber\",\n                    deleteType: \"cJSON_free\",\n                    items: undefined,\n                    isNullable\n                };\n            },\n            _stringType => {\n                return {\n                    cType: \"char\",\n                    optionalQualifier: \"*\",\n                    cjsonType: \"cJSON_String\",\n                    isType: \"cJSON_IsString\",\n                    getValue: \"cJSON_GetStringValue\",\n                    addToObject: \"cJSON_AddStringToObject\",\n                    createObject: \"cJSON_CreateString\",\n                    deleteType: \"cJSON_free\",\n                    items: undefined,\n                    isNullable\n                };\n            },\n            arrayType => {\n                const items = this.quicktypeTypeToCJSON(arrayType.items, false);\n                return {\n                    cType: \"list_t\",\n                    optionalQualifier: \"*\",\n                    cjsonType: \"cJSON_Array\",\n                    isType: \"cJSON_IsArray\",\n                    getValue: \"cJSON_GetArrayItem\",\n                    addToObject: \"cJSON_AddItemToObject\",\n                    createObject: \"cJSON_CreateArray\",\n                    deleteType: \"list_release\",\n                    items,\n                    isNullable\n                };\n            },\n            classType => {\n                return {\n                    cType: [\"struct \", this.nameForNamedType(classType)],\n                    optionalQualifier: \"*\",\n                    cjsonType: \"cJSON_Object\",\n                    isType: \"cJSON_IsObject\",\n                    getValue: [\"cJSON_Get\", this.nameForNamedType(classType), \"Value\"],\n                    addToObject: \"cJSON_AddItemToObject\",\n                    createObject: [\"cJSON_Create\", this.nameForNamedType(classType)],\n                    deleteType: [\"cJSON_Delete\", this.nameForNamedType(classType)],\n                    items: undefined,\n                    isNullable\n                };\n            },\n            mapType => {\n                const items = this.quicktypeTypeToCJSON(mapType.values, false);\n                return {\n                    cType: \"hashtable_t\",\n                    optionalQualifier: \"*\",\n                    cjsonType: \"cJSON_Map\",\n                    isType: \"cJSON_IsObject\",\n                    getValue: \"\",\n                    addToObject: \"cJSON_AddItemToObject\",\n                    createObject: \"cJSON_CreateObject\",\n                    deleteType: \"hashtable_release\",\n                    items,\n                    isNullable\n                };\n            },\n            enumType => {\n                return {\n                    cType: [\"enum \", this.nameForNamedType(enumType)],\n                    optionalQualifier: isOptional === true ? \"*\" : \"\",\n                    cjsonType: \"cJSON_Enum\",\n                    isType: \"cJSON_IsString\",\n                    getValue: [\"cJSON_Get\", this.nameForNamedType(enumType), \"Value\"],\n                    addToObject: \"cJSON_AddItemToObject\",\n                    createObject: [\"cJSON_Create\", this.nameForNamedType(enumType)],\n                    deleteType: \"cJSON_free\",\n                    items: undefined,\n                    isNullable\n                };\n            },\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    return this.quicktypeTypeToCJSON(nullable, true, true);\n                } else {\n                    return {\n                        cType: [\"struct \", this.nameForNamedType(unionType)],\n                        optionalQualifier: \"*\",\n                        cjsonType: \"cJSON_Union\",\n                        isType: \"\",\n                        getValue: [\"cJSON_Get\", this.nameForNamedType(unionType), \"Value\"],\n                        addToObject: \"cJSON_AddItemToObject\",\n                        createObject: [\"cJSON_Create\", this.nameForNamedType(unionType)],\n                        deleteType: [\"cJSON_Delete\", this.nameForNamedType(unionType)],\n                        items: undefined,\n                        isNullable\n                    };\n                }\n            }\n        );\n    }\n\n    /**\n     * Function called to create a file\n     * @param proposedFilename: source filename provided from stdin\n     */\n    protected startFile(proposedFilename: Sourcelike): void {\n        /* Check if previous file is closed, create a new file */\n        assert(this.currentFilename === undefined, \"Previous file wasn't finished\");\n        if (proposedFilename !== undefined) {\n            this.currentFilename = this.sourcelikeToString(proposedFilename);\n        }\n\n        /* Check if file has been created */\n        if (this.currentFilename !== undefined) {\n            /* Write header */\n            this.emitDescriptionBlock([\n                this.currentFilename,\n                \"This file has been autogenerated using quicktype https://github.com/quicktype/quicktype - DO NOT EDIT\",\n                \"This file depends of https://github.com/DaveGamble/cJSON, https://github.com/joelguittet/c-list and https://github.com/joelguittet/c-hashtable\",\n                \"To parse json data from json string use the following: struct <type> * data = cJSON_Parse<type>(<string>);\",\n                \"To get json data from cJSON object use the following: struct <type> * data = cJSON_Get<type>Value(<cjson>);\",\n                \"To get cJSON object from json data use the following: cJSON * cjson = cJSON_Create<type>(<data>);\",\n                \"To print json string from json data use the following: char * string = cJSON_Print<type>(<data>);\",\n                \"To delete json data use the following: cJSON_Delete<type>(<data>);\"\n            ]);\n            this.ensureBlankLine();\n\n            /* Write include guard */\n            this.emitLine(\n                \"#ifndef __\",\n                allUpperWordStyle(this.currentFilename.replace(new RegExp(/[^a-zA-Z0-9]+/, \"g\"), \"_\")),\n                \"__\"\n            );\n            this.emitLine(\n                \"#define __\",\n                allUpperWordStyle(this.currentFilename.replace(new RegExp(/[^a-zA-Z0-9]+/, \"g\"), \"_\")),\n                \"__\"\n            );\n            this.ensureBlankLine();\n\n            /* Write C++ guard */\n            this.emitLine(\"#ifdef __cplusplus\");\n            this.emitLine('extern \"C\" {');\n            this.emitLine(\"#endif\");\n            this.ensureBlankLine();\n\n            /* Write includes */\n            this.emitIncludeLine(\"stdint.h\", true);\n            this.emitIncludeLine(\"stdbool.h\", true);\n            this.emitIncludeLine(\"stdlib.h\", true);\n            this.emitIncludeLine(\"string.h\", true);\n            this.emitIncludeLine(\"cJSON.h\", true);\n            this.emitIncludeLine(\"hashtable.h\", true);\n            this.emitIncludeLine(\"list.h\", true);\n            this.ensureBlankLine();\n\n            /* Additional cJSON types */\n            this.emitLine(\"#ifndef cJSON_Bool\");\n            this.emitLine(\"#define cJSON_Bool (cJSON_True | cJSON_False)\");\n            this.emitLine(\"#endif\");\n            this.emitLine(\"#ifndef cJSON_Map\");\n            this.emitLine(\"#define cJSON_Map (1 << 16)\");\n            this.emitLine(\"#endif\");\n            this.emitLine(\"#ifndef cJSON_Enum\");\n            this.emitLine(\"#define cJSON_Enum (1 << 17)\");\n            this.emitLine(\"#endif\");\n            this.ensureBlankLine();\n        }\n    }\n\n    /**\n     * Function called to close current file\n     */\n    protected finishFile(): void {\n        /* Check if file has been created */\n        if (this.currentFilename !== undefined) {\n            /* Write C++ guard */\n            this.emitLine(\"#ifdef __cplusplus\");\n            this.emitLine(\"}\");\n            this.emitLine(\"#endif\");\n            this.ensureBlankLine();\n\n            /* Write include guard */\n            this.emitLine(\n                \"#endif /* __\",\n                allUpperWordStyle(this.currentFilename.replace(new RegExp(/[^a-zA-Z0-9]+/, \"g\"), \"_\")),\n                \"__ */\"\n            );\n            this.ensureBlankLine();\n\n            /* Close file */\n            super.finishFile(defined(this.currentFilename));\n            this.currentFilename = undefined;\n        }\n    }\n\n    /**\n     * Check if type need declaration before use\n     * @note If returning true, canBeForwardDeclared must be declared\n     * @return Always returns true\n     */\n    protected get needsTypeDeclarationBeforeUse(): boolean {\n        return true;\n    }\n\n    /**\n     * Check if type can be forward declared\n     * @return true for classes, false otherwise\n     */\n    protected canBeForwardDeclared(type: Type): boolean {\n        return type.kind === \"class\";\n    }\n\n    /**\n     * Add const to wanted Sourcelike\n     * @return Const Sourcelike\n     */\n    protected withConst(s: Sourcelike): Sourcelike {\n        return [\"const \", s];\n    }\n\n    /**\n     * Emit include line\n     * @param name: filename to include\n     * @pram global: true if global include, false otherwise (default)\n     */\n    protected emitIncludeLine(name: Sourcelike, global = false): void {\n        this.emitLine(\"#include \", global ? \"<\" : '\"', name, global ? \">\" : '\"');\n    }\n\n    /**\n     * Emit description block\n     * @param lines: description block lines\n     */\n    protected emitDescriptionBlock(lines: Sourcelike[]): void {\n        this.emitCommentLines(lines, { lineStart: \" * \", beforeComment: \"/**\", afterComment: \" */\" });\n    }\n\n    /**\n     * Emit code block\n     * @param line: code block line\n     * @param f: callback function\n     * @param withName: name of the block as string\n     * @param withSemicolon: true to add semicolon at the end of the block, false otherwise\n     * @param withIndent: true to indent the block (default), false otherwise\n     */\n    protected emitBlock(\n        line: Sourcelike,\n        f: () => void,\n        withName = \"\",\n        withSemicolon = false,\n        withIndent = true\n    ): void {\n        this.emitLine(line, \" {\");\n        this.preventBlankLine();\n        if (withIndent) {\n            this.indent(f);\n        } else {\n            f();\n        }\n\n        this.preventBlankLine();\n        if (withSemicolon) {\n            if (withName !== \"\") {\n                this.emitLine(\"} \", withName, \";\");\n            } else {\n                this.emitLine(\"};\");\n            }\n        } else {\n            if (withName !== \"\") {\n                this.emitLine(\"} \", withName);\n            } else {\n                this.emitLine(\"}\");\n            }\n        }\n    }\n\n    /**\n     * Emit includes\n     * @param type: class, union or enum type\n     * @param filename: current file name\n     */\n    protected emitIncludes(type: ClassType | UnionType | EnumType, filename: string): void {\n        /* List required includes */\n        const includes: IncludeMap = new Map();\n        if (type instanceof UnionType) {\n            this.updateIncludes(false, includes, type);\n        } else if (type instanceof ClassType) {\n            this.forEachClassProperty(type, \"none\", (_name, _jsonName, property) => {\n                this.updateIncludes(true, includes, property.type);\n            });\n        }\n\n        /* Emit includes */\n        if (includes.size !== 0) {\n            includes.forEach((_rec: IncludeRecord, name: string) => {\n                name = name.concat(\".h\");\n                if (name !== filename) {\n                    this.emitIncludeLine(name);\n                }\n            });\n        }\n\n        this.ensureBlankLine();\n    }\n\n    /**\n     * Compute includes\n     * @param isClassMender: true if class, false otherwise\n     * @param includes: include map\n     * @param propertyType: property type\n     */\n    protected updateIncludes(isClassMember: boolean, includes: IncludeMap, propertyType: Type): void {\n        const propTypes = this.generatedTypes(isClassMember, propertyType);\n        for (const t of propTypes) {\n            const typeName = this.sourcelikeToString(t.name);\n            const propRecord: IncludeRecord = { kind: undefined, typeKind: undefined };\n            if (t.type instanceof ClassType) {\n                /* We can NOT forward declare direct class members, e.g. a class type is included at level#0 */\n                /* HOWEVER if it is not a direct class member, then we can SURELY forward declare it */\n                propRecord.typeKind = \"class\";\n                propRecord.kind = t.level === 0 ? IncludeKind.Include : IncludeKind.ForwardDeclare;\n                if (t.forceInclude) {\n                    propRecord.kind = IncludeKind.Include;\n                }\n            } else if (t.type instanceof EnumType) {\n                propRecord.typeKind = \"enum\";\n                propRecord.kind = IncludeKind.ForwardDeclare;\n            } else if (t.type instanceof UnionType) {\n                propRecord.typeKind = \"union\";\n                /* Recurse into the union */\n                const [maybeNull] = removeNullFromUnion(t.type, true);\n                if (maybeNull !== undefined) {\n                    /* Houston this is a variant, include it */\n                    propRecord.kind = IncludeKind.Include;\n                } else {\n                    if (t.forceInclude) {\n                        propRecord.kind = IncludeKind.Include;\n                    } else {\n                        propRecord.kind = IncludeKind.ForwardDeclare;\n                    }\n                }\n            }\n\n            if (includes.has(typeName)) {\n                const incKind = includes.get(typeName);\n                /* If we already include the type as typed include, do not write it over with forward declare */\n                if (incKind !== undefined && incKind.kind === IncludeKind.ForwardDeclare) {\n                    includes.set(typeName, propRecord);\n                }\n            } else {\n                includes.set(typeName, propRecord);\n            }\n        }\n    }\n\n    /**\n     * Compute generated types\n     * @param isClassMender: true if class, false otherwise\n     * @param type: type\n     * @return Type record array\n     */\n    protected generatedTypes(isClassMember: boolean, type: Type): TypeRecord[] {\n        const result: TypeRecord[] = [];\n        const recur = (forceInclude: boolean, isVariant: boolean, l: number, t: Type) => {\n            if (t instanceof ArrayType) {\n                recur(forceInclude, isVariant, l + 1, t.items);\n            } else if (t instanceof ClassType) {\n                result.push({\n                    name: this.nameForNamedType(t),\n                    type: t,\n                    level: l,\n                    variant: isVariant,\n                    forceInclude\n                });\n            } else if (t instanceof MapType) {\n                recur(forceInclude, isVariant, l + 1, t.values);\n            } else if (t instanceof EnumType) {\n                result.push({\n                    name: this.nameForNamedType(t),\n                    type: t,\n                    level: l,\n                    variant: isVariant,\n                    forceInclude: false\n                });\n            } else if (t instanceof UnionType) {\n                /**\n                 * If we have a union as a class member and we see it as a \"named union\",\n                 * we can safely include it as-is.\n                 * HOWEVER if we define a union on its own, we must recurse into the\n                 * typedefinition and include all subtypes.\n                 */\n                if (this.unionNeedsName(t) && isClassMember) {\n                    /**\n                     * This is NOT ENOUGH.\n                     * We have a variant member in a class, e.g. defined with a boost::variant.\n                     * The compiler can only compile the class if IT KNOWS THE SIZES\n                     * OF ALL MEMBERS OF THE VARIANT.\n                     * So it means that you must include ALL SUBTYPES (practically classes only)\n                     * AS WELL\n                     */\n                    forceInclude = true;\n                    result.push({\n                        name: this.nameForNamedType(t),\n                        type: t,\n                        level: l,\n                        variant: true,\n                        forceInclude\n                    });\n                    /** intentional \"fall-through\", add all subtypes as well - but forced include */\n                }\n\n                const [hasNull, nonNulls] = removeNullFromUnion(t);\n                isVariant = hasNull !== null;\n                /** we need to collect all the subtypes of the union */\n                for (const tt of nonNulls) {\n                    recur(forceInclude, isVariant, l + 1, tt);\n                }\n            }\n        };\n\n        recur(false, false, 0, type);\n        return result;\n    }\n}\n","import {\n    arrayIntercalate,\n    iterableFind,\n    iterableFirst,\n    iterableSome,\n    setUnion,\n    toReadonlyArray,\n    withDefault\n} from \"collection-utils\";\n\nimport { anyTypeIssueAnnotation, nullTypeIssueAnnotation } from \"../Annotation\";\nimport { getAccessorName } from \"../attributes/AccessorNames\";\nimport {\n    type MinMaxConstraint,\n    minMaxLengthForType,\n    minMaxValueForType,\n    patternForType\n} from \"../attributes/Constraints\";\nimport { enumCaseValues } from \"../attributes/EnumValues\";\nimport { ConvenienceRenderer, type ForbiddenWordsInfo } from \"../ConvenienceRenderer\";\nimport { type Declaration } from \"../DeclarationIR\";\nimport { DependencyName, type Name, type NameStyle, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport {\n    BooleanOption,\n    EnumOption,\n    type Option,\n    type OptionValues,\n    StringOption,\n    getOptionValues\n} from \"../RendererOptions\";\nimport { type Sourcelike, maybeAnnotated } from \"../Source\";\nimport {\n    type NamingStyle,\n    isAscii,\n    isLetterOrUnderscoreOrDigit,\n    legalizeCharacters,\n    makeNameStyle,\n    stringEscape\n} from \"../support/Strings\";\nimport { assert, assertNever, defined, numberEnumValues, panic } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport {\n    ArrayType,\n    type ClassProperty,\n    ClassType,\n    EnumType,\n    MapType,\n    type Type,\n    type TypeKind,\n    UnionType\n} from \"../Type\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { directlyReachableTypes, isNamedType, matchType, nullableFromUnion, removeNullFromUnion } from \"../TypeUtils\";\n\nconst pascalValue: [string, NamingStyle] = [\"pascal-case\", \"pascal\"];\nconst underscoreValue: [string, NamingStyle] = [\"underscore-case\", \"underscore\"];\nconst camelValue: [string, NamingStyle] = [\"camel-case\", \"camel\"];\nconst upperUnderscoreValue: [string, NamingStyle] = [\"upper-underscore-case\", \"upper-underscore\"];\nconst pascalUpperAcronymsValue: [string, NamingStyle] = [\"pascal-case-upper-acronyms\", \"pascal-upper-acronyms\"];\nconst camelUpperAcronymsValue: [string, NamingStyle] = [\"camel-case-upper-acronyms\", \"camel-upper-acronyms\"];\n\nexport const cPlusPlusOptions = {\n    typeSourceStyle: new EnumOption(\n        \"source-style\",\n        \"Source code generation type,  whether to generate single or multiple source files\",\n        [\n            [\"single-source\", true],\n            [\"multi-source\", false]\n        ],\n        \"single-source\",\n        \"secondary\"\n    ),\n    includeLocation: new EnumOption(\n        \"include-location\",\n        \"Whether json.hpp is to be located globally or locally\",\n        [\n            [\"local-include\", true],\n            [\"global-include\", false]\n        ],\n        \"local-include\",\n        \"secondary\"\n    ),\n    codeFormat: new EnumOption(\n        \"code-format\",\n        \"Generate classes with getters/setters, instead of structs\",\n        [\n            [\"with-struct\", false],\n            [\"with-getter-setter\", true]\n        ],\n        \"with-getter-setter\"\n    ),\n    wstring: new EnumOption(\n        \"wstring\",\n        \"Store strings using Utf-16 std::wstring, rather than Utf-8 std::string\",\n        [\n            [\"use-string\", false],\n            [\"use-wstring\", true]\n        ],\n        \"use-string\"\n    ),\n    westConst: new EnumOption(\n        \"const-style\",\n        \"Put const to the left/west (const T) or right/east (T const)\",\n        [\n            [\"west-const\", true],\n            [\"east-const\", false]\n        ],\n        \"west-const\"\n    ),\n    justTypes: new BooleanOption(\"just-types\", \"Plain types only\", false),\n    namespace: new StringOption(\"namespace\", \"Name of the generated namespace(s)\", \"NAME\", \"quicktype\"),\n    enumType: new StringOption(\"enum-type\", \"Type of enum class\", \"NAME\", \"int\", \"secondary\"),\n    typeNamingStyle: new EnumOption<NamingStyle>(\"type-style\", \"Naming style for types\", [\n        pascalValue,\n        underscoreValue,\n        camelValue,\n        upperUnderscoreValue,\n        pascalUpperAcronymsValue,\n        camelUpperAcronymsValue\n    ]),\n    memberNamingStyle: new EnumOption<NamingStyle>(\"member-style\", \"Naming style for members\", [\n        underscoreValue,\n        pascalValue,\n        camelValue,\n        upperUnderscoreValue,\n        pascalUpperAcronymsValue,\n        camelUpperAcronymsValue\n    ]),\n    enumeratorNamingStyle: new EnumOption<NamingStyle>(\"enumerator-style\", \"Naming style for enumerators\", [\n        upperUnderscoreValue,\n        underscoreValue,\n        pascalValue,\n        camelValue,\n        pascalUpperAcronymsValue,\n        camelUpperAcronymsValue\n    ]),\n    boost: new BooleanOption(\"boost\", \"Require a dependency on boost. Without boost, C++17 is required\", true),\n    hideNullOptional: new BooleanOption(\"hide-null-optional\", \"Hide null value for optional field\", false)\n};\n\nexport class CPlusPlusTargetLanguage extends TargetLanguage {\n    public constructor(displayName = \"C++\", names: string[] = [\"c++\", \"cpp\", \"cplusplus\"], extension = \"cpp\") {\n        super(displayName, names, extension);\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [\n            cPlusPlusOptions.justTypes,\n            cPlusPlusOptions.namespace,\n            cPlusPlusOptions.codeFormat,\n            cPlusPlusOptions.wstring,\n            cPlusPlusOptions.westConst,\n            cPlusPlusOptions.typeSourceStyle,\n            cPlusPlusOptions.includeLocation,\n            cPlusPlusOptions.typeNamingStyle,\n            cPlusPlusOptions.memberNamingStyle,\n            cPlusPlusOptions.enumeratorNamingStyle,\n            cPlusPlusOptions.enumType,\n            cPlusPlusOptions.boost,\n            cPlusPlusOptions.hideNullOptional\n        ];\n    }\n\n    public get supportsUnionsWithBothNumberTypes(): boolean {\n        return true;\n    }\n\n    public get supportsOptionalClassProperties(): boolean {\n        return true;\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): CPlusPlusRenderer {\n        return new CPlusPlusRenderer(this, renderContext, getOptionValues(cPlusPlusOptions, untypedOptionValues));\n    }\n}\n\nfunction constraintsForType(t: Type):\n    | {\n          minMax?: MinMaxConstraint;\n          minMaxLength?: MinMaxConstraint;\n          pattern?: string;\n      }\n    | undefined {\n    const minMax = minMaxValueForType(t);\n    const minMaxLength = minMaxLengthForType(t);\n    const pattern = patternForType(t);\n    if (minMax === undefined && minMaxLength === undefined && pattern === undefined) return undefined;\n    return { minMax, minMaxLength, pattern };\n}\n\nconst legalizeName = legalizeCharacters(cp => isAscii(cp) && isLetterOrUnderscoreOrDigit(cp));\n\nconst keywords = [\n    \"alignas\",\n    \"alignof\",\n    \"and\",\n    \"and_eq\",\n    \"asm\",\n    \"atomic_cancel\",\n    \"atomic_commit\",\n    \"atomic_noexcept\",\n    \"auto\",\n    \"bitand\",\n    \"bitor\",\n    \"bool\",\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"char\",\n    \"char16_t\",\n    \"char32_t\",\n    \"class\",\n    \"compl\",\n    \"concept\",\n    \"const\",\n    \"constexpr\",\n    \"const_cast\",\n    \"continue\",\n    \"co_await\",\n    \"co_return\",\n    \"co_yield\",\n    \"decltype\",\n    \"default\",\n    \"delete\",\n    \"do\",\n    \"double\",\n    \"dynamic_cast\",\n    \"else\",\n    \"enum\",\n    \"explicit\",\n    \"export\",\n    \"extern\",\n    \"false\",\n    \"float\",\n    \"for\",\n    \"friend\",\n    \"goto\",\n    \"if\",\n    \"import\",\n    \"inline\",\n    \"int\",\n    \"long\",\n    \"module\",\n    \"mutable\",\n    \"namespace\",\n    \"new\",\n    \"noexcept\",\n    \"not\",\n    \"not_eq\",\n    \"nullptr\",\n    \"operator\",\n    \"or\",\n    \"or_eq\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"register\",\n    \"reinterpret_cast\",\n    \"requires\",\n    \"return\",\n    \"short\",\n    \"signed\",\n    \"sizeof\",\n    \"static\",\n    \"static_assert\",\n    \"static_cast\",\n    \"struct\",\n    \"switch\",\n    \"synchronized\",\n    \"template\",\n    \"this\",\n    \"thread_local\",\n    \"throw\",\n    \"true\",\n    \"try\",\n    \"typedef\",\n    \"typeid\",\n    \"typename\",\n    \"union\",\n    \"unsigned\",\n    \"using\",\n    \"virtual\",\n    \"void\",\n    \"volatile\",\n    \"wchar_t\",\n    \"while\",\n    \"xor\",\n    \"xor_eq\",\n    \"override\",\n    \"final\",\n    \"transaction_safe\",\n    \"transaction_safe_dynamic\",\n    \"NULL\"\n];\n\n/// Type to use as an optional if cycle breaking is required\nconst optionalAsSharedType = \"std::shared_ptr\";\n/// Factory to use when creating an optional if cycle breaking is required\nconst optionalFactoryAsSharedType = \"std::make_shared\";\n\n/**\n * To be able to support circles in multiple files -\n * e.g. class#A using class#B using class#A (obviously not directly,\n * but in vector or in variant) we can forward declare them;\n */\nexport enum IncludeKind {\n    ForwardDeclare = \"ForwardDeclare\",\n    Include = \"Include\"\n}\n\n// FIXME: make these string enums eventually\nexport enum GlobalNames {\n    ClassMemberConstraints = 1,\n    ClassMemberConstraintException = 2,\n    ValueTooLowException = 3,\n    ValueTooHighException = 4,\n    ValueTooShortException = 5,\n    ValueTooLongException = 6,\n    InvalidPatternException = 7,\n    CheckConstraint = 8\n}\n\n// FIXME: make these string enums eventually\nexport enum MemberNames {\n    MinIntValue = 1,\n    GetMinIntValue = 2,\n    SetMinIntValue = 3,\n    MaxIntValue = 4,\n    GetMaxIntValue = 5,\n    SetMaxIntValue = 6,\n    MinDoubleValue = 7,\n    GetMinDoubleValue = 8,\n    SetMinDoubleValue = 9,\n    MaxDoubleValue = 10,\n    GetMaxDoubleValue = 11,\n    SetMaxDoubleValue = 12,\n    MinLength = 13,\n    GetMinLength = 14,\n    SetMinLength = 15,\n    MaxLength = 16,\n    GetMaxLength = 17,\n    SetMaxLength = 18,\n    Pattern = 19,\n    GetPattern = 20,\n    SetPattern = 21\n}\n\ninterface ConstraintMember {\n    cppConstType?: string;\n    cppType: string;\n    getter: MemberNames;\n    name: MemberNames;\n    setter: MemberNames;\n}\n\nexport interface IncludeRecord {\n    kind: IncludeKind | undefined /** How to include that */;\n    typeKind: TypeKind | undefined /** What exactly to include */;\n}\n\nexport interface TypeRecord {\n    forceInclude: boolean;\n    level: number;\n    name: Name;\n    type: Type;\n    variant: boolean;\n}\n\n/**\n * We map each and every unique type to a include kind, e.g. how\n * to include the given type\n */\nexport type IncludeMap = Map<string, IncludeRecord>;\n\nexport interface TypeContext {\n    inJsonNamespace: boolean;\n    needsForwardIndirection: boolean;\n    needsOptionalIndirection: boolean;\n}\n\ninterface StringType {\n    createStringLiteral: (inner: Sourcelike) => Sourcelike;\n    emitHelperFunctions: () => void;\n    getConstType: () => string;\n    getRegex: () => string;\n    getSMatch: () => string;\n    getType: () => string;\n    wrapEncodingChange: (\n        qualifier: Sourcelike[],\n        fromType: Sourcelike,\n        toType: Sourcelike,\n        inner: Sourcelike\n    ) => Sourcelike;\n    wrapToString: (inner: Sourcelike) => Sourcelike;\n}\n\nfunction addQualifier(qualifier: Sourcelike, qualified: Sourcelike[]): Sourcelike[] {\n    if (qualified.length === 0) {\n        return [];\n    }\n\n    return [qualifier, qualified];\n}\n\nclass WrappingCode {\n    public constructor(\n        private readonly start: Sourcelike[],\n        private readonly end: Sourcelike[]\n    ) {}\n\n    public wrap(qualifier: Sourcelike, inner: Sourcelike): Sourcelike {\n        return [addQualifier(qualifier, this.start), inner, this.end];\n    }\n}\n\nclass BaseString {\n    public _stringType: string;\n\n    public _constStringType: string;\n\n    public _smatch: string;\n\n    public _regex: string;\n\n    public _stringLiteralPrefix: string;\n\n    public _toString: WrappingCode;\n\n    public _encodingClass: Sourcelike;\n\n    public _encodingFunction: Sourcelike;\n\n    public constructor(\n        stringType: string,\n        constStringType: string,\n        smatch: string,\n        regex: string,\n        stringLiteralPrefix: string,\n        toString: WrappingCode,\n        encodingClass: string,\n        encodingFunction: string\n    ) {\n        this._stringType = stringType;\n        this._constStringType = constStringType;\n        this._smatch = smatch;\n        this._regex = regex;\n        this._stringLiteralPrefix = stringLiteralPrefix;\n        this._toString = toString;\n        this._encodingClass = encodingClass;\n        this._encodingFunction = encodingFunction;\n    }\n\n    public getType(): string {\n        return this._stringType;\n    }\n\n    public getConstType(): string {\n        return this._constStringType;\n    }\n\n    public getSMatch(): string {\n        return this._smatch;\n    }\n\n    public getRegex(): string {\n        return this._regex;\n    }\n\n    public createStringLiteral(inner: Sourcelike): Sourcelike {\n        return [this._stringLiteralPrefix, '\"', inner, '\"'];\n    }\n\n    public wrapToString(inner: Sourcelike): Sourcelike {\n        return this._toString.wrap([], inner);\n    }\n}\n\nexport class CPlusPlusRenderer extends ConvenienceRenderer {\n    /**\n     * For forward declaration practically\n     */\n    private readonly _enumType: string;\n\n    private readonly _generatedFiles: Set<string>;\n\n    private _currentFilename: string | undefined;\n\n    private _allTypeNames: Set<string>;\n\n    private readonly _gettersAndSettersForPropertyName = new Map<Name, [Name, Name, Name]>();\n\n    private readonly _namespaceNames: readonly string[];\n\n    private readonly _memberNameStyle: NameStyle;\n\n    private readonly _namedTypeNameStyle: NameStyle;\n\n    private readonly _generatedGlobalNames: Map<GlobalNames, string>;\n\n    private readonly _generatedMemberNames: Map<MemberNames, string>;\n\n    private readonly _forbiddenGlobalNames: string[];\n\n    private readonly _memberNamingFunction: Namer;\n\n    private readonly _stringType: StringType;\n\n    /// The type to use as an optional  (std::optional or std::shared)\n    private readonly _optionalType: string;\n\n    private readonly _optionalFactory: string;\n\n    private readonly _nulloptType: string;\n\n    private readonly _variantType: string;\n\n    private readonly _variantIndexMethodName: string;\n\n    protected readonly typeNamingStyle: NamingStyle;\n\n    protected readonly enumeratorNamingStyle: NamingStyle;\n\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        private readonly _options: OptionValues<typeof cPlusPlusOptions>\n    ) {\n        super(targetLanguage, renderContext);\n\n        this._enumType = _options.enumType;\n        this._namespaceNames = _options.namespace.split(\"::\");\n\n        this.typeNamingStyle = _options.typeNamingStyle;\n        this._namedTypeNameStyle = makeNameStyle(this.typeNamingStyle, legalizeName);\n        this.enumeratorNamingStyle = _options.enumeratorNamingStyle;\n\n        this._memberNameStyle = makeNameStyle(_options.memberNamingStyle, legalizeName);\n        this._memberNamingFunction = funPrefixNamer(\"members\", this._memberNameStyle);\n        this._gettersAndSettersForPropertyName = new Map();\n\n        this._allTypeNames = new Set<string>();\n        this._generatedFiles = new Set<string>();\n        this._generatedGlobalNames = new Map();\n        this._generatedMemberNames = new Map();\n        this._forbiddenGlobalNames = [];\n\n        if (_options.wstring) {\n            this._stringType = this.WideString;\n        } else {\n            this._stringType = this.NarrowString;\n        }\n\n        if (_options.boost) {\n            this._optionalType = \"boost::optional\";\n            this._optionalFactory = \"boost::optional\";\n            this._nulloptType = \"boost::none\";\n            this._variantType = \"boost::variant\";\n            this._variantIndexMethodName = \"which\";\n        } else {\n            this._optionalType = \"std::optional\";\n            this._optionalFactory = \"std::make_optional\";\n            this._nulloptType = \"std::nullopt\";\n            this._variantType = \"std::variant\";\n            this._variantIndexMethodName = \"index\";\n        }\n\n        this.setupGlobalNames();\n    }\n\n    // union typeguard\n    private isUnion(t: Type | UnionType): t is UnionType {\n        return t.kind === \"union\";\n    }\n\n    // Returns true if the type can be stored in\n    // a stack based optional type. This requires\n    // that the type does not require forward declaration.\n    private isOptionalAsValuePossible(t: Type): boolean {\n        if (this.isForwardDeclaredType(t)) return false;\n\n        if (this.isUnion(t)) {\n            // There is something stinky about this test.\n            // There is special handling somewhere that if you\n            // have the following schema\n            // {\n            //     \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n            //     \"$ref\": \"#/definitions/List\",\n            //     \"definitions\": {\n            //         \"List\": {\n            //             \"type\": \"object\",\n            //             \"additionalProperties\": false,\n            //             \"properties\": {\n            //                 \"data\": {\n            //                     \"type\": \"string\"\n            //                 },\n            //                 \"next\": {\n            //                     \"anyOf\": [\n            //                         {\n            //                             \"$ref\": \"#/definitions/List\"\n            //                         }\n            //                         {\n            //                             \"type\": \"null\"\n            //                         }\n            //                     ]\n            //                 }\n            //             },\n            //             \"required\": [],\n            //             \"title\": \"List\"\n            //         }\n            //     }\n            // }\n            // Then a variant is not output but the single item inlined\n            //\n            //     struct TopLevel {\n            //       std::optional<std::string> data;\n            //       std::optional<TopLevel> next;\n            //     };\n            //\n            // instead of\n            //     struct TopLevel {\n            //       std::optional<std::string> data;\n            //       std::shared_ptr<TopLevel> next;\n            //     };\n            //\n            // checking to see if the collapse of the variant has\n            // occured and then doing the isCycleBreakerType check\n            // on the single type the variant would contain seems\n            // to solve the problem. But does this point to a problem\n            // with the core library or with the CPlusPlus package\n            const [, nonNulls] = removeNullFromUnion(t);\n            if (nonNulls.size === 1) {\n                const tt = defined(iterableFirst(nonNulls));\n                return !this.isCycleBreakerType(tt);\n            }\n        }\n\n        return !this.isCycleBreakerType(t);\n    }\n\n    public isImplicitCycleBreaker(t: Type): boolean {\n        const kind = t.kind;\n        return kind === \"array\" || kind === \"map\";\n    }\n\n    // Is likely to return std::optional or boost::optional\n    private optionalTypeStack(): string {\n        return this._optionalType;\n    }\n\n    // Is likely to return std::make_optional or boost::optional\n    private optionalFactoryStack(): string {\n        return this._optionalFactory;\n    }\n\n    // Is likely to return std::shared_ptr\n    private optionalTypeHeap(): string {\n        return optionalAsSharedType;\n    }\n\n    // Is likely to return std::make_shared\n    private optionalFactoryHeap(): string {\n        return optionalFactoryAsSharedType;\n    }\n\n    // Returns the optional type most suitable for the given type.\n    // Classes that don't require forward declarations can be stored\n    // in std::optional ( or boost::optional )\n    private optionalType(t: Type): string {\n        if (this.isOptionalAsValuePossible(t)) return this.optionalTypeStack();\n        else return this.optionalTypeHeap();\n    }\n\n    // Returns a label that can be used to distinguish between\n    // heap and stack based optional handling methods\n    private optionalTypeLabel(t: Type): string {\n        if (this.isOptionalAsValuePossible(t)) return \"stack\";\n        else return \"heap\";\n    }\n\n    protected getConstraintMembers(): ConstraintMember[] {\n        return [\n            {\n                name: MemberNames.MinIntValue,\n                getter: MemberNames.GetMinIntValue,\n                setter: MemberNames.SetMinIntValue,\n                cppType: \"int64_t\"\n            },\n            {\n                name: MemberNames.MaxIntValue,\n                getter: MemberNames.GetMaxIntValue,\n                setter: MemberNames.SetMaxIntValue,\n                cppType: \"int64_t\"\n            },\n            {\n                name: MemberNames.MinDoubleValue,\n                getter: MemberNames.GetMinDoubleValue,\n                setter: MemberNames.SetMinDoubleValue,\n                cppType: \"double\"\n            },\n            {\n                name: MemberNames.MaxDoubleValue,\n                getter: MemberNames.GetMaxDoubleValue,\n                setter: MemberNames.SetMaxDoubleValue,\n                cppType: \"double\"\n            },\n            {\n                name: MemberNames.MinLength,\n                getter: MemberNames.GetMinLength,\n                setter: MemberNames.SetMinLength,\n                cppType: \"size_t\"\n            },\n            {\n                name: MemberNames.MaxLength,\n                getter: MemberNames.GetMaxLength,\n                setter: MemberNames.SetMaxLength,\n                cppType: \"size_t\"\n            },\n            {\n                name: MemberNames.Pattern,\n                getter: MemberNames.GetPattern,\n                setter: MemberNames.SetPattern,\n                cppType: this._stringType.getType(),\n                cppConstType: this._stringType.getConstType()\n            }\n        ];\n    }\n\n    protected lookupGlobalName(type: GlobalNames): string {\n        return defined(this._generatedGlobalNames.get(type));\n    }\n\n    protected lookupMemberName(type: MemberNames): string {\n        return defined(this._generatedMemberNames.get(type));\n    }\n\n    protected addGlobalName(type: GlobalNames): void {\n        const genName = this._namedTypeNameStyle(GlobalNames[type]);\n        this._generatedGlobalNames.set(type, genName);\n        this._forbiddenGlobalNames.push(genName);\n    }\n\n    protected addMemberName(type: MemberNames): void {\n        this._generatedMemberNames.set(type, this._memberNameStyle(MemberNames[type]));\n    }\n\n    protected setupGlobalNames(): void {\n        for (const v of numberEnumValues(GlobalNames)) {\n            this.addGlobalName(v);\n        }\n\n        for (const v of numberEnumValues(MemberNames)) {\n            this.addMemberName(v);\n        }\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return [...keywords, ...this._forbiddenGlobalNames];\n    }\n\n    protected forbiddenForObjectProperties(_c: ClassType, _className: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected forbiddenForEnumCases(_e: EnumType, _enumName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return funPrefixNamer(\"types\", this._namedTypeNameStyle);\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return this._memberNamingFunction;\n    }\n\n    protected makeUnionMemberNamer(): null {\n        return null;\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return funPrefixNamer(\"enumerators\", makeNameStyle(this.enumeratorNamingStyle, legalizeName));\n    }\n\n    protected makeNamesForPropertyGetterAndSetter(\n        _c: ClassType,\n        _className: Name,\n        _p: ClassProperty,\n        _jsonName: string,\n        name: Name\n    ): [Name, Name, Name] {\n        const getterName = new DependencyName(this._memberNamingFunction, name.order, lookup => `get_${lookup(name)}`);\n        const mutableGetterName = new DependencyName(\n            this._memberNamingFunction,\n            name.order,\n            lookup => `getMutable_${lookup(name)}`\n        );\n        const setterName = new DependencyName(this._memberNamingFunction, name.order, lookup => `set_${lookup(name)}`);\n        return [getterName, mutableGetterName, setterName];\n    }\n\n    protected makePropertyDependencyNames(\n        c: ClassType,\n        className: Name,\n        p: ClassProperty,\n        jsonName: string,\n        name: Name\n    ): Name[] {\n        const getterAndSetterNames = this.makeNamesForPropertyGetterAndSetter(c, className, p, jsonName, name);\n        this._gettersAndSettersForPropertyName.set(name, getterAndSetterNames);\n        return getterAndSetterNames;\n    }\n\n    protected withConst(s: Sourcelike): Sourcelike {\n        if (this._options.westConst) {\n            return [\"const \", s];\n        } else {\n            return [s, \" const\"];\n        }\n    }\n\n    protected emitInclude(global: boolean, name: Sourcelike): void {\n        this.emitLine(\"#include \", global ? \"<\" : '\"', name, global ? \">\" : '\"');\n    }\n\n    protected startFile(basename: Sourcelike, includeHelper = true): void {\n        assert(this._currentFilename === undefined, \"Previous file wasn't finished\");\n        if (basename !== undefined) {\n            this._currentFilename = this.sourcelikeToString(basename);\n        }\n\n        if (this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n        } else if (!this._options.justTypes) {\n            this.emitCommentLines([\" To parse this JSON data, first install\", \"\"]);\n            if (this._options.boost) {\n                this.emitCommentLines([\"     Boost     http://www.boost.org\"]);\n            }\n\n            this.emitCommentLines([\n                \"     json.hpp  https://github.com/nlohmann/json\",\n                \"\",\n                \" Then include this file, and then do\",\n                \"\"\n            ]);\n\n            if (this._options.typeSourceStyle) {\n                this.forEachTopLevel(\"none\", (_, topLevelName) => {\n                    this.emitLine(\"//     \", topLevelName, \" data = nlohmann::json::parse(jsonString);\");\n                });\n            } else {\n                this.emitLine(\"//     \", basename, \" data = nlohmann::json::parse(jsonString);\");\n            }\n\n            if (this._options.wstring) {\n                this.emitLine(\"//\");\n                this.emitLine(\"//  You can get std::wstring data back out using\");\n                this.emitLine(\"//\");\n                this.forEachTopLevel(\"none\", (_, topLevelName) => {\n                    this.emitLine(\"//     std::wcout << \", \"wdump((nlohmann::json) \", topLevelName, \");\");\n                });\n            }\n        }\n\n        this.ensureBlankLine();\n\n        this.emitLine(\"#pragma once\");\n        this.ensureBlankLine();\n\n        if (this.haveOptionalProperties) {\n            if (this._options.boost) {\n                this.emitInclude(true, \"boost/optional.hpp\");\n            } else {\n                this.emitInclude(true, \"optional\");\n            }\n        }\n\n        if (this.haveNamedUnions) {\n            if (this._options.boost) {\n                this.emitInclude(true, \"boost/variant.hpp\");\n            } else {\n                this.emitInclude(true, \"variant\");\n            }\n        }\n\n        if (!this._options.justTypes) {\n            if (!this._options.includeLocation) {\n                this.emitInclude(true, \"nlohmann/json.hpp\");\n            } else {\n                this.emitInclude(false, \"json.hpp\");\n            }\n\n            if (includeHelper && !this._options.typeSourceStyle) {\n                this.emitInclude(false, \"helper.hpp\");\n            }\n        }\n\n        this.ensureBlankLine();\n    }\n\n    protected finishFile(): void {\n        super.finishFile(defined(this._currentFilename));\n        this._currentFilename = undefined;\n    }\n\n    protected get needsTypeDeclarationBeforeUse(): boolean {\n        return true;\n    }\n\n    protected canBeForwardDeclared(t: Type): boolean {\n        const kind = t.kind;\n        return kind === \"class\";\n    }\n\n    protected emitDescriptionBlock(lines: Sourcelike[]): void {\n        this.emitCommentLines(lines, { lineStart: \" * \", beforeComment: \"/**\", afterComment: \" */\" });\n    }\n\n    protected emitBlock(line: Sourcelike, withSemicolon: boolean, f: () => void, withIndent = true): void {\n        this.emitLine(line, \" {\");\n        this.preventBlankLine();\n        if (withIndent) {\n            this.indent(f);\n        } else {\n            f();\n        }\n\n        this.preventBlankLine();\n        if (withSemicolon) {\n            this.emitLine(\"};\");\n        } else {\n            this.emitLine(\"}\");\n        }\n    }\n\n    protected emitNamespaces(namespaceNames: Iterable<string>, f: () => void): void {\n        const namesArray = toReadonlyArray(namespaceNames);\n        const first = namesArray[0];\n        if (first === undefined) {\n            f();\n        } else {\n            this.emitBlock(\n                [\"namespace \", first],\n                false,\n                () => this.emitNamespaces(namesArray.slice(1), f),\n                namesArray.length === 1\n            );\n        }\n    }\n\n    protected cppTypeInOptional(\n        nonNulls: ReadonlySet<Type>,\n        ctx: TypeContext,\n        withIssues: boolean,\n        forceNarrowString: boolean\n    ): Sourcelike {\n        if (nonNulls.size === 1) {\n            return this.cppType(defined(iterableFirst(nonNulls)), ctx, withIssues, forceNarrowString, false);\n        }\n\n        const typeList: Sourcelike = [];\n        for (const t of nonNulls) {\n            if (typeList.length !== 0) {\n                typeList.push(\", \");\n            }\n\n            typeList.push(\n                this.cppType(\n                    t,\n                    {\n                        needsForwardIndirection: true,\n                        needsOptionalIndirection: false,\n                        inJsonNamespace: ctx.inJsonNamespace\n                    },\n                    withIssues,\n                    false,\n                    false\n                )\n            );\n        }\n\n        return [this._variantType, \"<\", typeList, \">\"];\n    }\n\n    protected variantType(u: UnionType, inJsonNamespace: boolean): Sourcelike {\n        const [maybeNull, nonNulls] = removeNullFromUnion(u, true);\n        assert(nonNulls.size >= 2, \"Variant not needed for less than two types.\");\n        const indirection = maybeNull !== null;\n        const variant = this.cppTypeInOptional(\n            nonNulls,\n            {\n                needsForwardIndirection: !indirection,\n                needsOptionalIndirection: !indirection,\n                inJsonNamespace\n            },\n            true,\n            false\n        );\n        if (!indirection) {\n            return variant;\n        }\n\n        return [this.optionalType(u), \"<\", variant, \">\"];\n    }\n\n    protected ourQualifier(inJsonNamespace: boolean): Sourcelike {\n        return inJsonNamespace ? [arrayIntercalate(\"::\", this._namespaceNames), \"::\"] : [];\n    }\n\n    protected jsonQualifier(inJsonNamespace: boolean): Sourcelike {\n        return inJsonNamespace ? [] : \"nlohmann::\";\n    }\n\n    protected variantIndirection(type: Type, needIndirection: boolean, typeSrc: Sourcelike): Sourcelike {\n        if (!needIndirection) return typeSrc;\n        return [this.optionalType(type), \"<\", typeSrc, \">\"];\n    }\n\n    protected cppType(\n        t: Type,\n        ctx: TypeContext,\n        withIssues: boolean,\n        forceNarrowString: boolean,\n        isOptional: boolean\n    ): Sourcelike {\n        const inJsonNamespace = ctx.inJsonNamespace;\n        if (isOptional && t instanceof UnionType) {\n            // avoid have optionalType<optionalType<Type>>\n            for (const tChild of t.getChildren()) {\n                if (tChild.isNullable) {\n                    isOptional = false;\n                    break;\n                }\n            }\n        }\n\n        const typeSource = matchType<Sourcelike>(\n            t,\n            _anyType => {\n                isOptional = false;\n                return maybeAnnotated(withIssues, anyTypeIssueAnnotation, [\n                    this.jsonQualifier(inJsonNamespace),\n                    \"json\"\n                ]);\n            },\n            _nullType => {\n                isOptional = false;\n                return maybeAnnotated(withIssues, nullTypeIssueAnnotation, [\n                    this.jsonQualifier(inJsonNamespace),\n                    \"json\"\n                ]);\n            },\n            _boolType => \"bool\",\n            _integerType => \"int64_t\",\n            _doubleType => \"double\",\n            _stringType => {\n                if (forceNarrowString) {\n                    return \"std::string\";\n                } else {\n                    return this._stringType.getType();\n                }\n            },\n            arrayType => [\n                \"std::vector<\",\n                this.cppType(\n                    arrayType.items,\n                    {\n                        needsForwardIndirection: false,\n                        needsOptionalIndirection: true,\n                        inJsonNamespace\n                    },\n                    withIssues,\n                    forceNarrowString,\n                    false\n                ),\n                \">\"\n            ],\n            classType =>\n                this.variantIndirection(\n                    classType,\n                    ctx.needsForwardIndirection && this.isForwardDeclaredType(classType) && !isOptional,\n                    [this.ourQualifier(inJsonNamespace), this.nameForNamedType(classType)]\n                ),\n            mapType => {\n                let keyType = this._stringType.getType();\n                if (forceNarrowString) {\n                    keyType = \"std::string\";\n                }\n\n                return [\n                    \"std::map<\",\n                    keyType,\n                    \", \",\n                    this.cppType(\n                        mapType.values,\n                        {\n                            needsForwardIndirection: false,\n                            needsOptionalIndirection: true,\n                            inJsonNamespace\n                        },\n                        withIssues,\n                        forceNarrowString,\n                        false\n                    ),\n                    \">\"\n                ];\n            },\n            enumType => [this.ourQualifier(inJsonNamespace), this.nameForNamedType(enumType)],\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    isOptional = true;\n                    return this.cppType(\n                        nullable,\n                        {\n                            needsForwardIndirection: false,\n                            needsOptionalIndirection: false,\n                            inJsonNamespace\n                        },\n                        withIssues,\n                        forceNarrowString,\n                        false\n                    );\n                } else {\n                    return [this.ourQualifier(inJsonNamespace), this.nameForNamedType(unionType)];\n                }\n            }\n        );\n        if (!isOptional) return typeSource;\n        return [this.optionalType(t), \"<\", typeSource, \">\"];\n    }\n\n    /**\n     * similar to cppType, it practically gathers all the generated types within\n     * 't'. It also records, whether a given sub-type is part of a variant or not.\n     */\n    protected generatedTypes(isClassMember: boolean, theType: Type): TypeRecord[] {\n        const result: TypeRecord[] = [];\n        const recur = (forceInclude: boolean, isVariant: boolean, l: number, t: Type): void => {\n            if (t instanceof ArrayType) {\n                recur(true, isVariant, l + 1, t.items);\n            } else if (t instanceof ClassType) {\n                result.push({\n                    name: this.nameForNamedType(t),\n                    type: t,\n                    level: l,\n                    variant: isVariant,\n                    forceInclude\n                });\n            } else if (t instanceof MapType) {\n                recur(true, isVariant, l + 1, t.values);\n            } else if (t instanceof EnumType) {\n                result.push({\n                    name: this.nameForNamedType(t),\n                    type: t,\n                    level: l,\n                    variant: isVariant,\n                    forceInclude: false\n                });\n            } else if (t instanceof UnionType) {\n                /**\n                 * If we have a union as a class member and we see it as a \"named union\",\n                 * we can safely include it as-is.\n                 * HOWEVER if we define a union on its own, we must recurse into the\n                 * typedefinition and include all subtypes.\n                 */\n                if (this.unionNeedsName(t) && isClassMember) {\n                    /**\n                     * This is NOT ENOUGH.\n                     * We have a variant member in a class, e.g. defined with a boost::variant.\n                     * The compiler can only compile the class if IT KNOWS THE SIZES\n                     * OF ALL MEMBERS OF THE VARIANT.\n                     * So it means that you must include ALL SUBTYPES (practically classes only)\n                     * AS WELL\n                     */\n                    forceInclude = true;\n                    result.push({\n                        name: this.nameForNamedType(t),\n                        type: t,\n                        level: l,\n                        variant: true,\n                        forceInclude\n                    });\n                    /** intentional \"fall-through\", add all subtypes as well - but forced include */\n                }\n\n                const [hasNull, nonNulls] = removeNullFromUnion(t);\n                isVariant = hasNull !== null;\n                /** we need to collect all the subtypes of the union */\n                for (const tt of nonNulls) {\n                    recur(forceInclude, isVariant, l + 1, tt);\n                }\n            }\n        };\n\n        recur(false, false, 0, theType);\n        return result;\n    }\n\n    protected constraintMember(jsonName: string): string {\n        return this._memberNameStyle(`${jsonName}Constraint`);\n    }\n\n    protected emitMember(cppType: Sourcelike, name: Sourcelike): void {\n        this.emitLine(cppType, \" \", name, \";\");\n    }\n\n    protected emitClassMembers(c: ClassType, constraints: Map<string, Sourcelike> | undefined): void {\n        if (this._options.codeFormat) {\n            this.emitLine(\"private:\");\n\n            this.forEachClassProperty(c, \"none\", (name, jsonName, property) => {\n                this.emitMember(\n                    this.cppType(\n                        property.type,\n                        {\n                            needsForwardIndirection: true,\n                            needsOptionalIndirection: true,\n                            inJsonNamespace: false\n                        },\n                        true,\n                        false,\n                        property.isOptional\n                    ),\n                    name\n                );\n                if (constraints?.has(jsonName)) {\n                    /** FIXME!!! NameStyle will/can collide with other Names */\n                    const cnst = this.lookupGlobalName(GlobalNames.ClassMemberConstraints);\n                    this.emitMember(cnst, this.constraintMember(jsonName));\n                }\n            });\n\n            this.ensureBlankLine();\n            this.emitLine(\"public:\");\n        }\n\n        this.forEachClassProperty(c, \"none\", (name, jsonName, property) => {\n            this.emitDescription(this.descriptionForClassProperty(c, jsonName));\n            if (!this._options.codeFormat) {\n                this.emitMember(\n                    this.cppType(\n                        property.type,\n                        {\n                            needsForwardIndirection: true,\n                            needsOptionalIndirection: true,\n                            inJsonNamespace: false\n                        },\n                        true,\n                        false,\n                        property.isOptional\n                    ),\n                    name\n                );\n            } else {\n                const [getterName, mutableGetterName, setterName] = defined(\n                    this._gettersAndSettersForPropertyName.get(name)\n                );\n                const rendered = this.cppType(\n                    property.type,\n                    {\n                        needsForwardIndirection: true,\n                        needsOptionalIndirection: true,\n                        inJsonNamespace: false\n                    },\n                    true,\n                    false,\n                    property.isOptional\n                );\n\n                /**\n                 * fix for optional type -> e.g. unique_ptrs can't be copied\n                 * One might as why the \"this->xxx = value\". Simple if we have\n                 * a member called 'value' value = value will screw up the compiler\n                 */\n                const checkConst = this.lookupGlobalName(GlobalNames.CheckConstraint);\n                if (\n                    (property.type instanceof UnionType && property.type.findMember(\"null\") !== undefined) ||\n                    (property.isOptional && property.type.kind !== \"null\" && property.type.kind !== \"any\")\n                ) {\n                    this.emitLine(rendered, \" \", getterName, \"() const { return \", name, \"; }\");\n                    if (constraints?.has(jsonName)) {\n                        this.emitLine(\n                            \"void \",\n                            setterName,\n                            \"(\",\n                            rendered,\n                            \" value) { if (value) \",\n                            checkConst,\n                            \"(\",\n                            this._stringType.createStringLiteral([name]),\n                            \", \",\n                            this.constraintMember(jsonName),\n                            \", *value); this->\",\n                            name,\n                            \" = value; }\"\n                        );\n                    } else {\n                        this.emitLine(\"void \", setterName, \"(\", rendered, \" value) { this->\", name, \" = value; }\");\n                    }\n                } else {\n                    this.emitLine(this.withConst(rendered), \" & \", getterName, \"() const { return \", name, \"; }\");\n                    this.emitLine(rendered, \" & \", mutableGetterName, \"() { return \", name, \"; }\");\n                    if (constraints?.has(jsonName)) {\n                        this.emitLine(\n                            \"void \",\n                            setterName,\n                            \"(\",\n                            this.withConst(rendered),\n                            \" & value) { \",\n                            checkConst,\n                            \"(\",\n                            this._stringType.createStringLiteral([name]),\n                            \", \",\n                            this.constraintMember(jsonName),\n                            \", value); this->\",\n                            name,\n                            \" = value; }\"\n                        );\n                    } else {\n                        this.emitLine(\n                            \"void \",\n                            setterName,\n                            \"(\",\n                            this.withConst(rendered),\n                            \" & value) { this->\",\n                            name,\n                            \" = value; }\"\n                        );\n                    }\n                }\n\n                this.ensureBlankLine();\n            }\n        });\n    }\n\n    protected generateClassConstraints(c: ClassType): Map<string, Sourcelike> | undefined {\n        const res: Map<string, Sourcelike> = new Map<string, Sourcelike>();\n        this.forEachClassProperty(c, \"none\", (_name, jsonName, property) => {\n            const constraints = constraintsForType(property.type);\n            if (constraints === undefined) return;\n            const { minMax, minMaxLength, pattern } = constraints;\n\n            // TODO is there a better way to check if property.type is an interger or a number?\n            const cppType = this.cppType(\n                property.type,\n                {\n                    needsForwardIndirection: true,\n                    needsOptionalIndirection: true,\n                    inJsonNamespace: false\n                },\n                true,\n                false,\n                property.isOptional\n            );\n\n            res.set(jsonName, [\n                this.constraintMember(jsonName),\n                \"(\",\n                minMax?.[0] && cppType === \"int64_t\" ? String(minMax[0]) : this._nulloptType,\n                \", \",\n                minMax?.[1] && cppType === \"int64_t\" ? String(minMax[1]) : this._nulloptType,\n                \", \",\n                minMax?.[0] && cppType === \"double\" ? String(minMax[0]) : this._nulloptType,\n                \", \",\n                minMax?.[1] && cppType === \"double\" ? String(minMax[1]) : this._nulloptType,\n                \", \",\n                minMaxLength?.[0] ? String(minMaxLength[0]) : this._nulloptType,\n                \", \",\n                minMaxLength?.[1] ? String(minMaxLength[1]) : this._nulloptType,\n                \", \",\n                pattern === undefined\n                    ? this._nulloptType\n                    : [\n                          this._stringType.getType(),\n                          \"(\",\n                          this._stringType.createStringLiteral([stringEscape(pattern)]),\n                          \")\"\n                      ],\n                \")\"\n            ]);\n        });\n\n        return res.size === 0 ? undefined : res;\n    }\n\n    protected emitClass(c: ClassType, className: Name): void {\n        this.emitDescription(this.descriptionForType(c));\n        this.emitBlock([this._options.codeFormat ? \"class \" : \"struct \", className], true, () => {\n            const constraints = this.generateClassConstraints(c);\n            if (this._options.codeFormat) {\n                this.emitLine(\"public:\");\n                if (constraints === undefined) {\n                    this.emitLine(className, \"() = default;\");\n                } else {\n                    this.emitLine(className, \"() :\");\n                    let numEmits = 0;\n                    constraints.forEach((initializer: Sourcelike, _propName: string) => {\n                        numEmits++;\n                        this.indent(() => {\n                            if (numEmits === constraints.size) {\n                                this.emitLine(initializer);\n                            } else {\n                                this.emitLine(initializer, \",\");\n                            }\n                        });\n                    });\n                    this.emitLine(\"{}\");\n                }\n\n                this.emitLine(\"virtual ~\", className, \"() = default;\");\n                this.ensureBlankLine();\n            }\n\n            this.emitClassMembers(c, constraints);\n        });\n    }\n\n    protected emitTopLevelHeaders(t: Type, className: Name): void {\n        // Forward declarations for std::map<std::wstring, Key> (need to convert UTF16 <-> UTF8)\n        if (t instanceof MapType && this._stringType !== this.NarrowString) {\n            const ourQualifier = this.ourQualifier(true);\n\n            this.emitBlock([\"struct adl_serializer<\", ourQualifier, className, \">\"], true, () => {\n                this.emitLine(\"template <>\");\n                this.emitLine(\n                    \"static void from_json(\",\n                    this.withConst(\"json\"),\n                    \" & j, \",\n                    ourQualifier,\n                    className,\n                    \" & x);\"\n                );\n                this.emitLine(\"static void to_json(json & j, \", this.withConst([ourQualifier, className]), \" & x);\");\n            });\n        }\n    }\n\n    protected emitClassHeaders(className: Name): void {\n        const ourQualifier = this.ourQualifier(false);\n\n        this.emitLine(\"void from_json(\", this.withConst(\"json\"), \" & j, \", ourQualifier, className, \" & x);\");\n        this.emitLine(\"void to_json(json & j, \", this.withConst([ourQualifier, className]), \" & x);\");\n    }\n\n    protected emitTopLevelFunction(t: Type, className: Name): void {\n        // Function definitions for std::map<std::wstring, Key> (need to convert UTF16 <-> UTF8)\n        if (t instanceof MapType && this._stringType !== this.NarrowString) {\n            const ourQualifier = this.ourQualifier(true);\n            let cppType: Sourcelike;\n            let toType: Sourcelike;\n\n            this.emitBlock(\n                [\n                    \"inline void adl_serializer<\",\n                    ourQualifier,\n                    className,\n                    \">::from_json(\",\n                    this.withConst(\"json\"),\n                    \" & j, \",\n                    ourQualifier,\n                    className,\n                    \"& x)\"\n                ],\n                false,\n                () => {\n                    cppType = this.cppType(\n                        t,\n                        {\n                            needsForwardIndirection: true,\n                            needsOptionalIndirection: true,\n                            inJsonNamespace: true\n                        },\n                        false,\n                        true,\n                        false\n                    );\n                    toType = this.cppType(\n                        t,\n                        {\n                            needsForwardIndirection: true,\n                            needsOptionalIndirection: true,\n                            inJsonNamespace: true\n                        },\n                        false,\n                        false,\n                        false\n                    );\n\n                    this.emitLine([\n                        \"x = \",\n                        this._stringType.wrapEncodingChange([ourQualifier], cppType, toType, [\n                            \"j.get<\",\n                            cppType,\n                            \">()\"\n                        ]),\n                        \";\"\n                    ]);\n                }\n            );\n\n            this.emitBlock(\n                [\n                    \"inline void adl_serializer<\",\n                    ourQualifier,\n                    className,\n                    \">::to_json(json & j, \",\n                    this.withConst([ourQualifier, className]),\n                    \" & x)\"\n                ],\n                false,\n                () => {\n                    cppType = this.cppType(\n                        t,\n                        {\n                            needsForwardIndirection: true,\n                            needsOptionalIndirection: true,\n                            inJsonNamespace: true\n                        },\n                        false,\n                        false,\n                        false\n                    );\n                    toType = this.cppType(\n                        t,\n                        {\n                            needsForwardIndirection: true,\n                            needsOptionalIndirection: true,\n                            inJsonNamespace: true\n                        },\n                        false,\n                        true,\n                        false\n                    );\n\n                    this.emitLine([\n                        \"j = \",\n                        this._stringType.wrapEncodingChange([ourQualifier], cppType, toType, \"x\"),\n                        \";\"\n                    ]);\n                }\n            );\n        }\n    }\n\n    protected emitClassFunctions(c: ClassType, className: Name): void {\n        const ourQualifier = this.ourQualifier(false);\n        let cppType: Sourcelike;\n        let toType: Sourcelike;\n\n        this.emitBlock(\n            [\"inline void from_json(\", this.withConst(\"json\"), \" & j, \", ourQualifier, className, \"& x)\"],\n            false,\n            () => {\n                this.forEachClassProperty(c, \"none\", (name, json, p) => {\n                    const [, , setterName] = defined(this._gettersAndSettersForPropertyName.get(name));\n                    const propType = p.type;\n\n                    let assignment: WrappingCode;\n                    if (this._options.codeFormat) {\n                        assignment = new WrappingCode([\"x.\", setterName, \"(\"], [\")\"]);\n                    } else {\n                        assignment = new WrappingCode([\"x.\", name, \" = \"], []);\n                    }\n\n                    if (propType.kind === \"null\" || propType.kind === \"any\") {\n                        this.emitLine(\n                            assignment.wrap(\n                                [],\n                                [\n                                    ourQualifier,\n                                    \"get_untyped(j, \",\n                                    this._stringType.wrapEncodingChange(\n                                        [ourQualifier],\n                                        this._stringType.getType(),\n                                        this.NarrowString.getType(),\n                                        [this._stringType.createStringLiteral([stringEscape(json)])]\n                                    ),\n                                    \")\"\n                                ]\n                            ),\n                            \";\"\n                        );\n                        return;\n                    }\n\n                    if (p.isOptional || propType instanceof UnionType) {\n                        const [nullOrOptional, typeSet] = (function (): [boolean, ReadonlySet<Type>] {\n                            if (propType instanceof UnionType) {\n                                const [maybeNull, nonNulls] = removeNullFromUnion(propType, true);\n                                return [maybeNull !== null || p.isOptional, nonNulls];\n                            } else {\n                                const set = new Set<Type>();\n                                set.add(propType);\n                                return [true, set];\n                            }\n                        })();\n                        if (nullOrOptional) {\n                            cppType = this.cppTypeInOptional(\n                                typeSet,\n                                {\n                                    needsForwardIndirection: false,\n                                    needsOptionalIndirection: false,\n                                    inJsonNamespace: false\n                                },\n                                false,\n                                true\n                            );\n                            toType = this.cppTypeInOptional(\n                                typeSet,\n                                {\n                                    needsForwardIndirection: false,\n                                    needsOptionalIndirection: false,\n                                    inJsonNamespace: false\n                                },\n                                false,\n                                false\n                            );\n                            this.emitLine(\n                                assignment.wrap(\n                                    [],\n                                    [\n                                        this._stringType.wrapEncodingChange(\n                                            [ourQualifier],\n                                            [this.optionalType(propType), \"<\", cppType, \">\"],\n                                            [this.optionalType(propType), \"<\", toType, \">\"],\n                                            [\n                                                ourQualifier,\n                                                `get_${this.optionalTypeLabel(propType)}_optional<`,\n                                                cppType,\n                                                \">(j, \",\n                                                this._stringType.wrapEncodingChange(\n                                                    [ourQualifier],\n                                                    this._stringType.getType(),\n                                                    this.NarrowString.getType(),\n                                                    [this._stringType.createStringLiteral([stringEscape(json)])]\n                                                ),\n                                                \")\"\n                                            ]\n                                        )\n                                    ]\n                                ),\n                                \";\"\n                            );\n                            return;\n                        }\n                    }\n\n                    cppType = this.cppType(\n                        propType,\n                        {\n                            needsForwardIndirection: true,\n                            needsOptionalIndirection: true,\n                            inJsonNamespace: false\n                        },\n                        false,\n                        true,\n                        p.isOptional\n                    );\n                    toType = this.cppType(\n                        propType,\n                        {\n                            needsForwardIndirection: true,\n                            needsOptionalIndirection: true,\n                            inJsonNamespace: false\n                        },\n                        false,\n                        false,\n                        p.isOptional\n                    );\n                    this.emitLine(\n                        assignment.wrap(\n                            [],\n                            this._stringType.wrapEncodingChange([ourQualifier], cppType, toType, [\n                                \"j.at(\",\n                                this._stringType.wrapEncodingChange(\n                                    [ourQualifier],\n                                    this._stringType.getType(),\n                                    this.NarrowString.getType(),\n                                    this._stringType.createStringLiteral([stringEscape(json)])\n                                ),\n                                \").get<\",\n                                cppType,\n                                \">()\"\n                            ])\n                        ),\n                        \";\"\n                    );\n                });\n            }\n        );\n        this.ensureBlankLine();\n\n        this.emitBlock(\n            [\"inline void to_json(json & j, \", this.withConst([ourQualifier, className]), \" & x)\"],\n            false,\n            () => {\n                this.emitLine(\"j = json::object();\");\n                this.forEachClassProperty(c, \"none\", (name, json, p) => {\n                    const propType = p.type;\n                    cppType = this.cppType(\n                        propType,\n                        {\n                            needsForwardIndirection: true,\n                            needsOptionalIndirection: true,\n                            inJsonNamespace: false\n                        },\n                        false,\n                        false,\n                        p.isOptional\n                    );\n                    toType = this.cppType(\n                        propType,\n                        {\n                            needsForwardIndirection: true,\n                            needsOptionalIndirection: true,\n                            inJsonNamespace: false\n                        },\n                        false,\n                        true,\n                        p.isOptional\n                    );\n                    const [getterName, ,] = defined(this._gettersAndSettersForPropertyName.get(name));\n                    let getter: Sourcelike[];\n                    if (this._options.codeFormat) {\n                        getter = [getterName, \"()\"];\n                    } else {\n                        getter = [name];\n                    }\n\n                    const assignment: Sourcelike[] = [\n                        \"j[\",\n                        this._stringType.wrapEncodingChange(\n                            [ourQualifier],\n                            this._stringType.getType(),\n                            this.NarrowString.getType(),\n                            this._stringType.createStringLiteral([stringEscape(json)])\n                        ),\n                        \"] = \",\n                        this._stringType.wrapEncodingChange([ourQualifier], cppType, toType, [\"x.\", getter]),\n                        \";\"\n                    ];\n                    if (p.isOptional && this._options.hideNullOptional) {\n                        this.emitBlock(\n                            [\n                                \"if (\",\n                                this._stringType.wrapEncodingChange([ourQualifier], cppType, toType, [\"x.\", getter]),\n                                \")\"\n                            ],\n                            false,\n                            () => {\n                                this.emitLine(assignment);\n                            }\n                        );\n                    } else {\n                        this.emitLine(assignment);\n                    }\n                });\n            }\n        );\n    }\n\n    protected emitEnum(e: EnumType, enumName: Name): void {\n        const caseNames: Sourcelike[] = [];\n        const enumValues = enumCaseValues(e, this.targetLanguage.name);\n\n        this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n            if (caseNames.length > 0) caseNames.push(\", \");\n            caseNames.push(name);\n\n            if (enumValues !== undefined) {\n                const [enumValue] = getAccessorName(enumValues, jsonName);\n                if (enumValue !== undefined) {\n                    caseNames.push(\" = \", enumValue.toString());\n                }\n            }\n        });\n        this.emitDescription(this.descriptionForType(e));\n        this.emitLine(\"enum class \", enumName, \" : \", this._enumType, \" { \", caseNames, \" };\");\n    }\n\n    protected emitUnionTypedefs(u: UnionType, unionName: Name): void {\n        this.emitLine(\"using \", unionName, \" = \", this.variantType(u, false), \";\");\n    }\n\n    protected emitUnionHeaders(u: UnionType): void {\n        // Forward declarations for boost::variant<Ts...>. If none of the Ts were defined by us (e.g. if we have\n        // boost::variant<int32_t, std::string>) then we need to specialize nlohmann::adl_serializer for our\n        // variant type. If at least one of the Ts is our type then we could get away with regular adl definitions,\n        // but it's nontrivial to detect that (consider variant<string, variant<map<string, string>, int>> which\n        // does need an adl_serializer specialization) so we'll just specialize every time.\n\n        const nonNulls = removeNullFromUnion(u, true)[1];\n        const variantType = this.cppTypeInOptional(\n            nonNulls,\n            {\n                needsForwardIndirection: false,\n                needsOptionalIndirection: false,\n                inJsonNamespace: true\n            },\n            false,\n            false\n        );\n\n        this.emitLine(\"template <>\");\n        this.emitBlock([\"struct adl_serializer<\", variantType, \">\"], true, () => {\n            this.emitLine(\"static void from_json(\", this.withConst(\"json\"), \" & j, \", variantType, \" & x);\");\n            this.emitLine(\"static void to_json(json & j, \", this.withConst(variantType), \" & x);\");\n        });\n    }\n\n    protected emitUnionFunctions(u: UnionType): void {\n        // Function definitions for boost::variant<Ts...>.\n\n        const ourQualifier = this.ourQualifier(true) as string;\n\n        const functionForKind: Array<[string, string]> = [\n            [\"bool\", \"is_boolean\"],\n            [\"integer\", \"is_number_integer\"],\n            [\"double\", \"is_number\"],\n            [\"string\", \"is_string\"],\n            [\"class\", \"is_object\"],\n            [\"map\", \"is_object\"],\n            [\"array\", \"is_array\"],\n            [\"enum\", \"is_string\"]\n        ];\n        const nonNulls = removeNullFromUnion(u, true)[1];\n        const variantType = this.cppTypeInOptional(\n            nonNulls,\n            {\n                needsForwardIndirection: false,\n                needsOptionalIndirection: false,\n                inJsonNamespace: true\n            },\n            false,\n            false\n        );\n\n        this.emitBlock(\n            [\n                \"inline void adl_serializer<\",\n                variantType,\n                \">::from_json(\",\n                this.withConst(\"json\"),\n                \" & j, \",\n                variantType,\n                \" & x)\"\n            ],\n            false,\n            () => {\n                let onFirst = true;\n                for (const [kind, func] of functionForKind) {\n                    const typeForKind = iterableFind(nonNulls, t => t.kind === kind);\n                    if (typeForKind === undefined) continue;\n                    this.emitLine(onFirst ? \"if\" : \"else if\", \" (j.\", func, \"())\");\n                    this.indent(() => {\n                        const cppType = this.cppType(\n                            typeForKind,\n                            {\n                                needsForwardIndirection: true,\n                                needsOptionalIndirection: true,\n                                inJsonNamespace: true\n                            },\n                            false,\n                            true,\n                            false\n                        );\n                        const toType = this.cppType(\n                            typeForKind,\n                            {\n                                needsForwardIndirection: true,\n                                needsOptionalIndirection: true,\n                                inJsonNamespace: true\n                            },\n                            false,\n                            false,\n                            false\n                        );\n                        this.emitLine(\n                            \"x = \",\n                            this._stringType.wrapEncodingChange([ourQualifier], cppType, toType, [\n                                \"j.get<\",\n                                cppType,\n                                \">()\"\n                            ]),\n                            \";\"\n                        );\n                    });\n                    onFirst = false;\n                }\n\n                this.emitLine('else throw std::runtime_error(\"Could not deserialise!\");');\n            }\n        );\n        this.ensureBlankLine();\n\n        this.emitBlock(\n            [\"inline void adl_serializer<\", variantType, \">::to_json(json & j, \", this.withConst(variantType), \" & x)\"],\n            false,\n            () => {\n                this.emitBlock([\"switch (x.\", this._variantIndexMethodName, \"())\"], false, () => {\n                    let i = 0;\n                    for (const t of nonNulls) {\n                        this.emitLine(\"case \", i.toString(), \":\");\n                        this.indent(() => {\n                            const cppType = this.cppType(\n                                t,\n                                {\n                                    needsForwardIndirection: true,\n                                    needsOptionalIndirection: true,\n                                    inJsonNamespace: true\n                                },\n                                false,\n                                false,\n                                false\n                            );\n                            const toType = this.cppType(\n                                t,\n                                {\n                                    needsForwardIndirection: true,\n                                    needsOptionalIndirection: true,\n                                    inJsonNamespace: true\n                                },\n                                false,\n                                true,\n                                false\n                            );\n                            this.emitLine(\n                                \"j = \",\n                                this._stringType.wrapEncodingChange([ourQualifier], cppType, toType, [\n                                    this._options.boost ? \"boost::get<\" : \"std::get<\",\n                                    cppType,\n                                    \">(x)\"\n                                ]),\n                                \";\"\n                            );\n                            this.emitLine(\"break;\");\n                        });\n                        i++;\n                    }\n\n                    this.emitLine('default: throw std::runtime_error(\"Input JSON does not conform to schema!\");');\n                });\n            }\n        );\n    }\n\n    protected emitEnumHeaders(enumName: Name): void {\n        const ourQualifier = this.ourQualifier(false);\n\n        this.emitLine(\"void from_json(\", this.withConst(\"json\"), \" & j, \", ourQualifier, enumName, \" & x);\");\n        this.emitLine(\"void to_json(json & j, \", this.withConst([ourQualifier, enumName]), \" & x);\");\n    }\n\n    private isLargeEnum(e: EnumType): boolean {\n        // This is just an estimation. Someone might want to do some\n        // benchmarks to find the optimum value here\n        return e.cases.size > 15;\n    }\n\n    protected emitEnumFunctions(e: EnumType, enumName: Name): void {\n        const ourQualifier = this.ourQualifier(false);\n\n        this.emitBlock(\n            [\"inline void from_json(\", this.withConst(\"json\"), \" & j, \", ourQualifier, enumName, \" & x)\"],\n            false,\n            () => {\n                if (this.isLargeEnum(e)) {\n                    this.emitBlock(\n                        [\n                            \"static std::unordered_map<\",\n                            this._stringType.getType(),\n                            \", \",\n                            ourQualifier,\n                            enumName,\n                            \"> enumValues\"\n                        ],\n                        true,\n                        () => {\n                            this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n                                this.emitLine(\n                                    \"{\",\n                                    this._stringType.wrapEncodingChange(\n                                        [ourQualifier],\n                                        this._stringType.getType(),\n                                        this.NarrowString.getType(),\n                                        [this._stringType.createStringLiteral([stringEscape(jsonName)])]\n                                    ),\n                                    \", \",\n                                    ourQualifier,\n                                    enumName,\n                                    \"::\",\n                                    name,\n                                    \"},\"\n                                );\n                            });\n                        }\n                    );\n\n                    this.emitLine(`auto iter = enumValues.find(j.get<${this._stringType.getType()}>());`);\n                    this.emitBlock(\"if (iter != enumValues.end())\", false, () => {\n                        this.emitLine(\"x = iter->second;\");\n                    });\n                } else {\n                    let onFirst = true;\n                    this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n                        const maybeElse = onFirst ? \"\" : \"else \";\n                        this.emitLine(\n                            maybeElse,\n                            \"if (j == \",\n                            this._stringType.wrapEncodingChange(\n                                [ourQualifier],\n                                this._stringType.getType(),\n                                this.NarrowString.getType(),\n                                [this._stringType.createStringLiteral([stringEscape(jsonName)])]\n                            ),\n                            \") x = \",\n                            ourQualifier,\n                            enumName,\n                            \"::\",\n                            name,\n                            \";\"\n                        );\n                        onFirst = false;\n                    });\n                    this.emitLine('else { throw std::runtime_error(\"Input JSON does not conform to schema!\"); }');\n                }\n            }\n        );\n        this.ensureBlankLine();\n\n        this.emitBlock(\n            [\"inline void to_json(json & j, \", this.withConst([ourQualifier, enumName]), \" & x)\"],\n            false,\n            () => {\n                this.emitBlock(\"switch (x)\", false, () => {\n                    this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n                        this.emitLine(\n                            \"case \",\n                            ourQualifier,\n                            enumName,\n                            \"::\",\n                            name,\n                            \": j = \",\n                            this._stringType.wrapEncodingChange(\n                                [ourQualifier],\n                                this._stringType.getType(),\n                                this.NarrowString.getType(),\n                                [this._stringType.createStringLiteral([stringEscape(jsonName)])]\n                            ),\n                            \"; break;\"\n                        );\n                    });\n                    this.emitLine(\n                        `default: throw std::runtime_error(\"Unexpected value in enumeration \\\\\"${enumName}\\\\\": \" + std::to_string(static_cast<int>(x)));`\n                    );\n                });\n            }\n        );\n    }\n\n    protected emitTopLevelTypedef(t: Type, name: Name): void {\n        this.emitLine(\n            \"using \",\n            name,\n            \" = \",\n            this.cppType(\n                t,\n                {\n                    needsForwardIndirection: true,\n                    needsOptionalIndirection: true,\n                    inJsonNamespace: false\n                },\n                true,\n                false,\n                false\n            ),\n            \";\"\n        );\n    }\n\n    protected emitAllUnionFunctions(): void {\n        this.forEachUniqueUnion(\n            \"leading-and-interposing\",\n            u =>\n                this.sourcelikeToString(\n                    this.cppTypeInOptional(\n                        removeNullFromUnion(u, true)[1],\n                        {\n                            needsForwardIndirection: false,\n                            needsOptionalIndirection: false,\n                            inJsonNamespace: true\n                        },\n                        false,\n                        false\n                    )\n                ),\n            (u: UnionType) => this.emitUnionFunctions(u)\n        );\n    }\n\n    protected emitAllUnionHeaders(): void {\n        this.forEachUniqueUnion(\n            \"interposing\",\n            u =>\n                this.sourcelikeToString(\n                    this.cppTypeInOptional(\n                        removeNullFromUnion(u, true)[1],\n                        {\n                            needsForwardIndirection: false,\n                            needsOptionalIndirection: false,\n                            inJsonNamespace: true\n                        },\n                        false,\n                        false\n                    )\n                ),\n            (u: UnionType) => this.emitUnionHeaders(u)\n        );\n    }\n\n    protected emitOptionalHelpers(): void {\n        this.emitLine(\"#ifndef NLOHMANN_OPT_HELPER\");\n        this.emitLine(\"#define NLOHMANN_OPT_HELPER\");\n\n        this.emitNamespaces([\"nlohmann\"], () => {\n            const emitAdlStruct = (optType: string, factory: string): void => {\n                this.emitLine(\"template <typename T>\");\n                this.emitBlock([\"struct adl_serializer<\", optType, \"<T>>\"], true, () => {\n                    this.emitBlock(\n                        [\"static void to_json(json & j, \", this.withConst([optType, \"<T>\"]), \" & opt)\"],\n                        false,\n                        () => {\n                            this.emitLine(\"if (!opt) j = nullptr; else j = *opt;\");\n                        }\n                    );\n\n                    this.ensureBlankLine();\n\n                    this.emitBlock(\n                        [\"static \", optType, \"<T> from_json(\", this.withConst(\"json\"), \" & j)\"],\n                        false,\n                        () => {\n                            this.emitLine(\n                                `if (j.is_null()) return ${factory}<T>(); else return ${factory}<T>(j.get<T>());`\n                            );\n                        }\n                    );\n                });\n            };\n\n            emitAdlStruct(this.optionalTypeHeap(), this.optionalFactoryHeap());\n            emitAdlStruct(this.optionalTypeStack(), this.optionalFactoryStack());\n        });\n\n        this.emitLine(\"#endif\");\n    }\n\n    protected emitDeclaration(decl: Declaration): void {\n        if (decl.kind === \"forward\") {\n            if (this._options.codeFormat) {\n                this.emitLine(\"class \", this.nameForNamedType(decl.type), \";\");\n            } else {\n                this.emitLine(\"struct \", this.nameForNamedType(decl.type), \";\");\n            }\n        } else if (decl.kind === \"define\") {\n            const type = decl.type;\n            const name = this.nameForNamedType(type);\n            if (type instanceof ClassType) {\n                this.emitClass(type, name);\n            } else if (type instanceof EnumType) {\n                this.emitEnum(type, name);\n            } else if (type instanceof UnionType) {\n                this.emitUnionTypedefs(type, name);\n            } else {\n                panic(`Cannot declare type ${type.kind}`);\n            }\n        } else {\n            assertNever(decl.kind);\n        }\n    }\n\n    protected emitGetterSetter(t: string, getterName: string, setterName: string, memberName: string): void {\n        this.emitLine(\"void \", setterName, \"(\", t, \" \", memberName, \") { this->\", memberName, \" = \", memberName, \"; }\");\n        this.emitLine(\"auto \", getterName, \"() const { return \", memberName, \"; }\");\n    }\n\n    protected emitNumericCheckConstraints(\n        checkConst: string,\n        classConstraint: string,\n        getterMinValue: string,\n        getterMaxValue: string,\n        cppType: string\n    ): void {\n        this.emitBlock(\n            [\n                \"inline void \",\n                checkConst,\n                \"(\",\n                this._stringType.getConstType(),\n                \" name, \",\n                this.withConst(classConstraint),\n                \" & c, \",\n                cppType,\n                \" value)\"\n            ],\n            false,\n            () => {\n                this.emitBlock(\n                    [\"if (c.\", getterMinValue, \"() != \", this._nulloptType, \" && value < *c.\", getterMinValue, \"())\"],\n                    false,\n                    () => {\n                        this.emitLine(\n                            \"throw \",\n                            this.lookupGlobalName(GlobalNames.ValueTooLowException),\n                            \" (\",\n                            this._stringType.createStringLiteral([\"Value too low for \"]),\n                            \" + name + \",\n                            this._stringType.createStringLiteral([\" (\"]),\n                            \" + \",\n                            this._stringType.wrapToString([\"value\"]),\n                            \" + \",\n                            this._stringType.createStringLiteral([\"<\"]),\n                            \" + \",\n                            this._stringType.wrapToString([\"*c.\", getterMinValue, \"()\"]),\n                            \" + \",\n                            this._stringType.createStringLiteral([\")\"]),\n                            \");\"\n                        );\n                    }\n                );\n                this.ensureBlankLine();\n\n                this.emitBlock(\n                    [\"if (c.\", getterMaxValue, \"() != \", this._nulloptType, \" && value > *c.\", getterMaxValue, \"())\"],\n                    false,\n                    () => {\n                        this.emitLine(\n                            \"throw \",\n                            this.lookupGlobalName(GlobalNames.ValueTooHighException),\n                            \" (\",\n                            this._stringType.createStringLiteral([\"Value too high for \"]),\n                            \" + name + \",\n                            this._stringType.createStringLiteral([\" (\"]),\n                            \" + \",\n                            this._stringType.wrapToString([\"value\"]),\n                            \" + \",\n                            this._stringType.createStringLiteral([\">\"]),\n                            \" + \",\n                            this._stringType.wrapToString([\"*c.\", getterMaxValue, \"()\"]),\n                            \" + \",\n                            this._stringType.createStringLiteral([\")\"]),\n                            \");\"\n                        );\n                    }\n                );\n                this.ensureBlankLine();\n            }\n        );\n        this.ensureBlankLine();\n    }\n\n    protected emitConstraintClasses(): void {\n        const ourQualifier = this.ourQualifier(false) as string;\n\n        const getterMinIntValue = this.lookupMemberName(MemberNames.GetMinIntValue);\n        const getterMaxIntValue = this.lookupMemberName(MemberNames.GetMaxIntValue);\n        const getterMinDoubleValue = this.lookupMemberName(MemberNames.GetMinDoubleValue);\n        const getterMaxDoubleValue = this.lookupMemberName(MemberNames.GetMaxDoubleValue);\n        const getterMinLength = this.lookupMemberName(MemberNames.GetMinLength);\n        const getterMaxLength = this.lookupMemberName(MemberNames.GetMaxLength);\n        const getterPattern = this.lookupMemberName(MemberNames.GetPattern);\n        const classConstraint = this.lookupGlobalName(GlobalNames.ClassMemberConstraints);\n\n        this.emitBlock([\"class \", classConstraint], true, () => {\n            this.emitLine(\"private:\");\n            const constraintMembers: ConstraintMember[] = this.getConstraintMembers();\n            for (const member of constraintMembers) {\n                this.emitMember([this._optionalType, \"<\", member.cppType, \">\"], this.lookupMemberName(member.name));\n            }\n\n            this.ensureBlankLine();\n            this.emitLine(\"public:\");\n            this.emitLine(classConstraint, \"(\");\n            this.indent(() => {\n                this.iterableForEach(constraintMembers, ({ name, cppType }, pos) => {\n                    const comma = pos === \"first\" || pos === \"middle\" ? \",\" : [];\n                    this.emitLine(this._optionalType, \"<\", cppType, \"> \", this.lookupMemberName(name), comma);\n                });\n            });\n\n            const args = constraintMembers.map(({ name }) => {\n                const member = this.lookupMemberName(name);\n                return [member, \"(\", member, \")\"];\n            });\n            this.emitLine(\") : \", arrayIntercalate([\", \"], args), \" {}\");\n\n            this.emitLine(classConstraint, \"() = default;\");\n            this.emitLine(\"virtual ~\", classConstraint, \"() = default;\");\n            for (const member of constraintMembers) {\n                this.ensureBlankLine();\n                this.emitGetterSetter(\n                    withDefault(member.cppConstType, member.cppType),\n                    this.lookupMemberName(member.getter),\n                    this.lookupMemberName(member.setter),\n                    this.lookupMemberName(member.name)\n                );\n            }\n        });\n        this.ensureBlankLine();\n\n        const classConstEx = this.lookupGlobalName(GlobalNames.ClassMemberConstraintException);\n        this.emitBlock([\"class \", classConstEx, \" : public std::runtime_error\"], true, () => {\n            this.emitLine(\"public:\");\n            this.emitLine(\n                classConstEx,\n                \"(\",\n                this._stringType.getConstType(),\n                \" msg) : std::runtime_error(\",\n                this._stringType.wrapEncodingChange(\n                    [ourQualifier],\n                    this._stringType.getType(),\n                    this.NarrowString.getType(),\n                    [\"msg\"]\n                ),\n                \") {}\"\n            );\n        });\n        this.ensureBlankLine();\n\n        const exceptions: GlobalNames[] = [\n            GlobalNames.ValueTooLowException,\n            GlobalNames.ValueTooHighException,\n            GlobalNames.ValueTooShortException,\n            GlobalNames.ValueTooLongException,\n            GlobalNames.InvalidPatternException\n        ];\n\n        for (const ex of exceptions) {\n            const name = this.lookupGlobalName(ex);\n            this.emitBlock([\"class \", name, \" : public \", classConstEx], true, () => {\n                this.emitLine(\"public:\");\n                this.emitLine(name, \"(\", this._stringType.getConstType(), \" msg) : \", classConstEx, \"(msg) {}\");\n            });\n            this.ensureBlankLine();\n        }\n\n        const checkConst = this.lookupGlobalName(GlobalNames.CheckConstraint);\n        this.emitNumericCheckConstraints(checkConst, classConstraint, getterMinIntValue, getterMaxIntValue, \"int64_t\");\n        this.emitNumericCheckConstraints(\n            checkConst,\n            classConstraint,\n            getterMinDoubleValue,\n            getterMaxDoubleValue,\n            \"double\"\n        );\n\n        this.emitBlock(\n            [\n                \"inline void \",\n                checkConst,\n                \"(\",\n                this._stringType.getConstType(),\n                \" name, \",\n                this.withConst(classConstraint),\n                \" & c, \",\n                this._stringType.getConstType(),\n                \" value)\"\n            ],\n            false,\n            () => {\n                this.emitBlock(\n                    [\n                        \"if (c.\",\n                        getterMinLength,\n                        \"() != \",\n                        this._nulloptType,\n                        \" && value.length() < *c.\",\n                        getterMinLength,\n                        \"())\"\n                    ],\n                    false,\n                    () => {\n                        this.emitLine(\n                            \"throw \",\n                            this.lookupGlobalName(GlobalNames.ValueTooShortException),\n                            \" (\",\n                            this._stringType.createStringLiteral([\"Value too short for \"]),\n                            \" + name + \",\n                            this._stringType.createStringLiteral([\" (\"]),\n                            \" + \",\n                            this._stringType.wrapToString([\"value.length()\"]),\n                            \" + \",\n                            this._stringType.createStringLiteral([\"<\"]),\n                            \" + \",\n                            this._stringType.wrapToString([\"*c.\", getterMinLength, \"()\"]),\n                            \" + \",\n                            this._stringType.createStringLiteral([\")\"]),\n                            \");\"\n                        );\n                    }\n                );\n                this.ensureBlankLine();\n\n                this.emitBlock(\n                    [\n                        \"if (c.\",\n                        getterMaxLength,\n                        \"() != \",\n                        this._nulloptType,\n                        \" && value.length() > *c.\",\n                        getterMaxLength,\n                        \"())\"\n                    ],\n                    false,\n                    () => {\n                        this.emitLine(\n                            \"throw \",\n                            this.lookupGlobalName(GlobalNames.ValueTooLongException),\n                            \" (\",\n                            this._stringType.createStringLiteral([\"Value too long for \"]),\n                            \" + name + \",\n                            this._stringType.createStringLiteral([\" (\"]),\n                            \" + \",\n                            this._stringType.wrapToString([\"value.length()\"]),\n                            \" + \",\n                            this._stringType.createStringLiteral([\">\"]),\n                            \" + \",\n                            this._stringType.wrapToString([\"*c.\", getterMaxLength, \"()\"]),\n                            \" + \",\n                            this._stringType.createStringLiteral([\")\"]),\n                            \");\"\n                        );\n                    }\n                );\n                this.ensureBlankLine();\n\n                this.emitBlock([\"if (c.\", getterPattern, \"() != \", this._nulloptType, \")\"], false, () => {\n                    this.emitLine(this._stringType.getSMatch(), \" result;\");\n                    this.emitLine(\n                        \"std::regex_search(value, result, \",\n                        this._stringType.getRegex(),\n                        \"( *c.\",\n                        getterPattern,\n                        \"() ));\"\n                    );\n                    this.emitBlock([\"if (result.empty())\"], false, () => {\n                        this.emitLine(\n                            \"throw \",\n                            this.lookupGlobalName(GlobalNames.InvalidPatternException),\n                            \" (\",\n                            this._stringType.createStringLiteral([\"Value doesn't match pattern for \"]),\n                            \" + name + \",\n                            this._stringType.createStringLiteral([\" (\"]),\n                            \" + value +\",\n                            this._stringType.createStringLiteral([\" != \"]),\n                            \" + *c.\",\n                            getterPattern,\n                            \"() + \",\n                            this._stringType.createStringLiteral([\")\"]),\n                            \");\"\n                        );\n                    });\n                });\n                this.ensureBlankLine();\n            }\n        );\n    }\n\n    protected emitHelperFunctions(): void {\n        this._stringType.emitHelperFunctions();\n\n        if (\n            this._options.codeFormat &&\n            iterableSome(this.typeGraph.allTypesUnordered(), t => constraintsForType(t) !== undefined)\n        ) {\n            this.emitConstraintClasses();\n            this.ensureBlankLine();\n        }\n\n        this.ensureBlankLine();\n\n        let untypedMacroName = \"NLOHMANN_UNTYPED_\";\n        let optionalMacroName = \"NLOHMANN_OPTIONAL_\";\n        this._namespaceNames.forEach(value => {\n            // We can't use upper name, because namespaces are case sensitive\n            untypedMacroName += value;\n            untypedMacroName += \"_\";\n\n            optionalMacroName += value;\n            optionalMacroName += \"_\";\n        });\n\n        untypedMacroName += \"HELPER\";\n        optionalMacroName += \"HELPER\";\n\n        this.emitLine(`#ifndef ${untypedMacroName}`);\n        this.emitLine(`#define ${untypedMacroName}`);\n\n        this.emitBlock(\n            [\"inline json get_untyped(\", this.withConst(\"json\"), \" & j, \", this.withConst(\"char\"), \" * property)\"],\n            false,\n            () => {\n                this.emitBlock([\"if (j.find(property) != j.end())\"], false, () => {\n                    this.emitLine(\"return j.at(property).get<json>();\");\n                });\n                this.emitLine(\"return json();\");\n            }\n        );\n\n        this.ensureBlankLine();\n\n        this.emitBlock(\n            [\"inline json get_untyped(\", this.withConst(\"json\"), \" & j, std::string property)\"],\n            false,\n            () => {\n                this.emitLine(\"return get_untyped(j, property.data());\");\n            }\n        );\n\n        this.emitLine(\"#endif\");\n\n        this.ensureBlankLine();\n\n        if (this.haveUnions || this.haveOptionalProperties) {\n            this.ensureBlankLine();\n\n            this.emitLine(`#ifndef ${optionalMacroName}`);\n            this.emitLine(`#define ${optionalMacroName}`);\n\n            const emitGetOptional = (optionalType: string, label: string): void => {\n                this.emitLine(\"template <typename T>\");\n                this.emitBlock(\n                    [\n                        \"inline \",\n                        optionalType,\n                        `<T> get_${label}_optional(`,\n                        this.withConst(\"json\"),\n                        \" & j, \",\n                        this.withConst(\"char\"),\n                        \" * property)\"\n                    ],\n                    false,\n                    () => {\n                        this.emitLine([\"auto it = j.find(property);\"]);\n                        this.emitBlock([\"if (it != j.end() && !it->is_null())\"], false, () => {\n                            this.emitLine(\"return j.at(property).get<\", optionalType, \"<T>>();\");\n                        });\n                        this.emitLine(\"return \", optionalType, \"<T>();\");\n                    }\n                );\n\n                this.ensureBlankLine();\n\n                this.emitLine(\"template <typename T>\");\n                this.emitBlock(\n                    [\n                        \"inline \",\n                        optionalType,\n                        `<T> get_${label}_optional(`,\n                        this.withConst(\"json\"),\n                        \" & j, std::string property)\"\n                    ],\n                    false,\n                    () => {\n                        this.emitLine(`return get_${label}_optional<T>(j, property.data());`);\n                    }\n                );\n            };\n\n            emitGetOptional(this.optionalTypeHeap(), \"heap\");\n            emitGetOptional(this.optionalTypeStack(), \"stack\");\n\n            this.emitLine(\"#endif\");\n\n            this.ensureBlankLine();\n        }\n    }\n\n    protected emitExtraIncludes(): void {\n        this.ensureBlankLine();\n\n        if (this._options.codeFormat) {\n            if (this._options.boost) {\n                this.emitInclude(true, \"boost/optional.hpp\");\n            } else {\n                this.emitInclude(true, \"optional\");\n            }\n\n            this.emitInclude(true, \"stdexcept\");\n            this.emitInclude(true, \"regex\");\n        }\n\n        if (this._options.wstring) {\n            this.emitInclude(true, \"codecvt\");\n            this.emitInclude(true, \"locale\");\n        }\n\n        // Include unordered_map if contains large enums\n        if (Array.from(this.enums).some(enumType => this.isLargeEnum(enumType))) {\n            this.emitInclude(true, \"unordered_map\");\n        }\n\n        this.ensureBlankLine();\n    }\n\n    protected emitHelper(): void {\n        this.startFile(\"helper.hpp\", false);\n\n        this.emitExtraIncludes();\n\n        this.emitInclude(true, \"sstream\");\n        this.ensureBlankLine();\n        this.emitNamespaces(this._namespaceNames, () => {\n            this.emitLine(\"using nlohmann::json;\");\n            this.ensureBlankLine();\n            this.emitHelperFunctions();\n        });\n\n        if (this.haveUnions || this.haveOptionalProperties) {\n            this.ensureBlankLine();\n            this.emitOptionalHelpers();\n        }\n\n        this.finishFile();\n    }\n\n    protected emitTypes(): void {\n        if (!this._options.justTypes) {\n            this.emitLine(\"using nlohmann::json;\");\n            this.ensureBlankLine();\n            this.emitHelperFunctions();\n        }\n\n        this.forEachDeclaration(\"interposing\", decl => this.emitDeclaration(decl));\n        if (this._options.justTypes) return;\n        this.forEachTopLevel(\n            \"leading\",\n            (t: Type, name: Name) => this.emitTopLevelTypedef(t, name),\n            t => this.namedTypeToNameForTopLevel(t) === undefined\n        );\n    }\n\n    protected gatherUserNamespaceForwardDecls(): Sourcelike[] {\n        return this.gatherSource(() => {\n            this.forEachObject(\"leading-and-interposing\", (_: unknown, className: Name) =>\n                this.emitClassHeaders(className)\n            );\n\n            this.forEachEnum(\"leading-and-interposing\", (_: unknown, enumName: Name) => this.emitEnumHeaders(enumName));\n        });\n    }\n\n    protected gatherNlohmannNamespaceForwardDecls(): Sourcelike[] {\n        return this.gatherSource(() => {\n            this.forEachTopLevel(\"leading-and-interposing\", (t: Type, className: Name) =>\n                this.emitTopLevelHeaders(t, className)\n            );\n\n            this.ensureBlankLine();\n\n            this.emitAllUnionHeaders();\n        });\n    }\n\n    protected emitUserNamespaceImpls(): void {\n        this.forEachObject(\"leading-and-interposing\", (c: ClassType, className: Name) =>\n            this.emitClassFunctions(c, className)\n        );\n\n        this.forEachEnum(\"leading-and-interposing\", (e: EnumType, enumName: Name) =>\n            this.emitEnumFunctions(e, enumName)\n        );\n    }\n\n    protected emitNlohmannNamespaceImpls(): void {\n        this.forEachTopLevel(\n            \"leading-and-interposing\",\n            (t: Type, name: Name) => this.emitTopLevelFunction(t, name),\n            t => this.namedTypeToNameForTopLevel(t) === undefined\n        );\n\n        this.ensureBlankLine();\n\n        this.emitAllUnionFunctions();\n    }\n\n    protected emitGenerators(): void {\n        if (this._options.justTypes) {\n            let didEmit = false;\n            const gathered = this.gatherSource(() =>\n                this.emitNamespaces(this._namespaceNames, () => {\n                    didEmit = this.forEachTopLevel(\n                        \"none\",\n                        (t: Type, name: Name) => this.emitTopLevelTypedef(t, name),\n                        t => this.namedTypeToNameForTopLevel(t) === undefined\n                    );\n                })\n            );\n            if (didEmit) {\n                this.emitGatheredSource(gathered);\n                this.ensureBlankLine();\n            }\n        } else {\n            const userNamespaceForwardDecls = this.gatherUserNamespaceForwardDecls();\n            const nlohmannNamespaceForwardDecls = this.gatherNlohmannNamespaceForwardDecls();\n\n            if (userNamespaceForwardDecls.length === 0 && nlohmannNamespaceForwardDecls.length > 0) {\n                this.emitNamespaces([\"nlohmann\"], () => {\n                    this.emitGatheredSource(nlohmannNamespaceForwardDecls);\n                    this.emitNlohmannNamespaceImpls();\n                });\n            } else if (userNamespaceForwardDecls.length > 0 && nlohmannNamespaceForwardDecls.length === 0) {\n                this.emitNamespaces(this._namespaceNames, () => {\n                    this.emitGatheredSource(userNamespaceForwardDecls);\n                    this.emitUserNamespaceImpls();\n                });\n            } else if (userNamespaceForwardDecls.length > 0 && nlohmannNamespaceForwardDecls.length > 0) {\n                this.emitNamespaces(this._namespaceNames, () => {\n                    this.emitGatheredSource(userNamespaceForwardDecls);\n                });\n                this.emitNamespaces([\"nlohmann\"], () => {\n                    this.emitGatheredSource(nlohmannNamespaceForwardDecls);\n                });\n                this.emitNamespaces(this._namespaceNames, () => {\n                    this.emitUserNamespaceImpls();\n                });\n                this.emitNamespaces([\"nlohmann\"], () => {\n                    this.emitNlohmannNamespaceImpls();\n                });\n            }\n        }\n    }\n\n    protected emitSingleSourceStructure(proposedFilename: string): void {\n        this.startFile(proposedFilename);\n        this._generatedFiles.add(proposedFilename);\n\n        this.emitExtraIncludes();\n\n        if (this._options.justTypes) {\n            this.emitTypes();\n        } else {\n            if (!this._options.justTypes && this.haveNamedTypes && (this.haveUnions || this.haveOptionalProperties)) {\n                this.emitOptionalHelpers();\n                this.ensureBlankLine();\n            }\n\n            this.emitNamespaces(this._namespaceNames, () => this.emitTypes());\n        }\n\n        this.ensureBlankLine();\n\n        this.emitGenerators();\n\n        this.finishFile();\n    }\n\n    protected updateIncludes(isClassMember: boolean, includes: IncludeMap, propertyType: Type, _defName: string): void {\n        const propTypes = this.generatedTypes(isClassMember, propertyType);\n\n        for (const t of propTypes) {\n            const typeName = this.sourcelikeToString(t.name);\n\n            const propRecord: IncludeRecord = { kind: undefined, typeKind: undefined };\n\n            if (t.type instanceof ClassType) {\n                /**\n                 * Ok. We can NOT forward declare direct class members, e.g. a class type is included\n                 * at level#0. HOWEVER if it is not a direct class member (e.g. std::shared_ptr<Class>),\n                 * - level > 0 - then we can SURELY forward declare it.\n                 */\n                propRecord.typeKind = \"class\";\n                propRecord.kind = t.level === 0 ? IncludeKind.Include : IncludeKind.ForwardDeclare;\n                if (t.forceInclude) {\n                    propRecord.kind = IncludeKind.Include;\n                }\n            } else if (t.type instanceof EnumType) {\n                propRecord.typeKind = \"enum\";\n                propRecord.kind = IncludeKind.ForwardDeclare;\n            } else if (t.type instanceof UnionType) {\n                propRecord.typeKind = \"union\";\n                /** Recurse into the union */\n                const [maybeNull] = removeNullFromUnion(t.type, true);\n                if (maybeNull !== undefined) {\n                    /** Houston this is a variant, include it */\n                    propRecord.kind = IncludeKind.Include;\n                } else {\n                    if (t.forceInclude) {\n                        propRecord.kind = IncludeKind.Include;\n                    } else {\n                        propRecord.kind = IncludeKind.ForwardDeclare;\n                    }\n                }\n            }\n\n            if (includes.has(typeName)) {\n                const incKind = includes.get(typeName);\n                /**\n                 * If we already include the type as typed include,\n                 * do not write it over with forward declare\n                 */\n                if (incKind !== undefined && incKind.kind === IncludeKind.ForwardDeclare) {\n                    includes.set(typeName, propRecord);\n                }\n            } else {\n                includes.set(typeName, propRecord);\n            }\n        }\n    }\n\n    protected emitIncludes(c: ClassType | UnionType | EnumType, defName: string): void {\n        /**\n         * Need to generate \"includes\", in terms 'c' has members, which\n         * are defined by others\n         */\n        const includes: IncludeMap = new Map();\n\n        if (c instanceof UnionType) {\n            this.updateIncludes(false, includes, c, defName);\n        } else if (c instanceof ClassType) {\n            this.forEachClassProperty(c, \"none\", (_name, _jsonName, property) => {\n                this.updateIncludes(true, includes, property.type, defName);\n            });\n        }\n\n        if (includes.size !== 0) {\n            let numForwards = 0;\n            let numIncludes = 0;\n            includes.forEach((rec: IncludeRecord, name: string) => {\n                /** Don't bother including the one we are defining */\n                if (name === defName) {\n                    return;\n                }\n\n                if (rec.kind !== IncludeKind.ForwardDeclare) {\n                    this.emitInclude(false, [name, \".hpp\"]);\n                    numIncludes++;\n                } else {\n                    numForwards++;\n                }\n            });\n\n            if (numIncludes > 0) {\n                this.ensureBlankLine();\n            }\n\n            if (numForwards > 0) {\n                this.emitNamespaces(this._namespaceNames, () => {\n                    includes.forEach((rec: IncludeRecord, name: string) => {\n                        /** Don't bother including the one we are defining */\n                        if (name === defName) {\n                            return;\n                        }\n\n                        if (rec.kind !== IncludeKind.ForwardDeclare) {\n                            return;\n                        }\n\n                        if (rec.typeKind === \"class\" || rec.typeKind === \"union\") {\n                            if (this._options.codeFormat) {\n                                this.emitLine(\"class \", name, \";\");\n                            } else {\n                                this.emitLine(\"struct \", name, \";\");\n                            }\n                        } else if (rec.typeKind === \"enum\") {\n                            this.emitLine(\"enum class \", name, \" : \", this._enumType, \";\");\n                        } else {\n                            panic(`Invalid type \"${rec.typeKind}\" to forward declare`);\n                        }\n                    });\n                });\n            }\n\n            this.ensureBlankLine();\n        }\n    }\n\n    protected emitDefinition(d: ClassType | EnumType | UnionType, defName: Name): void {\n        const name = `${this.sourcelikeToString(defName)}.hpp`;\n        this.startFile(name, true);\n        this._generatedFiles.add(name);\n\n        this.emitIncludes(d, this.sourcelikeToString(defName));\n\n        this.emitNamespaces(this._namespaceNames, () => {\n            this.emitDescription(this.descriptionForType(d));\n            this.ensureBlankLine();\n            this.emitLine(\"using nlohmann::json;\");\n            this.ensureBlankLine();\n            if (d instanceof ClassType) {\n                this.emitClass(d, defName);\n            } else if (d instanceof EnumType) {\n                this.emitEnum(d, defName);\n            } else if (d instanceof UnionType) {\n                this.emitUnionTypedefs(d, defName);\n            }\n        });\n\n        this.finishFile();\n    }\n\n    protected emitMultiSourceStructure(proposedFilename: string): void {\n        if (!this._options.justTypes && this.haveNamedTypes) {\n            this.emitHelper();\n\n            this.startFile(\"Generators.hpp\", true);\n\n            this._allTypeNames.forEach(t => {\n                this.emitInclude(false, [t, \".hpp\"]);\n            });\n\n            this.ensureBlankLine();\n            this.emitGenerators();\n\n            this.finishFile();\n        }\n\n        this.forEachNamedType(\n            \"leading-and-interposing\",\n            (c: ClassType, n: Name) => {\n                this.emitDefinition(c, n);\n            },\n            (e, n) => {\n                this.emitDefinition(e, n);\n            },\n            (u, n) => {\n                this.emitDefinition(u, n);\n            }\n        );\n\n        /**\n         * If for some reason we have not generated anything,\n         * it means that a unnamed type has been generated - or nothing.\n         */\n        if (!this._generatedFiles.has(proposedFilename)) {\n            if (!this.haveNamedTypes) {\n                this.emitHelper();\n            }\n\n            this.startFile(proposedFilename);\n\n            this._generatedFiles.forEach(f => {\n                this.emitInclude(false, f);\n            });\n\n            this.emitNamespaces(this._namespaceNames, () => {\n                this.forEachTopLevel(\n                    \"leading\",\n                    (t: Type, name: Name) => this.emitTopLevelTypedef(t, name),\n                    t => this.namedTypeToNameForTopLevel(t) === undefined\n                );\n            });\n\n            this.finishFile();\n        }\n    }\n\n    protected emitSourceStructure(proposedFilename: string): void {\n        this._generatedFiles.clear();\n\n        /** Gather all the unique/custom types used by the schema */\n        this._allTypeNames.clear();\n        this.forEachDeclaration(\"none\", decl => {\n            const definedTypes = directlyReachableTypes<string>(decl.type, t => {\n                if (isNamedType(t) && (t instanceof ClassType || t instanceof EnumType || t instanceof UnionType)) {\n                    return new Set([\n                        this.sourcelikeToString(\n                            this.cppType(\n                                t,\n                                {\n                                    needsForwardIndirection: false,\n                                    needsOptionalIndirection: false,\n                                    inJsonNamespace: false\n                                },\n                                true,\n                                false,\n                                false\n                            )\n                        )\n                    ]);\n                }\n\n                return null;\n            });\n\n            this._allTypeNames = setUnion(definedTypes, this._allTypeNames);\n        });\n\n        if (this._options.typeSourceStyle) {\n            this.emitSingleSourceStructure(proposedFilename);\n        } else {\n            this.emitMultiSourceStructure(proposedFilename);\n        }\n    }\n\n    protected isConversionRequired(t: Type): boolean {\n        const originalType = this.cppType(\n            t,\n            {\n                needsForwardIndirection: true,\n                needsOptionalIndirection: true,\n                inJsonNamespace: true\n            },\n            false,\n            false,\n            false\n        );\n\n        const newType = this.cppType(\n            t,\n            {\n                needsForwardIndirection: true,\n                needsOptionalIndirection: true,\n                inJsonNamespace: true\n            },\n            false,\n            true,\n            false\n        );\n\n        return originalType !== newType;\n    }\n\n    public NarrowString = new (class extends BaseString implements StringType {\n        public constructor() {\n            super(\n                \"std::string\",\n                \"const std::string & \",\n                \"std::smatch\",\n                \"std::regex\",\n                \"\",\n                new WrappingCode([\"std::to_string(\"], [\")\"]),\n                \"\",\n                \"\"\n            );\n        }\n\n        public wrapEncodingChange(\n            _qualifier: Sourcelike[],\n            _fromType: Sourcelike,\n            _toType: Sourcelike,\n            inner: Sourcelike\n        ): Sourcelike {\n            return inner;\n        }\n\n        public emitHelperFunctions(): void {\n            return;\n        }\n    })();\n\n    public WideString = new (class extends BaseString implements StringType {\n        public constructor(public superThis: CPlusPlusRenderer) {\n            super(\n                \"std::wstring\",\n                \"const std::wstring & \",\n                \"std::wsmatch\",\n                \"std::wregex\",\n                \"L\",\n                new WrappingCode([\"std::to_wstring(\"], [\")\"]),\n                \"Utf16_Utf8\",\n                \"convert\"\n            );\n        }\n\n        public wrapEncodingChange(\n            qualifier: Sourcelike[],\n            fromType: Sourcelike,\n            toType: Sourcelike,\n            inner: Sourcelike\n        ): Sourcelike {\n            if (this.superThis.sourcelikeToString(fromType) === this.superThis.sourcelikeToString(toType)) {\n                return inner;\n            }\n\n            return [\n                addQualifier(qualifier, [this._encodingClass]),\n                \"<\",\n                fromType,\n                \", \",\n                toType,\n                \">::\",\n                this._encodingFunction,\n                \"(\",\n                inner,\n                \")\"\n            ];\n        }\n\n        public emitHelperFunctions(): void {\n            this.superThis.emitLine(\"template<typename T>\");\n            this.superThis.emitLine(\"struct tag {};\");\n            this.superThis.ensureBlankLine();\n\n            this.superThis.emitLine(\"template<typename fromType, typename toType>\");\n            this.superThis.emitBlock([\"class Utf16_Utf8\"], true, () => {\n                this.superThis.emitLine(\"private:\");\n                this.superThis.emitLine(\"template<typename TF, typename TT>\");\n                this.superThis.emitBlock(\n                    [\"static toType convert(tag<std::shared_ptr<TF> >, tag<std::shared_ptr<TT> >, fromType ptr)\"],\n                    false,\n                    () => {\n                        this.superThis.emitLine(\n                            \"if (ptr == nullptr) return std::unique_ptr<TT>(); else return std::unique_ptr<TT>(new TT(Utf16_Utf8<TF,TT>::convert(*ptr)));\"\n                        );\n                    }\n                );\n                this.superThis.ensureBlankLine();\n\n                this.superThis.emitLine(\"template<typename TF, typename TT>\");\n                this.superThis.emitBlock(\n                    [\"static toType convert(tag<std::vector<TF> >, tag<std::vector<TT> >, fromType v)\"],\n                    false,\n                    () => {\n                        this.superThis.emitLine(\"auto it = v.begin();\");\n                        this.superThis.emitLine(\"auto newVector = std::vector<TT>();\");\n                        this.superThis.emitBlock([\"while (it != v.end())\"], false, () => {\n                            this.superThis.emitLine(\"newVector.push_back(Utf16_Utf8<TF,TT>::convert(*it));\");\n                            this.superThis.emitLine(\"it++;\");\n                        });\n                        this.superThis.emitLine(\"return newVector;\");\n                    }\n                );\n                this.superThis.ensureBlankLine();\n\n                this.superThis.emitLine(\"template<typename KF, typename VF, typename KT, typename VT>\");\n                this.superThis.emitBlock(\n                    [\"static toType convert(tag<std::map<KF,VF> >, tag<std::map<KT,VT> >, fromType m)\"],\n                    false,\n                    () => {\n                        this.superThis.emitLine(\"auto it = m.begin();\");\n                        this.superThis.emitLine(\"auto newMap = std::map<KT, VT>();\");\n                        this.superThis.emitBlock([\"while (it != m.end())\"], false, () => {\n                            this.superThis.emitLine(\n                                \"newMap.insert(std::pair<KT, VT>(Utf16_Utf8<KF, KT>::convert(it->first), Utf16_Utf8<VF, VT>::convert(it->second)));\"\n                            );\n                            this.superThis.emitLine(\"it++;\");\n                        });\n                        this.superThis.emitLine(\"return newMap;\");\n                    }\n                );\n                this.superThis.ensureBlankLine();\n\n                this.superThis.emitLine(\"template<typename TF, typename TT>\");\n                this.superThis.emitBlock([\"static fromType convert(tag<TF>, tag<TT>, fromType from)\"], false, () => {\n                    this.superThis.emitLine(\"return from;\");\n                });\n                this.superThis.ensureBlankLine();\n\n                this.superThis.emitBlock(\n                    [\"static std::wstring convert(tag<std::string>, tag<std::wstring>, std::string str)\"],\n                    false,\n                    () => {\n                        this.superThis.emitLine(\n                            \"return std::wstring_convert<std::codecvt_utf8_utf16<wchar_t, 0x10ffff, std::little_endian>, wchar_t>{}.from_bytes(str.data());\"\n                        );\n                    }\n                );\n                this.superThis.ensureBlankLine();\n\n                this.superThis.emitBlock(\n                    [\"static std::string convert(tag<std::wstring>, tag<std::string>, std::wstring str)\"],\n                    false,\n                    () => {\n                        this.superThis.emitLine(\n                            \"return std::wstring_convert<std::codecvt_utf8_utf16<wchar_t, 0x10ffff, std::little_endian>, wchar_t>{}.to_bytes(str.data());\"\n                        );\n                    }\n                );\n                this.superThis.ensureBlankLine();\n\n                this.superThis.emitLine(\"public:\");\n                this.superThis.emitBlock([\"static toType convert(fromType in)\"], false, () => {\n                    this.superThis.emitLine(\"return convert(tag<fromType>(), tag<toType>(), in);\");\n                });\n            });\n            this.superThis.ensureBlankLine();\n\n            this.superThis.emitLine(\"template<typename T>\");\n            this.superThis.emitBlock([\"std::wstring wdump(const T& j)\"], false, () => {\n                this.superThis.emitLine(\"std::ostringstream s;\");\n                this.superThis.emitLine(\"s << j;\");\n                this.superThis.emitLine(\n                    \"return \",\n                    this.superThis.ourQualifier(false),\n                    \"Utf16_Utf8<std::string, std::wstring>::convert(s.str()); \"\n                );\n            });\n            this.superThis.ensureBlankLine();\n        }\n    })(this);\n}\n","import { anyTypeIssueAnnotation, nullTypeIssueAnnotation } from \"../Annotation\";\nimport { ConvenienceRenderer, type ForbiddenWordsInfo } from \"../ConvenienceRenderer\";\nimport { type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { type Option } from \"../RendererOptions\";\nimport { type Sourcelike, maybeAnnotated } from \"../Source\";\nimport {\n    allLowerWordStyle,\n    combineWords,\n    escapeNonPrintableMapper,\n    firstUpperWordStyle,\n    intToHex,\n    isAscii,\n    isLetterOrUnderscore,\n    isLetterOrUnderscoreOrDigit,\n    isPrintable,\n    legalizeCharacters,\n    splitIntoWords,\n    utf32ConcatMap\n} from \"../support/Strings\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport { type ClassType, type EnumType, type Type, type UnionType } from \"../Type\";\nimport { type FixMeOptionsAnyType } from \"../types\";\nimport { matchType, nullableFromUnion, removeNullFromUnion } from \"../TypeUtils\";\n\nexport class CrystalTargetLanguage extends TargetLanguage {\n    protected makeRenderer(renderContext: RenderContext): CrystalRenderer {\n        return new CrystalRenderer(this, renderContext);\n    }\n\n    public constructor() {\n        super(\"Crystal\", [\"crystal\", \"cr\", \"crystallang\"], \"cr\");\n    }\n\n    protected get defaultIndentation(): string {\n        return \"  \";\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [];\n    }\n}\n\nconst keywords = [\n    \"Any\",\n    \"Array\",\n    \"Atomic\",\n    \"Bool\",\n    \"Channel\",\n    \"Char\",\n    \"Class\",\n    \"Enum\",\n    \"Enumerable\",\n    \"Event\",\n    \"Extern\",\n    \"Exception\",\n    \"File\",\n    \"Float\",\n    \"Float32\",\n    \"Float64\",\n    \"GC\",\n    \"GZip\",\n    \"Hash\",\n    \"HTML\",\n    \"HTTP\",\n    \"Int\",\n    \"Int128\",\n    \"Int16\",\n    \"Int32\",\n    \"Int64\",\n    \"Int8\",\n    \"Iterable\",\n    \"Link\",\n    \"Logger\",\n    \"Math\",\n    \"Mutex\",\n    \"Nil\",\n    \"Number\",\n    \"JSON\",\n    \"IO\",\n    \"Object\",\n    \"Pointer\",\n    \"Proc\",\n    \"Process\",\n    \"Range\",\n    \"Random\",\n    \"Regex\",\n    \"Reference\",\n    \"Set\",\n    \"Signal\",\n    \"Slice\",\n    \"Spec\",\n    \"StaticArray\",\n    \"String\",\n    \"Struct\",\n    \"Symbol\",\n    \"System\",\n    \"TCPServer\",\n    \"TCPSocket\",\n    \"Socket\",\n    \"Tempfile\",\n    \"Termios\",\n    \"Time\",\n    \"Tuple\",\n    \"ThreadLocal\",\n    \"UDPSocket\",\n    \"UInt128\",\n    \"UInt16\",\n    \"UInt32\",\n    \"UInt64\",\n    \"UInt8\",\n    \"Union\",\n    \"UNIXServer\",\n    \"UNIXSocket\",\n    \"UUID\",\n    \"URI\",\n    \"VaList\",\n    \"Value\",\n    \"Void\",\n    \"WeakRef\",\n    \"XML\",\n    \"YAML\",\n    \"Zip\",\n    \"Zlib\",\n    \"abstract\",\n    \"alias\",\n    \"as\",\n    \"as?\",\n    \"asm\",\n    \"begin\",\n    \"break\",\n    \"case\",\n    \"class\",\n    \"def\",\n    \"do\",\n    \"else\",\n    \"elsif\",\n    \"end\",\n    \"ensure\",\n    \"enum\",\n    \"extend\",\n    \"false\",\n    \"for\",\n    \"fun\",\n    \"if\",\n    \"in\",\n    \"include\",\n    \"instance_sizeof\",\n    \"is_a?\",\n    \"lib\",\n    \"macro\",\n    \"module\",\n    \"next\",\n    \"nil\",\n    \"nil?\",\n    \"of\",\n    \"out\",\n    \"pointerof\",\n    \"private\",\n    \"protected\",\n    \"require\",\n    \"rescue\",\n    \"return\",\n    \"select\",\n    \"self\",\n    \"sizeof\",\n    \"struct\",\n    \"super\",\n    \"then\",\n    \"true\",\n    \"type\",\n    \"typeof\",\n    \"uninitialized\",\n    \"union\",\n    \"unless\",\n    \"until\",\n    \"when\",\n    \"while\",\n    \"with\",\n    \"yield\"\n];\n\nfunction isAsciiLetterOrUnderscoreOrDigit(codePoint: number): boolean {\n    if (!isAscii(codePoint)) {\n        return false;\n    }\n\n    return isLetterOrUnderscoreOrDigit(codePoint);\n}\n\nfunction isAsciiLetterOrUnderscore(codePoint: number): boolean {\n    if (!isAscii(codePoint)) {\n        return false;\n    }\n\n    return isLetterOrUnderscore(codePoint);\n}\n\nconst legalizeName = legalizeCharacters(isAsciiLetterOrUnderscoreOrDigit);\n\nfunction crystalStyle(original: string, isSnakeCase: boolean): string {\n    const words = splitIntoWords(original);\n\n    const wordStyle = isSnakeCase ? allLowerWordStyle : firstUpperWordStyle;\n\n    const combined = combineWords(\n        words,\n        legalizeName,\n        wordStyle,\n        wordStyle,\n        wordStyle,\n        wordStyle,\n        isSnakeCase ? \"_\" : \"\",\n        isAsciiLetterOrUnderscore\n    );\n\n    return combined === \"_\" ? \"_underscore\" : combined;\n}\n\nconst snakeNamingFunction = funPrefixNamer(\"default\", (original: string) => crystalStyle(original, true));\nconst camelNamingFunction = funPrefixNamer(\"camel\", (original: string) => crystalStyle(original, false));\n\nfunction standardUnicodeCrystalEscape(codePoint: number): string {\n    if (codePoint <= 0xffff) {\n        return \"\\\\u{\" + intToHex(codePoint, 4) + \"}\";\n    } else {\n        return \"\\\\u{\" + intToHex(codePoint, 6) + \"}\";\n    }\n}\n\nconst crystalStringEscape = utf32ConcatMap(escapeNonPrintableMapper(isPrintable, standardUnicodeCrystalEscape));\n\nexport class CrystalRenderer extends ConvenienceRenderer {\n    public constructor(targetLanguage: TargetLanguage, renderContext: RenderContext) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return camelNamingFunction;\n    }\n\n    protected namerForObjectProperty(): Namer | null {\n        return snakeNamingFunction;\n    }\n\n    protected makeUnionMemberNamer(): Namer | null {\n        return camelNamingFunction;\n    }\n\n    protected makeEnumCaseNamer(): Namer | null {\n        return camelNamingFunction;\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return keywords;\n    }\n\n    protected forbiddenForObjectProperties(_c: ClassType, _className: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected forbiddenForUnionMembers(_u: UnionType, _unionName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected forbiddenForEnumCases(_e: EnumType, _enumName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected get commentLineStart(): string {\n        return \"# \";\n    }\n\n    private nullableCrystalType(t: Type, withIssues: boolean): Sourcelike {\n        return [this.crystalType(t, withIssues), \"?\"];\n    }\n\n    protected isImplicitCycleBreaker(t: Type): boolean {\n        const kind = t.kind;\n        return kind === \"array\" || kind === \"map\";\n    }\n\n    private crystalType(t: Type, withIssues = false): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => maybeAnnotated(withIssues, anyTypeIssueAnnotation, \"JSON::Any?\"),\n            _nullType => maybeAnnotated(withIssues, nullTypeIssueAnnotation, \"Nil\"),\n            _boolType => \"Bool\",\n            _integerType => \"Int32\",\n            _doubleType => \"Float64\",\n            _stringType => \"String\",\n            arrayType => [\"Array(\", this.crystalType(arrayType.items, withIssues), \")\"],\n            classType => this.nameForNamedType(classType),\n            mapType => [\"Hash(String, \", this.crystalType(mapType.values, withIssues), \")\"],\n            _enumType => \"String\",\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n\n                if (nullable !== null) return this.nullableCrystalType(nullable, withIssues);\n\n                const [hasNull] = removeNullFromUnion(unionType);\n\n                const name = this.nameForNamedType(unionType);\n\n                return hasNull !== null ? ([name, \"?\"] as Sourcelike) : name;\n            }\n        );\n    }\n\n    private breakCycle(t: Type, withIssues: boolean): Sourcelike {\n        return this.crystalType(t, withIssues);\n    }\n\n    private emitRenameAttribute(propName: Name, jsonName: string): void {\n        const escapedName = crystalStringEscape(jsonName);\n        const namesDiffer = this.sourcelikeToString(propName) !== escapedName;\n        if (namesDiffer) {\n            this.emitLine('@[JSON::Field(key: \"', escapedName, '\")]');\n        }\n    }\n\n    protected emitStructDefinition(c: ClassType, className: Name): void {\n        this.emitDescription(this.descriptionForType(c));\n\n        const structBody = (): void =>\n            this.forEachClassProperty(c, \"none\", (name, jsonName, prop) => {\n                this.ensureBlankLine();\n                this.emitDescription(this.descriptionForClassProperty(c, jsonName));\n                this.emitRenameAttribute(name, jsonName);\n                this.emitLine(\"property \", name, \" : \", this.crystalType(prop.type, true));\n            });\n\n        this.emitBlock([\"class \", className], structBody);\n    }\n\n    protected emitBlock(line: Sourcelike, f: () => void): void {\n        this.emitLine(line);\n        this.indent(() => {\n            this.emitLine(\"include JSON::Serializable\");\n        });\n        this.ensureBlankLine();\n        this.indent(f);\n        this.emitLine(\"end\");\n    }\n\n    protected emitEnum(line: Sourcelike, f: () => void): void {\n        this.emitLine(line);\n        this.indent(f);\n        this.emitLine(\"end\");\n    }\n\n    protected emitUnion(u: UnionType, unionName: Name): void {\n        const isMaybeWithSingleType = nullableFromUnion(u);\n\n        if (isMaybeWithSingleType !== null) {\n            return;\n        }\n\n        this.emitDescription(this.descriptionForType(u));\n\n        const [, nonNulls] = removeNullFromUnion(u);\n\n        let types: Sourcelike[][] = [];\n        this.forEachUnionMember(u, nonNulls, \"none\", null, (_name, t) => {\n            const crystalType = this.breakCycle(t, true);\n            types.push([crystalType]);\n        });\n\n        this.emitLine([\n            \"alias \",\n            unionName,\n            \" = \",\n            types.map(r => r.map(sl => this.sourcelikeToString(sl))).join(\" | \")\n        ]);\n    }\n\n    protected emitTopLevelAlias(t: Type, name: Name): void {\n        this.emitLine(\"alias \", name, \" = \", this.crystalType(t));\n    }\n\n    protected emitLeadingComments(): void {\n        if (this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n            return;\n        }\n    }\n\n    protected emitSourceStructure(): void {\n        this.emitLeadingComments();\n        this.ensureBlankLine();\n        this.emitLine('require \"json\"');\n\n        this.forEachTopLevel(\n            \"leading\",\n            (t, name) => this.emitTopLevelAlias(t, name),\n            t => this.namedTypeToNameForTopLevel(t) === undefined\n        );\n\n        this.forEachObject(\"leading-and-interposing\", (c: ClassType, name: Name) => this.emitStructDefinition(c, name));\n        this.forEachUnion(\"leading-and-interposing\", (u, name) => this.emitUnion(u, name));\n    }\n}\n","import { arrayIntercalate } from \"collection-utils\";\nimport unicode from \"unicode-properties\";\n\nimport { anyTypeIssueAnnotation, nullTypeIssueAnnotation } from \"../Annotation\";\nimport { minMaxLengthForType, minMaxValueForType } from \"../attributes/Constraints\";\nimport { ConvenienceRenderer, type ForbiddenWordsInfo, inferredNameOrder } from \"../ConvenienceRenderer\";\nimport { DependencyName, type Name, type Namer, SimpleName, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport {\n    BooleanOption,\n    EnumOption,\n    type Option,\n    type OptionValues,\n    StringOption,\n    getOptionValues\n} from \"../RendererOptions\";\nimport { type Sourcelike, maybeAnnotated, modifySource } from \"../Source\";\nimport {\n    type WordInName,\n    camelCase,\n    combineWords,\n    firstUpperWordStyle,\n    splitIntoWords,\n    utf16LegalizeCharacters,\n    utf16StringEscape\n} from \"../support/Strings\";\nimport { assert, assertNever, defined, panic } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport {\n    ArrayDecodingTransformer,\n    ArrayEncodingTransformer,\n    ChoiceTransformer,\n    DecodingChoiceTransformer,\n    DecodingTransformer,\n    EncodingTransformer,\n    MinMaxLengthCheckTransformer,\n    MinMaxValueTransformer,\n    ParseStringTransformer,\n    StringMatchTransformer,\n    StringProducerTransformer,\n    StringifyTransformer,\n    type Transformation,\n    type Transformer,\n    UnionInstantiationTransformer,\n    UnionMemberMatchTransformer,\n    followTargetType,\n    transformationForType\n} from \"../Transformers\";\nimport {\n    ArrayType,\n    type ClassProperty,\n    ClassType,\n    EnumType,\n    type PrimitiveStringTypeKind,\n    type PrimitiveType,\n    type TransformedStringTypeKind,\n    type Type,\n    UnionType\n} from \"../Type\";\nimport { type StringTypeMapping } from \"../TypeBuilder\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { directlyReachableSingleNamedType, matchType, nullableFromUnion, removeNullFromUnion } from \"../TypeUtils\";\n\nexport enum Framework {\n    Newtonsoft = \"Newtonsoft\",\n    SystemTextJson = \"SystemTextJson\"\n}\n\nexport type Version = 5 | 6;\nexport interface OutputFeatures {\n    attributes: boolean;\n    helpers: boolean;\n}\n\nexport enum AccessModifier {\n    None = \"None\",\n    Public = \"Public\",\n    Internal = \"Internal\"\n}\n\nexport type CSharpTypeForAny = \"object\" | \"dynamic\";\n\nfunction noFollow(t: Type): Type {\n    return t;\n}\n\nfunction needTransformerForType(t: Type): \"automatic\" | \"manual\" | \"nullable\" | \"none\" {\n    if (t instanceof UnionType) {\n        const maybeNullable = nullableFromUnion(t);\n        if (maybeNullable === null) return \"automatic\";\n        if (needTransformerForType(maybeNullable) === \"manual\") return \"nullable\";\n        return \"none\";\n    }\n\n    if (t instanceof ArrayType) {\n        const itemsNeed = needTransformerForType(t.items);\n        if (itemsNeed === \"manual\" || itemsNeed === \"nullable\") return \"automatic\";\n        return \"none\";\n    }\n\n    if (t instanceof EnumType) return \"automatic\";\n    if (t.kind === \"double\") return minMaxValueForType(t) !== undefined ? \"manual\" : \"none\";\n    if (t.kind === \"integer-string\" || t.kind === \"bool-string\") return \"manual\";\n    if (t.kind === \"string\") {\n        return minMaxLengthForType(t) !== undefined ? \"manual\" : \"none\";\n    }\n\n    return \"none\";\n}\n\nfunction alwaysApplyTransformation(xf: Transformation): boolean {\n    const t = xf.targetType;\n    if (t instanceof EnumType) return true;\n    if (t instanceof UnionType) return nullableFromUnion(t) === null;\n    return false;\n}\n\n/**\n * The C# type for a given transformed string type.\n */\nfunction csTypeForTransformedStringType(t: PrimitiveType): Sourcelike {\n    switch (t.kind) {\n        case \"date-time\":\n            return \"DateTimeOffset\";\n        case \"uuid\":\n            return \"Guid\";\n        case \"uri\":\n            return \"Uri\";\n        default:\n            return panic(`Transformed string type ${t.kind} not supported`);\n    }\n}\n\nexport const cSharpOptions = {\n    framework: new EnumOption(\n        \"framework\",\n        \"Serialization framework\",\n        [\n            [\"NewtonSoft\", Framework.Newtonsoft],\n            [\"SystemTextJson\", Framework.SystemTextJson]\n        ],\n        \"NewtonSoft\"\n    ),\n    useList: new EnumOption(\"array-type\", \"Use T[] or List<T>\", [\n        [\"array\", false],\n        [\"list\", true]\n    ]),\n    dense: new EnumOption(\n        \"density\",\n        \"Property density\",\n        [\n            [\"normal\", false],\n            [\"dense\", true]\n        ],\n        \"normal\",\n        \"secondary\"\n    ),\n    // FIXME: Do this via a configurable named eventually.\n    namespace: new StringOption(\"namespace\", \"Generated namespace\", \"NAME\", \"QuickType\"),\n    version: new EnumOption<Version>(\n        \"csharp-version\",\n        \"C# version\",\n        [\n            [\"5\", 5],\n            [\"6\", 6]\n        ],\n        \"6\",\n        \"secondary\"\n    ),\n    virtual: new BooleanOption(\"virtual\", \"Generate virtual properties\", false),\n    typeForAny: new EnumOption<CSharpTypeForAny>(\n        \"any-type\",\n        'Type to use for \"any\"',\n        [\n            [\"object\", \"object\"],\n            [\"dynamic\", \"dynamic\"]\n        ],\n        \"object\",\n        \"secondary\"\n    ),\n    useDecimal: new EnumOption(\n        \"number-type\",\n        \"Type to use for numbers\",\n        [\n            [\"double\", false],\n            [\"decimal\", true]\n        ],\n        \"double\",\n        \"secondary\"\n    ),\n    features: new EnumOption(\"features\", \"Output features\", [\n        [\"complete\", { namespaces: true, helpers: true, attributes: true }],\n        [\"attributes-only\", { namespaces: true, helpers: false, attributes: true }],\n        [\"just-types-and-namespace\", { namespaces: true, helpers: false, attributes: false }],\n        [\"just-types\", { namespaces: true, helpers: false, attributes: false }]\n    ]),\n    baseclass: new EnumOption(\n        \"base-class\",\n        \"Base class\",\n        [\n            [\"EntityData\", \"EntityData\"],\n            [\"Object\", undefined]\n        ],\n        \"Object\",\n        \"secondary\"\n    ),\n    checkRequired: new BooleanOption(\"check-required\", \"Fail if required properties are missing\", false),\n    keepPropertyName: new BooleanOption(\"keep-property-name\", \"Keep original field name generate\", false)\n};\n\nexport class CSharpTargetLanguage extends TargetLanguage {\n    public constructor() {\n        super(\"C#\", [\"cs\", \"csharp\"], \"cs\");\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [\n            cSharpOptions.framework,\n            cSharpOptions.namespace,\n            cSharpOptions.version,\n            cSharpOptions.dense,\n            cSharpOptions.useList,\n            cSharpOptions.useDecimal,\n            cSharpOptions.typeForAny,\n            cSharpOptions.virtual,\n            cSharpOptions.features,\n            cSharpOptions.baseclass,\n            cSharpOptions.checkRequired,\n            cSharpOptions.keepPropertyName\n        ];\n    }\n\n    public get stringTypeMapping(): StringTypeMapping {\n        const mapping: Map<TransformedStringTypeKind, PrimitiveStringTypeKind> = new Map();\n        mapping.set(\"date\", \"date-time\");\n        mapping.set(\"time\", \"date-time\");\n        mapping.set(\"date-time\", \"date-time\");\n        mapping.set(\"uuid\", \"uuid\");\n        mapping.set(\"uri\", \"uri\");\n        mapping.set(\"integer-string\", \"integer-string\");\n        mapping.set(\"bool-string\", \"bool-string\");\n        return mapping;\n    }\n\n    public get supportsUnionsWithBothNumberTypes(): boolean {\n        return true;\n    }\n\n    public get supportsOptionalClassProperties(): boolean {\n        return true;\n    }\n\n    public needsTransformerForType(t: Type): boolean {\n        const need = needTransformerForType(t);\n        return need !== \"none\" && need !== \"nullable\";\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): ConvenienceRenderer {\n        const options = getOptionValues(cSharpOptions, untypedOptionValues);\n\n        switch (options.framework) {\n            case Framework.Newtonsoft:\n                return new NewtonsoftCSharpRenderer(\n                    this,\n                    renderContext,\n                    getOptionValues(newtonsoftCSharpOptions, untypedOptionValues)\n                );\n            case Framework.SystemTextJson:\n                return new SystemTextJsonCSharpRenderer(\n                    this,\n                    renderContext,\n                    getOptionValues(systemTextJsonCSharpOptions, untypedOptionValues)\n                );\n            default:\n                return assertNever(options.framework);\n        }\n    }\n}\n\nconst namingFunction = funPrefixNamer(\"namer\", csNameStyle);\nconst namingFunctionKeep = funPrefixNamer(\"namerKeep\", csNameStyleKeep);\n\n// FIXME: Make a Named?\nconst denseJsonPropertyName = \"J\";\nconst denseRequiredEnumName = \"R\";\nconst denseNullValueHandlingEnumName = \"N\";\n\nfunction isStartCharacter(utf16Unit: number): boolean {\n    if (unicode.isAlphabetic(utf16Unit)) {\n        return true;\n    }\n\n    return utf16Unit === 0x5f; // underscore\n}\n\nfunction isPartCharacter(utf16Unit: number): boolean {\n    const category: string = unicode.getCategory(utf16Unit);\n    if ([\"Nd\", \"Pc\", \"Mn\", \"Mc\"].includes(category)) {\n        return true;\n    }\n\n    return isStartCharacter(utf16Unit);\n}\n\nconst legalizeName = utf16LegalizeCharacters(isPartCharacter);\n\nfunction csNameStyle(original: string): string {\n    const words = splitIntoWords(original);\n    return combineWords(\n        words,\n        legalizeName,\n        firstUpperWordStyle,\n        firstUpperWordStyle,\n        firstUpperWordStyle,\n        firstUpperWordStyle,\n        \"\",\n        isStartCharacter\n    );\n}\n\nfunction csNameStyleKeep(original: string): string {\n    const keywords = [\n        \"abstract\",\n        \"as\",\n        \"base\",\n        \"bool\",\n        \"break\",\n        \"byte\",\n        \"case\",\n        \"catch\",\n        \"char\",\n        \"checked\",\n        \"class\",\n        \"const\",\n        \"continue\",\n        \"decimal\",\n        \"default\",\n        \"delegate\",\n        \"do\",\n        \"double\",\n        \"else\",\n        \"enum\",\n        \"event\",\n        \"explicit\",\n        \"extern\",\n        \"false\",\n        \"finally\",\n        \"fixed\",\n        \"float\",\n        \"for\",\n        \"foreach\",\n        \"goto\",\n        \"if\",\n        \"implicit\",\n        \"in\",\n        \"int\",\n        \"interface\",\n        \"internal\",\n        \"is\",\n        \"lock\",\n        \"long\",\n        \"namespace\",\n        \"new\",\n        \"null\",\n        \"object\",\n        \"operator\",\n        \"out\",\n        \"override\",\n        \"params\",\n        \"private\",\n        \"protected\",\n        \"public\",\n        \"readonly\",\n        \"ref\",\n        \"return\",\n        \"sbyte\",\n        \"sealed\",\n        \"short\",\n        \"sizeof\",\n        \"stackalloc\",\n        \"static\",\n        \"string\",\n        \"struct\",\n        \"switch\",\n        \"this\",\n        \"throw\",\n        \"true\",\n        \"try\",\n        \"typeof\",\n        \"uint\",\n        \"ulong\",\n        \"unchecked\",\n        \"unsafe\",\n        \"ushort\",\n        \"using\",\n        \"virtual\",\n        \"void\",\n        \"volatile\",\n        \"while\"\n    ];\n\n    const words: WordInName[] = [\n        {\n            word: original,\n            isAcronym: false\n        }\n    ];\n\n    const result = combineWords(\n        words,\n        legalizeName,\n        x => x,\n        x => x,\n        x => x,\n        x => x,\n        \"\",\n        isStartCharacter\n    );\n\n    return keywords.includes(result) ? \"@\" + result : result;\n}\n\nfunction isValueType(t: Type): boolean {\n    if (t instanceof UnionType) {\n        return nullableFromUnion(t) === null;\n    }\n\n    return [\"integer\", \"double\", \"bool\", \"enum\", \"date-time\", \"uuid\"].includes(t.kind);\n}\n\nexport class CSharpRenderer extends ConvenienceRenderer {\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        private readonly _csOptions: OptionValues<typeof cSharpOptions>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return [\"QuickType\", \"Type\", \"System\", \"Console\", \"Exception\", \"DateTimeOffset\", \"Guid\", \"Uri\"];\n    }\n\n    protected forbiddenForObjectProperties(_: ClassType, classNamed: Name): ForbiddenWordsInfo {\n        return {\n            names: [\n                classNamed,\n                \"ToString\",\n                \"GetHashCode\",\n                \"Finalize\",\n                \"Equals\",\n                \"GetType\",\n                \"MemberwiseClone\",\n                \"ReferenceEquals\"\n            ],\n            includeGlobalForbidden: false\n        };\n    }\n\n    protected forbiddenForUnionMembers(_: UnionType, unionNamed: Name): ForbiddenWordsInfo {\n        return { names: [unionNamed], includeGlobalForbidden: true };\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return namingFunction;\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return this._csOptions.keepPropertyName ? namingFunctionKeep : namingFunction;\n    }\n\n    protected makeUnionMemberNamer(): Namer {\n        return namingFunction;\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return namingFunction;\n    }\n\n    protected unionNeedsName(u: UnionType): boolean {\n        return nullableFromUnion(u) === null;\n    }\n\n    protected namedTypeToNameForTopLevel(type: Type): Type | undefined {\n        // If the top-level type doesn't contain any classes or unions\n        // we have to define a class just for the `FromJson` method, in\n        // emitFromJsonForTopLevel.\n        return directlyReachableSingleNamedType(type);\n    }\n\n    protected emitBlock(f: () => void, semicolon = false): void {\n        this.emitLine(\"{\");\n        this.indent(f);\n        this.emitLine(\"}\", semicolon ? \";\" : \"\");\n    }\n\n    protected get doubleType(): string {\n        return this._csOptions.useDecimal ? \"decimal\" : \"double\";\n    }\n\n    protected csType(t: Type, follow: (t: Type) => Type = followTargetType, withIssues = false): Sourcelike {\n        const actualType = follow(t);\n        return matchType<Sourcelike>(\n            actualType,\n            _anyType => maybeAnnotated(withIssues, anyTypeIssueAnnotation, this._csOptions.typeForAny),\n            _nullType => maybeAnnotated(withIssues, nullTypeIssueAnnotation, this._csOptions.typeForAny),\n            _boolType => \"bool\",\n            _integerType => \"long\",\n            _doubleType => this.doubleType,\n            _stringType => \"string\",\n            arrayType => {\n                const itemsType = this.csType(arrayType.items, follow, withIssues);\n                if (this._csOptions.useList) {\n                    return [\"List<\", itemsType, \">\"];\n                } else {\n                    return [itemsType, \"[]\"];\n                }\n            },\n            classType => this.nameForNamedType(classType),\n            mapType => [\"Dictionary<string, \", this.csType(mapType.values, follow, withIssues), \">\"],\n            enumType => this.nameForNamedType(enumType),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) return this.nullableCSType(nullable, noFollow);\n                return this.nameForNamedType(unionType);\n            },\n            transformedStringType => csTypeForTransformedStringType(transformedStringType)\n        );\n    }\n\n    protected nullableCSType(t: Type, follow: (t: Type) => Type = followTargetType, withIssues = false): Sourcelike {\n        t = followTargetType(t);\n        const csType = this.csType(t, follow, withIssues);\n        if (isValueType(t)) {\n            return [csType, \"?\"];\n        } else {\n            return csType;\n        }\n    }\n\n    protected baseclassForType(_t: Type): Sourcelike | undefined {\n        return undefined;\n    }\n\n    protected emitType(\n        description: string[] | undefined,\n        accessModifier: AccessModifier,\n        declaration: Sourcelike,\n        name: Sourcelike,\n        baseclass: Sourcelike | undefined,\n        emitter: () => void\n    ): void {\n        switch (accessModifier) {\n            case AccessModifier.Public:\n                declaration = [\"public \", declaration];\n                break;\n            case AccessModifier.Internal:\n                declaration = [\"internal \", declaration];\n                break;\n            default:\n                break;\n        }\n\n        this.emitDescription(description);\n        if (baseclass === undefined) {\n            this.emitLine(declaration, \" \", name);\n        } else {\n            this.emitLine(declaration, \" \", name, \" : \", baseclass);\n        }\n\n        this.emitBlock(emitter);\n    }\n\n    protected attributesForProperty(\n        _property: ClassProperty,\n        _name: Name,\n        _c: ClassType,\n        _jsonName: string\n    ): Sourcelike[] | undefined {\n        return undefined;\n    }\n\n    protected propertyDefinition(property: ClassProperty, name: Name, _c: ClassType, _jsonName: string): Sourcelike {\n        const t = property.type;\n        const csType = property.isOptional\n            ? this.nullableCSType(t, followTargetType, true)\n            : this.csType(t, followTargetType, true);\n\n        const propertyArray = [\"public \"];\n\n        if (this._csOptions.virtual) propertyArray.push(\"virtual \");\n\n        return [...propertyArray, csType, \" \", name, \" { get; set; }\"];\n    }\n\n    protected emitDescriptionBlock(lines: Sourcelike[]): void {\n        const start = \"/// <summary>\";\n        if (this._csOptions.dense) {\n            this.emitLine(start, lines.join(\"; \"), \"</summary>\");\n        } else {\n            this.emitCommentLines(lines, { lineStart: \"/// \", beforeComment: start, afterComment: \"/// </summary>\" });\n        }\n    }\n\n    protected blankLinesBetweenAttributes(): boolean {\n        return false;\n    }\n\n    private emitClassDefinition(c: ClassType, className: Name): void {\n        this.emitType(\n            this.descriptionForType(c),\n            AccessModifier.Public,\n            \"partial class\",\n            className,\n            this.baseclassForType(c),\n            () => {\n                if (c.getProperties().size === 0) return;\n                const blankLines = this.blankLinesBetweenAttributes() ? \"interposing\" : \"none\";\n                let columns: Sourcelike[][] = [];\n                let isFirstProperty = true;\n                let previousDescription: string[] | undefined = undefined;\n                this.forEachClassProperty(c, blankLines, (name, jsonName, p) => {\n                    const attributes = this.attributesForProperty(p, name, c, jsonName);\n                    const description = this.descriptionForClassProperty(c, jsonName);\n                    const property = this.propertyDefinition(p, name, c, jsonName);\n                    if (attributes === undefined) {\n                        if (\n                            // Descriptions should be preceded by an empty line\n                            (!isFirstProperty && description !== undefined) ||\n                            // If the previous property has a description, leave an empty line\n                            previousDescription !== undefined\n                        ) {\n                            this.ensureBlankLine();\n                        }\n\n                        this.emitDescription(description);\n                        this.emitLine(property);\n                    } else if (this._csOptions.dense && attributes.length > 0) {\n                        const comment = description === undefined ? \"\" : ` // ${description.join(\"; \")}`;\n                        columns.push([attributes, \" \", property, comment]);\n                    } else {\n                        this.emitDescription(description);\n                        for (const attribute of attributes) {\n                            this.emitLine(attribute);\n                        }\n\n                        this.emitLine(property);\n                    }\n\n                    isFirstProperty = false;\n                    previousDescription = description;\n                });\n                if (columns.length > 0) {\n                    this.emitTable(columns);\n                }\n            }\n        );\n    }\n\n    private emitUnionDefinition(u: UnionType, unionName: Name): void {\n        const nonNulls = removeNullFromUnion(u, true)[1];\n        this.emitType(\n            this.descriptionForType(u),\n            AccessModifier.Public,\n            \"partial struct\",\n            unionName,\n            this.baseclassForType(u),\n            () => {\n                this.forEachUnionMember(u, nonNulls, \"none\", null, (fieldName, t) => {\n                    const csType = this.nullableCSType(t);\n                    this.emitLine(\"public \", csType, \" \", fieldName, \";\");\n                });\n                this.ensureBlankLine();\n                const nullTests: Sourcelike[] = Array.from(nonNulls).map(t => [\n                    this.nameForUnionMember(u, t),\n                    \" == null\"\n                ]);\n                this.ensureBlankLine();\n                this.forEachUnionMember(u, nonNulls, \"none\", null, (fieldName, t) => {\n                    const csType = this.csType(t);\n                    this.emitExpressionMember(\n                        [\"public static implicit operator \", unionName, \"(\", csType, \" \", fieldName, \")\"],\n                        [\"new \", unionName, \" { \", fieldName, \" = \", fieldName, \" }\"]\n                    );\n                });\n                if (u.findMember(\"null\") === undefined) return;\n                this.emitExpressionMember(\"public bool IsNull\", arrayIntercalate(\" && \", nullTests), true);\n            }\n        );\n    }\n\n    private emitEnumDefinition(e: EnumType, enumName: Name): void {\n        const caseNames: Sourcelike[] = [];\n        this.forEachEnumCase(e, \"none\", name => {\n            if (caseNames.length > 0) caseNames.push(\", \");\n            caseNames.push(name);\n        });\n        this.emitDescription(this.descriptionForType(e));\n        this.emitLine(\"public enum \", enumName, \" { \", caseNames, \" };\");\n    }\n\n    protected emitExpressionMember(declare: Sourcelike, define: Sourcelike, isProperty = false): void {\n        if (this._csOptions.version === 5) {\n            this.emitLine(declare);\n            this.emitBlock(() => {\n                const stmt = [\"return \", define, \";\"];\n                if (isProperty) {\n                    this.emitLine(\"get\");\n                    this.emitBlock(() => this.emitLine(stmt));\n                } else {\n                    this.emitLine(stmt);\n                }\n            });\n        } else {\n            this.emitLine(declare, \" => \", define, \";\");\n        }\n    }\n\n    protected emitTypeSwitch<T extends Sourcelike>(\n        types: Iterable<T>,\n        condition: (t: T) => Sourcelike,\n        withBlock: boolean,\n        withReturn: boolean,\n        f: (t: T) => void\n    ): void {\n        assert(!withReturn || withBlock, \"Can only have return with block\");\n        for (const t of types) {\n            this.emitLine(\"if (\", condition(t), \")\");\n            if (withBlock) {\n                this.emitBlock(() => {\n                    f(t);\n                    if (withReturn) {\n                        this.emitLine(\"return;\");\n                    }\n                });\n            } else {\n                this.indent(() => f(t));\n            }\n        }\n    }\n\n    protected emitUsing(ns: Sourcelike): void {\n        this.emitLine(\"using \", ns, \";\");\n    }\n\n    protected emitUsings(): void {\n        for (const ns of [\"System\", \"System.Collections.Generic\"]) {\n            this.emitUsing(ns);\n        }\n    }\n\n    protected emitRequiredHelpers(): void {\n        return;\n    }\n\n    private emitTypesAndSupport(): void {\n        this.forEachObject(\"leading-and-interposing\", (c: ClassType, name: Name) => this.emitClassDefinition(c, name));\n        this.forEachEnum(\"leading-and-interposing\", (e, name) => this.emitEnumDefinition(e, name));\n        this.forEachUnion(\"leading-and-interposing\", (u, name) => this.emitUnionDefinition(u, name));\n        this.emitRequiredHelpers();\n    }\n\n    protected emitDefaultLeadingComments(): void {\n        return;\n    }\n\n    protected emitDefaultFollowingComments(): void {\n        return;\n    }\n\n    protected needNamespace(): boolean {\n        return true;\n    }\n\n    protected emitSourceStructure(): void {\n        if (this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n        } else {\n            this.emitDefaultLeadingComments();\n        }\n\n        this.ensureBlankLine();\n        if (this.needNamespace()) {\n            this.emitLine(\"namespace \", this._csOptions.namespace);\n            this.emitBlock(() => {\n                this.emitUsings();\n                this.emitTypesAndSupport();\n            });\n        } else {\n            this.emitUsings();\n            this.emitTypesAndSupport();\n        }\n\n        this.emitDefaultFollowingComments();\n    }\n}\n\nexport const newtonsoftCSharpOptions = Object.assign({}, cSharpOptions, {});\n\nexport class NewtonsoftCSharpRenderer extends CSharpRenderer {\n    private readonly _enumExtensionsNames = new Map<Name, Name>();\n\n    private readonly _needHelpers: boolean;\n\n    private readonly _needAttributes: boolean;\n\n    private readonly _needNamespaces: boolean;\n\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        private readonly _options: OptionValues<typeof newtonsoftCSharpOptions>\n    ) {\n        super(targetLanguage, renderContext, _options);\n        this._needHelpers = _options.features.helpers;\n        this._needAttributes = _options.features.attributes;\n        this._needNamespaces = _options.features.namespaces;\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        const forbidden = [\n            \"Converter\",\n            \"JsonConverter\",\n            \"JsonSerializer\",\n            \"JsonWriter\",\n            \"JsonToken\",\n            \"Serialize\",\n            \"Newtonsoft\",\n            \"MetadataPropertyHandling\",\n            \"DateParseHandling\",\n            \"FromJson\",\n            \"Required\"\n        ];\n        if (this._options.dense) {\n            forbidden.push(\"J\", \"R\", \"N\");\n        }\n\n        if (this._options.baseclass !== undefined) {\n            forbidden.push(this._options.baseclass);\n        }\n\n        return super.forbiddenNamesForGlobalNamespace().concat(forbidden);\n    }\n\n    protected forbiddenForObjectProperties(c: ClassType, className: Name): ForbiddenWordsInfo {\n        const result = super.forbiddenForObjectProperties(c, className);\n        result.names = result.names.concat([\"ToJson\", \"FromJson\", \"Required\"]);\n        return result;\n    }\n\n    protected makeNameForTransformation(xf: Transformation, typeName: Name | undefined): Name {\n        if (typeName === undefined) {\n            let xfer = xf.transformer;\n            if (xfer instanceof DecodingTransformer && xfer.consumer !== undefined) {\n                xfer = xfer.consumer;\n            }\n\n            return new SimpleName([`${xfer.kind}_converter`], namingFunction, inferredNameOrder + 30);\n        }\n\n        return new DependencyName(namingFunction, typeName.order + 30, lookup => `${lookup(typeName)}_converter`);\n    }\n\n    protected makeNamedTypeDependencyNames(t: Type, name: Name): DependencyName[] {\n        if (!(t instanceof EnumType)) return [];\n\n        const extensionsName = new DependencyName(\n            namingFunction,\n            name.order + 30,\n            lookup => `${lookup(name)}_extensions`\n        );\n        this._enumExtensionsNames.set(name, extensionsName);\n        return [extensionsName];\n    }\n\n    protected emitUsings(): void {\n        // FIXME: We need System.Collections.Generic whenever we have maps or use List.\n        if (!this._needAttributes && !this._needHelpers) return;\n\n        super.emitUsings();\n        this.ensureBlankLine();\n\n        for (const ns of [\"System.Globalization\", \"Newtonsoft.Json\", \"Newtonsoft.Json.Converters\"]) {\n            this.emitUsing(ns);\n        }\n\n        if (this._options.dense) {\n            this.emitUsing([denseJsonPropertyName, \" = Newtonsoft.Json.JsonPropertyAttribute\"]);\n            this.emitUsing([denseRequiredEnumName, \" = Newtonsoft.Json.Required\"]);\n            this.emitUsing([denseNullValueHandlingEnumName, \" = Newtonsoft.Json.NullValueHandling\"]);\n        }\n\n        if (this._options.baseclass === \"EntityData\") {\n            this.emitUsing(\"Microsoft.Azure.Mobile.Server\");\n        }\n    }\n\n    protected baseclassForType(_t: Type): Sourcelike | undefined {\n        return this._options.baseclass;\n    }\n\n    protected emitDefaultLeadingComments(): void {\n        if (!this._needHelpers) return;\n\n        this.emitLine(\"// <auto-generated />\");\n        this.emitLine(\"//\");\n        this.emitLine(\n            \"// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do\",\n            this.topLevels.size === 1 ? \"\" : \" one of these\",\n            \":\"\n        );\n        this.emitLine(\"//\");\n        this.emitLine(\"//    using \", this._options.namespace, \";\");\n        this.emitLine(\"//\");\n        this.forEachTopLevel(\"none\", (t, topLevelName) => {\n            let rhs: Sourcelike;\n            if (t instanceof EnumType) {\n                rhs = [\"JsonConvert.DeserializeObject<\", topLevelName, \">(jsonString)\"];\n            } else {\n                rhs = [topLevelName, \".FromJson(jsonString)\"];\n            }\n\n            this.emitLine(\"//    var \", modifySource(camelCase, topLevelName), \" = \", rhs, \";\");\n        });\n    }\n\n    private converterForType(t: Type): Name | undefined {\n        let xf = transformationForType(t);\n\n        if (xf === undefined && t instanceof UnionType) {\n            const maybeNullable = nullableFromUnion(t);\n            if (maybeNullable !== null) {\n                t = maybeNullable;\n                xf = transformationForType(t);\n            }\n        }\n\n        if (xf === undefined) return undefined;\n\n        if (alwaysApplyTransformation(xf)) return undefined;\n\n        return defined(this.nameForTransformation(t));\n    }\n\n    protected attributesForProperty(\n        property: ClassProperty,\n        _name: Name,\n        _c: ClassType,\n        jsonName: string\n    ): Sourcelike[] | undefined {\n        if (!this._needAttributes) return undefined;\n\n        const attributes: Sourcelike[] = [];\n\n        const jsonProperty = this._options.dense ? denseJsonPropertyName : \"JsonProperty\";\n        const escapedName = utf16StringEscape(jsonName);\n        const isNullable = followTargetType(property.type).isNullable;\n        const isOptional = property.isOptional;\n        const requiredClass = this._options.dense ? \"R\" : \"Required\";\n        const nullValueHandlingClass = this._options.dense ? \"N\" : \"NullValueHandling\";\n        const nullValueHandling =\n            isOptional && !isNullable ? [\", NullValueHandling = \", nullValueHandlingClass, \".Ignore\"] : [];\n        let required: Sourcelike;\n        if (!this._options.checkRequired || (isOptional && isNullable)) {\n            required = [nullValueHandling];\n        } else if (isOptional && !isNullable) {\n            required = [\", Required = \", requiredClass, \".DisallowNull\", nullValueHandling];\n        } else if (!isOptional && isNullable) {\n            required = [\", Required = \", requiredClass, \".AllowNull\"];\n        } else {\n            required = [\", Required = \", requiredClass, \".Always\", nullValueHandling];\n        }\n\n        attributes.push([\"[\", jsonProperty, '(\"', escapedName, '\"', required, \")]\"]);\n\n        const converter = this.converterForType(property.type);\n        if (converter !== undefined) {\n            attributes.push([\"[JsonConverter(typeof(\", converter, \"))]\"]);\n        }\n\n        return attributes;\n    }\n\n    protected blankLinesBetweenAttributes(): boolean {\n        return this._needAttributes && !this._options.dense;\n    }\n\n    // The \"this\" type can't be `dynamic`, so we have to force it to `object`.\n    private topLevelResultType(t: Type): Sourcelike {\n        return t.kind === \"any\" || t.kind === \"none\" ? \"object\" : this.csType(t);\n    }\n\n    private emitFromJsonForTopLevel(t: Type, name: Name): void {\n        if (t instanceof EnumType) return;\n\n        let partial: string;\n        let typeKind: string;\n        const definedType = this.namedTypeToNameForTopLevel(t);\n        if (definedType !== undefined) {\n            partial = \"partial \";\n            typeKind = definedType instanceof ClassType ? \"class\" : \"struct\";\n        } else {\n            partial = \"\";\n            typeKind = \"class\";\n        }\n\n        const csType = this.topLevelResultType(t);\n        this.emitType(undefined, AccessModifier.Public, [partial, typeKind], name, this.baseclassForType(t), () => {\n            // FIXME: Make FromJson a Named\n            this.emitExpressionMember(\n                [\"public static \", csType, \" FromJson(string json)\"],\n                [\"JsonConvert.DeserializeObject<\", csType, \">(json, \", this._options.namespace, \".Converter.Settings)\"]\n            );\n        });\n    }\n\n    private emitDecoderSwitch(emitBody: () => void): void {\n        this.emitLine(\"switch (reader.TokenType)\");\n        this.emitBlock(emitBody);\n    }\n\n    private emitTokenCase(tokenType: string): void {\n        this.emitLine(\"case JsonToken.\", tokenType, \":\");\n    }\n\n    private emitThrow(message: Sourcelike): void {\n        this.emitLine(\"throw new Exception(\", message, \");\");\n    }\n\n    private deserializeTypeCode(typeName: Sourcelike): Sourcelike {\n        return [\"serializer.Deserialize<\", typeName, \">(reader)\"];\n    }\n\n    private serializeValueCode(value: Sourcelike): Sourcelike {\n        return [\"serializer.Serialize(writer, \", value, \")\"];\n    }\n\n    private emitSerializeClass(): void {\n        // FIXME: Make Serialize a Named\n        this.emitType(undefined, AccessModifier.Public, \"static class\", \"Serialize\", undefined, () => {\n            // Sometimes multiple top-levels will resolve to the same type, so we have to take care\n            // not to emit more than one extension method for the same type.\n            const seenTypes = new Set<Type>();\n            this.forEachTopLevel(\"none\", t => {\n                // FIXME: Make ToJson a Named\n                if (!seenTypes.has(t)) {\n                    seenTypes.add(t);\n                    this.emitExpressionMember(\n                        [\"public static string ToJson(this \", this.topLevelResultType(t), \" self)\"],\n                        [\"JsonConvert.SerializeObject(self, \", this._options.namespace, \".Converter.Settings)\"]\n                    );\n                }\n            });\n        });\n    }\n\n    private emitCanConvert(expr: Sourcelike): void {\n        this.emitExpressionMember(\"public override bool CanConvert(Type t)\", expr);\n    }\n\n    private emitReadJson(emitBody: () => void): void {\n        this.emitLine(\n            \"public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)\"\n        );\n        this.emitBlock(emitBody);\n    }\n\n    private emitWriteJson(variable: string, emitBody: () => void): void {\n        this.emitLine(\n            \"public override void WriteJson(JsonWriter writer, object \",\n            variable,\n            \", JsonSerializer serializer)\"\n        );\n        this.emitBlock(emitBody);\n    }\n\n    private converterObject(converterName: Name): Sourcelike {\n        // FIXME: Get a singleton\n        return [converterName, \".Singleton\"];\n    }\n\n    private emitConverterClass(): void {\n        // FIXME: Make Converter a Named\n        const converterName: Sourcelike = [\"Converter\"];\n        this.emitType(undefined, AccessModifier.Internal, \"static class\", converterName, undefined, () => {\n            this.emitLine(\"public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings\");\n            this.emitBlock(() => {\n                this.emitLine(\"MetadataPropertyHandling = MetadataPropertyHandling.Ignore,\");\n                this.emitLine(\"DateParseHandling = DateParseHandling.None,\");\n                this.emitLine(\"Converters =\");\n                this.emitLine(\"{\");\n                this.indent(() => {\n                    for (const [t, converter] of this.typesWithNamedTransformations) {\n                        if (alwaysApplyTransformation(defined(transformationForType(t)))) {\n                            this.emitLine(this.converterObject(converter), \",\");\n                        }\n                    }\n\n                    this.emitLine(\"new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }\");\n                });\n                this.emitLine(\"},\");\n            }, true);\n        });\n    }\n\n    private emitDecoderTransformerCase(\n        tokenCases: string[],\n        variableName: string,\n        xfer: Transformer | undefined,\n        targetType: Type,\n        emitFinish: (value: Sourcelike) => void\n    ): void {\n        if (xfer === undefined) return;\n\n        for (const tokenCase of tokenCases) {\n            this.emitTokenCase(tokenCase);\n        }\n\n        this.indent(() => {\n            const allHandled = this.emitDecodeTransformer(xfer, targetType, emitFinish, variableName);\n            if (!allHandled) {\n                this.emitLine(\"break;\");\n            }\n        });\n    }\n\n    private emitConsume(\n        value: Sourcelike,\n        consumer: Transformer | undefined,\n        targetType: Type,\n        emitFinish: (variableName: Sourcelike) => void\n    ): boolean {\n        if (consumer === undefined) {\n            emitFinish(value);\n            return true;\n        } else {\n            return this.emitTransformer(value, consumer, targetType, emitFinish);\n        }\n    }\n\n    private emitDecodeTransformer(\n        xfer: Transformer,\n        targetType: Type,\n        emitFinish: (value: Sourcelike) => void,\n        variableName = \"value\"\n    ): boolean {\n        if (xfer instanceof DecodingTransformer) {\n            const source = xfer.sourceType;\n            const converter = this.converterForType(targetType);\n            if (converter !== undefined) {\n                const typeSource = this.csType(targetType);\n                this.emitLine(\"var converter = \", this.converterObject(converter), \";\");\n                this.emitLine(\n                    \"var \",\n                    variableName,\n                    \" = (\",\n                    typeSource,\n                    \")converter.ReadJson(reader, typeof(\",\n                    typeSource,\n                    \"), null, serializer);\"\n                );\n            } else if (source.kind !== \"null\") {\n                let output = targetType.kind === \"double\" ? targetType : source;\n                this.emitLine(\"var \", variableName, \" = \", this.deserializeTypeCode(this.csType(output)), \";\");\n            }\n\n            return this.emitConsume(variableName, xfer.consumer, targetType, emitFinish);\n        } else if (xfer instanceof ArrayDecodingTransformer) {\n            // FIXME: Consume StartArray\n            if (!(targetType instanceof ArrayType)) {\n                return panic(\"Array decoding must produce an array type\");\n            }\n\n            // FIXME: handle EOF\n            this.emitLine(\"reader.Read();\");\n            this.emitLine(\"var \", variableName, \" = new List<\", this.csType(targetType.items), \">();\");\n            this.emitLine(\"while (reader.TokenType != JsonToken.EndArray)\");\n            this.emitBlock(() => {\n                this.emitDecodeTransformer(\n                    xfer.itemTransformer,\n                    xfer.itemTargetType,\n                    v => this.emitLine(variableName, \".Add(\", v, \");\"),\n                    \"arrayItem\"\n                );\n                // FIXME: handle EOF\n                this.emitLine(\"reader.Read();\");\n            });\n            let result: Sourcelike = variableName;\n            if (!this._options.useList) {\n                result = [result, \".ToArray()\"];\n            }\n\n            emitFinish(result);\n            return true;\n        } else if (xfer instanceof DecodingChoiceTransformer) {\n            this.emitDecoderSwitch(() => {\n                const nullTransformer = xfer.nullTransformer;\n                if (nullTransformer !== undefined) {\n                    this.emitTokenCase(\"Null\");\n                    this.indent(() => {\n                        const allHandled = this.emitDecodeTransformer(nullTransformer, targetType, emitFinish, \"null\");\n                        if (!allHandled) {\n                            this.emitLine(\"break\");\n                        }\n                    });\n                }\n\n                this.emitDecoderTransformerCase(\n                    [\"Integer\"],\n                    \"integerValue\",\n                    xfer.integerTransformer,\n                    targetType,\n                    emitFinish\n                );\n                this.emitDecoderTransformerCase(\n                    xfer.integerTransformer === undefined ? [\"Integer\", \"Float\"] : [\"Float\"],\n                    \"doubleValue\",\n                    xfer.doubleTransformer,\n                    targetType,\n                    emitFinish\n                );\n                this.emitDecoderTransformerCase([\"Boolean\"], \"boolValue\", xfer.boolTransformer, targetType, emitFinish);\n                this.emitDecoderTransformerCase(\n                    [\"String\", \"Date\"],\n                    \"stringValue\",\n                    xfer.stringTransformer,\n                    targetType,\n                    emitFinish\n                );\n                this.emitDecoderTransformerCase(\n                    [\"StartObject\"],\n                    \"objectValue\",\n                    xfer.objectTransformer,\n                    targetType,\n                    emitFinish\n                );\n                this.emitDecoderTransformerCase(\n                    [\"StartArray\"],\n                    \"arrayValue\",\n                    xfer.arrayTransformer,\n                    targetType,\n                    emitFinish\n                );\n            });\n            return false;\n        } else {\n            return panic(\"Unknown transformer\");\n        }\n    }\n\n    private stringCaseValue(t: Type, stringCase: string): Sourcelike {\n        if (t.kind === \"string\") {\n            return ['\"', utf16StringEscape(stringCase), '\"'];\n        } else if (t instanceof EnumType) {\n            return [this.nameForNamedType(t), \".\", this.nameForEnumCase(t, stringCase)];\n        }\n\n        return panic(`Type ${t.kind} does not have string cases`);\n    }\n\n    private emitTransformer(\n        variable: Sourcelike,\n        xfer: Transformer,\n        targetType: Type,\n        emitFinish: (value: Sourcelike) => void\n    ): boolean {\n        function directTargetType(continuation: Transformer | undefined): Type {\n            if (continuation === undefined) {\n                return targetType;\n            }\n\n            return followTargetType(continuation.sourceType);\n        }\n\n        if (xfer instanceof ChoiceTransformer) {\n            const caseXfers = xfer.transformers;\n            if (caseXfers.length > 1 && caseXfers.every(caseXfer => caseXfer instanceof StringMatchTransformer)) {\n                this.emitLine(\"switch (\", variable, \")\");\n                this.emitBlock(() => {\n                    for (const caseXfer of caseXfers) {\n                        const matchXfer = caseXfer as StringMatchTransformer;\n                        const value = this.stringCaseValue(\n                            followTargetType(matchXfer.sourceType),\n                            matchXfer.stringCase\n                        );\n                        this.emitLine(\"case \", value, \":\");\n                        this.indent(() => {\n                            const allDone = this.emitTransformer(\n                                variable,\n                                matchXfer.transformer,\n                                targetType,\n                                emitFinish\n                            );\n                            if (!allDone) {\n                                this.emitLine(\"break;\");\n                            }\n                        });\n                    }\n                });\n                // FIXME: Can we check for exhaustiveness?  For enums it should be easy.\n                return false;\n            } else {\n                for (const caseXfer of caseXfers) {\n                    this.emitTransformer(variable, caseXfer, targetType, emitFinish);\n                }\n            }\n        } else if (xfer instanceof UnionMemberMatchTransformer) {\n            const memberType = xfer.memberType;\n            const maybeNullable = nullableFromUnion(xfer.sourceType);\n            let test: Sourcelike;\n            let member: Sourcelike;\n            if (maybeNullable !== null) {\n                if (memberType.kind === \"null\") {\n                    test = [variable, \" == null\"];\n                    member = \"null\";\n                } else {\n                    test = [variable, \" != null\"];\n                    member = variable;\n                }\n            } else if (memberType.kind === \"null\") {\n                test = [variable, \".IsNull\"];\n                member = \"null\";\n            } else {\n                const memberName = this.nameForUnionMember(xfer.sourceType, memberType);\n                member = [variable, \".\", memberName];\n                test = [member, \" != null\"];\n            }\n\n            if (memberType.kind !== \"null\" && isValueType(memberType)) {\n                member = [member, \".Value\"];\n            }\n\n            this.emitLine(\"if (\", test, \")\");\n            this.emitBlock(() => this.emitTransformer(member, xfer.transformer, targetType, emitFinish));\n        } else if (xfer instanceof StringMatchTransformer) {\n            const value = this.stringCaseValue(followTargetType(xfer.sourceType), xfer.stringCase);\n            this.emitLine(\"if (\", variable, \" == \", value, \")\");\n            this.emitBlock(() => this.emitTransformer(variable, xfer.transformer, targetType, emitFinish));\n        } else if (xfer instanceof EncodingTransformer) {\n            const converter = this.converterForType(xfer.sourceType);\n            if (converter !== undefined) {\n                this.emitLine(\"var converter = \", this.converterObject(converter), \";\");\n                this.emitLine(\"converter.WriteJson(writer, \", variable, \", serializer);\");\n            } else {\n                this.emitLine(this.serializeValueCode(variable), \";\");\n            }\n\n            emitFinish([]);\n            return true;\n        } else if (xfer instanceof ArrayEncodingTransformer) {\n            this.emitLine(\"writer.WriteStartArray();\");\n            const itemVariable = \"arrayItem\";\n            this.emitLine(\"foreach (var \", itemVariable, \" in \", variable, \")\");\n            this.emitBlock(() => {\n                this.emitTransformer(itemVariable, xfer.itemTransformer, xfer.itemTargetType, () => {\n                    return;\n                });\n            });\n            this.emitLine(\"writer.WriteEndArray();\");\n            emitFinish([]);\n            return true;\n        } else if (xfer instanceof ParseStringTransformer) {\n            const immediateTargetType = xfer.consumer === undefined ? targetType : xfer.consumer.sourceType;\n            switch (immediateTargetType.kind) {\n                case \"date-time\":\n                    this.emitLine(\"DateTimeOffset dt;\");\n                    this.emitLine(\"if (DateTimeOffset.TryParse(\", variable, \", out dt))\");\n                    this.emitBlock(() => this.emitConsume(\"dt\", xfer.consumer, targetType, emitFinish));\n                    break;\n                case \"uuid\":\n                    this.emitLine(\"Guid guid;\");\n                    this.emitLine(\"if (Guid.TryParse(\", variable, \", out guid))\");\n                    this.emitBlock(() => this.emitConsume(\"guid\", xfer.consumer, targetType, emitFinish));\n                    break;\n                case \"uri\":\n                    this.emitLine(\"try\");\n                    this.emitBlock(() => {\n                        this.emitLine(\"var uri = new Uri(\", variable, \");\");\n                        this.emitConsume(\"uri\", xfer.consumer, targetType, emitFinish);\n                    });\n                    this.emitLine(\"catch (UriFormatException) {}\");\n                    break;\n                case \"integer\":\n                    this.emitLine(\"long l;\");\n                    this.emitLine(\"if (Int64.TryParse(\", variable, \", out l))\");\n                    this.emitBlock(() => this.emitConsume(\"l\", xfer.consumer, targetType, emitFinish));\n                    break;\n                case \"bool\":\n                    this.emitLine(\"bool b;\");\n                    this.emitLine(\"if (Boolean.TryParse(\", variable, \", out b))\");\n                    this.emitBlock(() => this.emitConsume(\"b\", xfer.consumer, targetType, emitFinish));\n                    break;\n                default:\n                    return panic(`Parsing string to ${immediateTargetType.kind} not supported`);\n            }\n        } else if (xfer instanceof StringifyTransformer) {\n            switch (xfer.sourceType.kind) {\n                case \"date-time\":\n                    return this.emitConsume(\n                        [variable, '.ToString(\"o\", System.Globalization.CultureInfo.InvariantCulture)'],\n                        xfer.consumer,\n                        targetType,\n                        emitFinish\n                    );\n                case \"uuid\":\n                    return this.emitConsume(\n                        [variable, '.ToString(\"D\", System.Globalization.CultureInfo.InvariantCulture)'],\n                        xfer.consumer,\n                        targetType,\n                        emitFinish\n                    );\n                case \"integer\":\n                case \"uri\":\n                    return this.emitConsume([variable, \".ToString()\"], xfer.consumer, targetType, emitFinish);\n                case \"bool\":\n                    this.emitLine(\"var boolString = \", variable, ' ? \"true\" : \"false\";');\n                    return this.emitConsume(\"boolString\", xfer.consumer, targetType, emitFinish);\n                default:\n                    return panic(`Stringifying ${xfer.sourceType.kind} not supported`);\n            }\n        } else if (xfer instanceof StringProducerTransformer) {\n            const value = this.stringCaseValue(directTargetType(xfer.consumer), xfer.result);\n            return this.emitConsume(value, xfer.consumer, targetType, emitFinish);\n        } else if (xfer instanceof MinMaxLengthCheckTransformer) {\n            const min = xfer.minLength;\n            const max = xfer.maxLength;\n            const conditions: Sourcelike[] = [];\n\n            if (min !== undefined) {\n                conditions.push([variable, \".Length >= \", min.toString()]);\n            }\n\n            if (max !== undefined) {\n                conditions.push([variable, \".Length <= \", max.toString()]);\n            }\n\n            this.emitLine(\"if (\", arrayIntercalate([\" && \"], conditions), \")\");\n            this.emitBlock(() => this.emitConsume(variable, xfer.consumer, targetType, emitFinish));\n            return false;\n        } else if (xfer instanceof MinMaxValueTransformer) {\n            const min = xfer.minimum;\n            const max = xfer.maximum;\n            const conditions: Sourcelike[] = [];\n\n            if (min !== undefined) {\n                conditions.push([variable, \" >= \", min.toString()]);\n            }\n\n            if (max !== undefined) {\n                conditions.push([variable, \" <= \", max.toString()]);\n            }\n\n            this.emitLine(\"if (\", arrayIntercalate([\" && \"], conditions), \")\");\n            this.emitBlock(() => this.emitConsume(variable, xfer.consumer, targetType, emitFinish));\n            return false;\n        } else if (xfer instanceof UnionInstantiationTransformer) {\n            if (!(targetType instanceof UnionType)) {\n                return panic(\"Union instantiation transformer must produce a union type\");\n            }\n\n            const maybeNullable = nullableFromUnion(targetType);\n            if (maybeNullable !== null) {\n                emitFinish(variable);\n            } else {\n                const unionName = this.nameForNamedType(targetType);\n                let initializer: Sourcelike;\n                if (xfer.sourceType.kind === \"null\") {\n                    initializer = \" \";\n                } else {\n                    const memberName = this.nameForUnionMember(targetType, xfer.sourceType);\n                    initializer = [\" \", memberName, \" = \", variable, \" \"];\n                }\n\n                emitFinish([\"new \", unionName, \" {\", initializer, \"}\"]);\n            }\n\n            return true;\n        } else {\n            return panic(\"Unknown transformer\");\n        }\n\n        return false;\n    }\n\n    private emitTransformation(converterName: Name, t: Type): void {\n        const xf = defined(transformationForType(t));\n        const reverse = xf.reverse;\n        const targetType = xf.targetType;\n        const xfer = xf.transformer;\n        this.emitType(undefined, AccessModifier.Internal, \"class\", converterName, \"JsonConverter\", () => {\n            const csType = this.csType(targetType);\n            let canConvertExpr: Sourcelike = [\"t == typeof(\", csType, \")\"];\n            const haveNullable = isValueType(targetType);\n            if (haveNullable) {\n                canConvertExpr = [canConvertExpr, \" || t == typeof(\", csType, \"?)\"];\n            }\n\n            this.emitCanConvert(canConvertExpr);\n            this.ensureBlankLine();\n            this.emitReadJson(() => {\n                // FIXME: It's unsatisfying that we need this.  The reason is that we not\n                // only match T, but also T?.  If we didn't, then the T in T? would not be\n                // deserialized with our converter but with the default one.  Can we check\n                // whether the type is a nullable?\n                // FIXME: This could duplicate one of the cases handled below in\n                // `emitDecodeTransformer`.\n                if (haveNullable && !(targetType instanceof UnionType)) {\n                    this.emitLine(\"if (reader.TokenType == JsonToken.Null) return null;\");\n                }\n\n                const allHandled = this.emitDecodeTransformer(xfer, targetType, v => this.emitLine(\"return \", v, \";\"));\n                if (!allHandled) {\n                    this.emitThrow(['\"Cannot unmarshal type ', csType, '\"']);\n                }\n            });\n            this.ensureBlankLine();\n            this.emitWriteJson(\"untypedValue\", () => {\n                // FIXME: See above.\n                if (haveNullable && !(targetType instanceof UnionType)) {\n                    this.emitLine(\"if (untypedValue == null)\");\n                    this.emitBlock(() => {\n                        this.emitLine(\"serializer.Serialize(writer, null);\");\n                        this.emitLine(\"return;\");\n                    });\n                }\n\n                this.emitLine(\"var value = (\", csType, \")untypedValue;\");\n                const allHandled = this.emitTransformer(\"value\", reverse.transformer, reverse.targetType, () =>\n                    this.emitLine(\"return;\")\n                );\n                if (!allHandled) {\n                    this.emitThrow(['\"Cannot marshal type ', csType, '\"']);\n                }\n            });\n            this.ensureBlankLine();\n            this.emitLine(\"public static readonly \", converterName, \" Singleton = new \", converterName, \"();\");\n        });\n    }\n\n    protected emitRequiredHelpers(): void {\n        if (this._needHelpers) {\n            this.forEachTopLevel(\"leading-and-interposing\", (t, n) => this.emitFromJsonForTopLevel(t, n));\n            this.ensureBlankLine();\n            this.emitSerializeClass();\n        }\n\n        if (this._needHelpers || (this._needAttributes && (this.haveNamedUnions || this.haveEnums))) {\n            this.ensureBlankLine();\n            this.emitConverterClass();\n            this.forEachTransformation(\"leading-and-interposing\", (n, t) => this.emitTransformation(n, t));\n        }\n    }\n\n    protected needNamespace(): boolean {\n        return this._needNamespaces;\n    }\n}\n\nexport const systemTextJsonCSharpOptions = Object.assign({}, cSharpOptions, {});\n\nexport class SystemTextJsonCSharpRenderer extends CSharpRenderer {\n    private readonly _enumExtensionsNames = new Map<Name, Name>();\n\n    private readonly _needHelpers: boolean;\n\n    private readonly _needAttributes: boolean;\n\n    private readonly _needNamespaces: boolean;\n\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        private readonly _options: OptionValues<typeof systemTextJsonCSharpOptions>\n    ) {\n        super(targetLanguage, renderContext, _options);\n        this._needHelpers = _options.features.helpers;\n        this._needAttributes = _options.features.attributes;\n        this._needNamespaces = _options.features.namespaces;\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        const forbidden = [\n            \"Converter\",\n            \"JsonConverter\",\n            \"JsonSerializer\",\n            \"JsonWriter\",\n            \"JsonToken\",\n            \"Serialize\",\n            \"JsonSerializerOptions\",\n            // \"Newtonsoft\",\n            // \"MetadataPropertyHandling\",\n            // \"DateParseHandling\",\n            \"FromJson\",\n            \"Required\"\n        ];\n        if (this._options.dense) {\n            forbidden.push(\"J\", \"R\", \"N\");\n        }\n\n        if (this._options.baseclass !== undefined) {\n            forbidden.push(this._options.baseclass);\n        }\n\n        return super.forbiddenNamesForGlobalNamespace().concat(forbidden);\n    }\n\n    protected forbiddenForObjectProperties(c: ClassType, className: Name): ForbiddenWordsInfo {\n        const result = super.forbiddenForObjectProperties(c, className);\n        result.names = result.names.concat([\"ToJson\", \"FromJson\", \"Required\"]);\n        return result;\n    }\n\n    protected makeNameForTransformation(xf: Transformation, typeName: Name | undefined): Name {\n        if (typeName === undefined) {\n            let xfer = xf.transformer;\n            if (xfer instanceof DecodingTransformer && xfer.consumer !== undefined) {\n                xfer = xfer.consumer;\n            }\n\n            return new SimpleName([`${xfer.kind}_converter`], namingFunction, inferredNameOrder + 30);\n        }\n\n        return new DependencyName(namingFunction, typeName.order + 30, lookup => `${lookup(typeName)}_converter`);\n    }\n\n    protected makeNamedTypeDependencyNames(t: Type, name: Name): DependencyName[] {\n        if (!(t instanceof EnumType)) return [];\n\n        const extensionsName = new DependencyName(\n            namingFunction,\n            name.order + 30,\n            lookup => `${lookup(name)}_extensions`\n        );\n        this._enumExtensionsNames.set(name, extensionsName);\n        return [extensionsName];\n    }\n\n    protected emitUsings(): void {\n        // FIXME: We need System.Collections.Generic whenever we have maps or use List.\n        if (!this._needAttributes && !this._needHelpers) return;\n\n        super.emitUsings();\n        this.ensureBlankLine();\n\n        for (const ns of [\"System.Text.Json\", \"System.Text.Json.Serialization\", \"System.Globalization\"]) {\n            this.emitUsing(ns);\n        }\n\n        if (this._options.dense) {\n            this.emitUsing([denseJsonPropertyName, \" = System.Text.Json.Serialization.JsonPropertyNameAttribute\"]);\n            // this.emitUsing([denseRequiredEnumName, \" = Newtonsoft.Json.Required\"]);\n            this.emitUsing([denseNullValueHandlingEnumName, \" = System.Text.Json.Serialization.JsonIgnoreCondition\"]);\n        }\n\n        if (this._options.baseclass === \"EntityData\") {\n            this.emitUsing(\"Microsoft.Azure.Mobile.Server\");\n        }\n    }\n\n    protected baseclassForType(_t: Type): Sourcelike | undefined {\n        return this._options.baseclass;\n    }\n\n    protected emitDefaultFollowingComments(): void {\n        if (!this._needHelpers) return;\n\n        this.emitLine(\"#pragma warning restore CS8618\");\n        this.emitLine(\"#pragma warning restore CS8601\");\n        this.emitLine(\"#pragma warning restore CS8603\");\n    }\n\n    protected emitDefaultLeadingComments(): void {\n        if (!this._needHelpers) return;\n\n        this.emitLine(\"// <auto-generated />\");\n        this.emitLine(\"//\");\n        this.emitLine(\n            \"// To parse this JSON data, add NuGet 'System.Text.Json' then do\",\n            this.topLevels.size === 1 ? \"\" : \" one of these\",\n            \":\"\n        );\n        this.emitLine(\"//\");\n        this.emitLine(\"//    using \", this._options.namespace, \";\");\n        this.emitLine(\"//\");\n        this.forEachTopLevel(\"none\", (t, topLevelName) => {\n            let rhs: Sourcelike;\n            if (t instanceof EnumType) {\n                rhs = [\"JsonSerializer.Deserialize<\", topLevelName, \">(jsonString)\"];\n            } else {\n                rhs = [topLevelName, \".FromJson(jsonString)\"];\n            }\n\n            this.emitLine(\"//    var \", modifySource(camelCase, topLevelName), \" = \", rhs, \";\");\n        });\n\n        // fix: should this be an option? Or respond to an existing option?\n        this.emitLine(\"#nullable enable\");\n        this.emitLine(\"#pragma warning disable CS8618\");\n        this.emitLine(\"#pragma warning disable CS8601\");\n        this.emitLine(\"#pragma warning disable CS8603\");\n    }\n\n    private converterForType(t: Type): Name | undefined {\n        let xf = transformationForType(t);\n\n        if (xf === undefined && t instanceof UnionType) {\n            const maybeNullable = nullableFromUnion(t);\n            if (maybeNullable !== null) {\n                t = maybeNullable;\n                xf = transformationForType(t);\n            }\n        }\n\n        if (xf === undefined) return undefined;\n\n        if (alwaysApplyTransformation(xf)) return undefined;\n\n        return defined(this.nameForTransformation(t));\n    }\n\n    protected attributesForProperty(\n        property: ClassProperty,\n        _name: Name,\n        _c: ClassType,\n        jsonName: string\n    ): Sourcelike[] | undefined {\n        if (!this._needAttributes) return undefined;\n\n        const attributes: Sourcelike[] = [];\n\n        const jsonPropertyName = this._options.dense ? denseJsonPropertyName : \"JsonPropertyName\";\n        const escapedName = utf16StringEscape(jsonName);\n        const isNullable = followTargetType(property.type).isNullable;\n        const isOptional = property.isOptional;\n\n        if (isOptional && !isNullable) {\n            attributes.push([\"[\", \"JsonIgnore\", \"(Condition = JsonIgnoreCondition.WhenWritingNull)]\"]);\n        }\n\n        // const requiredClass = this._options.dense ? \"R\" : \"Required\";\n        // const nullValueHandlingClass = this._options.dense ? \"N\" : \"NullValueHandling\";\n        // const nullValueHandling = isOptional && !isNullable ? [\", NullValueHandling = \", nullValueHandlingClass, \".Ignore\"] : [];\n        // let required: Sourcelike;\n        // if (!this._options.checkRequired || (isOptional && isNullable)) {\n        //     required = [nullValueHandling];\n        // } else if (isOptional && !isNullable) {\n        //     required = [\", Required = \", requiredClass, \".DisallowNull\", nullValueHandling];\n        // } else if (!isOptional && isNullable) {\n        //     required = [\", Required = \", requiredClass, \".AllowNull\"];\n        // } else {\n        //     required = [\", Required = \", requiredClass, \".Always\", nullValueHandling];\n        // }\n\n        attributes.push([\"[\", jsonPropertyName, '(\"', escapedName, '\")]']);\n\n        const converter = this.converterForType(property.type);\n        if (converter !== undefined) {\n            attributes.push([\"[JsonConverter(typeof(\", converter, \"))]\"]);\n        }\n\n        return attributes;\n    }\n\n    protected blankLinesBetweenAttributes(): boolean {\n        return this._needAttributes && !this._options.dense;\n    }\n\n    // The \"this\" type can't be `dynamic`, so we have to force it to `object`.\n    private topLevelResultType(t: Type): Sourcelike {\n        return t.kind === \"any\" || t.kind === \"none\" ? \"object\" : this.csType(t);\n    }\n\n    private emitFromJsonForTopLevel(t: Type, name: Name): void {\n        if (t instanceof EnumType) return;\n\n        let partial: string;\n        let typeKind: string;\n        const definedType = this.namedTypeToNameForTopLevel(t);\n        if (definedType !== undefined) {\n            partial = \"partial \";\n            typeKind = definedType instanceof ClassType ? \"class\" : \"struct\";\n        } else {\n            partial = \"\";\n            typeKind = \"class\";\n        }\n\n        const csType = this.topLevelResultType(t);\n        this.emitType(undefined, AccessModifier.Public, [partial, typeKind], name, this.baseclassForType(t), () => {\n            // FIXME: Make FromJson a Named\n            this.emitExpressionMember(\n                [\"public static \", csType, \" FromJson(string json)\"],\n                [\"JsonSerializer.Deserialize<\", csType, \">(json, \", this._options.namespace, \".Converter.Settings)\"]\n            );\n        });\n    }\n\n    private emitDecoderSwitch(emitBody: () => void): void {\n        this.emitLine(\"switch (reader.TokenType)\");\n        this.emitBlock(emitBody);\n    }\n\n    private emitTokenCase(tokenType: string): void {\n        this.emitLine(\"case JsonTokenType.\", tokenType, \":\");\n    }\n\n    private emitThrow(message: Sourcelike): void {\n        this.emitLine(\"throw new Exception(\", message, \");\");\n    }\n\n    private deserializeTypeCode(typeName: Sourcelike): Sourcelike {\n        switch (typeName) {\n            case \"bool\":\n                return [\"reader.GetBoolean()\"];\n            case \"long\":\n                return [\"reader.GetInt64()\"];\n            case \"decimal\":\n                return [\"reader.GetDecimal()\"];\n            case \"double\":\n                return [\"reader.GetDouble()\"];\n            case \"string\":\n                return [\"reader.GetString()\"];\n            default:\n                return [\"JsonSerializer.Deserialize<\", typeName, \">(ref reader, options)\"];\n        }\n    }\n\n    private serializeValueCode(value: Sourcelike): Sourcelike {\n        if (value !== \"null\") return [\"JsonSerializer.Serialize(writer, \", value, \", options)\"];\n        else return [\"writer.WriteNullValue()\"];\n    }\n\n    private emitSerializeClass(): void {\n        // FIXME: Make Serialize a Named\n        this.emitType(undefined, AccessModifier.Public, \"static class\", \"Serialize\", undefined, () => {\n            // Sometimes multiple top-levels will resolve to the same type, so we have to take care\n            // not to emit more than one extension method for the same type.\n            const seenTypes = new Set<Type>();\n            this.forEachTopLevel(\"none\", t => {\n                // FIXME: Make ToJson a Named\n                if (!seenTypes.has(t)) {\n                    seenTypes.add(t);\n                    this.emitExpressionMember(\n                        [\"public static string ToJson(this \", this.topLevelResultType(t), \" self)\"],\n                        [\"JsonSerializer.Serialize(self, \", this._options.namespace, \".Converter.Settings)\"]\n                    );\n                }\n            });\n        });\n    }\n\n    private emitCanConvert(expr: Sourcelike): void {\n        this.emitExpressionMember(\"public override bool CanConvert(Type t)\", expr);\n    }\n\n    private emitReadJson(emitBody: () => void, csType: Sourcelike): void {\n        this.emitLine(\n            \"public override \",\n            csType,\n            \" Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\"\n        );\n        this.emitBlock(emitBody);\n    }\n\n    private emitWriteJson(variable: string, emitBody: () => void, csType: Sourcelike): void {\n        this.emitLine(\n            \"public override void Write(Utf8JsonWriter writer, \",\n            csType,\n            \" \",\n            variable,\n            \", JsonSerializerOptions options)\"\n        );\n        this.emitBlock(emitBody);\n    }\n\n    private converterObject(converterName: Name): Sourcelike {\n        // FIXME: Get a singleton\n        return [converterName, \".Singleton\"];\n    }\n\n    private emitConverterClass(): void {\n        // FIXME: Make Converter a Named\n        const converterName: Sourcelike = [\"Converter\"];\n        this.emitType(undefined, AccessModifier.Internal, \"static class\", converterName, undefined, () => {\n            // Do not use .Web as defaults. That turns on caseInsensitive property names and will fail the keywords test.\n            this.emitLine(\n                \"public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)\"\n            );\n            this.emitBlock(() => {\n                // this.emitLine(\"MetadataPropertyHandling = MetadataPropertyHandling.Ignore,\");\n                // this.emitLine(\"DateParseHandling = DateParseHandling.None,\");\n                this.emitLine(\"Converters =\");\n                this.emitLine(\"{\");\n                this.indent(() => {\n                    for (const [t, converter] of this.typesWithNamedTransformations) {\n                        if (alwaysApplyTransformation(defined(transformationForType(t)))) {\n                            this.emitLine(this.converterObject(converter), \",\");\n                        }\n                    }\n\n                    this.emitLine(\"new DateOnlyConverter(),\");\n                    this.emitLine(\"new TimeOnlyConverter(),\");\n                    this.emitLine(\"IsoDateTimeOffsetConverter.Singleton\");\n                    // this.emitLine(\"new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }\");\n                });\n                this.emitLine(\"},\");\n            }, true);\n        });\n    }\n\n    private emitDecoderTransformerCase(\n        tokenCases: string[],\n        variableName: string,\n        xfer: Transformer | undefined,\n        targetType: Type,\n        emitFinish: (value: Sourcelike) => void\n    ): void {\n        if (xfer === undefined) return;\n\n        for (const tokenCase of tokenCases) {\n            this.emitTokenCase(tokenCase);\n        }\n\n        this.indent(() => {\n            const allHandled = this.emitDecodeTransformer(xfer, targetType, emitFinish, variableName);\n            if (!allHandled) {\n                this.emitLine(\"break;\");\n            }\n        });\n    }\n\n    private emitConsume(\n        value: Sourcelike,\n        consumer: Transformer | undefined,\n        targetType: Type,\n        emitFinish: (variableName: Sourcelike) => void\n    ): boolean {\n        if (consumer === undefined) {\n            emitFinish(value);\n            return true;\n        } else {\n            return this.emitTransformer(value, consumer, targetType, emitFinish);\n        }\n    }\n\n    private emitDecodeTransformer(\n        xfer: Transformer,\n        targetType: Type,\n        emitFinish: (value: Sourcelike) => void,\n        variableName = \"value\"\n    ): boolean {\n        if (xfer instanceof DecodingTransformer) {\n            const source = xfer.sourceType;\n            const converter = this.converterForType(targetType);\n            if (converter !== undefined) {\n                const typeSource = this.csType(targetType);\n                this.emitLine(\"var converter = \", this.converterObject(converter), \";\");\n                this.emitLine(\n                    \"var \",\n                    variableName,\n                    \" = (\",\n                    typeSource,\n                    \")converter.ReadJson(reader, typeof(\",\n                    typeSource,\n                    \"), null, serializer);\"\n                );\n            } else if (source.kind !== \"null\") {\n                let output = targetType.kind === \"double\" ? targetType : source;\n                this.emitLine(\"var \", variableName, \" = \", this.deserializeTypeCode(this.csType(output)), \";\");\n            }\n\n            return this.emitConsume(variableName, xfer.consumer, targetType, emitFinish);\n        } else if (xfer instanceof ArrayDecodingTransformer) {\n            // FIXME: Consume StartArray\n            if (!(targetType instanceof ArrayType)) {\n                return panic(\"Array decoding must produce an array type\");\n            }\n\n            // FIXME: handle EOF\n            this.emitLine(\"reader.Read();\");\n            this.emitLine(\"var \", variableName, \" = new List<\", this.csType(targetType.items), \">();\");\n            this.emitLine(\"while (reader.TokenType != JsonToken.EndArray)\");\n            this.emitBlock(() => {\n                this.emitDecodeTransformer(\n                    xfer.itemTransformer,\n                    xfer.itemTargetType,\n                    v => this.emitLine(variableName, \".Add(\", v, \");\"),\n                    \"arrayItem\"\n                );\n                // FIXME: handle EOF\n                this.emitLine(\"reader.Read();\");\n            });\n            let result: Sourcelike = variableName;\n            if (!this._options.useList) {\n                result = [result, \".ToArray()\"];\n            }\n\n            emitFinish(result);\n            return true;\n        } else if (xfer instanceof DecodingChoiceTransformer) {\n            this.emitDecoderSwitch(() => {\n                const nullTransformer = xfer.nullTransformer;\n                if (nullTransformer !== undefined) {\n                    this.emitTokenCase(\"Null\");\n                    this.indent(() => {\n                        const allHandled = this.emitDecodeTransformer(nullTransformer, targetType, emitFinish, \"null\");\n                        if (!allHandled) {\n                            this.emitLine(\"break\");\n                        }\n                    });\n                }\n\n                this.emitDecoderTransformerCase(\n                    [\"Number\"],\n                    \"integerValue\",\n                    xfer.integerTransformer,\n                    targetType,\n                    emitFinish\n                );\n                this.emitDecoderTransformerCase(\n                    [\"Number\"],\n                    // xfer.integerTransformer === undefined ? [\"Integer\", \"Float\"] : [\"Float\"],\n                    \"doubleValue\",\n                    xfer.doubleTransformer,\n                    targetType,\n                    emitFinish\n                );\n                this.emitDecoderTransformerCase(\n                    [\"True\", \"False\"],\n                    \"boolValue\",\n                    xfer.boolTransformer,\n                    targetType,\n                    emitFinish\n                );\n                this.emitDecoderTransformerCase(\n                    // [\"String\", \"Date\"],\n                    [\"String\"],\n                    \"stringValue\",\n                    xfer.stringTransformer,\n                    targetType,\n                    emitFinish\n                );\n                this.emitDecoderTransformerCase(\n                    [\"StartObject\"],\n                    \"objectValue\",\n                    xfer.objectTransformer,\n                    targetType,\n                    emitFinish\n                );\n                this.emitDecoderTransformerCase(\n                    [\"StartArray\"],\n                    \"arrayValue\",\n                    xfer.arrayTransformer,\n                    targetType,\n                    emitFinish\n                );\n            });\n            return false;\n        } else {\n            return panic(\"Unknown transformer\");\n        }\n    }\n\n    private stringCaseValue(t: Type, stringCase: string): Sourcelike {\n        if (t.kind === \"string\") {\n            return ['\"', utf16StringEscape(stringCase), '\"'];\n        } else if (t instanceof EnumType) {\n            return [this.nameForNamedType(t), \".\", this.nameForEnumCase(t, stringCase)];\n        }\n\n        return panic(`Type ${t.kind} does not have string cases`);\n    }\n\n    private emitTransformer(\n        variable: Sourcelike,\n        xfer: Transformer,\n        targetType: Type,\n        emitFinish: (value: Sourcelike) => void\n    ): boolean {\n        function directTargetType(continuation: Transformer | undefined): Type {\n            if (continuation === undefined) {\n                return targetType;\n            }\n\n            return followTargetType(continuation.sourceType);\n        }\n\n        if (xfer instanceof ChoiceTransformer) {\n            const caseXfers = xfer.transformers;\n            if (caseXfers.length > 1 && caseXfers.every(caseXfer => caseXfer instanceof StringMatchTransformer)) {\n                this.emitLine(\"switch (\", variable, \")\");\n                this.emitBlock(() => {\n                    for (const caseXfer of caseXfers) {\n                        const matchXfer = caseXfer as StringMatchTransformer;\n                        const value = this.stringCaseValue(\n                            followTargetType(matchXfer.sourceType),\n                            matchXfer.stringCase\n                        );\n                        this.emitLine(\"case \", value, \":\");\n                        this.indent(() => {\n                            const allDone = this.emitTransformer(\n                                variable,\n                                matchXfer.transformer,\n                                targetType,\n                                emitFinish\n                            );\n                            if (!allDone) {\n                                this.emitLine(\"break;\");\n                            }\n                        });\n                    }\n                });\n                // FIXME: Can we check for exhaustiveness?  For enums it should be easy.\n                return false;\n            } else {\n                for (const caseXfer of caseXfers) {\n                    this.emitTransformer(variable, caseXfer, targetType, emitFinish);\n                }\n            }\n        } else if (xfer instanceof UnionMemberMatchTransformer) {\n            const memberType = xfer.memberType;\n            const maybeNullable = nullableFromUnion(xfer.sourceType);\n            let test: Sourcelike;\n            let member: Sourcelike;\n            if (maybeNullable !== null) {\n                if (memberType.kind === \"null\") {\n                    test = [variable, \" == null\"];\n                    member = \"null\";\n                } else {\n                    test = [variable, \" != null\"];\n                    member = variable;\n                }\n            } else if (memberType.kind === \"null\") {\n                test = [variable, \".IsNull\"];\n                member = \"null\";\n            } else {\n                const memberName = this.nameForUnionMember(xfer.sourceType, memberType);\n                member = [variable, \".\", memberName];\n                test = [member, \" != null\"];\n            }\n\n            if (memberType.kind !== \"null\" && isValueType(memberType)) {\n                member = [member, \".Value\"];\n            }\n\n            this.emitLine(\"if (\", test, \")\");\n            this.emitBlock(() => this.emitTransformer(member, xfer.transformer, targetType, emitFinish));\n        } else if (xfer instanceof StringMatchTransformer) {\n            const value = this.stringCaseValue(followTargetType(xfer.sourceType), xfer.stringCase);\n            this.emitLine(\"if (\", variable, \" == \", value, \")\");\n            this.emitBlock(() => this.emitTransformer(variable, xfer.transformer, targetType, emitFinish));\n        } else if (xfer instanceof EncodingTransformer) {\n            const converter = this.converterForType(xfer.sourceType);\n            if (converter !== undefined) {\n                this.emitLine(\"var converter = \", this.converterObject(converter), \";\");\n                this.emitLine(\"converter.WriteJson(writer, \", variable, \", serializer);\");\n            } else {\n                this.emitLine(this.serializeValueCode(variable), \";\");\n            }\n\n            emitFinish([]);\n            return true;\n        } else if (xfer instanceof ArrayEncodingTransformer) {\n            this.emitLine(\"writer.WriteStartArray();\");\n            const itemVariable = \"arrayItem\";\n            this.emitLine(\"foreach (var \", itemVariable, \" in \", variable, \")\");\n            this.emitBlock(() => {\n                this.emitTransformer(itemVariable, xfer.itemTransformer, xfer.itemTargetType, () => {\n                    return;\n                });\n            });\n            this.emitLine(\"writer.WriteEndArray();\");\n            emitFinish([]);\n            return true;\n        } else if (xfer instanceof ParseStringTransformer) {\n            const immediateTargetType = xfer.consumer === undefined ? targetType : xfer.consumer.sourceType;\n            switch (immediateTargetType.kind) {\n                case \"date-time\":\n                    this.emitLine(\"DateTimeOffset dt;\");\n                    this.emitLine(\"if (DateTimeOffset.TryParse(\", variable, \", out dt))\");\n                    this.emitBlock(() => this.emitConsume(\"dt\", xfer.consumer, targetType, emitFinish));\n                    break;\n                case \"uuid\":\n                    this.emitLine(\"Guid guid;\");\n                    this.emitLine(\"if (Guid.TryParse(\", variable, \", out guid))\");\n                    this.emitBlock(() => this.emitConsume(\"guid\", xfer.consumer, targetType, emitFinish));\n                    break;\n                case \"uri\":\n                    this.emitLine(\"try\");\n                    this.emitBlock(() => {\n                        // this.emitLine(\"var uri = new Uri(\", variable, \");\");\n                        // The default value about:blank should never happen, but this way we avoid a null reference warning.\n                        this.emitLine('var uri = new Uri(\"about:blank\");');\n                        this.emitLine(\"if (!string.IsNullOrEmpty(stringValue))\");\n                        this.emitBlock(() => {\n                            this.emitLine(\"uri = new Uri(\", variable, \");\");\n                        });\n                        this.emitConsume(\"uri\", xfer.consumer, targetType, emitFinish);\n                    });\n                    this.emitLine(\"catch (UriFormatException) {}\");\n                    break;\n                case \"integer\":\n                    this.emitLine(\"long l;\");\n                    this.emitLine(\"if (Int64.TryParse(\", variable, \", out l))\");\n                    this.emitBlock(() => this.emitConsume(\"l\", xfer.consumer, targetType, emitFinish));\n                    break;\n                case \"bool\":\n                    this.emitLine(\"bool b;\");\n                    this.emitLine(\"if (Boolean.TryParse(\", variable, \", out b))\");\n                    this.emitBlock(() => this.emitConsume(\"b\", xfer.consumer, targetType, emitFinish));\n                    break;\n                default:\n                    return panic(`Parsing string to ${immediateTargetType.kind} not supported`);\n            }\n        } else if (xfer instanceof StringifyTransformer) {\n            switch (xfer.sourceType.kind) {\n                case \"date-time\":\n                    return this.emitConsume(\n                        [variable, '.ToString(\"o\", System.Globalization.CultureInfo.InvariantCulture)'],\n                        xfer.consumer,\n                        targetType,\n                        emitFinish\n                    );\n                case \"uuid\":\n                    return this.emitConsume(\n                        [variable, '.ToString(\"D\", System.Globalization.CultureInfo.InvariantCulture)'],\n                        xfer.consumer,\n                        targetType,\n                        emitFinish\n                    );\n                case \"integer\":\n                case \"uri\":\n                    return this.emitConsume([variable, \".ToString()\"], xfer.consumer, targetType, emitFinish);\n                case \"bool\":\n                    this.emitLine(\"var boolString = \", variable, ' ? \"true\" : \"false\";');\n                    return this.emitConsume(\"boolString\", xfer.consumer, targetType, emitFinish);\n                default:\n                    return panic(`Stringifying ${xfer.sourceType.kind} not supported`);\n            }\n        } else if (xfer instanceof StringProducerTransformer) {\n            const value = this.stringCaseValue(directTargetType(xfer.consumer), xfer.result);\n            return this.emitConsume(value, xfer.consumer, targetType, emitFinish);\n        } else if (xfer instanceof MinMaxLengthCheckTransformer) {\n            const min = xfer.minLength;\n            const max = xfer.maxLength;\n            const conditions: Sourcelike[] = [];\n\n            if (min !== undefined) {\n                conditions.push([variable, \".Length >= \", min.toString()]);\n            }\n\n            if (max !== undefined) {\n                conditions.push([variable, \".Length <= \", max.toString()]);\n            }\n\n            this.emitLine(\"if (\", arrayIntercalate([\" && \"], conditions), \")\");\n            this.emitBlock(() => this.emitConsume(variable, xfer.consumer, targetType, emitFinish));\n            return false;\n        } else if (xfer instanceof MinMaxValueTransformer) {\n            const min = xfer.minimum;\n            const max = xfer.maximum;\n            const conditions: Sourcelike[] = [];\n\n            if (min !== undefined) {\n                conditions.push([variable, \" >= \", min.toString()]);\n            }\n\n            if (max !== undefined) {\n                conditions.push([variable, \" <= \", max.toString()]);\n            }\n\n            this.emitLine(\"if (\", arrayIntercalate([\" && \"], conditions), \")\");\n            this.emitBlock(() => this.emitConsume(variable, xfer.consumer, targetType, emitFinish));\n            return false;\n        } else if (xfer instanceof UnionInstantiationTransformer) {\n            if (!(targetType instanceof UnionType)) {\n                return panic(\"Union instantiation transformer must produce a union type\");\n            }\n\n            const maybeNullable = nullableFromUnion(targetType);\n            if (maybeNullable !== null) {\n                emitFinish(variable);\n            } else {\n                const unionName = this.nameForNamedType(targetType);\n                let initializer: Sourcelike;\n                if (xfer.sourceType.kind === \"null\") {\n                    initializer = \" \";\n                } else {\n                    const memberName = this.nameForUnionMember(targetType, xfer.sourceType);\n                    initializer = [\" \", memberName, \" = \", variable, \" \"];\n                }\n\n                emitFinish([\"new \", unionName, \" {\", initializer, \"}\"]);\n            }\n\n            return true;\n        } else {\n            return panic(\"Unknown transformer\");\n        }\n\n        return false;\n    }\n\n    private emitTransformation(converterName: Name, t: Type): void {\n        const xf = defined(transformationForType(t));\n        const reverse = xf.reverse;\n        const targetType = xf.targetType;\n        const xfer = xf.transformer;\n        const csType = this.csType(targetType);\n        // const haveNullable = isValueType(targetType);\n\n        // if (haveNullable) {\n        //     converterName = ['Nullable', converterName];\n        //     csType = [csType, \"?\"];\n        // }\n        this.emitType(\n            undefined,\n            AccessModifier.Internal,\n            \"class\",\n            converterName,\n            [\"JsonConverter<\", csType, \">\"],\n            () => {\n                let canConvertExpr: Sourcelike = [\"t == typeof(\", csType, \")\"];\n                this.emitCanConvert(canConvertExpr);\n                this.ensureBlankLine();\n                this.emitReadJson(() => {\n                    // FIXME: It's unsatisfying that we need this.  The reason is that we not\n                    // only match T, but also T?.  If we didn't, then the T in T? would not be\n                    // deserialized with our converter but with the default one.  Can we check\n                    // whether the type is a nullable?\n                    // FIXME: This could duplicate one of the cases handled below in\n                    // `emitDecodeTransformer`.\n                    // if (haveNullable && !(targetType instanceof UnionType)) {\n                    //     this.emitLine(\"if (reader.TokenType == JsonTokenType.Null) return null;\");\n                    // }\n\n                    const allHandled = this.emitDecodeTransformer(xfer, targetType, v =>\n                        this.emitLine(\"return \", v, \";\")\n                    );\n                    if (!allHandled) {\n                        this.emitThrow(['\"Cannot unmarshal type ', csType, '\"']);\n                    }\n                }, csType);\n                this.ensureBlankLine();\n                this.emitWriteJson(\n                    \"value\",\n                    () => {\n                        // FIXME: See above.\n                        // if (haveNullable && !(targetType instanceof UnionType)) {\n                        //     this.emitLine(\"if (value == null)\");\n                        //     this.emitBlock(() => {\n                        //         this.emitLine(\"writer.WriteNullValue();\");\n                        //         this.emitLine(\"return;\");\n                        //     });\n                        // }\n\n                        const allHandled = this.emitTransformer(\"value\", reverse.transformer, reverse.targetType, () =>\n                            this.emitLine(\"return;\")\n                        );\n                        if (!allHandled) {\n                            this.emitThrow(['\"Cannot marshal type ', csType, '\"']);\n                        }\n                    },\n                    csType\n                );\n                this.ensureBlankLine();\n                this.emitLine(\"public static readonly \", converterName, \" Singleton = new \", converterName, \"();\");\n            }\n        );\n    }\n\n    protected emitRequiredHelpers(): void {\n        if (this._needHelpers) {\n            this.forEachTopLevel(\"leading-and-interposing\", (t, n) => this.emitFromJsonForTopLevel(t, n));\n            this.ensureBlankLine();\n            this.emitSerializeClass();\n        }\n\n        if (this._needHelpers || (this._needAttributes && (this.haveNamedUnions || this.haveEnums))) {\n            this.ensureBlankLine();\n            this.emitConverterClass();\n            this.forEachTransformation(\"leading-and-interposing\", (n, t) => this.emitTransformation(n, t));\n            this.emitMultiline(`\npublic class DateOnlyConverter : JsonConverter<DateOnly>\n{\n    private readonly string serializationFormat;\n    public DateOnlyConverter() : this(null) { }\n\n    public DateOnlyConverter(string? serializationFormat)\n    {\n        this.serializationFormat = serializationFormat ?? \"yyyy-MM-dd\";\n    }\n\n    public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\n    {\n        var value = reader.GetString();\n        return DateOnly.Parse(value!);\n    }\n\n    public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)\n        => writer.WriteStringValue(value.ToString(serializationFormat));\n}\n\npublic class TimeOnlyConverter : JsonConverter<TimeOnly>\n{\n    private readonly string serializationFormat;\n\n    public TimeOnlyConverter() : this(null) { }\n\n    public TimeOnlyConverter(string? serializationFormat)\n    {\n        this.serializationFormat = serializationFormat ?? \"HH:mm:ss.fff\";\n    }\n\n    public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\n    {\n        var value = reader.GetString();\n        return TimeOnly.Parse(value!);\n    }\n\n    public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)\n        => writer.WriteStringValue(value.ToString(serializationFormat));\n}\n\ninternal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>\n{\n    public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);\n\n    private const string DefaultDateTimeFormat = \"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK\";\n\n    private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;\n    private string? _dateTimeFormat;\n    private CultureInfo? _culture;\n\n    public DateTimeStyles DateTimeStyles\n    {\n        get => _dateTimeStyles;\n        set => _dateTimeStyles = value;\n    }\n\n    public string? DateTimeFormat\n    {\n        get => _dateTimeFormat ?? string.Empty;\n        set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;\n    }\n\n    public CultureInfo Culture\n    {\n        get => _culture ?? CultureInfo.CurrentCulture;\n        set => _culture = value;\n    }\n\n    public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)\n    {\n        string text;\n\n\n        if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal\n            || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)\n        {\n            value = value.ToUniversalTime();\n        }\n\n        text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);\n\n        writer.WriteStringValue(text);\n    }\n\n    public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\n    {\n        string? dateText = reader.GetString();\n        \n        if (string.IsNullOrEmpty(dateText) == false)\n        {\n            if (!string.IsNullOrEmpty(_dateTimeFormat))\n            {\n                return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);\n            }\n            else\n            {\n                return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);\n            }\n        }\n        else\n        {\n            return default(DateTimeOffset);\n        }\n    }\n\n\n    public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();\n}`);\n        }\n    }\n\n    protected needNamespace(): boolean {\n        return this._needNamespaces;\n    }\n}\n","import { anyTypeIssueAnnotation, nullTypeIssueAnnotation } from \"../Annotation\";\nimport { ConvenienceRenderer, type ForbiddenWordsInfo } from \"../ConvenienceRenderer\";\nimport { DependencyName, type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { BooleanOption, type Option, type OptionValues, StringOption, getOptionValues } from \"../RendererOptions\";\nimport { type Sourcelike, maybeAnnotated, modifySource } from \"../Source\";\nimport {\n    allLowerWordStyle,\n    allUpperWordStyle,\n    combineWords,\n    decapitalize,\n    escapeNonPrintableMapper,\n    firstUpperWordStyle,\n    isAscii,\n    isDigit,\n    isLetter,\n    isPrintable,\n    snakeCase,\n    splitIntoWords,\n    standardUnicodeHexEscape,\n    utf16ConcatMap,\n    utf16LegalizeCharacters\n} from \"../support/Strings\";\nimport { defined } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport {\n    type ClassProperty,\n    type ClassType,\n    EnumType,\n    type PrimitiveStringTypeKind,\n    type TransformedStringTypeKind,\n    type Type,\n    type UnionType\n} from \"../Type\";\nimport { type StringTypeMapping } from \"../TypeBuilder\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { directlyReachableSingleNamedType, matchType, nullableFromUnion } from \"../TypeUtils\";\n\nexport const dartOptions = {\n    nullSafety: new BooleanOption(\"null-safety\", \"Null Safety\", true),\n    justTypes: new BooleanOption(\"just-types\", \"Types only\", false),\n    codersInClass: new BooleanOption(\"coders-in-class\", \"Put encoder & decoder in Class\", false),\n    methodNamesWithMap: new BooleanOption(\"from-map\", \"Use method names fromMap() & toMap()\", false, \"secondary\"),\n    requiredProperties: new BooleanOption(\"required-props\", \"Make all properties required\", false),\n    finalProperties: new BooleanOption(\"final-props\", \"Make all properties final\", false),\n    generateCopyWith: new BooleanOption(\"copy-with\", \"Generate CopyWith method\", false),\n    useFreezed: new BooleanOption(\n        \"use-freezed\",\n        \"Generate class definitions with @freezed compatibility\",\n        false,\n        \"secondary\"\n    ),\n    useHive: new BooleanOption(\"use-hive\", \"Generate annotations for Hive type adapters\", false, \"secondary\"),\n    useJsonAnnotation: new BooleanOption(\n        \"use-json-annotation\",\n        \"Generate annotations for json_serializable\",\n        false,\n        \"secondary\"\n    ),\n    partName: new StringOption(\"part-name\", \"Use this name in `part` directive\", \"NAME\", \"\", \"secondary\")\n};\n\nexport class DartTargetLanguage extends TargetLanguage {\n    public constructor() {\n        super(\"Dart\", [\"dart\"], \"dart\");\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [\n            dartOptions.nullSafety,\n            dartOptions.justTypes,\n            dartOptions.codersInClass,\n            dartOptions.methodNamesWithMap,\n            dartOptions.requiredProperties,\n            dartOptions.finalProperties,\n            dartOptions.generateCopyWith,\n            dartOptions.useFreezed,\n            dartOptions.useHive,\n            dartOptions.useJsonAnnotation,\n            dartOptions.partName\n        ];\n    }\n\n    public get supportsUnionsWithBothNumberTypes(): boolean {\n        return true;\n    }\n\n    public get stringTypeMapping(): StringTypeMapping {\n        const mapping: Map<TransformedStringTypeKind, PrimitiveStringTypeKind> = new Map();\n        mapping.set(\"date\", \"date\");\n        mapping.set(\"date-time\", \"date-time\");\n        return mapping;\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): DartRenderer {\n        const options = getOptionValues(dartOptions, untypedOptionValues);\n        return new DartRenderer(this, renderContext, options);\n    }\n}\n\nconst keywords = [\n    \"abstract\",\n    \"do\",\n    \"import\",\n    \"super\",\n    \"as\",\n    \"dynamic\",\n    \"in\",\n    \"switch\",\n    \"assert\",\n    \"else\",\n    \"interface\",\n    \"sync*\",\n    \"async\",\n    \"enum\",\n    \"is\",\n    \"this\",\n    \"async*\",\n    \"export\",\n    \"library\",\n    \"throw\",\n    \"await\",\n    \"external\",\n    \"mixin\",\n    \"true\",\n    \"break\",\n    \"extends\",\n    \"new\",\n    \"try\",\n    \"case\",\n    \"factory\",\n    \"null\",\n    \"typedef\",\n    \"catch\",\n    \"false\",\n    \"operator\",\n    \"var\",\n    \"class\",\n    \"final\",\n    \"part\",\n    \"void\",\n    \"const\",\n    \"finally\",\n    \"rethrow\",\n    \"while\",\n    \"continue\",\n    \"for\",\n    \"return\",\n    \"with\",\n    \"covariant\",\n    \"get\",\n    \"set\",\n    \"yield\",\n    \"default\",\n    \"if\",\n    \"static\",\n    \"yield*\",\n    \"deferred\",\n    \"implements\",\n    \"int\",\n    \"double\",\n    \"bool\",\n    \"Map\",\n    \"List\",\n    \"String\",\n    \"File\",\n    \"fromJson\",\n    \"toJson\",\n    \"fromMap\",\n    \"toMap\"\n];\n\nconst typeNamingFunction = funPrefixNamer(\"types\", n => dartNameStyle(true, false, n));\nconst propertyNamingFunction = funPrefixNamer(\"properties\", n => dartNameStyle(false, false, n));\nconst enumCaseNamingFunction = funPrefixNamer(\"enum-cases\", n => dartNameStyle(true, true, n));\n\n// Escape the dollar sign, which is used in string interpolation\nconst stringEscape = utf16ConcatMap(\n    escapeNonPrintableMapper(cp => isPrintable(cp) && cp !== 0x24, standardUnicodeHexEscape)\n);\n\nfunction isStartCharacter(codePoint: number): boolean {\n    if (codePoint === 0x5f) return false; // underscore\n    return isAscii(codePoint) && isLetter(codePoint);\n}\n\nfunction isPartCharacter(codePoint: number): boolean {\n    return isStartCharacter(codePoint) || (isAscii(codePoint) && isDigit(codePoint));\n}\n\nconst legalizeName = utf16LegalizeCharacters(isPartCharacter);\n\n// FIXME: Handle acronyms consistently.  In particular, that means that\n// we have to use namers to produce the getter and setter names - we can't\n// just capitalize and concatenate.\n// https://stackoverflow.com/questions/8277355/naming-convention-for-upper-case-abbreviations\nfunction dartNameStyle(startWithUpper: boolean, upperUnderscore: boolean, original: string): string {\n    const words = splitIntoWords(original);\n    const firstWordStyle = upperUnderscore\n        ? allUpperWordStyle\n        : startWithUpper\n          ? firstUpperWordStyle\n          : allLowerWordStyle;\n    const restWordStyle = upperUnderscore ? allUpperWordStyle : firstUpperWordStyle;\n    return combineWords(\n        words,\n        legalizeName,\n        firstWordStyle,\n        restWordStyle,\n        firstWordStyle,\n        restWordStyle,\n        upperUnderscore ? \"_\" : \"\",\n        isStartCharacter\n    );\n}\n\ninterface TopLevelDependents {\n    decoder: Name;\n    encoder: Name;\n}\n\nexport class DartRenderer extends ConvenienceRenderer {\n    private readonly _gettersAndSettersForPropertyName = new Map<Name, [Name, Name]>();\n\n    private _needEnumValues = false;\n\n    private classCounter = 0;\n\n    private classPropertyCounter = 0;\n\n    private readonly _topLevelDependents = new Map<Name, TopLevelDependents>();\n\n    private readonly _enumValues = new Map<EnumType, Name>();\n\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        private readonly _options: OptionValues<typeof dartOptions>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return keywords;\n    }\n\n    protected forbiddenForObjectProperties(_c: ClassType, _className: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return typeNamingFunction;\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return propertyNamingFunction;\n    }\n\n    protected makeUnionMemberNamer(): Namer {\n        return propertyNamingFunction;\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return enumCaseNamingFunction;\n    }\n\n    protected unionNeedsName(u: UnionType): boolean {\n        return nullableFromUnion(u) === null;\n    }\n\n    protected namedTypeToNameForTopLevel(type: Type): Type | undefined {\n        // If the top-level type doesn't contain any classes or unions\n        // we have to define a class just for the `FromJson` method, in\n        // emitFromJsonForTopLevel.\n        return directlyReachableSingleNamedType(type);\n    }\n\n    protected get toJson(): string {\n        return `to${this._options.methodNamesWithMap ? \"Map\" : \"Json\"}`;\n    }\n\n    protected get fromJson(): string {\n        return `from${this._options.methodNamesWithMap ? \"Map\" : \"Json\"}`;\n    }\n\n    protected makeTopLevelDependencyNames(_t: Type, name: Name): DependencyName[] {\n        const encoder = new DependencyName(\n            propertyNamingFunction,\n            name.order,\n            lookup => `${lookup(name)}_${this.toJson}`\n        );\n        const decoder = new DependencyName(\n            propertyNamingFunction,\n            name.order,\n            lookup => `${lookup(name)}_${this.fromJson}`\n        );\n        this._topLevelDependents.set(name, { encoder, decoder });\n        return [encoder, decoder];\n    }\n\n    protected makeNamesForPropertyGetterAndSetter(\n        _c: ClassType,\n        _className: Name,\n        _p: ClassProperty,\n        _jsonName: string,\n        name: Name\n    ): [Name, Name] {\n        const getterName = new DependencyName(propertyNamingFunction, name.order, lookup => `get_${lookup(name)}`);\n        const setterName = new DependencyName(propertyNamingFunction, name.order, lookup => `set_${lookup(name)}`);\n        return [getterName, setterName];\n    }\n\n    protected makePropertyDependencyNames(\n        c: ClassType,\n        className: Name,\n        p: ClassProperty,\n        jsonName: string,\n        name: Name\n    ): Name[] {\n        const getterAndSetterNames = this.makeNamesForPropertyGetterAndSetter(c, className, p, jsonName, name);\n        this._gettersAndSettersForPropertyName.set(name, getterAndSetterNames);\n        return getterAndSetterNames;\n    }\n\n    protected makeNamedTypeDependencyNames(t: Type, name: Name): DependencyName[] {\n        if (!(t instanceof EnumType)) return [];\n        const enumValue = new DependencyName(propertyNamingFunction, name.order, lookup => `${lookup(name)}_values`);\n        this._enumValues.set(t, enumValue);\n        return [enumValue];\n    }\n\n    protected emitFileHeader(): void {\n        if (this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n        }\n\n        if (this._options.justTypes) return;\n\n        if (!this._options.codersInClass) {\n            this.emitLine(\"// To parse this JSON data, do\");\n            this.emitLine(\"//\");\n            this.forEachTopLevel(\"none\", (_t, name) => {\n                const { decoder } = defined(this._topLevelDependents.get(name));\n                this.emitLine(\"//     final \", modifySource(decapitalize, name), \" = \", decoder, \"(jsonString);\");\n            });\n        }\n\n        this.ensureBlankLine();\n        if (this._options.requiredProperties) {\n            this.emitLine(\"import 'package:meta/meta.dart';\");\n        }\n\n        if (this._options.useFreezed) {\n            this.emitLine(\"import 'package:freezed_annotation/freezed_annotation.dart';\");\n        }\n\n        if (this._options.useHive) {\n            this.emitLine(\"import 'package:hive/hive.dart';\");\n        }\n\n        if (this._options.useJsonAnnotation && !this._options.useFreezed) {\n            // The freezed annotatation import already provides the import for json_annotation\n            this.emitLine(\"import 'package:json_annotation/json_annotation.dart';\");\n        }\n\n        this.emitLine(\"import 'dart:convert';\");\n        if (this._options.useFreezed || this._options.useHive || this._options.useJsonAnnotation) {\n            this.ensureBlankLine();\n            const optionNameIsEmpty = this._options.partName.length === 0;\n            // FIXME: This should use a `Name`, not `modifySource`\n            const name = modifySource(\n                snakeCase,\n                optionNameIsEmpty ? [...this.topLevels.keys()][0] : this._options.partName\n            );\n            if (this._options.useFreezed) {\n                this.emitLine(\"part '\", name, \".freezed.dart';\");\n            }\n\n            if (!this._options.justTypes) {\n                this.emitLine(\"part '\", name, \".g.dart';\");\n            }\n        }\n    }\n\n    protected emitDescriptionBlock(lines: Sourcelike[]): void {\n        this.emitCommentLines(lines, { lineStart: \"///\", beforeComment: \"\" });\n    }\n\n    protected emitBlock(line: Sourcelike, f: () => void): void {\n        this.emitLine(line, \" {\");\n        this.indent(f);\n        this.emitLine(\"}\");\n    }\n\n    protected dartType(t: Type, withIssues = false, forceNullable = false): Sourcelike {\n        const nullable =\n            forceNullable || (this._options.nullSafety && t.isNullable && !this._options.requiredProperties);\n        const withNullable = (s: Sourcelike): Sourcelike => (nullable ? [s, \"?\"] : s);\n        return matchType<Sourcelike>(\n            t,\n            _anyType => maybeAnnotated(withIssues, anyTypeIssueAnnotation, \"dynamic\"),\n            _nullType => maybeAnnotated(withIssues, nullTypeIssueAnnotation, \"dynamic\"),\n            _boolType => withNullable(\"bool\"),\n            _integerType => withNullable(\"int\"),\n            _doubleType => withNullable(\"double\"),\n            _stringType => withNullable(\"String\"),\n            arrayType => withNullable([\"List<\", this.dartType(arrayType.items, withIssues), \">\"]),\n            classType => withNullable(this.nameForNamedType(classType)),\n            mapType => withNullable([\"Map<String, \", this.dartType(mapType.values, withIssues), \">\"]),\n            enumType => withNullable(this.nameForNamedType(enumType)),\n            unionType => {\n                const maybeNullable = nullableFromUnion(unionType);\n                if (maybeNullable === null) {\n                    return \"dynamic\";\n                }\n\n                return withNullable(this.dartType(maybeNullable, withIssues));\n            },\n            transformedStringType => {\n                switch (transformedStringType.kind) {\n                    case \"date-time\":\n                    case \"date\":\n                        return withNullable(\"DateTime\");\n                    default:\n                        return withNullable(\"String\");\n                }\n            }\n        );\n    }\n\n    protected mapList(isNullable: boolean, itemType: Sourcelike, list: Sourcelike, mapper: Sourcelike): Sourcelike {\n        if (this._options.nullSafety && isNullable && !this._options.requiredProperties) {\n            return [list, \" == null ? [] : \", \"List<\", itemType, \">.from(\", list, \"!.map((x) => \", mapper, \"))\"];\n        }\n\n        return [\"List<\", itemType, \">.from(\", list, \".map((x) => \", mapper, \"))\"];\n    }\n\n    protected mapMap(isNullable: boolean, valueType: Sourcelike, map: Sourcelike, valueMapper: Sourcelike): Sourcelike {\n        if (this._options.nullSafety && isNullable && !this._options.requiredProperties) {\n            return [\"Map.from(\", map, \"!).map((k, v) => MapEntry<String, \", valueType, \">(k, \", valueMapper, \"))\"];\n        }\n\n        return [\"Map.from(\", map, \").map((k, v) => MapEntry<String, \", valueType, \">(k, \", valueMapper, \"))\"];\n    }\n\n    protected mapClass(isNullable: boolean, classType: ClassType, dynamic: Sourcelike): Sourcelike {\n        if (this._options.nullSafety && isNullable && !this._options.requiredProperties) {\n            return [\n                dynamic,\n                \" == null ? null : \",\n                this.nameForNamedType(classType),\n                \".\",\n                this.fromJson,\n                \"(\",\n                dynamic,\n                \")\"\n            ];\n        }\n\n        return [this.nameForNamedType(classType), \".\", this.fromJson, \"(\", dynamic, \")\"];\n    }\n\n    // FIXME: refactor this\n    // If the first time is the unionType type, after nullableFromUnion conversion,\n    // the isNullable property will become false, which is obviously wrong,\n    // so add isNullable property\n    // eslint-disable-next-line @typescript-eslint/default-param-last\n    protected fromDynamicExpression(isNullable: boolean = false, t: Type, ...dynamic: Sourcelike[]): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => dynamic,\n            _nullType => dynamic, // FIXME: check null\n            _boolType => dynamic,\n            _integerType => dynamic,\n            _doubleType => [dynamic, this._options.nullSafety ? \"?.toDouble()\" : \".toDouble()\"],\n            _stringType => dynamic,\n            arrayType =>\n                this.mapList(\n                    isNullable || arrayType.isNullable,\n                    this.dartType(arrayType.items),\n                    dynamic,\n                    this.fromDynamicExpression(arrayType.items.isNullable, arrayType.items, \"x\")\n                ),\n            classType => this.mapClass(isNullable || classType.isNullable, classType, dynamic),\n            mapType =>\n                this.mapMap(\n                    mapType.isNullable || isNullable,\n                    this.dartType(mapType.values),\n                    dynamic,\n                    this.fromDynamicExpression(mapType.values.isNullable, mapType.values, \"v\")\n                ),\n            enumType => {\n                return [\n                    defined(this._enumValues.get(enumType)),\n                    \".map[\",\n                    dynamic,\n                    this._options.nullSafety ? \"]!\" : \"]\"\n                ];\n            },\n            unionType => {\n                const maybeNullable = nullableFromUnion(unionType);\n                if (maybeNullable === null) {\n                    return dynamic;\n                }\n\n                return this.fromDynamicExpression(unionType.isNullable, maybeNullable, dynamic);\n            },\n            transformedStringType => {\n                switch (transformedStringType.kind) {\n                    case \"date-time\":\n                    case \"date\":\n                        if (\n                            (transformedStringType.isNullable || isNullable) &&\n                            !this._options.requiredProperties &&\n                            this._options.nullSafety\n                        ) {\n                            return [dynamic, \" == null ? null : \", \"DateTime.parse(\", dynamic, \")\"];\n                        }\n\n                        return [\"DateTime.parse(\", dynamic, \")\"];\n                    default:\n                        return dynamic;\n                }\n            }\n        );\n    }\n\n    // FIXME: refactor this\n    // If the first time is the unionType type, after nullableFromUnion conversion,\n    // the isNullable property will become false, which is obviously wrong,\n    // so add isNullable property\n    // eslint-disable-next-line @typescript-eslint/default-param-last\n    protected toDynamicExpression(isNullable: boolean = false, t: Type, ...dynamic: Sourcelike[]): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => dynamic,\n            _nullType => dynamic,\n            _boolType => dynamic,\n            _integerType => dynamic,\n            _doubleType => dynamic,\n            _stringType => dynamic,\n            arrayType =>\n                this.mapList(\n                    arrayType.isNullable || isNullable,\n                    \"dynamic\",\n                    dynamic,\n                    this.toDynamicExpression(arrayType.items.isNullable, arrayType.items, \"x\")\n                ),\n            _classType => {\n                if (\n                    this._options.nullSafety &&\n                    (_classType.isNullable || isNullable) &&\n                    !this._options.requiredProperties\n                ) {\n                    return [dynamic, \"?.\", this.toJson, \"()\"];\n                }\n\n                return [dynamic, \".\", this.toJson, \"()\"];\n            },\n            mapType =>\n                this.mapMap(\n                    mapType.isNullable || isNullable,\n                    \"dynamic\",\n                    dynamic,\n                    this.toDynamicExpression(mapType.values.isNullable, mapType.values, \"v\")\n                ),\n            enumType => {\n                return [defined(this._enumValues.get(enumType)), \".reverse[\", dynamic, \"]\"];\n            },\n            unionType => {\n                const maybeNullable = nullableFromUnion(unionType);\n                if (maybeNullable === null) {\n                    return dynamic;\n                }\n\n                return this.toDynamicExpression(unionType.isNullable, maybeNullable, dynamic);\n            },\n            transformedStringType => {\n                switch (transformedStringType.kind) {\n                    case \"date-time\":\n                        if (\n                            this._options.nullSafety &&\n                            !this._options.requiredProperties &&\n                            (transformedStringType.isNullable || isNullable)\n                        ) {\n                            return [dynamic, \"?.toIso8601String()\"];\n                        }\n\n                        return [dynamic, \".toIso8601String()\"];\n                    case \"date\":\n                        if (\n                            this._options.nullSafety &&\n                            !this._options.requiredProperties &&\n                            (transformedStringType.isNullable || isNullable)\n                        ) {\n                            return [\n                                '\"${',\n                                dynamic,\n                                \"!.year.toString().padLeft(4, '0')\",\n                                \"}-${\",\n                                dynamic,\n                                \"!.month.toString().padLeft(2, '0')}-${\",\n                                dynamic,\n                                \"!.day.toString().padLeft(2, '0')}\\\"\"\n                            ];\n                        }\n\n                        return [\n                            '\"${',\n                            dynamic,\n                            \".year.toString().padLeft(4, '0')\",\n                            \"}-${\",\n                            dynamic,\n                            \".month.toString().padLeft(2, '0')}-${\",\n                            dynamic,\n                            \".day.toString().padLeft(2, '0')}\\\"\"\n                        ];\n                    default:\n                        return dynamic;\n                }\n            }\n        );\n    }\n\n    private _emitEmptyConstructor(className: Name): void {\n        this.emitLine(className, \"();\");\n    }\n\n    private _emitConstructor(c: ClassType, className: Name): void {\n        this.emitLine(className, \"({\");\n        this.indent(() => {\n            this.forEachClassProperty(c, \"none\", (name, _, prop) => {\n                const required =\n                    this._options.requiredProperties ||\n                    (this._options.nullSafety && (!prop.type.isNullable || !prop.isOptional));\n                this.emitLine(required ? \"required \" : \"\", \"this.\", name, \",\");\n            });\n        });\n        this.emitLine(\"});\");\n        this.ensureBlankLine();\n    }\n\n    private _emitVariables(c: ClassType): void {\n        this.forEachClassProperty(c, \"none\", (name, jsonName, p) => {\n            const description = this.descriptionForClassProperty(c, jsonName);\n            if (description !== undefined) {\n                this.emitDescription(description);\n            }\n\n            if (this._options.useHive) {\n                this.classPropertyCounter++;\n                this.emitLine(`@HiveField(${this.classPropertyCounter})`);\n            }\n\n            if (this._options.useJsonAnnotation) {\n                this.classPropertyCounter++;\n                this.emitLine(`@JsonKey(name: \"${jsonName}\")`);\n            }\n\n            this.emitLine(this._options.finalProperties ? \"final \" : \"\", this.dartType(p.type, true), \" \", name, \";\");\n        });\n    }\n\n    private _emitCopyConstructor(c: ClassType, className: Name): void {\n        this.ensureBlankLine();\n        this.emitLine(className, \" copyWith({\");\n        this.indent(() => {\n            this.forEachClassProperty(c, \"none\", (name, _, _p) => {\n                this.emitLine(this.dartType(_p.type, true, true), \" \", name, \",\");\n            });\n        });\n        this.emitLine(\"}) => \");\n        this.indent(() => {\n            this.emitLine(className, \"(\");\n            this.indent(() => {\n                this.forEachClassProperty(c, \"none\", (name, _, _p) => {\n                    this.emitLine(name, \": \", name, \" ?? \", \"this.\", name, \",\");\n                });\n            });\n            this.emitLine(\");\");\n        });\n    }\n\n    private _emitStringJsonEncoderDecoder(className: Name): void {\n        this.ensureBlankLine();\n        this.emitLine(\n            \"factory \",\n            className,\n            \".from\",\n            this._options.methodNamesWithMap ? \"Json\" : \"RawJson\",\n            \"(String str) => \",\n            className,\n            \".\",\n            this.fromJson,\n            \"(json.decode(str));\"\n        );\n\n        this.ensureBlankLine();\n        this.emitLine(\n            \"String \",\n            this._options.methodNamesWithMap ? \"toJson() => \" : \"toRawJson() => \",\n            \"json.encode(\",\n            this.toJson,\n            \"());\"\n        );\n    }\n\n    private _emitMapEncoderDecoder(c: ClassType, className: Name): void {\n        this.ensureBlankLine();\n        this.emitLine(\"factory \", className, \".\", this.fromJson, \"(Map<String, dynamic> json) => \", className, \"(\");\n        this.indent(() => {\n            this.forEachClassProperty(c, \"none\", (name, jsonName, property) => {\n                this.emitLine(\n                    name,\n                    \": \",\n                    this.fromDynamicExpression(\n                        property.type.isNullable,\n                        property.type,\n                        'json[\"',\n                        stringEscape(jsonName),\n                        '\"]'\n                    ),\n                    \",\"\n                );\n            });\n        });\n        this.emitLine(\");\");\n\n        this.ensureBlankLine();\n\n        this.emitLine(\"Map<String, dynamic> \", this.toJson, \"() => {\");\n        this.indent(() => {\n            this.forEachClassProperty(c, \"none\", (name, jsonName, property) => {\n                this.emitLine(\n                    '\"',\n                    stringEscape(jsonName),\n                    '\": ',\n                    this.toDynamicExpression(property.type.isNullable, property.type, name),\n                    \",\"\n                );\n            });\n        });\n        this.emitLine(\"};\");\n    }\n\n    protected emitClassDefinition(c: ClassType, className: Name): void {\n        this.emitDescription(this.descriptionForType(c));\n        if (this._options.useHive) {\n            this.classCounter++;\n            this.emitLine(`@HiveType(typeId: ${this.classCounter})`);\n            this.classPropertyCounter = 0;\n        }\n\n        if (this._options.useJsonAnnotation) {\n            this.emitLine(\"@JsonSerializable()\");\n        }\n\n        this.emitBlock([\"class \", className], () => {\n            if (c.getProperties().size === 0) {\n                this._emitEmptyConstructor(className);\n            } else {\n                this._emitVariables(c);\n                this.ensureBlankLine();\n                this._emitConstructor(c, className);\n            }\n\n            if (this._options.generateCopyWith) {\n                this._emitCopyConstructor(c, className);\n            }\n\n            if (this._options.useJsonAnnotation) {\n                this.ensureBlankLine();\n                this.emitLine(\n                    // factory PublicAnswer.fromJson(Map<String, dynamic> json) => _$PublicAnswerFromJson(json);\n                    \"factory \",\n                    className,\n                    \".fromJson(Map<String, dynamic> json) => \",\n                    \"_$\",\n                    className,\n                    \"FromJson(json);\"\n                );\n\n                this.ensureBlankLine();\n                this.emitLine(\n                    // Map<String, dynamic> toJson() => _$PublicAnswerToJson(this);\n                    \"Map<String, dynamic> toJson() => \",\n                    \"_$\",\n                    className,\n                    \"ToJson(this);\"\n                );\n            } else {\n                if (this._options.justTypes) return;\n\n                if (this._options.codersInClass) {\n                    this._emitStringJsonEncoderDecoder(className);\n                }\n\n                this._emitMapEncoderDecoder(c, className);\n            }\n        });\n    }\n\n    protected emitFreezedClassDefinition(c: ClassType, className: Name): void {\n        this.emitDescription(this.descriptionForType(c));\n\n        this.emitLine(\"@freezed\");\n        this.emitBlock([\"class \", className, \" with _$\", className], () => {\n            if (c.getProperties().size === 0) {\n                this.emitLine(\"const factory \", className, \"() = _\", className, \";\");\n            } else {\n                this.emitLine(\"const factory \", className, \"({\");\n                this.indent(() => {\n                    this.forEachClassProperty(c, \"none\", (name, jsonName, prop) => {\n                        const description = this.descriptionForClassProperty(c, jsonName);\n                        if (description !== undefined) {\n                            this.emitDescription(description);\n                        }\n\n                        const required =\n                            this._options.requiredProperties ||\n                            (this._options.nullSafety && (!prop.type.isNullable || !prop.isOptional));\n                        if (this._options.useJsonAnnotation) {\n                            this.classPropertyCounter++;\n                            this.emitLine(`@JsonKey(name: \"${jsonName}\")`);\n                        }\n\n                        this.emitLine(required ? \"required \" : \"\", this.dartType(prop.type, true), \" \", name, \",\");\n                    });\n                });\n                this.emitLine(\"}) = _\", className, \";\");\n            }\n\n            if (this._options.justTypes) return;\n\n            this.ensureBlankLine();\n            this.emitLine(\n                // factory PublicAnswer.fromJson(Map<String, dynamic> json) => _$PublicAnswerFromJson(json);\n                \"factory \",\n                className,\n                \".fromJson(Map<String, dynamic> json) => \",\n                \"_$\",\n                className,\n                \"FromJson(json);\"\n            );\n        });\n    }\n\n    protected emitEnumDefinition(e: EnumType, enumName: Name): void {\n        this.emitDescription(this.descriptionForType(e));\n        this.emitLine(\"enum \", enumName, \" {\");\n        this.indent(() => {\n            this.forEachEnumCase(e, \"none\", (name, jsonName, pos) => {\n                const comma = pos === \"first\" || pos === \"middle\" ? \",\" : [];\n                if (this._options.useJsonAnnotation) {\n                    this.emitLine('@JsonValue(\"', stringEscape(jsonName), '\")');\n                }\n\n                this.emitLine(name, comma);\n            });\n        });\n        this.emitLine(\"}\");\n\n        if (this._options.justTypes) return;\n\n        this.ensureBlankLine();\n        this.emitLine(\"final \", defined(this._enumValues.get(e)), \" = EnumValues({\");\n        this.indent(() => {\n            this.forEachEnumCase(e, \"none\", (name, jsonName, pos) => {\n                const comma = pos === \"first\" || pos === \"middle\" ? \",\" : [];\n                this.emitLine('\"', stringEscape(jsonName), '\": ', enumName, \".\", name, comma);\n            });\n        });\n        this.emitLine(\"});\");\n\n        this._needEnumValues = true;\n    }\n\n    protected emitEnumValues(): void {\n        this.ensureBlankLine();\n        this.emitMultiline(`class EnumValues<T> {\n    Map<String, T> map;\n    late Map<T, String> reverseMap;\n\n    EnumValues(this.map);\n\n    Map<T, String> get reverse {\n        reverseMap = map.map((k, v) => MapEntry(v, k));\n        return reverseMap;\n    }\n}`);\n    }\n\n    private _emitTopLvlEncoderDecoder(): void {\n        this.forEachTopLevel(\"leading-and-interposing\", (t, name) => {\n            const { encoder, decoder } = defined(this._topLevelDependents.get(name));\n\n            this.emitLine(\n                this.dartType(t),\n                \" \",\n                decoder,\n                \"(String str) => \",\n                this.fromDynamicExpression(t.isNullable, t, \"json.decode(str)\"),\n                \";\"\n            );\n\n            this.ensureBlankLine();\n\n            this.emitLine(\n                \"String \",\n                encoder,\n                \"(\",\n                this.dartType(t),\n                \" data) => json.encode(\",\n                this.toDynamicExpression(t.isNullable, t, \"data\"),\n                \");\"\n            );\n\n            // this.emitBlock([\"String \", encoder, \"(\", this.dartType(t), \" data)\"], () => {\n            //     this.emitJsonEncoderBlock(t);\n            // });\n        });\n    }\n\n    protected emitSourceStructure(): void {\n        this.emitFileHeader();\n\n        if (!this._options.justTypes && !this._options.codersInClass) {\n            this._emitTopLvlEncoderDecoder();\n        }\n\n        this.forEachNamedType(\n            \"leading-and-interposing\",\n            (c: ClassType, n: Name) =>\n                this._options.useFreezed ? this.emitFreezedClassDefinition(c, n) : this.emitClassDefinition(c, n),\n            (e, n) => this.emitEnumDefinition(e, n),\n            (_e, _n) => {\n                // We don't support this yet.\n            }\n        );\n\n        if (this._needEnumValues) {\n            this.emitEnumValues();\n        }\n    }\n}\n","import * as unicode from \"unicode-properties\";\n\nimport { ConvenienceRenderer, type ForbiddenWordsInfo } from \"../ConvenienceRenderer\";\nimport { type Name, Namer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { BooleanOption, type Option, type OptionValues, StringOption, getOptionValues } from \"../RendererOptions\";\nimport { type Sourcelike } from \"../Source\";\nimport {\n    allLowerWordStyle,\n    allUpperWordStyle,\n    combineWords,\n    escapeNonPrintableMapper,\n    firstUpperWordStyle,\n    intToHex,\n    isLetterOrUnderscore,\n    isPrintable,\n    legalizeCharacters,\n    splitIntoWords,\n    utf32ConcatMap\n} from \"../support/Strings\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport { ArrayType, ClassType, EnumType, MapType, PrimitiveType, type Type, UnionType } from \"../Type\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { matchType, nullableFromUnion } from \"../TypeUtils\";\n\nconst forbiddenModuleNames = [\n    \"Access\",\n    \"Agent\",\n    \"Any\",\n    \"Application\",\n    \"ArgumentError\",\n    \"ArithmeticError\",\n    \"Atom\",\n    \"BadArityError\",\n    \"BadBooleanError\",\n    \"BadFunctionError\",\n    \"BadMapError\",\n    \"BadStructError\",\n    \"Base\",\n    \"Behaviour\",\n    \"Bitwise\",\n    \"Calendar\",\n    \"CaseClauseError\",\n    \"Code\",\n    \"Collectable\",\n    \"CondClauseError\",\n    \"Config\",\n    \"Date\",\n    \"DateTime\",\n    \"Dict\",\n    \"DynamicSupervisor\",\n    \"Enum\",\n    \"ErlangError\",\n    \"Exception\",\n    \"File\",\n    \"Float\",\n    \"Function\",\n    \"FunctionClauseError\",\n    \"GenEvent\",\n    \"GenServer\",\n    \"HashDict\",\n    \"HashSet\",\n    \"IO\",\n    \"Inspect\",\n    \"Integer\",\n    \"Kernel\",\n    \"KeyError\",\n    \"Keyword\",\n    \"List\",\n    \"Macro\",\n    \"Map\",\n    \"MapSet\",\n    \"MatchError\",\n    \"Module\",\n    \"Node\",\n    \"OptionParser\",\n    \"Path\",\n    \"Port\",\n    \"Process\",\n    \"Protocol\",\n    \"Range\",\n    \"Record\",\n    \"Regex\",\n    \"Registry\",\n    \"RuntimeError\",\n    \"Set\",\n    \"Stream\",\n    \"String\",\n    \"StringIO\",\n    \"Supervisor\",\n    \"SyntaxError\",\n    \"System\",\n    \"SystemLimitError\",\n    \"Task\",\n    \"Time\",\n    \"TokenMissingError\",\n    \"Tuple\",\n    \"URI\",\n    \"UndefinedFunctionError\",\n    \"UnicodeConversionError\",\n    \"Version\",\n    \"WithClauseError\"\n];\nconst reservedWords = [\n    \"def\",\n    \"defmodule\",\n    \"use\",\n    \"import\",\n    \"alias\",\n    \"true\",\n    \"false\",\n    \"nil\",\n    \"when\",\n    \"and\",\n    \"or\",\n    \"not\",\n    \"in\",\n    \"fn\",\n    \"do\",\n    \"end\",\n    \"catch\",\n    \"rescue\",\n    \"after\",\n    \"else\"\n];\n\nfunction unicodeEscape(codePoint: number): string {\n    return `\\\\u{${intToHex(codePoint, 0)}}`;\n}\n\nfunction capitalizeFirstLetter(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nconst stringEscape = utf32ConcatMap(escapeNonPrintableMapper(isPrintable, unicodeEscape));\n\nfunction escapeDoubleQuotes(str: string): string {\n    return str.replace(/\"/g, '\\\\\"');\n}\n\nfunction escapeNewLines(str: string): string {\n    return str.replace(/\\n/g, \"\\\\n\");\n}\n\nexport const elixirOptions = {\n    justTypes: new BooleanOption(\"just-types\", \"Plain types only\", false),\n    namespace: new StringOption(\"namespace\", \"Specify a module namespace\", \"NAME\", \"\")\n};\n\nexport class ElixirTargetLanguage extends TargetLanguage {\n    public constructor() {\n        super(\"Elixir\", [\"elixir\"], \"ex\");\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [elixirOptions.justTypes, elixirOptions.namespace];\n    }\n\n    public get supportsOptionalClassProperties(): boolean {\n        return true;\n    }\n\n    protected get defaultIndentation(): string {\n        return \"  \";\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): ElixirRenderer {\n        return new ElixirRenderer(this, renderContext, getOptionValues(elixirOptions, untypedOptionValues));\n    }\n}\n\nconst isStartCharacter = isLetterOrUnderscore;\n\nfunction isPartCharacter(utf16Unit: number): boolean {\n    const category: string = unicode.getCategory(utf16Unit);\n    return [\"Nd\", \"Pc\", \"Mn\", \"Mc\"].includes(category) || isStartCharacter(utf16Unit);\n}\n\nconst legalizeName = legalizeCharacters(isPartCharacter);\n\nfunction simpleNameStyle(original: string, uppercase: boolean): string {\n    if (/^[0-9]+$/.test(original)) {\n        original = `${original}N`;\n    }\n\n    const words = splitIntoWords(original);\n    return combineWords(\n        words,\n        legalizeName,\n        uppercase ? firstUpperWordStyle : allLowerWordStyle,\n        uppercase ? firstUpperWordStyle : allLowerWordStyle,\n        allUpperWordStyle,\n        allUpperWordStyle,\n        \"\",\n        isStartCharacter\n    );\n}\n\nfunction memberNameStyle(original: string): string {\n    const words = splitIntoWords(original);\n    return combineWords(\n        words,\n        legalizeName,\n        allLowerWordStyle,\n        allLowerWordStyle,\n        allLowerWordStyle,\n        allLowerWordStyle,\n        \"_\",\n        isStartCharacter\n    );\n}\n\nexport class ElixirRenderer extends ConvenienceRenderer {\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        private readonly _options: OptionValues<typeof elixirOptions>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected get commentLineStart(): string {\n        return \"# \";\n    }\n\n    protected get needsTypeDeclarationBeforeUse(): boolean {\n        return true;\n    }\n\n    protected canBeForwardDeclared(t: Type): boolean {\n        return \"class\" === t.kind;\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return [...forbiddenModuleNames, ...reservedWords.map(word => capitalizeFirstLetter(word))];\n    }\n\n    protected forbiddenForObjectProperties(_c: ClassType, _classNamed: Name): ForbiddenWordsInfo {\n        return { names: reservedWords, includeGlobalForbidden: true };\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return new Namer(\"types\", n => simpleNameStyle(n, true), []);\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return new Namer(\"properties\", memberNameStyle, []);\n    }\n\n    protected makeUnionMemberNamer(): Namer {\n        return new Namer(\"properties\", memberNameStyle, []);\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return new Namer(\"enum-cases\", n => simpleNameStyle(n, true), []);\n    }\n\n    private nameForNamedTypeWithNamespace(t: Type): Sourcelike {\n        if (this._options.namespace) {\n            return [this._options.namespace, \".\", this.nameForNamedType(t)];\n        } else {\n            return [this.nameForNamedType(t)];\n        }\n    }\n\n    private nameWithNamespace(n: Name): Sourcelike {\n        if (this._options.namespace) {\n            return [this._options.namespace, \".\", n];\n        } else {\n            return [n];\n        }\n    }\n\n    private elixirType(t: Type, isOptional = false): Sourcelike {\n        const optional = isOptional ? \" | nil\" : \"\";\n        return matchType<Sourcelike>(\n            t,\n            _anyType => [\"any()\", optional],\n            _nullType => [\"nil\"],\n            _boolType => [\"boolean()\", optional],\n            _integerType => [\"integer()\", optional],\n            _doubleType => [\"float()\", optional],\n            _stringType => [\"String.t()\", optional],\n            arrayType => [\"[\", this.elixirType(arrayType.items), \"]\", optional],\n            classType => [this.nameForNamedTypeWithNamespace(classType), \".t()\", optional],\n            mapType => [\"%{String.t() => \", this.elixirType(mapType.values), \"}\", optional],\n            enumType => [this.nameForNamedTypeWithNamespace(enumType), \".t()\", optional],\n            unionType => {\n                const children = [...unionType.getChildren()].map(ut => this.elixirType(ut));\n                return [\n                    children.flatMap((element, index) => (index === children.length - 1 ? element : [element, \" | \"])),\n                    optional\n                ];\n            }\n        );\n    }\n\n    private patternMatchClauseDecode(t: Type, attributeName: Sourcelike, suffix = \"\"): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => [],\n            _nullType => [\"def decode_\", attributeName, suffix, \"(value) when is_nil(value), do: value\"],\n            _boolType => [\"def decode_\", attributeName, suffix, \"(value) when is_boolean(value), do: value\"],\n            _integerType => [\"def decode_\", attributeName, suffix, \"(value) when is_integer(value), do: value\"],\n            _doubleType => [\n                \"def decode_\",\n                attributeName,\n                suffix,\n                \"(value) when is_float(value), do: value\\n\",\n                \"def decode_\",\n                attributeName,\n                suffix,\n                \"(value) when is_integer(value), do: value\"\n            ],\n            _stringType => [\"def decode_\", attributeName, suffix, \"(value) when is_binary(value), do: value\"],\n            _arrayType => [\"def decode_\", attributeName, suffix, \"(value) when is_list(value), do: value\"],\n            classType => {\n                const requiredAttributeArgs: Sourcelike[] = [];\n                this.forEachClassProperty(classType, \"none\", (_name, jsonName, p) => {\n                    if (!p.isOptional) {\n                        requiredAttributeArgs.push(['\"', jsonName, '\" => _,']);\n                    }\n                });\n                return [\n                    \"def decode_\",\n                    attributeName,\n                    suffix,\n                    \"(%{\",\n                    requiredAttributeArgs,\n                    \"} = value), do: \",\n                    this.nameForNamedTypeWithNamespace(classType),\n                    \".from_map(value)\"\n                ];\n            },\n            _mapType => [\"def decode_\", attributeName, suffix, \"(value) when is_map(value), do: value\"],\n            enumType => [\n                \"def decode_\",\n                attributeName,\n                suffix,\n                \"(value) when is_binary(value)\",\n                \", do: \",\n                this.nameForNamedTypeWithNamespace(enumType),\n                \".decode(value)\"\n            ],\n            _unionType => []\n        );\n    }\n\n    private patternMatchClauseEncode(t: Type, attributeName: Sourcelike, suffix = \"\"): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => [],\n            _nullType => [\"def encode_\", attributeName, suffix, \"(value) when is_nil(value), do: value\"],\n            _boolType => [\"def encode_\", attributeName, suffix, \"(value) when is_boolean(value), do: value\"],\n            _integerType => [\"def encode_\", attributeName, suffix, \"(value) when is_integer(value), do: value\"],\n            _doubleType => [\n                \"def encode_\",\n                attributeName,\n                suffix,\n                \"(value) when is_float(value), do: value\\n\",\n                \"def encode_\",\n                attributeName,\n                suffix,\n                \"(value) when is_integer(value), do: value\"\n            ],\n            _stringType => [\"def encode_\", attributeName, suffix, \"(value) when is_binary(value), do: value\"],\n            _arrayType => [\"def encode_\", attributeName, suffix, \"(value) when is_list(value), do: value\"],\n            classType => {\n                const requiredAttributeArgs: Sourcelike[] = [];\n                this.forEachClassProperty(classType, \"none\", (_name, jsonName, p) => {\n                    if (!p.isOptional) {\n                        requiredAttributeArgs.push(['\"', jsonName, '\" => _,']);\n                    }\n                });\n                return [\n                    \"def encode_\",\n                    attributeName,\n                    suffix,\n                    \"(%\",\n                    this.nameForNamedTypeWithNamespace(classType),\n                    \"{} = value), do: \",\n                    this.nameForNamedTypeWithNamespace(classType),\n                    \".to_map(value)\"\n                ];\n            },\n            _mapType => [\"def encode_\", attributeName, suffix, \"(value) when is_map(value), do: value\"],\n            enumType => [\n                \"def encode_\",\n                attributeName,\n                suffix,\n                \"(value) when is_atom(value)\",\n                \", do: \",\n                this.nameForNamedTypeWithNamespace(enumType),\n                \".encode(value)\"\n            ],\n            _unionType => []\n        );\n    }\n\n    private sortAndFilterPatternMatchTypes(types: Type[]): Type[] {\n        return types\n            .filter(type => !(type instanceof UnionType))\n            .sort((a, b) => {\n                if (a instanceof ClassType && !(b instanceof ClassType)) {\n                    return -1;\n                } else if (b instanceof ClassType && !(a instanceof ClassType)) {\n                    return 1;\n                } else if (a.kind === \"bool\" && b.kind !== \"bool\") {\n                    return -1;\n                } else if (b.kind === \"bool\" && a.kind !== \"bool\") {\n                    return 1;\n                } else if (a instanceof EnumType && !(b instanceof EnumType)) {\n                    return -1;\n                } else if (b instanceof EnumType && !(a instanceof EnumType)) {\n                    return 1;\n                } else if (a.isPrimitive() && !b.isPrimitive()) {\n                    return -1;\n                } else if (b.isPrimitive() && !a.isPrimitive()) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            });\n    }\n\n    private emitPatternMatches(\n        types: Type[],\n        name: Sourcelike,\n        parentName: Sourcelike,\n        suffix = \"\",\n        optional = false\n    ): void {\n        this.ensureBlankLine();\n\n        let typesToMatch = this.sortAndFilterPatternMatchTypes(types);\n        if (typesToMatch.length < 2) {\n            return;\n        }\n\n        if (typesToMatch.find(type => type.kind === \"double\")) {\n            typesToMatch = typesToMatch.filter(type => type.kind !== \"integer\");\n        }\n\n        typesToMatch.forEach(type => {\n            this.emitLine(this.patternMatchClauseDecode(type, name, suffix));\n        });\n\n        if (optional && !typesToMatch.find(type => type.kind === \"null\")) {\n            this.emitLine(\"def decode_\", name, suffix, \"(value) when is_nil(value), do: value\");\n        }\n\n        this.emitLine(\n            \"def decode_\",\n            name,\n            suffix,\n            '(_), do: {:error, \"Unexpected type when decoding ',\n            parentName,\n            \".\",\n            name,\n            '\"}'\n        );\n\n        this.ensureBlankLine();\n\n        typesToMatch.forEach(type => {\n            this.emitLine(this.patternMatchClauseEncode(type, name, suffix));\n        });\n\n        if (optional && !typesToMatch.find(type => type.kind === \"null\")) {\n            this.emitLine(\"def encode_\", name, suffix, \"(value) when is_nil(value), do: value\");\n        }\n\n        this.emitLine(\n            \"def encode_\",\n            name,\n            suffix,\n            '(_), do: {:error, \"Unexpected type when encoding ',\n            parentName,\n            \".\",\n            name,\n            '\"}'\n        );\n\n        this.ensureBlankLine();\n    }\n\n    private nameOfTransformFunction(t: Type, name: Name | Sourcelike, encode = false, prefix = \"\"): Sourcelike {\n        let mode = \"decode\";\n        if (encode) {\n            mode = \"encode\";\n        }\n\n        return matchType<Sourcelike>(\n            t,\n            _anyType => [],\n            _nullType => [],\n            _boolType => [],\n            _integerType => [],\n            _doubleType => [],\n            _stringType => [],\n            _arrayType => [],\n            classType => [this.nameForNamedTypeWithNamespace(classType), `.${encode ? \"to\" : \"from\"}_map`],\n            _mapType => [],\n            enumType => {\n                return [this.nameForNamedTypeWithNamespace(enumType), `.${mode}`];\n            },\n            _unionType => {\n                return [`${mode}_`, name, prefix];\n            }\n        );\n    }\n\n    private fromDynamic(t: Type, jsonName: string, name: Name, optional = false): Sourcelike {\n        const primitive = ['m[\"', jsonName, '\"]'];\n\n        return matchType<Sourcelike>(\n            t,\n            _anyType => primitive,\n            _nullType => primitive,\n            _boolType => primitive,\n            _integerType => primitive,\n            _doubleType => primitive,\n            _stringType => primitive,\n            arrayType => {\n                const arrayElement = arrayType.items;\n                if (arrayElement instanceof ArrayType) {\n                    return primitive;\n                } else if (arrayElement.isPrimitive()) {\n                    return primitive;\n                } else if (arrayElement instanceof MapType) {\n                    return primitive;\n                } else {\n                    if (optional) {\n                        return [\n                            \"m\",\n                            '[\"',\n                            jsonName,\n                            '\"] && Enum.map(m[\"',\n                            jsonName,\n                            '\"], &',\n                            this.nameOfTransformFunction(arrayElement, name, false, \"_element\"),\n                            \"/1)\"\n                        ];\n                    } else {\n                        return [\n                            'Enum.map(m[\"',\n                            jsonName,\n                            '\"], &',\n                            this.nameOfTransformFunction(arrayElement, name, false, \"_element\"),\n                            \"/1)\"\n                        ];\n                    }\n                }\n            },\n            classType => [\n                optional ? [primitive, \" && \"] : \"\",\n                this.nameForNamedTypeWithNamespace(classType),\n                \".from_map(\",\n                primitive,\n                \")\"\n            ],\n            mapType => {\n                const mapValueTypes = [...mapType.values.getChildren()];\n                const mapValueTypesNotPrimitive = mapValueTypes.filter(type => !(type instanceof PrimitiveType));\n                if (mapValueTypesNotPrimitive.length === 0) {\n                    return [primitive];\n                } else {\n                    if (mapType.values.kind === \"union\") {\n                        return [\n                            'm[\"',\n                            jsonName,\n                            '\"]\\n|> Map.new(fn {key, value} -> {key, ',\n                            this.nameOfTransformFunction(mapType.values, jsonName, false),\n                            \"_value(value)} end)\"\n                        ];\n                    } else if (mapType.values instanceof EnumType || mapType.values instanceof ClassType) {\n                        return [\n                            'm[\"',\n                            jsonName,\n                            '\"]\\n|> Map.new(fn {key, value} -> {key, ',\n                            this.nameOfTransformFunction(mapType.values, jsonName, false),\n                            \"(value)} end)\"\n                        ];\n                    }\n\n                    return [primitive];\n                }\n            },\n            enumType => {\n                return [\n                    optional ? [primitive, \" && \"] : \"\",\n                    this.nameOfTransformFunction(enumType, name),\n                    \"(\",\n                    primitive,\n                    \")\"\n                ];\n            },\n            unionType => {\n                const unionTypes = [...unionType.getChildren()];\n                const unionPrimitiveTypes = unionTypes.filter(type => type.isPrimitive());\n                if (unionTypes.length === unionPrimitiveTypes.length) {\n                    return ['m[\"', jsonName, '\"]'];\n                }\n\n                const nullable = nullableFromUnion(unionType);\n\n                if (nullable !== null) {\n                    if (nullable instanceof ClassType) {\n                        return this.fromDynamic(nullable, jsonName, name, true);\n                    }\n\n                    const nullableTypes = [...nullable.getChildren()];\n                    if (nullableTypes.length < 2) {\n                        return this.fromDynamic(nullable, jsonName, name, true);\n                    }\n\n                    return ['m[\"', jsonName, '\"] && decode_', name, '(m[\"', jsonName, '\"])'];\n                }\n\n                return [\"decode_\", name, '(m[\"', jsonName, '\"])'];\n            }\n        );\n    }\n\n    private toDynamic(t: Type, e: Sourcelike, optional = false): Sourcelike {\n        const expression = [\"struct.\", e];\n        return matchType<Sourcelike>(\n            t,\n            _anyType => expression,\n            _nullType => expression,\n            _boolType => expression,\n            _integerType => expression,\n            _doubleType => expression,\n            _stringType => expression,\n            arrayType => {\n                const arrayElement = arrayType.items;\n                if (arrayElement instanceof ArrayType) {\n                    return expression;\n                }\n\n                if (arrayElement.isPrimitive()) {\n                    return expression;\n                } else if (arrayElement instanceof MapType) {\n                    return expression;\n                } else {\n                    if (arrayElement.kind === \"array\") {\n                        return expression;\n                    } else {\n                        if (optional) {\n                            return [\n                                \"struct.\",\n                                e,\n                                \" && Enum.map(struct.\",\n                                e,\n                                \", &\",\n                                this.nameOfTransformFunction(arrayElement, e, true, \"_element\"),\n                                \"/1)\"\n                            ];\n                        } else {\n                            return [\n                                \"struct.\",\n                                e,\n                                \" && Enum.map(struct.\",\n                                e,\n                                \", &\",\n                                this.nameOfTransformFunction(arrayElement, e, true, \"_element\"),\n                                \"/1)\"\n                            ];\n                        }\n                    }\n                }\n            },\n            classType => [\n                optional ? [\"struct.\", e, \" && \"] : \"\",\n                this.nameForNamedTypeWithNamespace(classType),\n                \".to_map(\",\n                \"struct.\",\n                e,\n                \")\"\n            ],\n            mapType => {\n                const mapValueTypes = [...mapType.values.getChildren()];\n                const mapValueTypesNotPrimitive = mapValueTypes.filter(type => !(type instanceof PrimitiveType));\n                if (mapValueTypesNotPrimitive.length === 0) {\n                    return [expression];\n                } else {\n                    if (mapType.values.kind === \"union\") {\n                        return [\n                            \"struct.\",\n                            e,\n                            \"\\n|> Map.new(fn {key, value} -> {key, \",\n                            this.nameOfTransformFunction(mapType.values, e, true),\n                            \"_value(value)} end)\"\n                        ];\n                    } else if (mapType.values instanceof EnumType || mapType.values instanceof ClassType) {\n                        return [\n                            \"struct.\",\n                            e,\n                            \"\\n|> Map.new(fn {key, value} -> {key, \",\n                            this.nameOfTransformFunction(mapType.values, e, true),\n                            \"(value)} end)\"\n                        ];\n                    }\n\n                    return [expression];\n                }\n            },\n            enumType => {\n                return [\n                    optional ? [\"struct.\", e, \" && \"] : \"\",\n                    this.nameForNamedTypeWithNamespace(enumType),\n                    \".encode(struct.\",\n                    e,\n                    \")\"\n                ];\n            },\n            unionType => {\n                const unionTypes = [...unionType.getChildren()];\n                const unionPrimitiveTypes = unionTypes.filter(type => type.isPrimitive());\n                if (unionTypes.length === unionPrimitiveTypes.length) {\n                    return [\"struct.\", e];\n                }\n\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    if (nullable instanceof ClassType) {\n                        return this.toDynamic(nullable, e, true);\n                    }\n\n                    const nullableTypes = [...nullable.getChildren()];\n                    if (nullableTypes.length < 2) {\n                        return this.toDynamic(nullable, e, true);\n                    }\n\n                    return [\"struct.\", e, \" && encode_\", e, \"(struct.\", e, \")\"];\n                }\n\n                return [\"encode_\", e, \"(struct.\", e, \")\"];\n            }\n        );\n    }\n\n    private emitBlock(source: Sourcelike, emit: () => void): void {\n        this.emitLine(source);\n        this.indent(emit);\n        this.emitLine(\"end\");\n    }\n\n    protected emitDescriptionBlock(lines: Sourcelike[]): void {\n        this.emitCommentLines(lines, {\n            firstLineStart: '@moduledoc \"\"\"\\n',\n            lineStart: \"\",\n            afterComment: '\"\"\"'\n        });\n    }\n\n    private emitModule(c: ClassType, moduleName: Name): void {\n        this.emitBlock([\"defmodule \", this.nameWithNamespace(moduleName), \" do\"], () => {\n            const structDescription = this.descriptionForType(c) ?? [];\n            const attributeDescriptions: Sourcelike[][] = [];\n            this.forEachClassProperty(c, \"none\", (name, jsonName, _p) => {\n                const attributeDescription = this.descriptionForClassProperty(c, jsonName);\n                if (attributeDescription) {\n                    attributeDescriptions.push([\"- `:\", name, \"` - \", attributeDescription]);\n                }\n            });\n            if (structDescription.length || attributeDescriptions.length) {\n                this.emitDescription([...structDescription, ...attributeDescriptions]);\n                this.ensureBlankLine();\n            }\n\n            const requiredAttributes: Sourcelike[] = [];\n            this.forEachClassProperty(c, \"none\", (name, _jsonName, p) => {\n                if (!p.isOptional) {\n                    if (requiredAttributes.length === 0) {\n                        requiredAttributes.push([\":\", name]);\n                    } else {\n                        requiredAttributes.push([\", :\", name]);\n                    }\n                }\n            });\n            if (requiredAttributes.length) {\n                this.emitLine([\"@enforce_keys [\", requiredAttributes, \"]\"]);\n            }\n\n            const attributeNames: Sourcelike[] = [];\n            this.forEachClassProperty(c, \"none\", (name, _jsonName, _p) => {\n                if (attributeNames.length === 0) {\n                    attributeNames.push([\":\", name]);\n                } else {\n                    attributeNames.push([\", :\", name]);\n                }\n            });\n\n            this.emitLine([\"defstruct [\", attributeNames, \"]\"]);\n            this.ensureBlankLine();\n\n            const typeDefinitionTable: Sourcelike[][] = [[[\"@type \"], [\"t :: %__MODULE__{\"]]];\n            let count = c.getProperties().size;\n            this.forEachClassProperty(c, \"none\", (name, _jsonName, p) => {\n                const last = --count === 0;\n                const attributeRow = [\n                    [],\n                    [\"  \", name, \": \", this.elixirType(p.type), p.isOptional ? \" | nil\" : \"\", last ? \"\" : \",\"]\n                ];\n                typeDefinitionTable.push(attributeRow);\n            });\n            typeDefinitionTable.push([[], [\"}\"]]);\n            this.emitTable(typeDefinitionTable);\n            if (this._options.justTypes) {\n                return;\n            }\n\n            this.forEachClassProperty(c, \"none\", (name, _jsonName, p) => {\n                if (p.type.kind === \"union\") {\n                    const unionTypes = [...p.type.getChildren()];\n                    const unionPrimitiveTypes = unionTypes.filter(type => type.isPrimitive());\n                    if (unionTypes.length === unionPrimitiveTypes.length) {\n                        return;\n                    }\n\n                    const unionTypesNonNull = unionTypes.filter(type => type.kind !== \"null\");\n                    if (unionTypesNonNull.length === 1) {\n                        let suffix = \"\";\n                        let itemTypes: Type[] = [];\n                        if (unionTypesNonNull[0] instanceof ArrayType) {\n                            suffix = \"_element\";\n                            itemTypes = [...unionTypesNonNull[0].getChildren()];\n                        } else if (unionTypesNonNull[0] instanceof MapType) {\n                            suffix = \"_value\";\n                            itemTypes = [...unionTypesNonNull[0].getChildren()];\n                        }\n\n                        if (itemTypes.length === 1 && itemTypes[0] instanceof UnionType) {\n                            itemTypes = [...itemTypes[0].getChildren()];\n                        }\n\n                        this.emitPatternMatches(\n                            itemTypes,\n                            name,\n                            this.nameForNamedTypeWithNamespace(c),\n                            suffix,\n                            p.isOptional\n                        );\n                    } else {\n                        this.emitPatternMatches(\n                            unionTypes,\n                            name,\n                            this.nameForNamedTypeWithNamespace(c),\n                            \"\",\n                            p.isOptional\n                        );\n                    }\n                } else if (p.type.kind === \"array\") {\n                    const arrayType = p.type as ArrayType;\n                    if (arrayType.items instanceof UnionType) {\n                        const unionType = arrayType.items;\n                        const typesInUnion = [...unionType.getChildren()];\n\n                        this.emitPatternMatches(typesInUnion, name, this.nameForNamedTypeWithNamespace(c), \"_element\");\n                    }\n                } else if (p.type.kind === \"map\") {\n                    const mapType = p.type as MapType;\n                    if (mapType.values instanceof UnionType) {\n                        const unionType = mapType.values;\n                        const typesInUnion = [...unionType.getChildren()];\n\n                        this.emitPatternMatches(typesInUnion, name, this.nameForNamedTypeWithNamespace(c), \"_value\");\n                    }\n                }\n            });\n            let propCount = 0;\n            this.forEachClassProperty(c, \"none\", (_name, _jsonName, _p) => {\n                propCount++;\n            });\n            const isEmpty = propCount ? false : true;\n            this.ensureBlankLine();\n            this.emitBlock([`def from_map(${isEmpty ? \"_\" : \"\"}m) do`], () => {\n                this.emitLine(\"%\", this.nameWithNamespace(moduleName), \"{\");\n                this.indent(() => {\n                    this.forEachClassProperty(c, \"none\", (name, jsonName, p) => {\n                        jsonName = escapeDoubleQuotes(jsonName);\n                        jsonName = escapeNewLines(jsonName);\n                        const expression = this.fromDynamic(p.type, jsonName, name, p.isOptional);\n                        this.emitLine(name, \": \", expression, \",\");\n                    });\n                });\n                this.emitLine(\"}\");\n            });\n            this.ensureBlankLine();\n            this.emitBlock(\"def from_json(json) do\", () => {\n                this.emitMultiline(`json\n        |> Jason.decode!()\n        |> from_map()`);\n            });\n            this.ensureBlankLine();\n            this.emitBlock([`def to_map(${isEmpty ? \"_\" : \"\"}struct) do`], () => {\n                this.emitLine(\"%{\");\n                this.indent(() => {\n                    this.forEachClassProperty(c, \"none\", (name, jsonName, p) => {\n                        const expression = this.toDynamic(p.type, name, p.isOptional);\n                        this.emitLine([[`\"${stringEscape(jsonName)}\"`], [\" => \", expression, \",\"]]);\n                    });\n                });\n                this.emitLine(\"}\");\n            });\n            this.ensureBlankLine();\n            this.emitBlock(\"def to_json(struct) do\", () => {\n                this.emitMultiline(`struct\n        |> to_map()\n        |> Jason.encode!()`);\n            });\n        });\n    }\n\n    private isValidAtom(str: string): boolean {\n        function isLetter(char: string): boolean {\n            return /^[A-Za-z_]$/.test(char);\n        }\n\n        function isLetterOrDigit(char: string): boolean {\n            return /^[A-Za-z0-9_]$/.test(char);\n        }\n\n        if (str.length === 0) {\n            return false;\n        }\n\n        const firstChar = str[0];\n        if (!isLetter(firstChar)) {\n            return false;\n        }\n\n        for (let i = 1; i < str.length; i++) {\n            const char = str[i];\n\n            if (!isLetterOrDigit(char) && char !== \"@\" && !(i === str.length - 1 && (char === \"!\" || char === \"?\"))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private emitEnum(e: EnumType, enumName: Name): void {\n        this.emitBlock([\"defmodule \", this.nameWithNamespace(enumName), \" do\"], () => {\n            this.emitDescription(this.descriptionForType(e));\n            this.emitLine(\"@valid_enum_members [\");\n            this.indent(() => {\n                this.forEachEnumCase(e, \"none\", (_name, json) => {\n                    if (this.isValidAtom(json)) {\n                        this.emitLine(\":\", json, \",\");\n                    } else {\n                        this.emitLine(\":\", `\"${json}\"`, \",\");\n                    }\n                });\n            });\n\n            this.emitLine(\"]\");\n\n            this.ensureBlankLine();\n\n            this.emitMultiline(`def valid_atom?(value), do: value in @valid_enum_members\n\ndef valid_atom_string?(value) do\n    try do\n        atom = String.to_existing_atom(value)\n        atom in @valid_enum_members\n    rescue\n        ArgumentError -> false\n    end\nend\n\ndef encode(value) do\n    if valid_atom?(value) do\n        Atom.to_string(value)\n    else\n        {:error, \"Unexpected value when encoding atom: #{inspect(value)}\"}\n    end\nend\n\ndef decode(value) do\n    if valid_atom_string?(value) do\n        String.to_existing_atom(value)\n    else\n        {:error, \"Unexpected value when decoding atom: #{inspect(value)}\"}\n    end\nend\n\ndef from_json(json) do\n    json\n    |> Jason.decode!()\n    |> decode()\nend\n\ndef to_json(data) do\n    data\n    |> encode()\n    |> Jason.encode!()\nend`);\n        });\n    }\n\n    private emitUnion(_u: UnionType, _unionName: Name): void {\n        return;\n    }\n\n    protected emitSourceStructure(): void {\n        if (this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n        } else if (!this._options.justTypes) {\n            this.emitMultiline(`# This file was autogenerated using quicktype https://github.com/quicktype/quicktype\n#\n# Add Jason to your mix.exs`);\n            this.forEachTopLevel(\"none\", (_topLevel, name) => {\n                this.emitLine(\"#\");\n                this.emitLine(\"# Decode a JSON string: \", this.nameWithNamespace(name), \".from_json(data)\");\n                this.emitLine(\"# Encode into a JSON string: \", this.nameWithNamespace(name), \".to_json(struct)\");\n            });\n        }\n\n        this.ensureBlankLine();\n\n        this.forEachNamedType(\n            \"leading-and-interposing\",\n            (c: ClassType, n: Name) => this.emitModule(c, n),\n            (e, n) => this.emitEnum(e, n),\n            (u, n) => this.emitUnion(u, n)\n        );\n\n        if (!this._options.justTypes) {\n            this.forEachTopLevel(\n                \"leading-and-interposing\",\n                (topLevel, name) => {\n                    const isTopLevelArray = \"array\" === topLevel.kind;\n\n                    this.emitBlock([\"defmodule \", this.nameWithNamespace(name), \" do\"], () => {\n                        const description = this.descriptionForType(topLevel) ?? [];\n                        if (description.length) {\n                            this.emitDescription([...description]);\n                            this.ensureBlankLine();\n                        }\n\n                        if (isTopLevelArray) {\n                            const arrayElement = (topLevel as ArrayType).items;\n\n                            let isUnion = false;\n\n                            if (arrayElement instanceof UnionType) {\n                                this.emitPatternMatches([...arrayElement.getChildren()], \"element\", name);\n                                isUnion = true;\n                            }\n\n                            this.emitBlock(\"def from_json(json) do\", () => {\n                                this.emitLine(\"json\");\n                                this.emitLine(\"|> Jason.decode!()\");\n                                this.emitLine(\n                                    \"|> Enum.map(&\",\n                                    isUnion\n                                        ? [\"decode_element/1)\"]\n                                        : [this.nameWithNamespace(name), \"Element.from_map/1)\"]\n                                );\n                            });\n\n                            this.ensureBlankLine();\n\n                            this.emitBlock(\"def to_json(list) do\", () => {\n                                this.emitLine(\n                                    \"Enum.map(list, &\",\n                                    isUnion\n                                        ? [\"encode_element/1)\"]\n                                        : [this.nameWithNamespace(name), \"Element.to_map/1)\"]\n                                );\n                                this.emitLine(\"|> Jason.encode!()\");\n                            });\n                        } else {\n                            this.emitBlock(\"def from_json(json) do\", () => {\n                                this.emitLine(\"Jason.decode!(json)\");\n                            });\n\n                            this.ensureBlankLine();\n\n                            this.emitBlock(\"def to_json(data) do\", () => {\n                                this.emitLine(\"Jason.encode!(data)\");\n                            });\n                        }\n                    });\n                },\n                t => this.namedTypeToNameForTopLevel(t) === undefined\n            );\n        }\n    }\n}\n","import { arrayIntercalate, mapContains } from \"collection-utils\";\n\nimport { anyTypeIssueAnnotation, nullTypeIssueAnnotation } from \"../Annotation\";\nimport { ConvenienceRenderer, type ForbiddenWordsInfo } from \"../ConvenienceRenderer\";\nimport { DependencyName, type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport {\n    BooleanOption,\n    EnumOption,\n    type Option,\n    type OptionValues,\n    StringOption,\n    getOptionValues\n} from \"../RendererOptions\";\nimport { type MultiWord, type Sourcelike, annotated, multiWord, parenIfNeeded, singleWord } from \"../Source\";\nimport {\n    allLowerWordStyle,\n    allUpperWordStyle,\n    combineWords,\n    decapitalize,\n    firstUpperWordStyle,\n    isAscii,\n    isLetterOrUnderscore,\n    isLetterOrUnderscoreOrDigit,\n    legalizeCharacters,\n    splitIntoWords,\n    stringEscape\n} from \"../support/Strings\";\nimport { defined } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport { type ClassProperty, type ClassType, type EnumType, type Type, UnionType } from \"../Type\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { matchType, nullableFromUnion } from \"../TypeUtils\";\n\nexport const elmOptions = {\n    justTypes: new BooleanOption(\"just-types\", \"Plain types only\", false),\n    useList: new EnumOption(\"array-type\", \"Use Array or List\", [\n        [\"array\", false],\n        [\"list\", true]\n    ]),\n    // FIXME: Do this via a configurable named eventually.\n    moduleName: new StringOption(\"module\", \"Generated module name\", \"NAME\", \"QuickType\")\n};\n\nexport class ElmTargetLanguage extends TargetLanguage {\n    public constructor() {\n        super(\"Elm\", [\"elm\"], \"elm\");\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [elmOptions.justTypes, elmOptions.moduleName, elmOptions.useList];\n    }\n\n    public get supportsOptionalClassProperties(): boolean {\n        return true;\n    }\n\n    public get supportsUnionsWithBothNumberTypes(): boolean {\n        return true;\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): ElmRenderer {\n        return new ElmRenderer(this, renderContext, getOptionValues(elmOptions, untypedOptionValues));\n    }\n}\n\nconst forbiddenNames = [\n    \"if\",\n    \"then\",\n    \"else\",\n    \"case\",\n    \"of\",\n    \"let\",\n    \"in\",\n    \"infix\",\n    \"type\",\n    \"module\",\n    \"where\",\n    \"import\",\n    \"exposing\",\n    \"as\",\n    \"port\",\n    \"int\",\n    \"float\",\n    \"bool\",\n    \"string\",\n    \"Jenc\",\n    \"Jdec\",\n    \"Jpipe\",\n    \"always\",\n    \"identity\",\n    \"Array\",\n    \"List\",\n    \"Dict\",\n    \"Maybe\",\n    \"map\",\n    \"toList\",\n    \"makeArrayEncoder\",\n    \"makeDictEncoder\",\n    \"makeNullableEncoder\",\n    \"Int\",\n    \"True\",\n    \"False\",\n    \"String\",\n    \"Float\"\n];\n\nconst legalizeName = legalizeCharacters(cp => isAscii(cp) && isLetterOrUnderscoreOrDigit(cp));\n\nfunction elmNameStyle(original: string, upper: boolean): string {\n    const words = splitIntoWords(original);\n    return combineWords(\n        words,\n        legalizeName,\n        upper ? firstUpperWordStyle : allLowerWordStyle,\n        firstUpperWordStyle,\n        upper ? allUpperWordStyle : allLowerWordStyle,\n        allUpperWordStyle,\n        \"\",\n        isLetterOrUnderscore\n    );\n}\n\nconst upperNamingFunction = funPrefixNamer(\"upper\", n => elmNameStyle(n, true));\nconst lowerNamingFunction = funPrefixNamer(\"lower\", n => elmNameStyle(n, false));\n\ninterface RequiredOrOptional {\n    fallback: string;\n    reqOrOpt: string;\n}\n\nfunction requiredOrOptional(p: ClassProperty): RequiredOrOptional {\n    function optional(fallback: string): RequiredOrOptional {\n        return { reqOrOpt: \"Jpipe.optional\", fallback };\n    }\n\n    const t = p.type;\n    if (p.isOptional || (t instanceof UnionType && nullableFromUnion(t) !== null)) {\n        return optional(\" Nothing\");\n    }\n\n    if (t.kind === \"null\") {\n        return optional(\" ()\");\n    }\n\n    return { reqOrOpt: \"Jpipe.required\", fallback: \"\" };\n}\n\ninterface TopLevelDependent {\n    decoder?: Name;\n    encoder: Name;\n}\n\ninterface NamedTypeDependent {\n    decoder: Name;\n    encoder: Name;\n}\n\nexport class ElmRenderer extends ConvenienceRenderer {\n    private readonly _topLevelDependents = new Map<Name, TopLevelDependent>();\n\n    private readonly _namedTypeDependents = new Map<Name, NamedTypeDependent>();\n\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        private readonly _options: OptionValues<typeof elmOptions>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return forbiddenNames;\n    }\n\n    protected makeTopLevelDependencyNames(t: Type, topLevelName: Name): DependencyName[] {\n        const encoder = new DependencyName(\n            lowerNamingFunction,\n            topLevelName.order,\n            lookup => `${lookup(topLevelName)}_to_string`\n        );\n        let decoder: DependencyName | undefined = undefined;\n        if (this.namedTypeToNameForTopLevel(t) === undefined) {\n            decoder = new DependencyName(lowerNamingFunction, topLevelName.order, lookup => lookup(topLevelName));\n        }\n\n        this._topLevelDependents.set(topLevelName, { encoder, decoder });\n        if (decoder !== undefined) {\n            return [encoder, decoder];\n        }\n\n        return [encoder];\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return upperNamingFunction;\n    }\n\n    protected makeNamedTypeDependencyNames(_: Type, typeName: Name): DependencyName[] {\n        const encoder = new DependencyName(lowerNamingFunction, typeName.order, lookup => `encode_${lookup(typeName)}`);\n        const decoder = new DependencyName(lowerNamingFunction, typeName.order, lookup => lookup(typeName));\n        this._namedTypeDependents.set(typeName, { encoder, decoder });\n        return [encoder, decoder];\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return lowerNamingFunction;\n    }\n\n    protected forbiddenForObjectProperties(_c: ClassType, _className: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected makeUnionMemberNamer(): Namer {\n        return upperNamingFunction;\n    }\n\n    protected get unionMembersInGlobalNamespace(): boolean {\n        return true;\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return upperNamingFunction;\n    }\n\n    protected get enumCasesInGlobalNamespace(): boolean {\n        return true;\n    }\n\n    protected proposeUnionMemberName(\n        u: UnionType,\n        unionName: Name,\n        fieldType: Type,\n        lookup: (n: Name) => string\n    ): string {\n        const fieldName = super.proposeUnionMemberName(u, unionName, fieldType, lookup);\n        return `${fieldName}_in_${lookup(unionName)}`;\n    }\n\n    protected get commentLineStart(): string {\n        return \"-- \";\n    }\n\n    protected emitDescriptionBlock(lines: Sourcelike[]): void {\n        if (lines.length === 1) {\n            this.emitComments([{ customLines: lines, lineStart: \"{-| \", lineEnd: \" -}\" }]);\n        } else {\n            this.emitCommentLines(lines, { firstLineStart: \"{-| \", lineStart: \"\", afterComment: \"-}\" });\n        }\n    }\n\n    private get arrayType(): string {\n        return this._options.useList ? \"List\" : \"Array\";\n    }\n\n    private elmType(t: Type, noOptional = false): MultiWord {\n        return matchType<MultiWord>(\n            t,\n            _anyType => singleWord(annotated(anyTypeIssueAnnotation, \"Jdec.Value\")),\n            _nullType => singleWord(annotated(nullTypeIssueAnnotation, \"()\")),\n            _boolType => singleWord(\"Bool\"),\n            _integerType => singleWord(\"Int\"),\n            _doubleType => singleWord(\"Float\"),\n            _stringType => singleWord(\"String\"),\n            arrayType => multiWord(\" \", this.arrayType, parenIfNeeded(this.elmType(arrayType.items))),\n            classType => singleWord(this.nameForNamedType(classType)),\n            mapType => multiWord(\" \", \"Dict String\", parenIfNeeded(this.elmType(mapType.values))),\n            enumType => singleWord(this.nameForNamedType(enumType)),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    const nullableType = this.elmType(nullable);\n                    if (noOptional) return nullableType;\n                    return multiWord(\" \", \"Maybe\", parenIfNeeded(nullableType));\n                }\n\n                return singleWord(this.nameForNamedType(unionType));\n            }\n        );\n    }\n\n    private elmProperty(p: ClassProperty): Sourcelike {\n        if (p.isOptional) {\n            return multiWord(\" \", \"Maybe\", parenIfNeeded(this.elmType(p.type, true))).source;\n        } else {\n            return this.elmType(p.type).source;\n        }\n    }\n\n    private decoderNameForNamedType(t: Type): Name {\n        const name = this.nameForNamedType(t);\n        return defined(this._namedTypeDependents.get(name)).decoder;\n    }\n\n    private decoderNameForType(t: Type, noOptional = false): MultiWord {\n        return matchType<MultiWord>(\n            t,\n            _anyType => singleWord(\"Jdec.value\"),\n            _nullType => multiWord(\" \", \"Jdec.null\", \"()\"),\n            _boolType => singleWord(\"Jdec.bool\"),\n            _integerType => singleWord(\"Jdec.int\"),\n            _doubleType => singleWord(\"Jdec.float\"),\n            _stringType => singleWord(\"Jdec.string\"),\n            arrayType =>\n                multiWord(\n                    \" \",\n                    [\"Jdec.\", decapitalize(this.arrayType)],\n                    parenIfNeeded(this.decoderNameForType(arrayType.items))\n                ),\n            classType => singleWord(this.decoderNameForNamedType(classType)),\n            mapType => multiWord(\" \", \"Jdec.dict\", parenIfNeeded(this.decoderNameForType(mapType.values))),\n            enumType => singleWord(this.decoderNameForNamedType(enumType)),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    const nullableDecoder = this.decoderNameForType(nullable);\n                    if (noOptional) return nullableDecoder;\n                    return multiWord(\" \", \"Jdec.nullable\", parenIfNeeded(nullableDecoder));\n                }\n\n                return singleWord(this.decoderNameForNamedType(unionType));\n            }\n        );\n    }\n\n    private decoderNameForProperty(p: ClassProperty): MultiWord {\n        if (p.isOptional) {\n            return multiWord(\" \", \"Jdec.nullable\", parenIfNeeded(this.decoderNameForType(p.type, true)));\n        } else {\n            return this.decoderNameForType(p.type);\n        }\n    }\n\n    private encoderNameForNamedType(t: Type): Name {\n        const name = this.nameForNamedType(t);\n        return defined(this._namedTypeDependents.get(name)).encoder;\n    }\n\n    private encoderNameForType(t: Type, noOptional = false): MultiWord {\n        return matchType<MultiWord>(\n            t,\n            _anyType => singleWord(\"identity\"),\n            _nullType => multiWord(\" \", \"always\", \"Jenc.null\"),\n            _boolType => singleWord(\"Jenc.bool\"),\n            _integerType => singleWord(\"Jenc.int\"),\n            _doubleType => singleWord(\"Jenc.float\"),\n            _stringType => singleWord(\"Jenc.string\"),\n            arrayType =>\n                multiWord(\n                    \" \",\n                    [\"make\", this.arrayType, \"Encoder\"],\n                    parenIfNeeded(this.encoderNameForType(arrayType.items))\n                ),\n            classType => singleWord(this.encoderNameForNamedType(classType)),\n            mapType => multiWord(\" \", \"makeDictEncoder\", parenIfNeeded(this.encoderNameForType(mapType.values))),\n            enumType => singleWord(this.encoderNameForNamedType(enumType)),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    const nullableEncoder = this.encoderNameForType(nullable);\n                    if (noOptional) return nullableEncoder;\n                    return multiWord(\" \", \"makeNullableEncoder\", parenIfNeeded(nullableEncoder));\n                }\n\n                return singleWord(this.encoderNameForNamedType(unionType));\n            }\n        );\n    }\n\n    private encoderNameForProperty(p: ClassProperty): MultiWord {\n        if (p.isOptional) {\n            return multiWord(\" \", \"makeNullableEncoder\", parenIfNeeded(this.encoderNameForType(p.type, true)));\n        } else {\n            return this.encoderNameForType(p.type);\n        }\n    }\n\n    private emitTopLevelDefinition(t: Type, topLevelName: Name): void {\n        this.emitLine(\"type alias \", topLevelName, \" = \", this.elmType(t).source);\n    }\n\n    private emitClassDefinition(c: ClassType, className: Name): void {\n        let description = this.descriptionForType(c);\n        this.forEachClassProperty(c, \"none\", (name, jsonName) => {\n            const propertyDescription = this.descriptionForClassProperty(c, jsonName);\n            if (propertyDescription === undefined) return;\n\n            if (description === undefined) {\n                description = [];\n            } else {\n                description.push(\"\");\n            }\n\n            description.push(`${this.sourcelikeToString(name)}:`);\n            description.push(...propertyDescription);\n        });\n\n        this.emitDescription(description);\n        this.emitLine(\"type alias \", className, \" =\");\n        this.indent(() => {\n            let onFirst = true;\n            this.forEachClassProperty(c, \"none\", (name, _jsonName, p) => {\n                this.emitLine(onFirst ? \"{\" : \",\", \" \", name, \" : \", this.elmProperty(p));\n                onFirst = false;\n            });\n            if (onFirst) {\n                this.emitLine(\"{\");\n            }\n\n            this.emitLine(\"}\");\n        });\n    }\n\n    private emitEnumDefinition(e: EnumType, enumName: Name): void {\n        this.emitDescription(this.descriptionForType(e));\n        this.emitLine(\"type \", enumName);\n        this.indent(() => {\n            let onFirst = true;\n            this.forEachEnumCase(e, \"none\", name => {\n                const equalsOrPipe = onFirst ? \"=\" : \"|\";\n                this.emitLine(equalsOrPipe, \" \", name);\n                onFirst = false;\n            });\n        });\n    }\n\n    private emitUnionDefinition(u: UnionType, unionName: Name): void {\n        this.emitDescription(this.descriptionForType(u));\n        this.emitLine(\"type \", unionName);\n        this.indent(() => {\n            let onFirst = true;\n            this.forEachUnionMember(u, null, \"none\", null, (constructor, t) => {\n                const equalsOrPipe = onFirst ? \"=\" : \"|\";\n                if (t.kind === \"null\") {\n                    this.emitLine(equalsOrPipe, \" \", constructor);\n                } else {\n                    this.emitLine(equalsOrPipe, \" \", constructor, \" \", parenIfNeeded(this.elmType(t)));\n                }\n\n                onFirst = false;\n            });\n        });\n    }\n\n    private emitTopLevelFunctions(t: Type, topLevelName: Name): void {\n        const { encoder, decoder } = defined(this._topLevelDependents.get(topLevelName));\n        if (this.namedTypeToNameForTopLevel(t) === undefined) {\n            this.emitLine(defined(decoder), \" : Jdec.Decoder \", topLevelName);\n            this.emitLine(defined(decoder), \" = \", this.decoderNameForType(t).source);\n            this.ensureBlankLine();\n        }\n\n        this.emitLine(encoder, \" : \", topLevelName, \" -> String\");\n        this.emitLine(encoder, \" r = Jenc.encode 0 (\", this.encoderNameForType(t).source, \" r)\");\n    }\n\n    private emitClassFunctions(c: ClassType, className: Name): void {\n        const decoderName = this.decoderNameForNamedType(c);\n        this.emitLine(decoderName, \" : Jdec.Decoder \", className);\n        this.emitLine(decoderName, \" =\");\n        this.indent(() => {\n            this.emitLine(\"Jpipe.decode \", className);\n            this.indent(() => {\n                this.forEachClassProperty(c, \"none\", (_, jsonName, p) => {\n                    const propDecoder = parenIfNeeded(this.decoderNameForProperty(p));\n                    const { reqOrOpt, fallback } = requiredOrOptional(p);\n                    this.emitLine(\"|> \", reqOrOpt, ' \"', stringEscape(jsonName), '\" ', propDecoder, fallback);\n                });\n            });\n        });\n        this.ensureBlankLine();\n\n        const encoderName = this.encoderNameForNamedType(c);\n        this.emitLine(encoderName, \" : \", className, \" -> Jenc.Value\");\n        this.emitLine(encoderName, \" x =\");\n        this.indent(() => {\n            this.emitLine(\"Jenc.object\");\n            this.indent(() => {\n                let onFirst = true;\n                this.forEachClassProperty(c, \"none\", (name, jsonName, p) => {\n                    const bracketOrComma = onFirst ? \"[\" : \",\";\n                    const propEncoder = this.encoderNameForProperty(p).source;\n                    this.emitLine(bracketOrComma, ' (\"', stringEscape(jsonName), '\", ', propEncoder, \" x.\", name, \")\");\n                    onFirst = false;\n                });\n                if (onFirst) {\n                    this.emitLine(\"[\");\n                }\n\n                this.emitLine(\"]\");\n            });\n        });\n    }\n\n    private emitEnumFunctions(e: EnumType, enumName: Name): void {\n        const decoderName = this.decoderNameForNamedType(e);\n        this.emitLine(decoderName, \" : Jdec.Decoder \", enumName);\n        this.emitLine(decoderName, \" =\");\n        this.indent(() => {\n            this.emitLine(\"Jdec.string\");\n            this.indent(() => {\n                this.emitLine(\"|> Jdec.andThen (\\\\str ->\");\n                this.indent(() => {\n                    this.emitLine(\"case str of\");\n                    this.indent(() => {\n                        this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n                            this.emitLine('\"', stringEscape(jsonName), '\" -> Jdec.succeed ', name);\n                        });\n                        this.emitLine('somethingElse -> Jdec.fail <| \"Invalid ', enumName, ': \" ++ somethingElse');\n                    });\n                });\n                this.emitLine(\")\");\n            });\n        });\n        this.ensureBlankLine();\n\n        const encoderName = this.encoderNameForNamedType(e);\n        this.emitLine(encoderName, \" : \", enumName, \" -> Jenc.Value\");\n        this.emitLine(encoderName, \" x = case x of\");\n        this.indent(() => {\n            this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n                this.emitLine(name, ' -> Jenc.string \"', stringEscape(jsonName), '\"');\n            });\n        });\n    }\n\n    private emitUnionFunctions(u: UnionType, unionName: Name): void {\n        // We need arrays first, then strings, and integers before doubles.\n        function sortOrder(_: Name, t: Type): string {\n            if (t.kind === \"array\") {\n                return \"  array\";\n            } else if (t.kind === \"double\") {\n                return \" xdouble\";\n            } else if (t.isPrimitive()) {\n                return \" \" + t.kind;\n            }\n\n            return t.kind;\n        }\n\n        const decoderName = this.decoderNameForNamedType(u);\n        this.emitLine(decoderName, \" : Jdec.Decoder \", unionName);\n        this.emitLine(decoderName, \" =\");\n        this.indent(() => {\n            this.emitLine(\"Jdec.oneOf\");\n            this.indent(() => {\n                let onFirst = true;\n                this.forEachUnionMember(u, null, \"none\", sortOrder, (constructor, t) => {\n                    const bracketOrComma = onFirst ? \"[\" : \",\";\n                    if (t.kind === \"null\") {\n                        this.emitLine(bracketOrComma, \" Jdec.null \", constructor);\n                    } else {\n                        const decoder = parenIfNeeded(this.decoderNameForType(t));\n                        this.emitLine(bracketOrComma, \" Jdec.map \", constructor, \" \", decoder);\n                    }\n\n                    onFirst = false;\n                });\n                this.emitLine(\"]\");\n            });\n        });\n        this.ensureBlankLine();\n\n        const encoderName = this.encoderNameForNamedType(u);\n        this.emitLine(encoderName, \" : \", unionName, \" -> Jenc.Value\");\n        this.emitLine(encoderName, \" x = case x of\");\n        this.indent(() => {\n            this.forEachUnionMember(u, null, \"none\", sortOrder, (constructor, t) => {\n                if (t.kind === \"null\") {\n                    this.emitLine(constructor, \" -> Jenc.null\");\n                } else {\n                    const encoder = this.encoderNameForType(t).source;\n                    this.emitLine(constructor, \" y -> \", encoder, \" y\");\n                }\n            });\n        });\n    }\n\n    protected emitSourceStructure(): void {\n        const exports: Sourcelike[] = [];\n        const topLevelDecoders: Sourcelike[] = [];\n        this.forEachTopLevel(\"none\", (_, name) => {\n            let { encoder, decoder } = defined(this._topLevelDependents.get(name));\n            if (decoder === undefined) {\n                decoder = defined(this._namedTypeDependents.get(name)).decoder;\n            }\n\n            topLevelDecoders.push(decoder);\n            exports.push(name, encoder, decoder);\n        });\n        this.forEachObject(\"none\", (t: ClassType, name: Name) => {\n            if (!mapContains(this.topLevels, t)) exports.push(name);\n        });\n        this.forEachEnum(\"none\", (t, name) => {\n            if (!mapContains(this.topLevels, t)) exports.push([name, \"(..)\"]);\n        });\n        this.forEachUnion(\"none\", (t, name) => {\n            if (!mapContains(this.topLevels, t)) exports.push([name, \"(..)\"]);\n        });\n\n        if (this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n        } else if (!this._options.justTypes) {\n            this.emitCommentLines([\n                \"To decode the JSON data, add this file to your project, run\",\n                \"\",\n                \"    elm-package install NoRedInk/elm-decode-pipeline\",\n                \"\",\n                \"add these imports\",\n                \"\",\n                \"    import Json.Decode exposing (decodeString)`);\"\n            ]);\n            this.emitLine(\n                \"--     import \",\n                this._options.moduleName,\n                \" exposing (\",\n                arrayIntercalate(\", \", topLevelDecoders),\n                \")\"\n            );\n            this.emitMultiline(`--\n-- and you're off to the races with\n--`);\n            this.forEachTopLevel(\"none\", (_, name) => {\n                let { decoder } = defined(this._topLevelDependents.get(name));\n                if (decoder === undefined) {\n                    decoder = defined(this._namedTypeDependents.get(name)).decoder;\n                }\n\n                this.emitLine(\"--     decodeString \", decoder, \" myJsonString\");\n            });\n        }\n\n        if (!this._options.justTypes) {\n            this.ensureBlankLine();\n            this.emitLine(\"module \", this._options.moduleName, \" exposing\");\n            this.indent(() => {\n                for (let i = 0; i < exports.length; i++) {\n                    this.emitLine(i === 0 ? \"(\" : \",\", \" \", exports[i]);\n                }\n\n                this.emitLine(\")\");\n            });\n            this.ensureBlankLine();\n\n            this.emitMultiline(`import Json.Decode as Jdec\nimport Json.Decode.Pipeline as Jpipe\nimport Json.Encode as Jenc\nimport Dict exposing (Dict, map, toList)`);\n            if (this._options.useList) {\n                this.emitLine(\"import List exposing (map)\");\n            } else {\n                this.emitLine(\"import Array exposing (Array, map)\");\n            }\n        }\n\n        this.forEachTopLevel(\n            \"leading-and-interposing\",\n            (t: Type, topLevelName: Name) => this.emitTopLevelDefinition(t, topLevelName),\n            t => this.namedTypeToNameForTopLevel(t) === undefined\n        );\n        this.forEachNamedType(\n            \"leading-and-interposing\",\n            (c: ClassType, className: Name) => this.emitClassDefinition(c, className),\n            (e: EnumType, enumName: Name) => this.emitEnumDefinition(e, enumName),\n            (u: UnionType, unionName: Name) => this.emitUnionDefinition(u, unionName)\n        );\n\n        if (this._options.justTypes) return;\n\n        this.ensureBlankLine();\n        this.emitLine(\"-- decoders and encoders\");\n        this.forEachTopLevel(\"leading-and-interposing\", (t: Type, topLevelName: Name) =>\n            this.emitTopLevelFunctions(t, topLevelName)\n        );\n        this.forEachNamedType(\n            \"leading-and-interposing\",\n            (c: ClassType, className: Name) => this.emitClassFunctions(c, className),\n            (e: EnumType, enumName: Name) => this.emitEnumFunctions(e, enumName),\n            (u: UnionType, unionName: Name) => this.emitUnionFunctions(u, unionName)\n        );\n        this.ensureBlankLine();\n\n        this.emitLine(\"--- encoder helpers\");\n        this.ensureBlankLine();\n        this.emitLine(\"make\", this.arrayType, \"Encoder : (a -> Jenc.Value) -> \", this.arrayType, \" a -> Jenc.Value\");\n        this.emitLine(\"make\", this.arrayType, \"Encoder f arr =\");\n        this.indent(() => {\n            this.emitLine(\"Jenc.\", decapitalize(this.arrayType), \" (\", this.arrayType, \".map f arr)\");\n        });\n        this.ensureBlankLine();\n        this.emitMultiline(`makeDictEncoder : (a -> Jenc.Value) -> Dict String a -> Jenc.Value\nmakeDictEncoder f dict =\n    Jenc.object (toList (Dict.map (\\\\k -> f) dict))\n\nmakeNullableEncoder : (a -> Jenc.Value) -> Maybe a -> Jenc.Value\nmakeNullableEncoder f m =\n    case m of\n    Just x -> f x\n    Nothing -> Jenc.null`);\n    }\n}\n","import { type PrimitiveStringTypeKind, type StringTypeMapping, type TransformedStringTypeKind } from \"..\";\nimport { anyTypeIssueAnnotation, nullTypeIssueAnnotation } from \"../Annotation\";\nimport { ConvenienceRenderer } from \"../ConvenienceRenderer\";\nimport { DependencyName, type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { BooleanOption, type Option, type OptionValues, StringOption, getOptionValues } from \"../RendererOptions\";\nimport { type Sourcelike, maybeAnnotated, modifySource } from \"../Source\";\nimport {\n    allUpperWordStyle,\n    camelCase,\n    combineWords,\n    firstUpperWordStyle,\n    isLetterOrUnderscore,\n    isLetterOrUnderscoreOrDigit,\n    legalizeCharacters,\n    splitIntoWords,\n    stringEscape\n} from \"../support/Strings\";\nimport { assert, defined } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport { type ClassProperty, type ClassType, type EnumType, type Type, type TypeKind, UnionType } from \"../Type\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { matchType, nullableFromUnion, removeNullFromUnion } from \"../TypeUtils\";\n\nexport const goOptions = {\n    justTypes: new BooleanOption(\"just-types\", \"Plain types only\", false),\n    justTypesAndPackage: new BooleanOption(\"just-types-and-package\", \"Plain types with package only\", false),\n    packageName: new StringOption(\"package\", \"Generated package name\", \"NAME\", \"main\"),\n    multiFileOutput: new BooleanOption(\"multi-file-output\", \"Renders each top-level object in its own Go file\", false),\n    fieldTags: new StringOption(\"field-tags\", \"list of tags which should be generated for fields\", \"TAGS\", \"json\"),\n    omitEmpty: new BooleanOption(\n        \"omit-empty\",\n        'If set, all non-required objects will be tagged with \",omitempty\"',\n        false\n    )\n};\n\nexport class GoTargetLanguage extends TargetLanguage {\n    public constructor() {\n        super(\"Go\", [\"go\", \"golang\"], \"go\");\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [\n            goOptions.justTypes,\n            goOptions.justTypesAndPackage,\n            goOptions.packageName,\n            goOptions.multiFileOutput,\n            goOptions.fieldTags,\n            goOptions.omitEmpty\n        ];\n    }\n\n    public get supportsUnionsWithBothNumberTypes(): boolean {\n        return true;\n    }\n\n    public get stringTypeMapping(): StringTypeMapping {\n        const mapping: Map<TransformedStringTypeKind, PrimitiveStringTypeKind> = new Map();\n        mapping.set(\"date-time\", \"date-time\");\n        return mapping;\n    }\n\n    public get supportsOptionalClassProperties(): boolean {\n        return true;\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): GoRenderer {\n        return new GoRenderer(this, renderContext, getOptionValues(goOptions, untypedOptionValues));\n    }\n\n    protected get defaultIndentation(): string {\n        return \"\\t\";\n    }\n}\n\nconst namingFunction = funPrefixNamer(\"namer\", goNameStyle);\n\nconst legalizeName = legalizeCharacters(isLetterOrUnderscoreOrDigit);\n\nfunction goNameStyle(original: string): string {\n    const words = splitIntoWords(original);\n    return combineWords(\n        words,\n        legalizeName,\n        firstUpperWordStyle,\n        firstUpperWordStyle,\n        allUpperWordStyle,\n        allUpperWordStyle,\n        \"\",\n        isLetterOrUnderscore\n    );\n}\n\nconst primitiveValueTypeKinds: TypeKind[] = [\"integer\", \"double\", \"bool\", \"string\"];\nconst compoundTypeKinds: TypeKind[] = [\"array\", \"class\", \"map\", \"enum\"];\n\nfunction isValueType(t: Type): boolean {\n    const kind = t.kind;\n    return primitiveValueTypeKinds.includes(kind) || kind === \"class\" || kind === \"enum\" || kind === \"date-time\";\n}\n\nfunction canOmitEmpty(cp: ClassProperty, omitEmptyOption: boolean): boolean {\n    if (!cp.isOptional) return false;\n    if (omitEmptyOption) return true;\n    const t = cp.type;\n    return ![\"union\", \"null\", \"any\"].includes(t.kind);\n}\n\nexport class GoRenderer extends ConvenienceRenderer {\n    private readonly _topLevelUnmarshalNames = new Map<Name, Name>();\n\n    private _currentFilename: string | undefined;\n\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        private readonly _options: OptionValues<typeof goOptions>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return namingFunction;\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return namingFunction;\n    }\n\n    protected makeUnionMemberNamer(): Namer {\n        return namingFunction;\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return namingFunction;\n    }\n\n    protected get enumCasesInGlobalNamespace(): boolean {\n        return true;\n    }\n\n    protected makeTopLevelDependencyNames(_: Type, topLevelName: Name): DependencyName[] {\n        const unmarshalName = new DependencyName(\n            namingFunction,\n            topLevelName.order,\n            lookup => `unmarshal_${lookup(topLevelName)}`\n        );\n        this._topLevelUnmarshalNames.set(topLevelName, unmarshalName);\n        return [unmarshalName];\n    }\n\n    /// startFile takes a file name, lowercases it, appends \".go\" to it, and sets it as the current filename.\n    protected startFile(basename: Sourcelike): void {\n        if (this._options.multiFileOutput === false) {\n            return;\n        }\n\n        assert(this._currentFilename === undefined, \"Previous file wasn't finished: \" + this._currentFilename);\n        this._currentFilename = `${this.sourcelikeToString(basename)}.go`;\n        this.initializeEmitContextForFilename(this._currentFilename);\n    }\n\n    /// endFile pushes the current file name onto the collection of finished files and then resets the current file name. These finished files are used in index.ts to write the output.\n    protected endFile(): void {\n        if (this._options.multiFileOutput === false) {\n            return;\n        }\n\n        this.finishFile(defined(this._currentFilename));\n        this._currentFilename = undefined;\n    }\n\n    private emitBlock(line: Sourcelike, f: () => void): void {\n        this.emitLine(line, \" {\");\n        this.indent(f);\n        this.emitLine(\"}\");\n    }\n\n    private emitFunc(decl: Sourcelike, f: () => void): void {\n        this.emitBlock([\"func \", decl], f);\n    }\n\n    private emitStruct(name: Name, table: Sourcelike[][]): void {\n        this.emitBlock([\"type \", name, \" struct\"], () => this.emitTable(table));\n    }\n\n    private nullableGoType(t: Type, withIssues: boolean): Sourcelike {\n        const goType = this.goType(t, withIssues);\n        if (isValueType(t)) {\n            return [\"*\", goType];\n        } else {\n            return goType;\n        }\n    }\n\n    private propertyGoType(cp: ClassProperty): Sourcelike {\n        const t = cp.type;\n        if (t instanceof UnionType && nullableFromUnion(t) === null) {\n            return [\"*\", this.goType(t, true)];\n        }\n\n        if (cp.isOptional) {\n            return this.nullableGoType(t, true);\n        }\n\n        return this.goType(t, true);\n    }\n\n    private goType(t: Type, withIssues = false): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => maybeAnnotated(withIssues, anyTypeIssueAnnotation, \"interface{}\"),\n            _nullType => maybeAnnotated(withIssues, nullTypeIssueAnnotation, \"interface{}\"),\n            _boolType => \"bool\",\n            _integerType => \"int64\",\n            _doubleType => \"float64\",\n            _stringType => \"string\",\n            arrayType => [\"[]\", this.goType(arrayType.items, withIssues)],\n            classType => this.nameForNamedType(classType),\n            mapType => {\n                let valueSource: Sourcelike;\n                const v = mapType.values;\n                if (v instanceof UnionType && nullableFromUnion(v) === null) {\n                    valueSource = [\"*\", this.nameForNamedType(v)];\n                } else {\n                    valueSource = this.goType(v, withIssues);\n                }\n\n                return [\"map[string]\", valueSource];\n            },\n            enumType => this.nameForNamedType(enumType),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) return this.nullableGoType(nullable, withIssues);\n                return this.nameForNamedType(unionType);\n            },\n            transformedStringType => {\n                if (transformedStringType.kind === \"date-time\") {\n                    return \"time.Time\";\n                }\n\n                return \"string\";\n            }\n        );\n    }\n\n    private emitTopLevel(t: Type, name: Name): void {\n        this.startFile(name);\n\n        if (\n            this._options.multiFileOutput &&\n            this._options.justTypes === false &&\n            this._options.justTypesAndPackage === false &&\n            this.leadingComments === undefined\n        ) {\n            this.emitLineOnce(\n                \"// This file was generated from JSON Schema using quicktype, do not modify it directly.\"\n            );\n            this.emitLineOnce(\"// To parse and unparse this JSON data, add this code to your project and do:\");\n            this.emitLineOnce(\"//\");\n            const ref = modifySource(camelCase, name);\n            this.emitLineOnce(\"//    \", ref, \", err := \", defined(this._topLevelUnmarshalNames.get(name)), \"(bytes)\");\n            this.emitLineOnce(\"//    bytes, err = \", ref, \".Marshal()\");\n        }\n\n        this.emitPackageDefinitons(true);\n\n        const unmarshalName = defined(this._topLevelUnmarshalNames.get(name));\n        if (this.namedTypeToNameForTopLevel(t) === undefined) {\n            this.emitLine(\"type \", name, \" \", this.goType(t));\n        }\n\n        if (this._options.justTypes || this._options.justTypesAndPackage) return;\n\n        this.ensureBlankLine();\n        this.emitFunc([unmarshalName, \"(data []byte) (\", name, \", error)\"], () => {\n            this.emitLine(\"var r \", name);\n            this.emitLine(\"err := json.Unmarshal(data, &r)\");\n            this.emitLine(\"return r, err\");\n        });\n        this.ensureBlankLine();\n        this.emitFunc([\"(r *\", name, \") Marshal() ([]byte, error)\"], () => {\n            this.emitLine(\"return json.Marshal(r)\");\n        });\n        this.endFile();\n    }\n\n    private emitClass(c: ClassType, className: Name): void {\n        this.startFile(className);\n        let columns: Sourcelike[][] = [];\n        const usedTypes = new Set<string>();\n        this.forEachClassProperty(c, \"none\", (name, jsonName, p) => {\n            const description = this.descriptionForClassProperty(c, jsonName);\n            const docStrings =\n                description !== undefined && description.length > 0 ? description.map(d => \"// \" + d) : [];\n            const goType = this.propertyGoType(p);\n            const omitEmpty = canOmitEmpty(p, this._options.omitEmpty) ? \",omitempty\" : [];\n\n            docStrings.forEach(doc => columns.push([doc]));\n            const tags = this._options.fieldTags\n                .split(\",\")\n                .map(tag => tag + ':\"' + stringEscape(jsonName) + omitEmpty + '\"')\n                .join(\" \");\n            columns.push([\n                [name, \" \"],\n                [goType, \" \"],\n                [\"`\", tags, \"`\"]\n            ]);\n            usedTypes.add(goType.toString());\n        });\n\n        this.emitPackageDefinitons(\n            false,\n            usedTypes.has(\"time.Time\") || usedTypes.has(\"*,time.Time\") || usedTypes.has(\"[],time.Time\")\n                ? new Set<string>([\"time\"])\n                : undefined\n        );\n        this.emitDescription(this.descriptionForType(c));\n        this.emitStruct(className, columns);\n        this.endFile();\n    }\n\n    private emitEnum(e: EnumType, enumName: Name): void {\n        this.startFile(enumName);\n        this.emitPackageDefinitons(false);\n        this.emitDescription(this.descriptionForType(e));\n        this.emitLine(\"type \", enumName, \" string\");\n        this.ensureBlankLine();\n        this.emitLine(\"const (\");\n        let columns: Sourcelike[][] = [];\n        this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n            columns.push([\n                [name, \" \"],\n                [enumName, ' = \"', stringEscape(jsonName), '\"']\n            ]);\n        });\n        this.indent(() => this.emitTable(columns));\n        this.emitLine(\")\");\n        this.endFile();\n    }\n\n    private emitUnion(u: UnionType, unionName: Name): void {\n        this.startFile(unionName);\n        this.emitPackageDefinitons(false);\n        const [hasNull, nonNulls] = removeNullFromUnion(u);\n        const isNullableArg = hasNull !== null ? \"true\" : \"false\";\n\n        const ifMember: <T, U>(\n            kind: TypeKind,\n            ifNotMember: U,\n            f: (t: Type, fieldName: Name, goType: Sourcelike) => T\n        ) => T | U = (kind, ifNotMember, f) => {\n            const maybeType = u.findMember(kind);\n            if (maybeType === undefined) return ifNotMember;\n            return f(maybeType, this.nameForUnionMember(u, maybeType), this.goType(maybeType));\n        };\n\n        const maybeAssignNil = (kind: TypeKind): void => {\n            ifMember(kind, undefined, (_1, fieldName, _2) => {\n                this.emitLine(\"x.\", fieldName, \" = nil\");\n            });\n        };\n\n        const makeArgs = (\n            primitiveArg: (fieldName: Sourcelike) => Sourcelike,\n            compoundArg: (isClass: boolean, fieldName: Sourcelike) => Sourcelike\n        ): Sourcelike => {\n            const args: Sourcelike = [];\n            for (const kind of primitiveValueTypeKinds) {\n                args.push(\n                    ifMember(kind, \"nil\", (_1, fieldName, _2) => primitiveArg(fieldName)),\n                    \", \"\n                );\n            }\n\n            for (const kind of compoundTypeKinds) {\n                args.push(\n                    ifMember(kind, \"false, nil\", (t, fieldName, _) => compoundArg(t.kind === \"class\", fieldName)),\n                    \", \"\n                );\n            }\n\n            args.push(isNullableArg);\n            return args;\n        };\n\n        let columns: Sourcelike[][] = [];\n        this.forEachUnionMember(u, nonNulls, \"none\", null, (fieldName, t) => {\n            const goType = this.nullableGoType(t, true);\n            columns.push([[fieldName, \" \"], goType]);\n        });\n        this.emitDescription(this.descriptionForType(u));\n        this.emitStruct(unionName, columns);\n\n        if (this._options.justTypes || this._options.justTypesAndPackage) return;\n\n        this.ensureBlankLine();\n        this.emitFunc([\"(x *\", unionName, \") UnmarshalJSON(data []byte) error\"], () => {\n            for (const kind of compoundTypeKinds) {\n                maybeAssignNil(kind);\n            }\n\n            ifMember(\"class\", undefined, (_1, _2, goType) => {\n                this.emitLine(\"var c \", goType);\n            });\n            const args = makeArgs(\n                fn => [\"&x.\", fn],\n                (isClass, fn) => {\n                    if (isClass) {\n                        return \"true, &c\";\n                    } else {\n                        return [\"true, &x.\", fn];\n                    }\n                }\n            );\n            this.emitLine(\"object, err := unmarshalUnion(data, \", args, \")\");\n            this.emitBlock(\"if err != nil\", () => {\n                this.emitLine(\"return err\");\n            });\n            this.emitBlock(\"if object\", () => {\n                ifMember(\"class\", undefined, (_1, fieldName, _2) => {\n                    this.emitLine(\"x.\", fieldName, \" = &c\");\n                });\n            });\n            this.emitLine(\"return nil\");\n        });\n        this.ensureBlankLine();\n        this.emitFunc([\"(x *\", unionName, \") MarshalJSON() ([]byte, error)\"], () => {\n            const args = makeArgs(\n                fn => [\"x.\", fn],\n                (_, fn) => [\"x.\", fn, \" != nil, x.\", fn]\n            );\n            this.emitLine(\"return marshalUnion(\", args, \")\");\n        });\n        this.endFile();\n    }\n\n    private emitSingleFileHeaderComments(): void {\n        this.emitLineOnce(\"// This file was generated from JSON Schema using quicktype, do not modify it directly.\");\n        this.emitLineOnce(\"// To parse and unparse this JSON data, add this code to your project and do:\");\n        this.forEachTopLevel(\"none\", (_: Type, name: Name) => {\n            this.emitLine(\"//\");\n            const ref = modifySource(camelCase, name);\n            this.emitLine(\"//    \", ref, \", err := \", defined(this._topLevelUnmarshalNames.get(name)), \"(bytes)\");\n            this.emitLine(\"//    bytes, err = \", ref, \".Marshal()\");\n        });\n    }\n\n    private emitPackageDefinitons(includeJSONEncodingImport: boolean, imports: Set<string> = new Set<string>()): void {\n        if (!this._options.justTypes || this._options.justTypesAndPackage) {\n            this.ensureBlankLine();\n            const packageDeclaration = \"package \" + this._options.packageName;\n            this.emitLineOnce(packageDeclaration);\n            this.ensureBlankLine();\n        }\n\n        if (!this._options.justTypes && !this._options.justTypesAndPackage) {\n            if (this.haveNamedUnions && this._options.multiFileOutput === false) {\n                imports.add(\"bytes\");\n                imports.add(\"errors\");\n            }\n\n            if (includeJSONEncodingImport) {\n                imports.add(\"encoding/json\");\n            }\n        }\n\n        this.emitImports(imports);\n    }\n\n    private emitImports(imports: Set<string>): void {\n        const sortedImports = Array.from(imports).sort((a, b) => a.localeCompare(b));\n\n        if (sortedImports.length === 0) {\n            return;\n        }\n\n        sortedImports.forEach(packageName => {\n            this.emitLineOnce(`import \"${packageName}\"`);\n        });\n        this.ensureBlankLine();\n    }\n\n    private emitHelperFunctions(): void {\n        if (this.haveNamedUnions) {\n            this.startFile(\"JSONSchemaSupport\");\n            const imports = new Set<string>();\n            if (this._options.multiFileOutput) {\n                imports.add(\"bytes\");\n                imports.add(\"errors\");\n            }\n\n            this.emitPackageDefinitons(true, imports);\n            this.ensureBlankLine();\n            this\n                .emitMultiline(`func unmarshalUnion(data []byte, pi **int64, pf **float64, pb **bool, ps **string, haveArray bool, pa interface{}, haveObject bool, pc interface{}, haveMap bool, pm interface{}, haveEnum bool, pe interface{}, nullable bool) (bool, error) {\n    if pi != nil {\n        *pi = nil\n    }\n    if pf != nil {\n        *pf = nil\n    }\n    if pb != nil {\n        *pb = nil\n    }\n    if ps != nil {\n        *ps = nil\n    }\n\n    dec := json.NewDecoder(bytes.NewReader(data))\n    dec.UseNumber()\n    tok, err := dec.Token()\n    if err != nil {\n        return false, err\n    }\n\n    switch v := tok.(type) {\n    case json.Number:\n        if pi != nil {\n            i, err := v.Int64()\n            if err == nil {\n                *pi = &i\n                return false, nil\n            }\n        }\n        if pf != nil {\n            f, err := v.Float64()\n            if err == nil {\n                *pf = &f\n                return false, nil\n            }\n            return false, errors.New(\"Unparsable number\")\n        }\n        return false, errors.New(\"Union does not contain number\")\n    case float64:\n        return false, errors.New(\"Decoder should not return float64\")\n    case bool:\n        if pb != nil {\n            *pb = &v\n            return false, nil\n        }\n        return false, errors.New(\"Union does not contain bool\")\n    case string:\n        if haveEnum {\n            return false, json.Unmarshal(data, pe)\n        }\n        if ps != nil {\n            *ps = &v\n            return false, nil\n        }\n        return false, errors.New(\"Union does not contain string\")\n    case nil:\n        if nullable {\n            return false, nil\n        }\n        return false, errors.New(\"Union does not contain null\")\n    case json.Delim:\n        if v == '{' {\n            if haveObject {\n                return true, json.Unmarshal(data, pc)\n            }\n            if haveMap {\n                return false, json.Unmarshal(data, pm)\n            }\n            return false, errors.New(\"Union does not contain object\")\n        }\n        if v == '[' {\n            if haveArray {\n                return false, json.Unmarshal(data, pa)\n            }\n            return false, errors.New(\"Union does not contain array\")\n        }\n        return false, errors.New(\"Cannot handle delimiter\")\n    }\n    return false, errors.New(\"Cannot unmarshal union\")\n\n}\n\nfunc marshalUnion(pi *int64, pf *float64, pb *bool, ps *string, haveArray bool, pa interface{}, haveObject bool, pc interface{}, haveMap bool, pm interface{}, haveEnum bool, pe interface{}, nullable bool) ([]byte, error) {\n    if pi != nil {\n        return json.Marshal(*pi)\n    }\n    if pf != nil {\n        return json.Marshal(*pf)\n    }\n    if pb != nil {\n        return json.Marshal(*pb)\n    }\n    if ps != nil {\n        return json.Marshal(*ps)\n    }\n    if haveArray {\n        return json.Marshal(pa)\n    }\n    if haveObject {\n        return json.Marshal(pc)\n    }\n    if haveMap {\n        return json.Marshal(pm)\n    }\n    if haveEnum {\n        return json.Marshal(pe)\n    }\n    if nullable {\n        return json.Marshal(nil)\n    }\n    return nil, errors.New(\"Union must not be null\")\n}`);\n            this.endFile();\n        }\n    }\n\n    protected emitSourceStructure(): void {\n        if (\n            this._options.multiFileOutput === false &&\n            this._options.justTypes === false &&\n            this._options.justTypesAndPackage === false &&\n            this.leadingComments === undefined\n        ) {\n            this.emitSingleFileHeaderComments();\n            this.emitPackageDefinitons(false, this.collectAllImports());\n        }\n\n        this.forEachTopLevel(\n            \"leading-and-interposing\",\n            (t, name) => this.emitTopLevel(t, name),\n            t =>\n                !(this._options.justTypes || this._options.justTypesAndPackage) ||\n                this.namedTypeToNameForTopLevel(t) === undefined\n        );\n        this.forEachObject(\"leading-and-interposing\", (c: ClassType, className: Name) => this.emitClass(c, className));\n        this.forEachEnum(\"leading-and-interposing\", (u: EnumType, enumName: Name) => this.emitEnum(u, enumName));\n        this.forEachUnion(\"leading-and-interposing\", (u: UnionType, unionName: Name) => this.emitUnion(u, unionName));\n\n        if (this._options.justTypes || this._options.justTypesAndPackage) {\n            return;\n        }\n\n        this.emitHelperFunctions();\n    }\n\n    private collectAllImports(): Set<string> {\n        let imports = new Set<string>();\n        this.forEachObject(\"leading-and-interposing\", (c: ClassType, _className: Name) => {\n            const classImports = this.collectClassImports(c);\n            imports = new Set([...imports, ...classImports]);\n        });\n\n        this.forEachUnion(\"leading-and-interposing\", (u: UnionType, _unionName: Name) => {\n            const unionImports = this.collectUnionImports(u);\n            imports = new Set([...imports, ...unionImports]);\n        });\n        return imports;\n    }\n\n    private collectClassImports(c: ClassType): Set<string> {\n        const usedTypes = new Set<string>();\n        const mapping: Map<string, string> = new Map();\n        mapping.set(\"time.Time\", \"time\");\n        mapping.set(\"*,time.Time\", \"time\");\n        mapping.set(\"[],time.Time\", \"time\");\n\n        this.forEachClassProperty(c, \"none\", (_name, _jsonName, p) => {\n            const goType = this.propertyGoType(p);\n            usedTypes.add(goType.toString());\n        });\n\n        const imports = new Set<string>();\n        usedTypes.forEach(k => {\n            const typeImport = mapping.get(k);\n            if (typeImport) {\n                imports.add(typeImport);\n            }\n        });\n\n        return imports;\n    }\n\n    private collectUnionImports(u: UnionType): Set<string> {\n        const usedTypes = new Set<string>();\n        const mapping: Map<string, string> = new Map();\n        mapping.set(\"time.Time\", \"time\");\n        mapping.set(\"*,time.Time\", \"time\");\n\n        this.forEachUnionMember(u, null, \"none\", null, (_fieldName, t) => {\n            const goType = this.nullableGoType(t, true);\n            usedTypes.add(goType.toString());\n        });\n\n        const imports = new Set<string>();\n        usedTypes.forEach(k => {\n            const typeImport = mapping.get(k);\n            if (!typeImport) {\n                return;\n            }\n\n            imports.add(typeImport);\n        });\n\n        return imports;\n    }\n}\n","import { mapContains } from \"collection-utils\";\n\nimport { ConvenienceRenderer, type ForbiddenWordsInfo } from \"../ConvenienceRenderer\";\nimport { type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport {\n    BooleanOption,\n    EnumOption,\n    type Option,\n    type OptionValues,\n    StringOption,\n    getOptionValues\n} from \"../RendererOptions\";\nimport { type MultiWord, type Sourcelike, multiWord, parenIfNeeded, singleWord } from \"../Source\";\nimport {\n    allLowerWordStyle,\n    allUpperWordStyle,\n    combineWords,\n    firstUpperWordStyle,\n    isAscii,\n    isLetterOrUnderscore,\n    isLetterOrUnderscoreOrDigit,\n    legalizeCharacters,\n    splitIntoWords,\n    stringEscape\n} from \"../support/Strings\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport { type ClassProperty, type ClassType, type EnumType, type Type, type UnionType } from \"../Type\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { matchType, nullableFromUnion } from \"../TypeUtils\";\n\nexport const haskellOptions = {\n    justTypes: new BooleanOption(\"just-types\", \"Plain types only\", false),\n    useList: new EnumOption(\"array-type\", \"Use Array or List\", [\n        [\"array\", false],\n        [\"list\", true]\n    ]),\n    moduleName: new StringOption(\"module\", \"Generated module name\", \"NAME\", \"QuickType\")\n};\n\nexport class HaskellTargetLanguage extends TargetLanguage {\n    public constructor() {\n        super(\"Haskell\", [\"haskell\"], \"haskell\");\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [haskellOptions.justTypes, haskellOptions.moduleName, haskellOptions.useList];\n    }\n\n    public get supportsOptionalClassProperties(): boolean {\n        return true;\n    }\n\n    public get supportsUnionsWithBothNumberTypes(): boolean {\n        return true;\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): HaskellRenderer {\n        return new HaskellRenderer(this, renderContext, getOptionValues(haskellOptions, untypedOptionValues));\n    }\n}\n\nconst forbiddenNames = [\n    // reserved keywords\n    \"as\",\n    \"case\",\n    \"class\",\n    \"data\",\n    \"default\",\n    \"deriving\",\n    \"do\",\n    \"else\",\n    \"family\",\n    \"forall\",\n    \"foreign\",\n    \"hiding\",\n    \"if\",\n    \"import\",\n    \"in\",\n    \"infix\",\n    \"infixl\",\n    \"infixr\",\n    \"instance\",\n    \"let\",\n    \"of\",\n    \"mdo\",\n    \"module\",\n    \"newtype\",\n    \"proc\",\n    \"qualified\",\n    \"rec\",\n    \"then\",\n    \"type\",\n    \"where\",\n    // in Prelude keywords ...\n    \"id\",\n    \"Array\",\n    \"HashMap\",\n    \"Map\",\n    \"Maybe\",\n    \"Bool\",\n    \"Int\",\n    \"True\",\n    \"False\",\n    \"Enum\",\n    // Aeson types\n    \"encode\",\n    \"decode\",\n    \"text\",\n    \"Text\",\n    \"Value\",\n    \"Object\",\n    \"Result\",\n    \"Series\",\n    \"Error\"\n];\n\nconst legalizeName = legalizeCharacters(cp => isAscii(cp) && isLetterOrUnderscoreOrDigit(cp));\n\nfunction haskellNameStyle(original: string, upper: boolean): string {\n    const words = splitIntoWords(original);\n    return combineWords(\n        words,\n        legalizeName,\n        upper ? firstUpperWordStyle : allLowerWordStyle,\n        firstUpperWordStyle,\n        upper ? allUpperWordStyle : allLowerWordStyle,\n        allUpperWordStyle,\n        \"\",\n        isLetterOrUnderscore\n    );\n}\n\nconst upperNamingFunction = funPrefixNamer(\"upper\", n => haskellNameStyle(n, true));\nconst lowerNamingFunction = funPrefixNamer(\"lower\", n => haskellNameStyle(n, false));\n\nexport class HaskellRenderer extends ConvenienceRenderer {\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        private readonly _options: OptionValues<typeof haskellOptions>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return forbiddenNames;\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return upperNamingFunction;\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return lowerNamingFunction;\n    }\n\n    protected forbiddenForObjectProperties(_c: ClassType, _className: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected makeUnionMemberNamer(): Namer {\n        return upperNamingFunction;\n    }\n\n    protected get unionMembersInGlobalNamespace(): boolean {\n        return true;\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return upperNamingFunction;\n    }\n\n    protected get enumCasesInGlobalNamespace(): boolean {\n        return true;\n    }\n\n    protected proposeUnionMemberName(\n        u: UnionType,\n        unionName: Name,\n        fieldType: Type,\n        lookup: (n: Name) => string\n    ): string {\n        const fieldName = super.proposeUnionMemberName(u, unionName, fieldType, lookup);\n        return `${fieldName}_in_${lookup(unionName)}`;\n    }\n\n    protected get commentLineStart(): string {\n        return \"-- \";\n    }\n\n    protected emitDescriptionBlock(lines: Sourcelike[]): void {\n        if (lines.length === 1) {\n            this.emitComments([{ customLines: lines, lineStart: \"{-| \", lineEnd: \" -}\" }]);\n        } else {\n            this.emitCommentLines(lines, {\n                firstLineStart: \"{-| \",\n                lineStart: \"\",\n                afterComment: \"-}\"\n            });\n        }\n    }\n\n    private haskellType(t: Type, noOptional = false): MultiWord {\n        return matchType<MultiWord>(\n            t,\n            _anyType => multiWord(\" \", \"Maybe\", \"Text\"),\n            _nullType => multiWord(\" \", \"Maybe\", \"Text\"),\n            _boolType => singleWord(\"Bool\"),\n            _integerType => singleWord(\"Int\"),\n            _doubleType => singleWord(\"Float\"),\n            _stringType => singleWord(\"Text\"),\n            arrayType => {\n                if (this._options.useList) {\n                    return multiWord(\"\", \"[\", parenIfNeeded(this.haskellType(arrayType.items)), \"]\");\n                }\n\n                return multiWord(\" \", \"Vector\", parenIfNeeded(this.haskellType(arrayType.items)));\n            },\n            classType => singleWord(this.nameForNamedType(classType)),\n            mapType => multiWord(\" \", \"HashMap Text\", parenIfNeeded(this.haskellType(mapType.values))),\n            enumType => singleWord(this.nameForNamedType(enumType)),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    const nullableType = this.haskellType(nullable);\n                    if (noOptional) return nullableType;\n                    return multiWord(\" \", \"Maybe\", parenIfNeeded(nullableType));\n                }\n\n                return singleWord(this.nameForNamedType(unionType));\n            }\n        );\n    }\n\n    private haskellProperty(p: ClassProperty): Sourcelike {\n        if (p.isOptional) {\n            return multiWord(\" \", \"Maybe\", parenIfNeeded(this.haskellType(p.type, true))).source;\n        } else {\n            return this.haskellType(p.type).source;\n        }\n    }\n\n    private encoderNameForType(t: Type): MultiWord {\n        return matchType<MultiWord>(\n            t,\n            _anyType => singleWord(\"String\"),\n            _nullType => singleWord(\"Null\"),\n            _boolType => singleWord(\"Bool\"),\n            _integerType => singleWord(\"Number\"),\n            _doubleType => singleWord(\"Number\"),\n            _stringType => singleWord(\"String\"),\n            _arrayType => singleWord(\"Array\"),\n            _classType => singleWord(\"Object\"),\n            _mapType => singleWord(\"Object\"),\n            _enumType => singleWord(\"Object\"),\n            _unionType => singleWord(\"Object\")\n        );\n    }\n\n    private emitTopLevelDefinition(t: Type, topLevelName: Name): void {\n        this.emitLine(\"type \", topLevelName, \" = \", this.haskellType(t).source);\n    }\n\n    private emitClassDefinition(c: ClassType, className: Name): void {\n        let description = this.descriptionForType(c);\n        this.forEachClassProperty(c, \"none\", (name, jsonName) => {\n            const propertyDescription = this.descriptionForClassProperty(c, jsonName);\n            if (propertyDescription === undefined) return;\n\n            if (description === undefined) {\n                description = [];\n            } else {\n                description.push(\"\");\n            }\n\n            description.push(`${this.sourcelikeToString(name)}:`);\n            description.push(...propertyDescription);\n        });\n\n        this.emitDescription(description);\n        this.emitLine(\"data \", className, \" = \", className);\n        this.indent(() => {\n            let onFirst = true;\n            this.forEachClassProperty(c, \"none\", (name, _jsonName, p) => {\n                this.emitLine(onFirst ? \"{ \" : \", \", name, className, \" :: \", this.haskellProperty(p));\n                onFirst = false;\n            });\n            if (onFirst) {\n                this.emitLine(\"{\");\n            }\n\n            this.emitLine(\"} deriving (Show)\");\n        });\n    }\n\n    private emitEnumDefinition(e: EnumType, enumName: Name): void {\n        this.emitDescription(this.descriptionForType(e));\n        this.emitLine(\"data \", enumName);\n        this.indent(() => {\n            let onFirst = true;\n            this.forEachEnumCase(e, \"none\", name => {\n                const equalsOrPipe = onFirst ? \"=\" : \"|\";\n                this.emitLine(equalsOrPipe, \" \", name, enumName);\n                onFirst = false;\n            });\n            this.emitLine(\"deriving (Show)\");\n        });\n    }\n\n    private emitUnionDefinition(u: UnionType, unionName: Name): void {\n        this.emitDescription(this.descriptionForType(u));\n        this.emitLine(\"data \", unionName);\n        this.indent(() => {\n            let onFirst = true;\n            this.forEachUnionMember(u, null, \"none\", null, (constructor, t) => {\n                const equalsOrPipe = onFirst ? \"=\" : \"|\";\n                if (t.kind === \"null\") {\n                    this.emitLine(equalsOrPipe, \" \", constructor);\n                } else {\n                    this.emitLine(equalsOrPipe, \" \", constructor, \" \", parenIfNeeded(this.haskellType(t)));\n                }\n\n                onFirst = false;\n            });\n            this.emitLine(\"deriving (Show)\");\n        });\n    }\n\n    private emitTopLevelFunctions(topLevelName: Name): void {\n        this.emitLine(\"decodeTopLevel :: ByteString -> Maybe \", topLevelName);\n        this.emitLine(\"decodeTopLevel = decode\");\n    }\n\n    private classPropertyLength(c: ClassType): number {\n        let counter = 0;\n        this.forEachClassProperty(c, \"none\", () => {\n            counter += 1;\n        });\n        return counter;\n    }\n\n    private emitClassEncoderInstance(c: ClassType, className: Name): void {\n        let classProperties: Array<Name | string> = [];\n        this.forEachClassProperty(c, \"none\", name => {\n            classProperties.push(\" \");\n            classProperties.push(name);\n            classProperties.push(className);\n        });\n\n        this.emitLine(\"instance ToJSON \", className, \" where\");\n        this.indent(() => {\n            if (classProperties.length === 0) {\n                this.emitLine(\"toJSON = \\\\_ -> emptyObject\");\n            } else {\n                this.emitLine(\"toJSON (\", className, ...classProperties, \") =\");\n                this.indent(() => {\n                    this.emitLine(\"object\");\n                    let onFirst = true;\n                    this.forEachClassProperty(c, \"none\", (name, jsonName) => {\n                        this.emitLine(onFirst ? \"[ \" : \", \", '\"', stringEscape(jsonName), '\" .= ', name, className);\n                        onFirst = false;\n                    });\n                    if (onFirst) {\n                        this.emitLine(\"[\");\n                    }\n\n                    this.emitLine(\"]\");\n                });\n            }\n        });\n    }\n\n    private emitClassDecoderInstance(c: ClassType, className: Name): void {\n        this.emitLine(\"instance FromJSON \", className, \" where\");\n\n        this.indent(() => {\n            if (this.classPropertyLength(c) === 0) {\n                this.emitLine(\"parseJSON emptyObject = return \", className);\n            } else {\n                this.emitLine(\"parseJSON (Object v) = \", className);\n                this.indent(() => {\n                    let onFirst = true;\n                    this.forEachClassProperty(c, \"none\", (_, jsonName, p) => {\n                        const operator = p.isOptional ? \".:?\" : \".:\";\n                        this.emitLine(onFirst ? \"<$> \" : \"<*> \", \"v \", operator, ' \"', stringEscape(jsonName), '\"');\n                        onFirst = false;\n                    });\n                });\n            }\n        });\n    }\n\n    private emitClassFunctions(c: ClassType, className: Name): void {\n        this.emitClassEncoderInstance(c, className);\n        this.ensureBlankLine();\n        this.emitClassDecoderInstance(c, className);\n    }\n\n    private emitEnumEncoderInstance(e: EnumType, enumName: Name): void {\n        this.emitLine(\"instance ToJSON \", enumName, \" where\");\n        this.indent(() => {\n            this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n                this.emitLine(\"toJSON \", name, enumName, ' = \"', stringEscape(jsonName), '\"');\n            });\n        });\n    }\n\n    private emitEnumDecoderInstance(e: EnumType, enumName: Name): void {\n        this.emitLine(\"instance FromJSON \", enumName, \" where\");\n        this.indent(() => {\n            this.emitLine('parseJSON = withText \"', enumName, '\" parseText');\n            this.indent(() => {\n                this.emitLine(\"where\");\n                this.indent(() => {\n                    this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n                        this.emitLine('parseText \"', stringEscape(jsonName), '\" = return ', name, enumName);\n                    });\n                });\n            });\n        });\n    }\n\n    private emitEnumFunctions(e: EnumType, enumName: Name): void {\n        this.emitEnumEncoderInstance(e, enumName);\n        this.ensureBlankLine();\n        this.emitEnumDecoderInstance(e, enumName);\n    }\n\n    private emitUnionEncoderInstance(u: UnionType, unionName: Name): void {\n        this.emitLine(\"instance ToJSON \", unionName, \" where\");\n        this.indent(() => {\n            this.forEachUnionMember(u, null, \"none\", null, (constructor, t) => {\n                if (t.kind === \"null\") {\n                    this.emitLine(\"toJSON \", constructor, \" = Null\");\n                } else {\n                    this.emitLine(\"toJSON (\", constructor, \" x) = toJSON x\");\n                }\n            });\n        });\n    }\n\n    private emitUnionDecoderInstance(u: UnionType, unionName: Name): void {\n        this.emitLine(\"instance FromJSON \", unionName, \" where\");\n        this.indent(() => {\n            this.forEachUnionMember(u, null, \"none\", null, (constructor, t) => {\n                if (t.kind === \"null\") {\n                    this.emitLine(\"parseJSON Null = return \", constructor);\n                } else {\n                    this.emitLine(\n                        \"parseJSON xs@(\",\n                        this.encoderNameForType(t).source,\n                        \" _) = (fmap \",\n                        constructor,\n                        \" . parseJSON) xs\"\n                    );\n                }\n            });\n        });\n    }\n\n    private emitUnionFunctions(u: UnionType, unionName: Name): void {\n        this.emitUnionEncoderInstance(u, unionName);\n        this.ensureBlankLine();\n        this.emitUnionDecoderInstance(u, unionName);\n    }\n\n    private emitLanguageExtensions(ext: string): void {\n        this.emitLine(`{-# LANGUAGE ${ext} #-}`);\n    }\n\n    protected emitSourceStructure(): void {\n        const exports: Sourcelike[] = [];\n        this.forEachTopLevel(\"none\", (_, name) => {\n            exports.push([name, \" (..)\"]);\n        });\n        this.forEachObject(\"none\", (t: ClassType, name: Name) => {\n            if (!mapContains(this.topLevels, t)) exports.push([name, \" (..)\"]);\n        });\n        this.forEachEnum(\"none\", (t, name) => {\n            if (!mapContains(this.topLevels, t)) exports.push([name, \" (..)\"]);\n        });\n        this.forEachUnion(\"none\", (t, name) => {\n            if (!mapContains(this.topLevels, t)) exports.push([name, \" (..)\"]);\n        });\n\n        this.emitLanguageExtensions(\"StrictData\");\n        this.emitLanguageExtensions(\"OverloadedStrings\");\n\n        if (!this._options.justTypes) {\n            this.ensureBlankLine();\n            this.emitLine(\"module \", this._options.moduleName);\n            this.indent(() => {\n                for (let i = 0; i < exports.length; i++) {\n                    this.emitLine(i === 0 ? \"(\" : \",\", \" \", exports[i]);\n                }\n\n                this.emitLine(\", decodeTopLevel\");\n                this.emitLine(\") where\");\n            });\n            this.ensureBlankLine();\n            this.emitMultiline(`import Data.Aeson\nimport Data.Aeson.Types (emptyObject)\nimport Data.ByteString.Lazy (ByteString)\nimport Data.HashMap.Strict (HashMap)\nimport Data.Text (Text)`);\n            if (this._options.useList) {\n                // this.emitLine(\"import List (map)\");\n            } else {\n                this.emitLine(\"import Data.Vector (Vector)\");\n            }\n        }\n\n        this.forEachTopLevel(\n            \"leading-and-interposing\",\n            (t: Type, topLevelName: Name) => this.emitTopLevelDefinition(t, topLevelName),\n            t => this.namedTypeToNameForTopLevel(t) === undefined\n        );\n\n        this.forEachNamedType(\n            \"leading-and-interposing\",\n            (c: ClassType, className: Name) => this.emitClassDefinition(c, className),\n            (e: EnumType, enumName: Name) => this.emitEnumDefinition(e, enumName),\n            (u: UnionType, unionName: Name) => this.emitUnionDefinition(u, unionName)\n        );\n\n        this.forEachTopLevel(\"leading-and-interposing\", (_: Type, topLevelName: Name) =>\n            this.emitTopLevelFunctions(topLevelName)\n        );\n\n        this.forEachNamedType(\n            \"leading-and-interposing\",\n            (c: ClassType, className: Name) => this.emitClassFunctions(c, className),\n            (e: EnumType, enumName: Name) => this.emitEnumFunctions(e, enumName),\n            (u: UnionType, unionName: Name) => this.emitUnionFunctions(u, unionName)\n        );\n\n        if (this._options.justTypes) return;\n\n        this.ensureBlankLine();\n    }\n}\n","import { type PrimitiveStringTypeKind, type StringTypeMapping, type TransformedStringTypeKind } from \"..\";\nimport { anyTypeIssueAnnotation, nullTypeIssueAnnotation } from \"../Annotation\";\nimport { ConvenienceRenderer, type ForbiddenWordsInfo } from \"../ConvenienceRenderer\";\nimport { DependencyName, type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport {\n    BooleanOption,\n    EnumOption,\n    type Option,\n    type OptionValues,\n    StringOption,\n    getOptionValues\n} from \"../RendererOptions\";\nimport { type Sourcelike, maybeAnnotated } from \"../Source\";\nimport { AcronymStyleOptions, acronymOption, acronymStyle } from \"../support/Acronyms\";\nimport {\n    allLowerWordStyle,\n    allUpperWordStyle,\n    capitalize,\n    combineWords,\n    escapeNonPrintableMapper,\n    firstUpperWordStyle,\n    isAscii,\n    isDigit,\n    isLetter,\n    splitIntoWords,\n    standardUnicodeHexEscape,\n    utf16ConcatMap,\n    utf16LegalizeCharacters\n} from \"../support/Strings\";\nimport { assert, assertNever, defined, panic } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport {\n    ArrayType,\n    type ClassProperty,\n    ClassType,\n    EnumType,\n    MapType,\n    type Type,\n    type TypeKind,\n    UnionType\n} from \"../Type\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { directlyReachableSingleNamedType, matchType, nullableFromUnion, removeNullFromUnion } from \"../TypeUtils\";\n\nexport const javaOptions = {\n    useList: new EnumOption(\n        \"array-type\",\n        \"Use T[] or List<T>\",\n        [\n            [\"array\", false],\n            [\"list\", true]\n        ],\n        \"array\"\n    ),\n    justTypes: new BooleanOption(\"just-types\", \"Plain types only\", false),\n    dateTimeProvider: new EnumOption(\n        \"datetime-provider\",\n        \"Date time provider type\",\n        [\n            [\"java8\", \"java8\"],\n            [\"legacy\", \"legacy\"]\n        ],\n        \"java8\"\n    ),\n    acronymStyle: acronymOption(AcronymStyleOptions.Pascal),\n    // FIXME: Do this via a configurable named eventually.\n    packageName: new StringOption(\"package\", \"Generated package name\", \"NAME\", \"io.quicktype\"),\n    lombok: new BooleanOption(\"lombok\", \"Use lombok\", false, \"primary\"),\n    lombokCopyAnnotations: new BooleanOption(\"lombok-copy-annotations\", \"Copy accessor annotations\", true, \"secondary\")\n};\n\nexport class JavaTargetLanguage extends TargetLanguage {\n    public constructor() {\n        super(\"Java\", [\"java\"], \"java\");\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [\n            javaOptions.useList,\n            javaOptions.justTypes,\n            javaOptions.dateTimeProvider,\n            javaOptions.acronymStyle,\n            javaOptions.packageName,\n            javaOptions.lombok,\n            javaOptions.lombokCopyAnnotations\n        ];\n    }\n\n    public get supportsUnionsWithBothNumberTypes(): boolean {\n        return true;\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): JavaRenderer {\n        const options = getOptionValues(javaOptions, untypedOptionValues);\n        if (options.justTypes) {\n            return new JavaRenderer(this, renderContext, options);\n        }\n\n        return new JacksonRenderer(this, renderContext, options);\n    }\n\n    public get stringTypeMapping(): StringTypeMapping {\n        const mapping: Map<TransformedStringTypeKind, PrimitiveStringTypeKind> = new Map();\n        mapping.set(\"date\", \"date\");\n        mapping.set(\"time\", \"time\");\n        mapping.set(\"date-time\", \"date-time\");\n        mapping.set(\"uuid\", \"uuid\");\n        return mapping;\n    }\n}\n\nconst javaKeywords = [\n    \"_\", // as of release 9, '_' is a keyword, and may not be used as an identifier\n    \"Object\",\n    \"Class\",\n    \"System\",\n    \"Long\",\n    \"Double\",\n    \"Boolean\",\n    \"String\",\n    \"List\",\n    \"Map\",\n    \"UUID\",\n    \"Exception\",\n    \"IOException\",\n    \"Override\",\n    \"abstract\",\n    \"continue\",\n    \"for\",\n    \"new\",\n    \"switch\",\n    \"assert\",\n    \"default\",\n    \"goto\",\n    \"package\",\n    \"synchronized\",\n    \"boolean\",\n    \"do\",\n    \"if\",\n    \"private\",\n    \"this\",\n    \"break\",\n    \"double\",\n    \"implements\",\n    \"protected\",\n    \"throw\",\n    \"byte\",\n    \"else\",\n    \"import\",\n    \"public\",\n    \"throws\",\n    \"case\",\n    \"enum\",\n    \"instanceof\",\n    \"return\",\n    \"transient\",\n    \"catch\",\n    \"extends\",\n    \"int\",\n    \"short\",\n    \"try\",\n    \"char\",\n    \"final\",\n    \"interface\",\n    \"static\",\n    \"void\",\n    \"class\",\n    \"finally\",\n    \"long\",\n    \"strictfp\",\n    \"volatile\",\n    \"const\",\n    \"float\",\n    \"native\",\n    \"super\",\n    \"while\",\n    \"null\",\n    \"false\",\n    \"true\"\n];\n\nexport const stringEscape = utf16ConcatMap(escapeNonPrintableMapper(isAscii, standardUnicodeHexEscape));\n\nfunction isStartCharacter(codePoint: number): boolean {\n    if (codePoint === 0x5f) return true; // underscore\n    return isAscii(codePoint) && isLetter(codePoint);\n}\n\nfunction isPartCharacter(codePoint: number): boolean {\n    return isStartCharacter(codePoint) || (isAscii(codePoint) && isDigit(codePoint));\n}\n\nconst legalizeName = utf16LegalizeCharacters(isPartCharacter);\n\nexport function javaNameStyle(\n    startWithUpper: boolean,\n    upperUnderscore: boolean,\n    original: string,\n    acronymsStyle: (s: string) => string = allUpperWordStyle\n): string {\n    const words = splitIntoWords(original);\n    return combineWords(\n        words,\n        legalizeName,\n        upperUnderscore ? allUpperWordStyle : startWithUpper ? firstUpperWordStyle : allLowerWordStyle,\n        upperUnderscore ? allUpperWordStyle : firstUpperWordStyle,\n        upperUnderscore || startWithUpper ? allUpperWordStyle : allLowerWordStyle,\n        acronymsStyle,\n        upperUnderscore ? \"_\" : \"\",\n        isStartCharacter\n    );\n}\n\nabstract class JavaDateTimeProvider {\n    public constructor(\n        protected readonly _renderer: JavaRenderer,\n        protected readonly _className: string\n    ) {}\n\n    public abstract keywords: string[];\n\n    public abstract dateTimeImports: string[];\n\n    public abstract dateImports: string[];\n\n    public abstract timeImports: string[];\n\n    public abstract converterImports: string[];\n\n    public abstract dateTimeType: string;\n\n    public abstract dateType: string;\n\n    public abstract timeType: string;\n\n    public abstract dateTimeJacksonAnnotations: string[];\n\n    public abstract dateJacksonAnnotations: string[];\n\n    public abstract timeJacksonAnnotations: string[];\n\n    public abstract emitDateTimeConverters(): void;\n\n    public shouldEmitDateTimeConverter = true;\n\n    public shouldEmitTimeConverter = true;\n\n    public shouldEmitDateConverter = true;\n\n    public abstract convertStringToDateTime(variable: Sourcelike): Sourcelike;\n    public abstract convertStringToTime(variable: Sourcelike): Sourcelike;\n    public abstract convertStringToDate(variable: Sourcelike): Sourcelike;\n\n    public abstract convertDateTimeToString(variable: Sourcelike): Sourcelike;\n    public abstract convertTimeToString(variable: Sourcelike): Sourcelike;\n    public abstract convertDateToString(variable: Sourcelike): Sourcelike;\n}\n\nclass Java8DateTimeProvider extends JavaDateTimeProvider {\n    public keywords = [\n        \"LocalDate\",\n        \"OffsetDateTime\",\n        \"OffsetTime\",\n        \"ZoneOffset\",\n        \"ZonedDateTime\",\n        \"DateTimeFormatter\",\n        \"DateTimeFormatterBuilder\",\n        \"ChronoField\"\n    ];\n\n    public dateTimeImports: string[] = [\"java.time.OffsetDateTime\"];\n\n    public dateImports: string[] = [\"java.time.LocalDate\"];\n\n    public timeImports: string[] = [\"java.time.OffsetTime\"];\n\n    public converterImports: string[] = [\n        \"java.time.LocalDate\",\n        \"java.time.OffsetDateTime\",\n        \"java.time.OffsetTime\",\n        \"java.time.ZoneOffset\",\n        \"java.time.ZonedDateTime\",\n        \"java.time.format.DateTimeFormatter\",\n        \"java.time.format.DateTimeFormatterBuilder\",\n        \"java.time.temporal.ChronoField\"\n    ];\n\n    public dateTimeType = \"OffsetDateTime\";\n\n    public dateType = \"LocalDate\";\n\n    public timeType = \"OffsetTime\";\n\n    public dateTimeJacksonAnnotations: string[] = [];\n\n    public dateJacksonAnnotations: string[] = [];\n\n    public timeJacksonAnnotations: string[] = [];\n\n    public emitDateTimeConverters(): void {\n        this._renderer.ensureBlankLine();\n        this._renderer.emitLine(\n            \"private static final DateTimeFormatter DATE_TIME_FORMATTER = new DateTimeFormatterBuilder()\"\n        );\n        this._renderer.indent(() =>\n            this._renderer.indent(() => {\n                this._renderer.emitLine(\".appendOptional(DateTimeFormatter.ISO_DATE_TIME)\");\n                this._renderer.emitLine(\".appendOptional(DateTimeFormatter.ISO_OFFSET_DATE_TIME)\");\n                this._renderer.emitLine(\".appendOptional(DateTimeFormatter.ISO_INSTANT)\");\n                this._renderer.emitLine('.appendOptional(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SX\"))');\n                this._renderer.emitLine('.appendOptional(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ssX\"))');\n                this._renderer.emitLine('.appendOptional(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"))');\n                this._renderer.emitLine(\".toFormatter()\");\n                this._renderer.emitLine(\".withZone(ZoneOffset.UTC);\");\n            })\n        );\n        this._renderer.ensureBlankLine();\n        this._renderer.emitBlock(\"public static OffsetDateTime parseDateTimeString(String str)\", () => {\n            this._renderer.emitLine(\n                \"return ZonedDateTime.from(Converter.DATE_TIME_FORMATTER.parse(str)).toOffsetDateTime();\"\n            );\n        });\n\n        this._renderer.ensureBlankLine();\n        this._renderer.emitLine(\n            \"private static final DateTimeFormatter TIME_FORMATTER = new DateTimeFormatterBuilder()\"\n        );\n        this._renderer.indent(() =>\n            this._renderer.indent(() => {\n                this._renderer.emitLine(\".appendOptional(DateTimeFormatter.ISO_TIME)\");\n                this._renderer.emitLine(\".appendOptional(DateTimeFormatter.ISO_OFFSET_TIME)\");\n                this._renderer.emitLine(\".parseDefaulting(ChronoField.YEAR, 2020)\");\n                this._renderer.emitLine(\".parseDefaulting(ChronoField.MONTH_OF_YEAR, 1)\");\n                this._renderer.emitLine(\".parseDefaulting(ChronoField.DAY_OF_MONTH, 1)\");\n                this._renderer.emitLine(\".toFormatter()\");\n                this._renderer.emitLine(\".withZone(ZoneOffset.UTC);\");\n            })\n        );\n        this._renderer.ensureBlankLine();\n        this._renderer.emitBlock(\"public static OffsetTime parseTimeString(String str)\", () => {\n            this._renderer.emitLine(\n                \"return ZonedDateTime.from(Converter.TIME_FORMATTER.parse(str)).toOffsetDateTime().toOffsetTime();\"\n            );\n        });\n    }\n\n    public convertStringToDateTime(variable: Sourcelike): Sourcelike {\n        return [this._className, \".parseDateTimeString(\", variable, \")\"];\n    }\n\n    public convertStringToTime(variable: Sourcelike): Sourcelike {\n        return [this._className, \".parseTimeString(\", variable, \")\"];\n    }\n\n    public convertStringToDate(variable: Sourcelike): Sourcelike {\n        return [\"LocalDate.parse(\", variable, \")\"];\n    }\n\n    public convertDateTimeToString(variable: Sourcelike): Sourcelike {\n        return [variable, \".format(java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME)\"];\n    }\n\n    public convertTimeToString(variable: Sourcelike): Sourcelike {\n        return [variable, \".format(java.time.format.DateTimeFormatter.ISO_OFFSET_TIME)\"];\n    }\n\n    public convertDateToString(variable: Sourcelike): Sourcelike {\n        return [variable, \".format(java.time.format.DateTimeFormatter.ISO_DATE)\"];\n    }\n}\n\nclass JavaLegacyDateTimeProvider extends JavaDateTimeProvider {\n    public keywords = [\"SimpleDateFormat\", \"Date\"];\n\n    public dateTimeImports: string[] = [\"java.util.Date\"];\n\n    public dateImports: string[] = [\"java.util.Date\"];\n\n    public timeImports: string[] = [\"java.util.Date\"];\n\n    public converterImports: string[] = [\"java.util.Date\", \"java.text.SimpleDateFormat\"];\n\n    public dateTimeType = \"Date\";\n\n    public dateType = \"Date\";\n\n    public timeType = \"Date\";\n\n    public dateTimeJacksonAnnotations: string[] = [\n        '@JsonFormat(pattern = \"yyyy-MM-dd\\'T\\'HH:mm:ssX\", timezone = \"UTC\")'\n    ];\n\n    public dateJacksonAnnotations: string[] = ['@JsonFormat(pattern = \"yyyy-MM-dd\")'];\n\n    public timeJacksonAnnotations: string[] = ['@JsonFormat(pattern = \"HH:mm:ssX\", timezone = \"UTC\")'];\n\n    public shouldEmitTimeConverter = false;\n\n    public shouldEmitDateConverter = false;\n\n    public emitDateTimeConverters(): void {\n        this._renderer.ensureBlankLine();\n        this._renderer.emitLine(\"private static final String[] DATE_TIME_FORMATS = {\");\n        this._renderer.indent(() =>\n            this._renderer.indent(() => {\n                this._renderer.emitLine(\"\\\"yyyy-MM-dd'T'HH:mm:ss.SX\\\",\");\n                this._renderer.emitLine(\"\\\"yyyy-MM-dd'T'HH:mm:ss.S\\\",\");\n                this._renderer.emitLine(\"\\\"yyyy-MM-dd'T'HH:mm:ssX\\\",\");\n                this._renderer.emitLine(\"\\\"yyyy-MM-dd'T'HH:mm:ss\\\",\");\n                this._renderer.emitLine('\"yyyy-MM-dd HH:mm:ss.SX\",');\n                this._renderer.emitLine('\"yyyy-MM-dd HH:mm:ss.S\",');\n                this._renderer.emitLine('\"yyyy-MM-dd HH:mm:ssX\",');\n                this._renderer.emitLine('\"yyyy-MM-dd HH:mm:ss\",');\n                this._renderer.emitLine('\"HH:mm:ss.SZ\",');\n                this._renderer.emitLine('\"HH:mm:ss.S\",');\n                this._renderer.emitLine('\"HH:mm:ssZ\",');\n                this._renderer.emitLine('\"HH:mm:ss\",');\n                this._renderer.emitLine('\"yyyy-MM-dd\",');\n            })\n        );\n        this._renderer.emitLine(\"};\");\n        this._renderer.ensureBlankLine();\n        this._renderer.emitBlock(\"public static Date parseAllDateTimeString(String str)\", () => {\n            this._renderer.emitBlock(\"for (String format : DATE_TIME_FORMATS)\", () => {\n                this._renderer.emitIgnoredTryCatchBlock(() => {\n                    this._renderer.emitLine(\"return new SimpleDateFormat(format).parse(str);\");\n                });\n            });\n            this._renderer.emitLine(\"return null;\");\n        });\n\n        this._renderer.ensureBlankLine();\n        this._renderer.emitBlock(\"public static String serializeDateTime(Date datetime)\", () => {\n            this._renderer.emitLine(\"return new SimpleDateFormat(\\\"yyyy-MM-dd'T'hh:mm:ssZ\\\").format(datetime);\");\n        });\n\n        this._renderer.ensureBlankLine();\n        this._renderer.emitBlock(\"public static String serializeDate(Date datetime)\", () => {\n            this._renderer.emitLine('return new SimpleDateFormat(\"yyyy-MM-dd\").format(datetime);');\n        });\n\n        this._renderer.ensureBlankLine();\n        this._renderer.emitBlock(\"public static String serializeTime(Date datetime)\", () => {\n            this._renderer.emitLine('return new SimpleDateFormat(\"hh:mm:ssZ\").format(datetime);');\n        });\n    }\n\n    public convertStringToDateTime(variable: Sourcelike): Sourcelike {\n        return [this._className, \".parseAllDateTimeString(\", variable, \")\"];\n    }\n\n    public convertStringToTime(variable: Sourcelike): Sourcelike {\n        return [this._className, \".parseAllDateTimeString(\", variable, \")\"];\n    }\n\n    public convertStringToDate(variable: Sourcelike): Sourcelike {\n        return [this._className, \".parseAllDateTimeString(\", variable, \")\"];\n    }\n\n    public convertDateTimeToString(variable: Sourcelike): Sourcelike {\n        return [this._className, \".serializeDateTime(\", variable, \")\"];\n    }\n\n    public convertTimeToString(variable: Sourcelike): Sourcelike {\n        return [this._className, \".serializeTime(\", variable, \")\"];\n    }\n\n    public convertDateToString(variable: Sourcelike): Sourcelike {\n        return [this._className, \".serializeDate(\", variable, \")\"];\n    }\n}\n\nexport class JavaRenderer extends ConvenienceRenderer {\n    private _currentFilename: string | undefined;\n\n    private readonly _gettersAndSettersForPropertyName = new Map<Name, [Name, Name]>();\n\n    private _haveEmittedLeadingComments = false;\n\n    protected readonly _dateTimeProvider: JavaDateTimeProvider;\n\n    protected readonly _converterClassname: string = \"Converter\";\n\n    protected readonly _converterKeywords: string[] = [];\n\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        protected readonly _options: OptionValues<typeof javaOptions>\n    ) {\n        super(targetLanguage, renderContext);\n\n        switch (_options.dateTimeProvider) {\n            default:\n            case \"java8\":\n                this._dateTimeProvider = new Java8DateTimeProvider(this, this._converterClassname);\n                break;\n            case \"legacy\":\n                this._dateTimeProvider = new JavaLegacyDateTimeProvider(this, this._converterClassname);\n                break;\n        }\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        const keywords = [\n            ...javaKeywords,\n            ...this._converterKeywords,\n            this._converterClassname,\n            ...this._dateTimeProvider.keywords\n        ];\n        return keywords;\n    }\n\n    protected forbiddenForObjectProperties(_c: ClassType, _className: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return this.getNameStyling(\"typeNamingFunction\");\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return this.getNameStyling(\"propertyNamingFunction\");\n    }\n\n    protected makeUnionMemberNamer(): Namer {\n        return this.getNameStyling(\"propertyNamingFunction\");\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return this.getNameStyling(\"enumCaseNamingFunction\");\n    }\n\n    protected unionNeedsName(u: UnionType): boolean {\n        return nullableFromUnion(u) === null;\n    }\n\n    protected namedTypeToNameForTopLevel(type: Type): Type | undefined {\n        // If the top-level type doesn't contain any classes or unions\n        // we have to define a class just for the `FromJson` method, in\n        // emitFromJsonForTopLevel.\n        return directlyReachableSingleNamedType(type);\n    }\n\n    protected makeNamesForPropertyGetterAndSetter(\n        _c: ClassType,\n        _className: Name,\n        _p: ClassProperty,\n        _jsonName: string,\n        name: Name\n    ): [Name, Name] {\n        const getterName = new DependencyName(\n            this.getNameStyling(\"propertyNamingFunction\"),\n            name.order,\n            lookup => `get_${lookup(name)}`\n        );\n        const setterName = new DependencyName(\n            this.getNameStyling(\"propertyNamingFunction\"),\n            name.order,\n            lookup => `set_${lookup(name)}`\n        );\n        return [getterName, setterName];\n    }\n\n    protected makePropertyDependencyNames(\n        c: ClassType,\n        className: Name,\n        p: ClassProperty,\n        jsonName: string,\n        name: Name\n    ): Name[] {\n        const getterAndSetterNames = this.makeNamesForPropertyGetterAndSetter(c, className, p, jsonName, name);\n        this._gettersAndSettersForPropertyName.set(name, getterAndSetterNames);\n        return getterAndSetterNames;\n    }\n\n    private getNameStyling(convention: string): Namer {\n        const styling: { [key: string]: Namer } = {\n            typeNamingFunction: funPrefixNamer(\"types\", n =>\n                javaNameStyle(true, false, n, acronymStyle(this._options.acronymStyle))\n            ),\n            propertyNamingFunction: funPrefixNamer(\"properties\", n =>\n                javaNameStyle(false, false, n, acronymStyle(this._options.acronymStyle))\n            ),\n            enumCaseNamingFunction: funPrefixNamer(\"enum-cases\", n =>\n                javaNameStyle(true, true, n, acronymStyle(this._options.acronymStyle))\n            )\n        };\n        return styling[convention];\n    }\n\n    protected fieldOrMethodName(methodName: string, topLevelName: Name): Sourcelike {\n        if (this.topLevels.size === 1) {\n            return methodName;\n        }\n\n        return [topLevelName, capitalize(methodName)];\n    }\n\n    protected methodName(prefix: string, suffix: string, topLevelName: Name): Sourcelike {\n        if (this.topLevels.size === 1) {\n            return [prefix, suffix];\n        }\n\n        return [prefix, topLevelName, suffix];\n    }\n\n    protected decoderName(topLevelName: Name): Sourcelike {\n        return this.fieldOrMethodName(\"fromJsonString\", topLevelName);\n    }\n\n    protected encoderName(topLevelName: Name): Sourcelike {\n        return this.fieldOrMethodName(\"toJsonString\", topLevelName);\n    }\n\n    protected readerGetterName(topLevelName: Name): Sourcelike {\n        return this.methodName(\"get\", \"ObjectReader\", topLevelName);\n    }\n\n    protected writerGetterName(topLevelName: Name): Sourcelike {\n        return this.methodName(\"get\", \"ObjectWriter\", topLevelName);\n    }\n\n    protected startFile(basename: Sourcelike): void {\n        assert(this._currentFilename === undefined, \"Previous file wasn't finished\");\n        // FIXME: The filenames should actually be Sourcelikes, too\n        this._currentFilename = `${this.sourcelikeToString(basename)}.java`;\n        // FIXME: Why is this necessary?\n        this.ensureBlankLine();\n        if (!this._haveEmittedLeadingComments && this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n            this.ensureBlankLine();\n            this._haveEmittedLeadingComments = true;\n        }\n    }\n\n    protected finishFile(): void {\n        super.finishFile(defined(this._currentFilename));\n        this._currentFilename = undefined;\n    }\n\n    protected emitPackageAndImports(imports: string[]): void {\n        this.emitLine(\"package \", this._options.packageName, \";\");\n        this.ensureBlankLine();\n        for (const pkg of imports) {\n            this.emitLine(\"import \", pkg, \";\");\n        }\n    }\n\n    protected emitFileHeader(fileName: Sourcelike, imports: string[]): void {\n        this.startFile(fileName);\n        this.emitPackageAndImports(imports);\n        this.ensureBlankLine();\n    }\n\n    public emitDescriptionBlock(lines: Sourcelike[]): void {\n        this.emitCommentLines(lines, { lineStart: \" * \", beforeComment: \"/**\", afterComment: \" */\" });\n    }\n\n    public emitBlock(line: Sourcelike, f: () => void): void {\n        this.emitLine(line, \" {\");\n        this.indent(f);\n        this.emitLine(\"}\");\n    }\n\n    public emitTryCatch(main: () => void, handler: () => void, exception = \"Exception\"): void {\n        this.emitLine(\"try {\");\n        this.indent(main);\n        this.emitLine(\"} catch (\", exception, \" ex) {\");\n        this.indent(handler);\n        this.emitLine(\"}\");\n    }\n\n    public emitIgnoredTryCatchBlock(f: () => void): void {\n        this.emitTryCatch(f, () => this.emitLine(\"// Ignored\"));\n    }\n\n    protected javaType(reference: boolean, t: Type, withIssues = false): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => maybeAnnotated(withIssues, anyTypeIssueAnnotation, \"Object\"),\n            _nullType => maybeAnnotated(withIssues, nullTypeIssueAnnotation, \"Object\"),\n            _boolType => (reference ? \"Boolean\" : \"boolean\"),\n            _integerType => (reference ? \"Long\" : \"long\"),\n            _doubleType => (reference ? \"Double\" : \"double\"),\n            _stringType => \"String\",\n            arrayType => {\n                if (this._options.useList) {\n                    return [\"List<\", this.javaType(true, arrayType.items, withIssues), \">\"];\n                } else {\n                    return [this.javaType(false, arrayType.items, withIssues), \"[]\"];\n                }\n            },\n            classType => this.nameForNamedType(classType),\n            mapType => [\"Map<String, \", this.javaType(true, mapType.values, withIssues), \">\"],\n            enumType => this.nameForNamedType(enumType),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) return this.javaType(true, nullable, withIssues);\n                return this.nameForNamedType(unionType);\n            },\n            transformedStringType => {\n                if (transformedStringType.kind === \"time\") {\n                    return this._dateTimeProvider.timeType;\n                }\n\n                if (transformedStringType.kind === \"date\") {\n                    return this._dateTimeProvider.dateType;\n                }\n\n                if (transformedStringType.kind === \"date-time\") {\n                    return this._dateTimeProvider.dateTimeType;\n                }\n\n                if (transformedStringType.kind === \"uuid\") {\n                    return \"UUID\";\n                }\n\n                return \"String\";\n            }\n        );\n    }\n\n    protected javaImport(t: Type): string[] {\n        return matchType<string[]>(\n            t,\n            _anyType => [],\n            _nullType => [],\n            _boolType => [],\n            _integerType => [],\n            _doubleType => [],\n            _stringType => [],\n            arrayType => {\n                if (this._options.useList) {\n                    return [...this.javaImport(arrayType.items), \"java.util.List\"];\n                } else {\n                    return [...this.javaImport(arrayType.items)];\n                }\n            },\n            _classType => [],\n            mapType => [...this.javaImport(mapType.values), \"java.util.Map\"],\n            _enumType => [],\n            unionType => {\n                const imports: string[] = [];\n                unionType.members.forEach(type => this.javaImport(type).forEach(imp => imports.push(imp)));\n                return imports;\n            },\n            transformedStringType => {\n                if (transformedStringType.kind === \"time\") {\n                    return this._dateTimeProvider.timeImports;\n                }\n\n                if (transformedStringType.kind === \"date\") {\n                    return this._dateTimeProvider.dateImports;\n                }\n\n                if (transformedStringType.kind === \"date-time\") {\n                    return this._dateTimeProvider.dateTimeImports;\n                }\n\n                if (transformedStringType.kind === \"uuid\") {\n                    return [\"java.util.UUID\"];\n                }\n\n                return [];\n            }\n        );\n    }\n\n    protected javaTypeWithoutGenerics(reference: boolean, t: Type): Sourcelike {\n        if (t instanceof ArrayType) {\n            if (this._options.useList) {\n                return [\"List\"];\n            } else {\n                return [this.javaTypeWithoutGenerics(false, t.items), \"[]\"];\n            }\n        } else if (t instanceof MapType) {\n            return \"Map\";\n        } else if (t instanceof UnionType) {\n            const nullable = nullableFromUnion(t);\n            if (nullable !== null) return this.javaTypeWithoutGenerics(true, nullable);\n            return this.nameForNamedType(t);\n        } else {\n            return this.javaType(reference, t);\n        }\n    }\n\n    protected emitClassAttributes(_c: ClassType, _className: Name): void {\n        if (this._options.lombok) {\n            this.emitLine(\"@lombok.Data\");\n        }\n    }\n\n    protected annotationsForAccessor(\n        _c: ClassType,\n        _className: Name,\n        _propertyName: Name,\n        _jsonName: string,\n        _p: ClassProperty,\n        _isSetter: boolean\n    ): string[] {\n        return [];\n    }\n\n    protected importsForType(t: ClassType | UnionType | EnumType): string[] {\n        if (t instanceof ClassType) {\n            return [];\n        }\n\n        if (t instanceof UnionType) {\n            return [\"java.io.IOException\"];\n        }\n\n        if (t instanceof EnumType) {\n            return [\"java.io.IOException\"];\n        }\n\n        return assertNever(t);\n    }\n\n    protected importsForClass(c: ClassType): string[] {\n        const imports: string[] = [];\n        this.forEachClassProperty(c, \"none\", (_name, _jsonName, p) => {\n            this.javaImport(p.type).forEach(imp => imports.push(imp));\n        });\n        imports.sort();\n        return [...new Set(imports)];\n    }\n\n    protected importsForUnionMembers(u: UnionType): string[] {\n        const imports: string[] = [];\n        const [, nonNulls] = removeNullFromUnion(u);\n        this.forEachUnionMember(u, nonNulls, \"none\", null, (_fieldName, t) => {\n            this.javaImport(t).forEach(imp => imports.push(imp));\n        });\n        imports.sort();\n        return [...new Set(imports)];\n    }\n\n    protected emitClassDefinition(c: ClassType, className: Name): void {\n        let imports = [...this.importsForType(c), ...this.importsForClass(c)];\n\n        this.emitFileHeader(className, imports);\n        this.emitDescription(this.descriptionForType(c));\n        this.emitClassAttributes(c, className);\n        this.emitBlock([\"public class \", className], () => {\n            this.forEachClassProperty(c, \"none\", (name, jsonName, p) => {\n                if (this._options.lombok && this._options.lombokCopyAnnotations) {\n                    const getter = this.annotationsForAccessor(c, className, name, jsonName, p, false);\n                    const setter = this.annotationsForAccessor(c, className, name, jsonName, p, true);\n                    if (getter.length !== 0) {\n                        this.emitLine(\"@lombok.Getter(onMethod_ = {\" + getter.join(\", \") + \"})\");\n                    }\n\n                    if (setter.length !== 0) {\n                        this.emitLine(\"@lombok.Setter(onMethod_ = {\" + setter.join(\", \") + \"})\");\n                    }\n                }\n\n                this.emitLine(\"private \", this.javaType(false, p.type, true), \" \", name, \";\");\n            });\n            if (!this._options.lombok) {\n                this.forEachClassProperty(c, \"leading-and-interposing\", (name, jsonName, p) => {\n                    this.emitDescription(this.descriptionForClassProperty(c, jsonName));\n                    const [getterName, setterName] = defined(this._gettersAndSettersForPropertyName.get(name));\n                    const rendered = this.javaType(false, p.type);\n                    this.annotationsForAccessor(c, className, name, jsonName, p, false).forEach(annotation =>\n                        this.emitLine(annotation)\n                    );\n                    this.emitLine(\"public \", rendered, \" \", getterName, \"() { return \", name, \"; }\");\n                    this.annotationsForAccessor(c, className, name, jsonName, p, true).forEach(annotation =>\n                        this.emitLine(annotation)\n                    );\n                    this.emitLine(\"public void \", setterName, \"(\", rendered, \" value) { this.\", name, \" = value; }\");\n                });\n            }\n        });\n        this.finishFile();\n    }\n\n    protected unionField(u: UnionType, t: Type, withIssues = false): { fieldName: Sourcelike; fieldType: Sourcelike } {\n        const fieldType = this.javaType(true, t, withIssues);\n        // FIXME: \"Value\" should be part of the name.\n        const fieldName = [this.nameForUnionMember(u, t), \"Value\"];\n        return { fieldType, fieldName };\n    }\n\n    protected emitUnionAttributes(_u: UnionType, _unionName: Name): void {\n        // empty\n    }\n\n    protected emitUnionSerializer(_u: UnionType, _unionName: Name): void {\n        // empty\n    }\n\n    protected emitUnionDefinition(u: UnionType, unionName: Name): void {\n        const imports = [...this.importsForType(u), ...this.importsForUnionMembers(u)];\n\n        this.emitFileHeader(unionName, imports);\n        this.emitDescription(this.descriptionForType(u));\n        const [, nonNulls] = removeNullFromUnion(u);\n\n        this.emitUnionAttributes(u, unionName);\n        this.emitBlock([\"public class \", unionName], () => {\n            for (const t of nonNulls) {\n                const { fieldType, fieldName } = this.unionField(u, t, true);\n                this.emitLine(\"public \", fieldType, \" \", fieldName, \";\");\n            }\n\n            this.emitUnionSerializer(u, unionName);\n        });\n        this.finishFile();\n    }\n\n    protected emitEnumSerializationAttributes(_e: EnumType): void {\n        // Empty\n    }\n\n    protected emitEnumDeserializationAttributes(_e: EnumType): void {\n        // Empty\n    }\n\n    protected emitEnumDefinition(e: EnumType, enumName: Name): void {\n        this.emitFileHeader(enumName, this.importsForType(e));\n        this.emitDescription(this.descriptionForType(e));\n        const caseNames: Sourcelike[] = [];\n        this.forEachEnumCase(e, \"none\", name => {\n            if (caseNames.length > 0) caseNames.push(\", \");\n            caseNames.push(name);\n        });\n        caseNames.push(\";\");\n        this.emitBlock([\"public enum \", enumName], () => {\n            this.emitLine(caseNames);\n            this.ensureBlankLine();\n\n            this.emitEnumSerializationAttributes(e);\n            this.emitBlock(\"public String toValue()\", () => {\n                this.emitLine(\"switch (this) {\");\n                this.indent(() => {\n                    this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n                        this.emitLine(\"case \", name, ': return \"', stringEscape(jsonName), '\";');\n                    });\n                });\n                this.emitLine(\"}\");\n                this.emitLine(\"return null;\");\n            });\n            this.ensureBlankLine();\n\n            this.emitEnumDeserializationAttributes(e);\n            this.emitBlock([\"public static \", enumName, \" forValue(String value) throws IOException\"], () => {\n                this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n                    this.emitLine('if (value.equals(\"', stringEscape(jsonName), '\")) return ', name, \";\");\n                });\n                this.emitLine('throw new IOException(\"Cannot deserialize ', enumName, '\");');\n            });\n        });\n        this.finishFile();\n    }\n\n    protected emitSourceStructure(): void {\n        this.forEachNamedType(\n            \"leading-and-interposing\",\n            (c: ClassType, n: Name) => this.emitClassDefinition(c, n),\n            (e, n) => this.emitEnumDefinition(e, n),\n            (u, n) => this.emitUnionDefinition(u, n)\n        );\n    }\n}\n\nexport class JacksonRenderer extends JavaRenderer {\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        options: OptionValues<typeof javaOptions>\n    ) {\n        super(targetLanguage, renderContext, options);\n    }\n\n    protected readonly _converterKeywords: string[] = [\n        \"JsonProperty\",\n        \"JsonDeserialize\",\n        \"JsonDeserializer\",\n        \"JsonSerialize\",\n        \"JsonSerializer\",\n        \"JsonParser\",\n        \"JsonProcessingException\",\n        \"DeserializationContext\",\n        \"SerializerProvider\"\n    ];\n\n    protected emitClassAttributes(c: ClassType, _className: Name): void {\n        if (c.getProperties().size === 0)\n            this.emitLine(\"@JsonAutoDetect(fieldVisibility=JsonAutoDetect.Visibility.NONE)\");\n\n        super.emitClassAttributes(c, _className);\n    }\n\n    protected annotationsForAccessor(\n        _c: ClassType,\n        _className: Name,\n        _propertyName: Name,\n        jsonName: string,\n        p: ClassProperty,\n        _isSetter: boolean\n    ): string[] {\n        const superAnnotations = super.annotationsForAccessor(_c, _className, _propertyName, jsonName, p, _isSetter);\n\n        const annotations: string[] = ['@JsonProperty(\"' + stringEscape(jsonName) + '\")'];\n\n        switch (p.type.kind) {\n            case \"date-time\":\n                this._dateTimeProvider.dateTimeJacksonAnnotations.forEach(annotation => annotations.push(annotation));\n                break;\n            case \"date\":\n                this._dateTimeProvider.dateJacksonAnnotations.forEach(annotation => annotations.push(annotation));\n                break;\n            case \"time\":\n                this._dateTimeProvider.timeJacksonAnnotations.forEach(annotation => annotations.push(annotation));\n                break;\n            default:\n                break;\n        }\n\n        return [...superAnnotations, ...annotations];\n    }\n\n    protected importsForType(t: ClassType | UnionType | EnumType): string[] {\n        if (t instanceof ClassType) {\n            const imports = super.importsForType(t);\n            imports.push(\"com.fasterxml.jackson.annotation.*\");\n            return imports;\n        }\n\n        if (t instanceof UnionType) {\n            const imports = super.importsForType(t);\n            imports.push(\n                \"java.io.IOException\",\n                \"com.fasterxml.jackson.core.*\",\n                \"com.fasterxml.jackson.databind.*\",\n                \"com.fasterxml.jackson.databind.annotation.*\"\n            );\n            if (this._options.useList) {\n                imports.push(\"com.fasterxml.jackson.core.type.*\");\n            }\n\n            return imports;\n        }\n\n        if (t instanceof EnumType) {\n            const imports = super.importsForType(t);\n            imports.push(\"com.fasterxml.jackson.annotation.*\");\n            return imports;\n        }\n\n        return assertNever(t);\n    }\n\n    protected emitUnionAttributes(_u: UnionType, unionName: Name): void {\n        this.emitLine(\"@JsonDeserialize(using = \", unionName, \".Deserializer.class)\");\n        this.emitLine(\"@JsonSerialize(using = \", unionName, \".Serializer.class)\");\n    }\n\n    protected emitUnionSerializer(u: UnionType, unionName: Name): void {\n        const stringBasedObjects: TypeKind[] = [\"uuid\", \"time\", \"date\", \"date-time\"];\n\n        const tokenCase = (tokenType: string): void => {\n            this.emitLine(\"case \", tokenType, \":\");\n        };\n\n        const emitNullDeserializer = (): void => {\n            this.indent(() => {\n                tokenCase(\"VALUE_NULL\");\n                this.indent(() => this.emitLine(\"break;\"));\n            });\n        };\n\n        const emitDeserializerCodeForStringObjects = (\n            fieldName: Sourcelike,\n            kind: TypeKind,\n            parseFrom: string\n        ): void => {\n            switch (kind) {\n                case \"date\":\n                    this.emitLine(\n                        \"value.\",\n                        fieldName,\n                        \" = \",\n                        this._dateTimeProvider.convertStringToDate(parseFrom),\n                        \";\"\n                    );\n\n                    break;\n                case \"time\":\n                    this.emitLine(\n                        \"value.\",\n                        fieldName,\n                        \" = \",\n                        this._dateTimeProvider.convertStringToTime(parseFrom),\n                        \";\"\n                    );\n\n                    break;\n                case \"date-time\":\n                    this.emitLine(\n                        \"value.\",\n                        fieldName,\n                        \" = \",\n                        this._dateTimeProvider.convertStringToDateTime(parseFrom),\n                        \";\"\n                    );\n                    break;\n                case \"uuid\":\n                    this.emitLine(\"value.\", fieldName, \" = UUID.fromString(\", parseFrom, \");\");\n\n                    break;\n                default:\n                    return panic(\"Requested type isnt an object!\");\n            }\n        };\n\n        const emitDeserializeType = (t: Type, variableFieldName = \"\"): void => {\n            const { fieldName } = this.unionField(u, t);\n            const rendered = this.javaTypeWithoutGenerics(true, t);\n            if (this._options.useList && t instanceof ArrayType) {\n                this.emitLine(\n                    \"value.\",\n                    fieldName,\n                    \" = jsonParser.readValueAs(new TypeReference<\",\n                    rendered,\n                    \">() {});\"\n                );\n            } else if (stringBasedObjects.some(stringBasedTypeKind => t.kind === stringBasedTypeKind)) {\n                emitDeserializerCodeForStringObjects(fieldName, t.kind, variableFieldName);\n            } else if (t.kind === \"string\") {\n                this.emitLine(\"value.\", fieldName, \" = \", variableFieldName, \";\");\n            } else if (t.kind === \"enum\") {\n                const { fieldType } = this.unionField(u, t, true);\n                this.emitLine(\"value.\", fieldName, \" = \", fieldType, \".forValue(\", variableFieldName, \");\");\n            } else {\n                this.emitLine(\"value.\", fieldName, \" = jsonParser.readValueAs(\", rendered, \".class);\");\n            }\n        };\n\n        const emitDeserializer = (tokenTypes: string[], kind: TypeKind): void => {\n            const t = u.findMember(kind);\n            if (t === undefined) return;\n\n            this.indent(() => {\n                for (const tokenType of tokenTypes) {\n                    tokenCase(tokenType);\n                }\n\n                this.indent(() => {\n                    emitDeserializeType(t);\n                    this.emitLine(\"break;\");\n                });\n            });\n        };\n\n        const emitStringDeserializer = (): void => {\n            const enumType = u.findMember(\"enum\");\n            const stringType = u.findMember(\"string\");\n\n            if (\n                stringBasedObjects.every(kind => u.findMember(kind) === undefined) &&\n                stringType === undefined &&\n                enumType === undefined\n            )\n                return;\n\n            this.indent(() => {\n                tokenCase(\"VALUE_STRING\");\n\n                this.indent(() => {\n                    const fromVariable = \"string\";\n                    this.emitLine(\"String \" + fromVariable + \" = jsonParser.readValueAs(String.class);\");\n\n                    stringBasedObjects.forEach(kind => {\n                        const type = u.findMember(kind);\n                        if (type !== undefined) {\n                            this.emitIgnoredTryCatchBlock(() => {\n                                emitDeserializeType(type, fromVariable);\n                            });\n                        }\n                    });\n\n                    if (enumType !== undefined) {\n                        this.emitIgnoredTryCatchBlock(() => {\n                            emitDeserializeType(enumType, fromVariable);\n                        });\n                    }\n\n                    // String should be the last one if exists, because it cannot fail, unlike the parsers.\n                    if (stringType !== undefined) {\n                        emitDeserializeType(stringType, fromVariable);\n                    }\n\n                    this.emitLine(\"break;\");\n                });\n            });\n        };\n\n        const emitNumberDeserializer = (): void => {\n            const integerType = u.findMember(\"integer\");\n            const doubleType = u.findMember(\"double\");\n            if (doubleType === undefined && integerType === undefined) return;\n\n            this.indent(() => {\n                tokenCase(\"VALUE_NUMBER_INT\");\n                if (integerType !== undefined) {\n                    this.indent(() => {\n                        emitDeserializeType(integerType);\n                        this.emitLine(\"break;\");\n                    });\n                }\n\n                if (doubleType !== undefined) {\n                    tokenCase(\"VALUE_NUMBER_FLOAT\");\n                    this.indent(() => {\n                        emitDeserializeType(doubleType);\n                        this.emitLine(\"break;\");\n                    });\n                }\n            });\n        };\n\n        const customObjectSerializer: TypeKind[] = [\"time\", \"date\", \"date-time\"];\n\n        const serializerCodeForType = (type: Type, fieldName: Sourcelike): Sourcelike => {\n            switch (type.kind) {\n                case \"date\":\n                    return this._dateTimeProvider.convertDateToString(fieldName);\n                case \"time\":\n                    return this._dateTimeProvider.convertTimeToString(fieldName);\n                case \"date-time\":\n                    return this._dateTimeProvider.convertDateTimeToString(fieldName);\n                default:\n                    return panic(\"Requested type doesn't have custom serializer code!\");\n            }\n        };\n\n        const emitSerializeType = (t: Type): void => {\n            let { fieldName } = this.unionField(u, t, true);\n\n            this.emitBlock([\"if (obj.\", fieldName, \" != null)\"], () => {\n                if (customObjectSerializer.some(customSerializerType => t.kind === customSerializerType)) {\n                    this.emitLine(\"jsonGenerator.writeObject(\", serializerCodeForType(t, [\"obj.\", fieldName]), \");\");\n                } else {\n                    this.emitLine(\"jsonGenerator.writeObject(obj.\", fieldName, \");\");\n                }\n\n                this.emitLine(\"return;\");\n            });\n        };\n\n        const [maybeNull, nonNulls] = removeNullFromUnion(u);\n\n        this.ensureBlankLine();\n        this.emitBlock([\"static class Deserializer extends JsonDeserializer<\", unionName, \">\"], () => {\n            this.emitLine(\"@Override\");\n            this.emitBlock(\n                [\n                    \"public \",\n                    unionName,\n                    \" deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException, JsonProcessingException\"\n                ],\n                () => {\n                    this.emitLine(unionName, \" value = new \", unionName, \"();\");\n                    this.emitLine(\"switch (jsonParser.currentToken()) {\");\n                    if (maybeNull !== null) emitNullDeserializer();\n                    emitNumberDeserializer();\n                    emitDeserializer([\"VALUE_TRUE\", \"VALUE_FALSE\"], \"bool\");\n                    emitStringDeserializer();\n                    emitDeserializer([\"START_ARRAY\"], \"array\");\n                    emitDeserializer([\"START_OBJECT\"], \"class\");\n                    emitDeserializer([\"START_OBJECT\"], \"map\");\n                    this.indent(() =>\n                        this.emitLine('default: throw new IOException(\"Cannot deserialize ', unionName, '\");')\n                    );\n                    this.emitLine(\"}\");\n                    this.emitLine(\"return value;\");\n                }\n            );\n        });\n        this.ensureBlankLine();\n        this.emitBlock([\"static class Serializer extends JsonSerializer<\", unionName, \">\"], () => {\n            this.emitLine(\"@Override\");\n            this.emitBlock(\n                [\n                    \"public void serialize(\",\n                    unionName,\n                    \" obj, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException\"\n                ],\n                () => {\n                    for (const t of nonNulls) {\n                        emitSerializeType(t);\n                    }\n\n                    if (maybeNull !== null) {\n                        this.emitLine(\"jsonGenerator.writeNull();\");\n                    } else {\n                        this.emitLine('throw new IOException(\"', unionName, ' must not be null\");');\n                    }\n                }\n            );\n        });\n    }\n\n    protected emitEnumSerializationAttributes(_e: EnumType): void {\n        this.emitLine(\"@JsonValue\");\n    }\n\n    protected emitEnumDeserializationAttributes(_e: EnumType): void {\n        this.emitLine(\"@JsonCreator\");\n    }\n\n    protected emitOffsetDateTimeConverterModule(): void {\n        this.emitLine(\"SimpleModule module = new SimpleModule();\");\n\n        if (this._dateTimeProvider.shouldEmitDateTimeConverter) {\n            this.emitLine(\n                \"module.addDeserializer(\",\n                this._dateTimeProvider.dateTimeType,\n                \".class, new JsonDeserializer<\",\n                this._dateTimeProvider.dateTimeType,\n                \">() {\"\n            );\n            this.indent(() => {\n                this.emitLine(\"@Override\");\n                this.emitBlock(\n                    [\n                        \"public \",\n                        this._dateTimeProvider.dateTimeType,\n                        \" deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) \",\n                        \"throws IOException, JsonProcessingException\"\n                    ],\n                    () => {\n                        this.emitLine(\"String value = jsonParser.getText();\");\n                        this.emitLine(\"return \", this._dateTimeProvider.convertStringToDateTime(\"value\"), \";\");\n                    }\n                );\n            });\n            this.emitLine(\"});\");\n        }\n\n        if (!this._dateTimeProvider.shouldEmitTimeConverter) {\n            this.emitLine(\n                \"module.addDeserializer(\",\n                this._dateTimeProvider.timeType,\n                \".class, new JsonDeserializer<\",\n                this._dateTimeProvider.timeType,\n                \">() {\"\n            );\n            this.indent(() => {\n                this.emitLine(\"@Override\");\n                this.emitBlock(\n                    [\n                        \"public \",\n                        this._dateTimeProvider.timeType,\n                        \" deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) \",\n                        \"throws IOException, JsonProcessingException\"\n                    ],\n                    () => {\n                        this.emitLine(\"String value = jsonParser.getText();\");\n                        this.emitLine(\"return \", this._dateTimeProvider.convertStringToTime(\"value\"), \";\");\n                    }\n                );\n            });\n            this.emitLine(\"});\");\n        }\n\n        if (!this._dateTimeProvider.shouldEmitDateConverter) {\n            this.emitLine(\n                \"module.addDeserializer(\",\n                this._dateTimeProvider.dateType,\n                \".class, new JsonDeserializer<\",\n                this._dateTimeProvider.dateType,\n                \">() {\"\n            );\n            this.indent(() => {\n                this.emitLine(\"@Override\");\n                this.emitBlock(\n                    [\n                        \"public \",\n                        this._dateTimeProvider.dateType,\n                        \" deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) \",\n                        \"throws IOException, JsonProcessingException\"\n                    ],\n                    () => {\n                        this.emitLine(\"String value = jsonParser.getText();\");\n                        this.emitLine(\"return \", this._dateTimeProvider.convertStringToDate(\"value\"), \";\");\n                    }\n                );\n            });\n            this.emitLine(\"});\");\n        }\n\n        this.emitLine(\"mapper.registerModule(module);\");\n    }\n\n    protected emitConverterClass(): void {\n        this.startFile(this._converterClassname);\n        this.emitCommentLines([\n            \"To use this code, add the following Maven dependency to your project:\",\n            \"\",\n            this._options.lombok ? \"    org.projectlombok : lombok : 1.18.2\" : \"\",\n            \"    com.fasterxml.jackson.core     : jackson-databind          : 2.9.0\",\n            this._options.dateTimeProvider === \"java8\"\n                ? \"    com.fasterxml.jackson.datatype : jackson-datatype-jsr310   : 2.9.0\"\n                : \"\",\n            \"\",\n            \"Import this package:\",\n            \"\"\n        ]);\n        this.emitLine(\"//     import \", this._options.packageName, \".Converter;\");\n        this.emitMultiline(`//\n// Then you can deserialize a JSON string with\n//`);\n        this.forEachTopLevel(\"none\", (t, name) => {\n            this.emitLine(\n                \"//     \",\n                this.javaType(false, t),\n                \" data = Converter.\",\n                this.decoderName(name),\n                \"(jsonString);\"\n            );\n        });\n        this.ensureBlankLine();\n        const imports = [\n            \"java.io.IOException\",\n            \"com.fasterxml.jackson.databind.*\",\n            \"com.fasterxml.jackson.databind.module.SimpleModule\",\n            \"com.fasterxml.jackson.core.JsonParser\",\n            \"com.fasterxml.jackson.core.JsonProcessingException\",\n            \"java.util.*\"\n        ].concat(this._dateTimeProvider.converterImports);\n        this.emitPackageAndImports(imports);\n        this.ensureBlankLine();\n        this.emitBlock([\"public class Converter\"], () => {\n            this.emitLine(\"// Date-time helpers\");\n            this._dateTimeProvider.emitDateTimeConverters();\n\n            this.emitLine(\"// Serialize/deserialize helpers\");\n            this.forEachTopLevel(\"leading-and-interposing\", (topLevelType, topLevelName) => {\n                const topLevelTypeRendered = this.javaType(false, topLevelType);\n                this.emitBlock(\n                    [\n                        \"public static \",\n                        topLevelTypeRendered,\n                        \" \",\n                        this.decoderName(topLevelName),\n                        \"(String json) throws IOException\"\n                    ],\n                    () => {\n                        this.emitLine(\"return \", this.readerGetterName(topLevelName), \"().readValue(json);\");\n                    }\n                );\n                this.ensureBlankLine();\n                this.emitBlock(\n                    [\n                        \"public static String \",\n                        this.encoderName(topLevelName),\n                        \"(\",\n                        topLevelTypeRendered,\n                        \" obj) throws JsonProcessingException\"\n                    ],\n                    () => {\n                        this.emitLine(\"return \", this.writerGetterName(topLevelName), \"().writeValueAsString(obj);\");\n                    }\n                );\n            });\n            this.forEachTopLevel(\"leading-and-interposing\", (topLevelType, topLevelName) => {\n                const readerName = this.fieldOrMethodName(\"reader\", topLevelName);\n                const writerName = this.fieldOrMethodName(\"writer\", topLevelName);\n                this.emitLine(\"private static ObjectReader \", readerName, \";\");\n                this.emitLine(\"private static ObjectWriter \", writerName, \";\");\n                this.ensureBlankLine();\n                this.emitBlock(\n                    [\"private static void \", this.methodName(\"instantiate\", \"Mapper\", topLevelName), \"()\"],\n                    () => {\n                        const renderedForClass = this.javaTypeWithoutGenerics(false, topLevelType);\n                        this.emitLine(\"ObjectMapper mapper = new ObjectMapper();\");\n                        this.emitLine(\"mapper.findAndRegisterModules();\");\n                        this.emitLine(\"mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\");\n                        this.emitLine(\"mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\");\n                        this.emitOffsetDateTimeConverterModule();\n                        this.emitLine(readerName, \" = mapper.readerFor(\", renderedForClass, \".class);\");\n                        this.emitLine(writerName, \" = mapper.writerFor(\", renderedForClass, \".class);\");\n                    }\n                );\n                this.ensureBlankLine();\n                this.emitBlock([\"private static ObjectReader \", this.readerGetterName(topLevelName), \"()\"], () => {\n                    this.emitLine(\n                        \"if (\",\n                        readerName,\n                        \" == null) \",\n                        this.methodName(\"instantiate\", \"Mapper\", topLevelName),\n                        \"();\"\n                    );\n                    this.emitLine(\"return \", readerName, \";\");\n                });\n                this.ensureBlankLine();\n                this.emitBlock([\"private static ObjectWriter \", this.writerGetterName(topLevelName), \"()\"], () => {\n                    this.emitLine(\n                        \"if (\",\n                        writerName,\n                        \" == null) \",\n                        this.methodName(\"instantiate\", \"Mapper\", topLevelName),\n                        \"();\"\n                    );\n                    this.emitLine(\"return \", writerName, \";\");\n                });\n            });\n        });\n        this.finishFile();\n    }\n\n    protected emitSourceStructure(): void {\n        this.emitConverterClass();\n        super.emitSourceStructure();\n    }\n}\n","import { EnumOption } from \"../RendererOptions\";\n\nexport enum ConvertersOptions {\n    AllObjects = \"all-objects\",\n    TopLevel = \"top-level\"\n}\n\nexport function convertersOption(): EnumOption<ConvertersOptions> {\n    return new EnumOption(\n        \"converters\",\n        \"Which converters to generate (top-level by default)\",\n        [\n            [ConvertersOptions.TopLevel, ConvertersOptions.TopLevel],\n            [ConvertersOptions.AllObjects, ConvertersOptions.AllObjects]\n        ],\n        ConvertersOptions.TopLevel,\n        \"secondary\"\n    );\n}\n","/* eslint-disable */\n// Taken from https://github.com/Microsoft/TypeScript\n\nfunction lookupInUnicodeMap(code: number, map: readonly number[]): boolean {\n    // Bail out quickly if it couldn't possibly be in the map.\n    if (code < map[0]) {\n        return false;\n    }\n\n    // Perform binary search in one of the Unicode range maps\n    let lo = 0;\n    let hi: number = map.length;\n    let mid: number;\n\n    while (lo + 1 < hi) {\n        mid = lo + (hi - lo) / 2;\n        // mid has to be even to catch a range's beginning\n        mid -= mid % 2;\n        if (map[mid] <= code && code <= map[mid + 1]) {\n            return true;\n        }\n\n        if (code < map[mid]) {\n            hi = mid;\n        } else {\n            lo = mid + 2;\n        }\n    }\n\n    return false;\n}\n\nconst enum CharacterCodes {\n    maxAsciiCharacter = 0x7f,\n\n    _ = 0x5f,\n    $ = 0x24,\n\n    _0 = 0x30,\n    _9 = 0x39,\n\n    a = 0x61,\n    z = 0x7a,\n\n    A = 0x41,\n    Z = 0x5a\n}\n\nexport function isES3IdentifierStart(ch: number): boolean {\n    return (\n        (ch >= CharacterCodes.A && ch <= CharacterCodes.Z) ||\n        (ch >= CharacterCodes.a && ch <= CharacterCodes.z) ||\n        ch === CharacterCodes.$ ||\n        ch === CharacterCodes._ ||\n        (ch > CharacterCodes.maxAsciiCharacter && lookupInUnicodeMap(ch, unicodeES3IdentifierStart))\n    );\n}\n\nexport function isES3IdentifierPart(ch: number): boolean {\n    return (\n        (ch >= CharacterCodes.A && ch <= CharacterCodes.Z) ||\n        (ch >= CharacterCodes.a && ch <= CharacterCodes.z) ||\n        (ch >= CharacterCodes._0 && ch <= CharacterCodes._9) ||\n        ch === CharacterCodes.$ ||\n        ch === CharacterCodes._ ||\n        (ch > CharacterCodes.maxAsciiCharacter && lookupInUnicodeMap(ch, unicodeES3IdentifierPart))\n    );\n}\n\n/*\n    As per ECMAScript Language Specification 3th Edition, Section 7.6: Identifiers\n    IdentifierStart ::\n        Can contain Unicode 3.0.0 categories:\n        Uppercase letter (Lu),\n        Lowercase letter (Ll),\n        Titlecase letter (Lt),\n        Modifier letter (Lm),\n        Other letter (Lo), or\n        Letter number (Nl).\n    IdentifierPart :: =\n        Can contain IdentifierStart + Unicode 3.0.0 categories:\n        Non-spacing mark (Mn),\n        Combining spacing mark (Mc),\n        Decimal number (Nd), or\n        Connector punctuation (Pc).\n    Codepoint ranges for ES3 Identifiers are extracted from the Unicode 3.0.0 specification at:\n    http://www.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt\n*/\nconst unicodeES3IdentifierStart = [\n    170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736,\n    740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1164,\n    1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522,\n    1569, 1594, 1600, 1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957, 2309,\n    2361, 2365, 2365, 2384, 2384, 2392, 2401, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489,\n    2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616,\n    2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739,\n    2741, 2745, 2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870,\n    2873, 2877, 2877, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975,\n    2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168,\n    3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344,\n    3346, 3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n    3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747,\n    3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840,\n    3840, 3904, 3911, 3913, 3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138, 4176, 4181, 4256, 4293, 4304, 4342,\n    4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698,\n    4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805,\n    4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 5024,\n    5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929,\n    7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064,\n    8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n    8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490,\n    8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12346, 12353, 12436,\n    12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869,\n    40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310,\n    64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967,\n    65008, 65019, 65136, 65138, 65140, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479,\n    65482, 65487, 65490, 65495, 65498, 65500\n];\nconst unicodeES3IdentifierPart = [\n    170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736,\n    740, 750, 750, 768, 846, 864, 866, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011,\n    1024, 1153, 1155, 1158, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377,\n    1415, 1425, 1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474, 1476, 1476, 1488, 1514, 1520, 1522, 1569, 1594,\n    1600, 1621, 1632, 1641, 1648, 1747, 1749, 1756, 1759, 1768, 1770, 1773, 1776, 1788, 1808, 1836, 1840, 1866, 1920,\n    1968, 2305, 2307, 2309, 2361, 2364, 2381, 2384, 2388, 2392, 2403, 2406, 2415, 2433, 2435, 2437, 2444, 2447, 2448,\n    2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2524,\n    2525, 2527, 2531, 2534, 2545, 2562, 2562, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614,\n    2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2649, 2652, 2654, 2654, 2662, 2676, 2689, 2691, 2693,\n    2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765,\n    2768, 2768, 2784, 2784, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870,\n    2873, 2876, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2913, 2918, 2927, 2946, 2947, 2949, 2954,\n    2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3006,\n    3010, 3014, 3016, 3018, 3021, 3031, 3031, 3047, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123,\n    3125, 3129, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3168, 3169, 3174, 3183, 3202, 3203, 3205, 3212, 3214,\n    3216, 3218, 3240, 3242, 3251, 3253, 3257, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3297,\n    3302, 3311, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3390, 3395, 3398, 3400, 3402, 3405, 3415,\n    3415, 3424, 3425, 3430, 3439, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530,\n    3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719,\n    3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769,\n    3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3805, 3840, 3840, 3864, 3865, 3872, 3881, 3893,\n    3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3946, 3953, 3972, 3974, 3979, 3984, 3991, 3993, 4028, 4038, 4038,\n    4096, 4129, 4131, 4135, 4137, 4138, 4140, 4146, 4150, 4153, 4160, 4169, 4176, 4185, 4256, 4293, 4304, 4342, 4352,\n    4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701,\n    4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n    4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 4969, 4977,\n    5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6099, 6112, 6121, 6160, 6169, 6176, 6263, 6272,\n    6313, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n    8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160,\n    8172, 8178, 8180, 8182, 8188, 8255, 8256, 8319, 8319, 8400, 8412, 8417, 8417, 8450, 8450, 8455, 8455, 8458, 8467,\n    8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293,\n    12295, 12321, 12335, 12337, 12341, 12344, 12346, 12353, 12436, 12441, 12442, 12445, 12446, 12449, 12542, 12549,\n    12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256,\n    64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326,\n    64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65056, 65059, 65075, 65076, 65101, 65103, 65136,\n    65138, 65140, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65381, 65470, 65474,\n    65479, 65482, 65487, 65490, 65495, 65498, 65500\n];\n","import { arrayIntercalate } from \"collection-utils\";\n\nimport { ConvenienceRenderer } from \"../ConvenienceRenderer\";\nimport { type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { BooleanOption, EnumOption, type Option, type OptionValues, getOptionValues } from \"../RendererOptions\";\nimport { type Sourcelike, modifySource } from \"../Source\";\nimport { AcronymStyleOptions, acronymOption, acronymStyle } from \"../support/Acronyms\";\nimport { ConvertersOptions, convertersOption } from \"../support/Converters\";\nimport {\n    allLowerWordStyle,\n    camelCase,\n    capitalize,\n    combineWords,\n    firstUpperWordStyle,\n    splitIntoWords,\n    utf16LegalizeCharacters,\n    utf16StringEscape\n} from \"../support/Strings\";\nimport { panic } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport {\n    type ClassProperty,\n    type ClassType,\n    type ObjectType,\n    type PrimitiveStringTypeKind,\n    type TransformedStringTypeKind,\n    type Type\n} from \"../Type\";\nimport { type StringTypeMapping } from \"../TypeBuilder\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { directlyReachableSingleNamedType, matchType } from \"../TypeUtils\";\n\nimport { isES3IdentifierPart, isES3IdentifierStart } from \"./JavaScriptUnicodeMaps\";\n\nexport const javaScriptOptions = {\n    acronymStyle: acronymOption(AcronymStyleOptions.Pascal),\n    runtimeTypecheck: new BooleanOption(\"runtime-typecheck\", \"Verify JSON.parse results at runtime\", true),\n    runtimeTypecheckIgnoreUnknownProperties: new BooleanOption(\n        \"runtime-typecheck-ignore-unknown-properties\",\n        \"Ignore unknown properties when verifying at runtime\",\n        false,\n        \"secondary\"\n    ),\n    converters: convertersOption(),\n    rawType: new EnumOption<\"json\" | \"any\">(\n        \"raw-type\",\n        \"Type of raw input (json by default)\",\n        [\n            [\"json\", \"json\"],\n            [\"any\", \"any\"]\n        ],\n        \"json\",\n        \"secondary\"\n    )\n};\n\nexport interface JavaScriptTypeAnnotations {\n    any: string;\n    anyArray: string;\n    anyMap: string;\n    boolean: string;\n    never: string;\n    string: string;\n    stringArray: string;\n}\n\nexport class JavaScriptTargetLanguage extends TargetLanguage {\n    public constructor(displayName = \"JavaScript\", names: string[] = [\"javascript\", \"js\", \"jsx\"], extension = \"js\") {\n        super(displayName, names, extension);\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [\n            javaScriptOptions.runtimeTypecheck,\n            javaScriptOptions.runtimeTypecheckIgnoreUnknownProperties,\n            javaScriptOptions.acronymStyle,\n            javaScriptOptions.converters,\n            javaScriptOptions.rawType\n        ];\n    }\n\n    public get stringTypeMapping(): StringTypeMapping {\n        const mapping: Map<TransformedStringTypeKind, PrimitiveStringTypeKind> = new Map();\n        const dateTimeType = \"date-time\";\n        mapping.set(\"date\", dateTimeType);\n        mapping.set(\"date-time\", dateTimeType);\n        return mapping;\n    }\n\n    public get supportsOptionalClassProperties(): boolean {\n        return true;\n    }\n\n    public get supportsFullObjectType(): boolean {\n        return true;\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): JavaScriptRenderer {\n        return new JavaScriptRenderer(this, renderContext, getOptionValues(javaScriptOptions, untypedOptionValues));\n    }\n}\n\nexport const legalizeName = utf16LegalizeCharacters(isES3IdentifierPart);\n\nconst identityNamingFunction = funPrefixNamer(\"properties\", s => s);\n\nexport class JavaScriptRenderer extends ConvenienceRenderer {\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        private readonly _jsOptions: OptionValues<typeof javaScriptOptions>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected nameStyle(original: string, upper: boolean): string {\n        const acronyms = acronymStyle(this._jsOptions.acronymStyle);\n        const words = splitIntoWords(original);\n        return combineWords(\n            words,\n            legalizeName,\n            upper ? firstUpperWordStyle : allLowerWordStyle,\n            firstUpperWordStyle,\n            upper ? (s): string => capitalize(acronyms(s)) : allLowerWordStyle,\n            acronyms,\n            \"\",\n            isES3IdentifierStart\n        );\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return funPrefixNamer(\"types\", s => this.nameStyle(s, true));\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return identityNamingFunction;\n    }\n\n    protected makeUnionMemberNamer(): null {\n        return null;\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return funPrefixNamer(\"enum-cases\", s => this.nameStyle(s, true));\n    }\n\n    protected namedTypeToNameForTopLevel(type: Type): Type | undefined {\n        return directlyReachableSingleNamedType(type);\n    }\n\n    protected makeNameForProperty(\n        c: ClassType,\n        className: Name,\n        p: ClassProperty,\n        jsonName: string,\n        _assignedName: string | undefined\n    ): Name | undefined {\n        // Ignore the assigned name\n        return super.makeNameForProperty(c, className, p, jsonName, undefined);\n    }\n\n    protected emitDescriptionBlock(lines: Sourcelike[]): void {\n        this.emitCommentLines(lines, { lineStart: \" * \", beforeComment: \"/**\", afterComment: \" */\" });\n    }\n\n    private typeMapTypeFor(t: Type): Sourcelike {\n        if ([\"class\", \"object\", \"enum\"].includes(t.kind)) {\n            return ['r(\"', this.nameForNamedType(t), '\")'];\n        }\n\n        return matchType<Sourcelike>(\n            t,\n            _anyType => '\"any\"',\n            _nullType => \"null\",\n            _boolType => \"true\",\n            _integerType => \"0\",\n            _doubleType => \"3.14\",\n            _stringType => '\"\"',\n            arrayType => [\"a(\", this.typeMapTypeFor(arrayType.items), \")\"],\n            _classType => panic(\"We handled this above\"),\n            mapType => [\"m(\", this.typeMapTypeFor(mapType.values), \")\"],\n            _enumType => panic(\"We handled this above\"),\n            unionType => {\n                const children = Array.from(unionType.getChildren()).map((type: Type) => this.typeMapTypeFor(type));\n                return [\"u(\", ...arrayIntercalate(\", \", children), \")\"];\n            },\n            transformedStringType => {\n                if (transformedStringType.kind === \"date-time\") {\n                    return \"Date\";\n                }\n\n                return '\"\"';\n            }\n        );\n    }\n\n    private typeMapTypeForProperty(p: ClassProperty): Sourcelike {\n        const typeMap = this.typeMapTypeFor(p.type);\n        if (!p.isOptional) {\n            return typeMap;\n        }\n\n        return [\"u(undefined, \", typeMap, \")\"];\n    }\n\n    protected emitBlock(source: Sourcelike, end: Sourcelike, emit: () => void): void {\n        this.emitLine(source, \"{\");\n        this.indent(emit);\n        this.emitLine(\"}\", end);\n    }\n\n    private emitTypeMap(): void {\n        const { any: anyAnnotation } = this.typeAnnotations;\n\n        this.emitBlock(`const typeMap${anyAnnotation} = `, \";\", () => {\n            this.forEachObject(\"none\", (t: ObjectType, name: Name) => {\n                const additionalProperties = t.getAdditionalProperties();\n                const additional =\n                    additionalProperties !== undefined ? this.typeMapTypeFor(additionalProperties) : \"false\";\n                this.emitLine('\"', name, '\": o([');\n                this.indent(() => {\n                    this.forEachClassProperty(t, \"none\", (propName, jsonName, property) => {\n                        this.emitLine(\n                            '{ json: \"',\n                            utf16StringEscape(jsonName),\n                            '\", js: \"',\n                            modifySource(utf16StringEscape, propName),\n                            '\", typ: ',\n                            this.typeMapTypeForProperty(property),\n                            \" },\"\n                        );\n                    });\n                });\n                this.emitLine(\"], \", additional, \"),\");\n            });\n            this.forEachEnum(\"none\", (e, name) => {\n                this.emitLine('\"', name, '\": [');\n                this.indent(() => {\n                    this.forEachEnumCase(e, \"none\", (_caseName, jsonName) => {\n                        this.emitLine(`\"${utf16StringEscape(jsonName)}\",`);\n                    });\n                });\n                this.emitLine(\"],\");\n            });\n        });\n    }\n\n    protected deserializerFunctionName(name: Name): Sourcelike {\n        return [\"to\", name];\n    }\n\n    protected deserializerFunctionLine(_t: Type, name: Name): Sourcelike {\n        return [\"function \", this.deserializerFunctionName(name), \"(json)\"];\n    }\n\n    protected serializerFunctionName(name: Name): Sourcelike {\n        const camelCaseName = modifySource(camelCase, name);\n        return [camelCaseName, \"ToJson\"];\n    }\n\n    protected serializerFunctionLine(_t: Type, name: Name): Sourcelike {\n        return [\"function \", this.serializerFunctionName(name), \"(value)\"];\n    }\n\n    protected get moduleLine(): string | undefined {\n        return undefined;\n    }\n\n    protected get castFunctionLines(): [string, string] {\n        return [\"function cast(val, typ)\", \"function uncast(val, typ)\"];\n    }\n\n    protected get typeAnnotations(): JavaScriptTypeAnnotations {\n        return {\n            any: \"\",\n            anyArray: \"\",\n            anyMap: \"\",\n            string: \"\",\n            stringArray: \"\",\n            boolean: \"\",\n            never: \"\"\n        };\n    }\n\n    protected emitConvertModuleBody(): void {\n        const converter = (t: Type, name: Name): void => {\n            const typeMap = this.typeMapTypeFor(t);\n            this.emitBlock([this.deserializerFunctionLine(t, name), \" \"], \"\", () => {\n                const parsedJson = this._jsOptions.rawType === \"json\" ? \"JSON.parse(json)\" : \"json\";\n                if (!this._jsOptions.runtimeTypecheck) {\n                    this.emitLine(\"return \", parsedJson, \";\");\n                } else {\n                    this.emitLine(\"return cast(\", parsedJson, \", \", typeMap, \");\");\n                }\n            });\n            this.ensureBlankLine();\n\n            this.emitBlock([this.serializerFunctionLine(t, name), \" \"], \"\", () => {\n                if (this._jsOptions.rawType === \"json\") {\n                    if (!this._jsOptions.runtimeTypecheck) {\n                        this.emitLine(\"return JSON.stringify(value);\");\n                    } else {\n                        this.emitLine(\"return JSON.stringify(uncast(value, \", typeMap, \"), null, 2);\");\n                    }\n                } else {\n                    if (!this._jsOptions.runtimeTypecheck) {\n                        this.emitLine(\"return value;\");\n                    } else {\n                        this.emitLine(\"return uncast(value, \", typeMap, \");\");\n                    }\n                }\n            });\n        };\n\n        switch (this._jsOptions.converters) {\n            case ConvertersOptions.AllObjects:\n                this.forEachObject(\"interposing\", converter);\n                break;\n\n            default:\n                this.forEachTopLevel(\"interposing\", converter);\n                break;\n        }\n    }\n\n    protected emitConvertModuleHelpers(): void {\n        if (this._jsOptions.runtimeTypecheck) {\n            const {\n                any: anyAnnotation,\n                anyArray: anyArrayAnnotation,\n                anyMap: anyMapAnnotation,\n                string: stringAnnotation,\n                stringArray: stringArrayAnnotation,\n                never: neverAnnotation\n            } = this.typeAnnotations;\n            this.ensureBlankLine();\n            this\n                .emitMultiline(`function invalidValue(typ${anyAnnotation}, val${anyAnnotation}, key${anyAnnotation}, parent${anyAnnotation} = '')${neverAnnotation} {\n    const prettyTyp = prettyTypeName(typ);\n    const parentText = parent ? \\` on \\${parent}\\` : '';\n    const keyText = key ? \\` for key \"\\${key}\"\\` : '';\n    throw Error(\\`Invalid value\\${keyText}\\${parentText}. Expected \\${prettyTyp} but got \\${JSON.stringify(val)}\\`);\n}\n\nfunction prettyTypeName(typ${anyAnnotation})${stringAnnotation} {\n    if (Array.isArray(typ)) {\n        if (typ.length === 2 && typ[0] === undefined) {\n            return \\`an optional \\${prettyTypeName(typ[1])}\\`;\n        } else {\n            return \\`one of [\\${typ.map(a => { return prettyTypeName(a); }).join(\", \")}]\\`;\n        }\n    } else if (typeof typ === \"object\" && typ.literal !== undefined) {\n        return typ.literal;\n    } else {\n        return typeof typ;\n    }\n}\n\nfunction jsonToJSProps(typ${anyAnnotation})${anyAnnotation} {\n    if (typ.jsonToJS === undefined) {\n        const map${anyAnnotation} = {};\n        typ.props.forEach((p${anyAnnotation}) => map[p.json] = { key: p.js, typ: p.typ });\n        typ.jsonToJS = map;\n    }\n    return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ${anyAnnotation})${anyAnnotation} {\n    if (typ.jsToJSON === undefined) {\n        const map${anyAnnotation} = {};\n        typ.props.forEach((p${anyAnnotation}) => map[p.js] = { key: p.json, typ: p.typ });\n        typ.jsToJSON = map;\n    }\n    return typ.jsToJSON;\n}\n\nfunction transform(val${anyAnnotation}, typ${anyAnnotation}, getProps${anyAnnotation}, key${anyAnnotation} = '', parent${anyAnnotation} = '')${anyAnnotation} {\n    function transformPrimitive(typ${stringAnnotation}, val${anyAnnotation})${anyAnnotation} {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key, parent);\n    }\n\n    function transformUnion(typs${anyArrayAnnotation}, val${anyAnnotation})${anyAnnotation} {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            } catch (_) {}\n        }\n        return invalidValue(typs, val, key, parent);\n    }\n\n    function transformEnum(cases${stringArrayAnnotation}, val${anyAnnotation})${anyAnnotation} {\n        if (cases.indexOf(val) !== -1) return val;\n        return invalidValue(cases.map(a => { return l(a); }), val, key, parent);\n    }\n\n    function transformArray(typ${anyAnnotation}, val${anyAnnotation})${anyAnnotation} {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(l(\"array\"), val, key, parent);\n        return val.map(el => transform(el, typ, getProps));\n    }\n\n    function transformDate(val${anyAnnotation})${anyAnnotation} {\n        if (val === null) {\n            return null;\n        }\n        const d = new Date(val);\n        if (isNaN(d.valueOf())) {\n            return invalidValue(l(\"Date\"), val, key, parent);\n        }\n        return d;\n    }\n\n    function transformObject(props${anyMapAnnotation}, additional${anyAnnotation}, val${anyAnnotation})${anyAnnotation} {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(l(ref || \"object\"), val, key, parent);\n        }\n        const result${anyAnnotation} = {};\n        Object.getOwnPropertyNames(props).forEach(key => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, key, ref);\n        });\n        Object.getOwnPropertyNames(val).forEach(key => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = ${\n                    this._jsOptions.runtimeTypecheckIgnoreUnknownProperties\n                        ? \"val[key]\"\n                        : \"transform(val[key], additional, getProps, key, ref)\"\n                };\n            }\n        });\n        return result;\n    }\n\n    if (typ === \"any\") return val;\n    if (typ === null) {\n        if (val === null) return val;\n        return invalidValue(typ, val, key, parent);\n    }\n    if (typ === false) return invalidValue(typ, val, key, parent);\n    let ref${anyAnnotation} = undefined;\n    while (typeof typ === \"object\" && typ.ref !== undefined) {\n        ref = typ.ref;\n        typ = typeMap[typ.ref];\n    }\n    if (Array.isArray(typ)) return transformEnum(typ, val);\n    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")    ? transformArray(typ.arrayItems, val)\n            : typ.hasOwnProperty(\"props\")         ? transformObject(getProps(typ), typ.additional, val)\n            : invalidValue(typ, val, key, parent);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);\n    return transformPrimitive(typ, val);\n}\n\n${this.castFunctionLines[0]} {\n    return transform(val, typ, jsonToJSProps);\n}\n\n${this.castFunctionLines[1]} {\n    return transform(val, typ, jsToJSONProps);\n}\n\nfunction l(typ${anyAnnotation}) {\n    return { literal: typ };\n}\n\nfunction a(typ${anyAnnotation}) {\n    return { arrayItems: typ };\n}\n\nfunction u(...typs${anyArrayAnnotation}) {\n    return { unionMembers: typs };\n}\n\nfunction o(props${anyArrayAnnotation}, additional${anyAnnotation}) {\n    return { props, additional };\n}\n\nfunction m(additional${anyAnnotation}) {\n    return { props: [], additional };\n}\n\nfunction r(name${stringAnnotation}) {\n    return { ref: name };\n}\n`);\n            this.emitTypeMap();\n        }\n    }\n\n    protected emitConvertModule(): void {\n        this.ensureBlankLine();\n        this.emitMultiline(\n            `// Converts JSON ${this._jsOptions.rawType === \"json\" ? \"strings\" : \"types\"} to/from your types`\n        );\n        if (this._jsOptions.runtimeTypecheck) {\n            this.emitMultiline(\n                `// and asserts the results${this._jsOptions.rawType === \"json\" ? \" of JSON.parse\" : \"\"} at runtime`\n            );\n        }\n\n        const moduleLine = this.moduleLine;\n        if (moduleLine === undefined) {\n            this.emitConvertModuleBody();\n        } else {\n            this.emitBlock([moduleLine, \" \"], \"\", () => this.emitConvertModuleBody());\n        }\n    }\n\n    protected emitTypes(): void {\n        return;\n    }\n\n    protected emitUsageImportComment(): void {\n        this.emitLine('//   const Convert = require(\"./file\");');\n    }\n\n    protected emitUsageComments(): void {\n        this.emitMultiline(`// To parse this data:\n//`);\n\n        this.emitUsageImportComment();\n        this.emitLine(\"//\");\n        this.forEachTopLevel(\"none\", (_t, name) => {\n            const camelCaseName = modifySource(camelCase, name);\n            this.emitLine(\"//   const \", camelCaseName, \" = Convert.to\", name, \"(json);\");\n        });\n        if (this._jsOptions.runtimeTypecheck) {\n            this.emitLine(\"//\");\n            this.emitLine(\"// These functions will throw an error if the JSON doesn't\");\n            this.emitLine(\"// match the expected interface, even if the JSON is valid.\");\n        }\n    }\n\n    protected emitModuleExports(): void {\n        this.ensureBlankLine();\n\n        this.emitBlock(\"module.exports = \", \";\", () => {\n            this.forEachTopLevel(\"none\", (_, name) => {\n                const serializer = this.serializerFunctionName(name);\n                const deserializer = this.deserializerFunctionName(name);\n                this.emitLine('\"', serializer, '\": ', serializer, \",\");\n                this.emitLine('\"', deserializer, '\": ', deserializer, \",\");\n            });\n        });\n    }\n\n    protected emitSourceStructure(): void {\n        if (this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n        } else {\n            this.emitUsageComments();\n        }\n\n        this.emitTypes();\n\n        this.emitConvertModule();\n\n        this.emitConvertModuleHelpers();\n\n        this.emitModuleExports();\n    }\n}\n","import { panic } from \"@glideapps/ts-necessities\";\nimport { arrayIntercalate } from \"collection-utils\";\n\nimport { ConvenienceRenderer } from \"../ConvenienceRenderer\";\nimport { type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { EnumOption, type Option, type OptionValues, getOptionValues } from \"../RendererOptions\";\nimport { type Sourcelike } from \"../Source\";\nimport { AcronymStyleOptions, acronymOption, acronymStyle } from \"../support/Acronyms\";\nimport { convertersOption } from \"../support/Converters\";\nimport {\n    allLowerWordStyle,\n    capitalize,\n    combineWords,\n    firstUpperWordStyle,\n    splitIntoWords,\n    utf16StringEscape\n} from \"../support/Strings\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport { type ArrayType, type ClassProperty, type ClassType, type ObjectType, PrimitiveType, type Type } from \"../Type\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { directlyReachableSingleNamedType, matchType } from \"../TypeUtils\";\n\nimport { legalizeName } from \"./JavaScript\";\nimport { isES3IdentifierStart } from \"./JavaScriptUnicodeMaps\";\n\nexport const javaScriptPropTypesOptions = {\n    acronymStyle: acronymOption(AcronymStyleOptions.Pascal),\n    converters: convertersOption(),\n    moduleSystem: new EnumOption(\n        \"module-system\",\n        \"Which module system to use\",\n        [\n            [\"common-js\", false],\n            [\"es6\", true]\n        ],\n        \"es6\"\n    )\n};\n\nexport class JavaScriptPropTypesTargetLanguage extends TargetLanguage {\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [javaScriptPropTypesOptions.acronymStyle, javaScriptPropTypesOptions.converters];\n    }\n\n    public constructor(\n        displayName = \"JavaScript PropTypes\",\n        names: string[] = [\"javascript-prop-types\"],\n        extension = \"js\"\n    ) {\n        super(displayName, names, extension);\n    }\n\n    protected makeRenderer(\n        renderContext: RenderContext,\n        untypedOptionValues: FixMeOptionsType\n    ): JavaScriptPropTypesRenderer {\n        return new JavaScriptPropTypesRenderer(\n            this,\n            renderContext,\n            getOptionValues(javaScriptPropTypesOptions, untypedOptionValues)\n        );\n    }\n}\n\nconst identityNamingFunction = funPrefixNamer(\"properties\", s => s);\n\nexport class JavaScriptPropTypesRenderer extends ConvenienceRenderer {\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        private readonly _jsOptions: OptionValues<typeof javaScriptPropTypesOptions>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected nameStyle(original: string, upper: boolean): string {\n        const acronyms = acronymStyle(this._jsOptions.acronymStyle);\n        const words = splitIntoWords(original);\n        return combineWords(\n            words,\n            legalizeName,\n            upper ? firstUpperWordStyle : allLowerWordStyle,\n            firstUpperWordStyle,\n            upper ? (s): string => capitalize(acronyms(s)) : allLowerWordStyle,\n            acronyms,\n            \"\",\n            isES3IdentifierStart\n        );\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return funPrefixNamer(\"types\", s => this.nameStyle(s, true));\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return identityNamingFunction;\n    }\n\n    protected makeUnionMemberNamer(): null {\n        return null;\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return funPrefixNamer(\"enum-cases\", s => this.nameStyle(s, false));\n    }\n\n    protected namedTypeToNameForTopLevel(type: Type): Type | undefined {\n        return directlyReachableSingleNamedType(type);\n    }\n\n    protected makeNameForProperty(\n        c: ClassType,\n        className: Name,\n        p: ClassProperty,\n        jsonName: string,\n        _assignedName: string | undefined\n    ): Name | undefined {\n        // Ignore the assigned name\n        return super.makeNameForProperty(c, className, p, jsonName, undefined);\n    }\n\n    private typeMapTypeFor(t: Type, required = true): Sourcelike {\n        if ([\"class\", \"object\", \"enum\"].includes(t.kind)) {\n            return [\"_\", this.nameForNamedType(t)];\n        }\n\n        const match = matchType<Sourcelike>(\n            t,\n            _anyType => \"PropTypes.any\",\n            _nullType => \"PropTypes.any\",\n            _boolType => \"PropTypes.bool\",\n            _integerType => \"PropTypes.number\",\n            _doubleType => \"PropTypes.number\",\n            _stringType => \"PropTypes.string\",\n            arrayType => [\"PropTypes.arrayOf(\", this.typeMapTypeFor(arrayType.items, false), \")\"],\n            _classType => panic(\"Should already be handled.\"),\n            _mapType => \"PropTypes.object\",\n            _enumType => panic(\"Should already be handled.\"),\n            unionType => {\n                const children = Array.from(unionType.getChildren()).map((type: Type) =>\n                    this.typeMapTypeFor(type, false)\n                );\n                return [\"PropTypes.oneOfType([\", ...arrayIntercalate(\", \", children), \"])\"];\n            },\n            _transformedStringType => {\n                return \"PropTypes.string\";\n            }\n        );\n\n        if (required) {\n            return [match];\n        }\n\n        return match;\n    }\n\n    private typeMapTypeForProperty(p: ClassProperty): Sourcelike {\n        return this.typeMapTypeFor(p.type);\n    }\n\n    private importStatement(lhs: Sourcelike, moduleName: Sourcelike): Sourcelike {\n        if (this._jsOptions.moduleSystem) {\n            return [\"import \", lhs, \" from \", moduleName, \";\"];\n        } else {\n            return [\"const \", lhs, \" = require(\", moduleName, \");\"];\n        }\n    }\n\n    protected emitUsageComments(): void {\n        // FIXME: Use the correct type name\n        this.emitCommentLines(\n            [\n                \"Example usage:\",\n                \"\",\n                this.importStatement(\"{ MyShape }\", \"./myShape.js\"),\n                \"\",\n                \"class MyComponent extends React.Component {\",\n                \"  //\",\n                \"}\",\n                \"\",\n                \"MyComponent.propTypes = {\",\n                \"  input: MyShape\",\n                \"};\"\n            ],\n            { lineStart: \"// \" }\n        );\n    }\n\n    protected emitBlock(source: Sourcelike, end: Sourcelike, emit: () => void): void {\n        this.emitLine(source, \"{\");\n        this.indent(emit);\n        this.emitLine(\"}\", end);\n    }\n\n    protected emitImports(): void {\n        this.ensureBlankLine();\n        this.emitLine(this.importStatement(\"PropTypes\", '\"prop-types\"'));\n    }\n\n    private emitExport(name: Sourcelike, value: Sourcelike): void {\n        if (this._jsOptions.moduleSystem) {\n            this.emitLine(\"export const \", name, \" = \", value, \";\");\n        } else {\n            this.emitLine(\"module.exports = exports = { \", name, \": \", value, \" };\");\n        }\n    }\n\n    protected emitTypes(): void {\n        this.ensureBlankLine();\n\n        this.forEachObject(\"none\", (_type: ObjectType, name: Name) => {\n            this.emitLine(\"let _\", name, \";\");\n        });\n\n        this.forEachEnum(\"none\", (enumType, enumName) => {\n            const options: Sourcelike = [];\n            this.forEachEnumCase(enumType, \"none\", (name: Name, _jsonName, _position) => {\n                options.push(\"'\");\n                options.push(name);\n                options.push(\"'\");\n                options.push(\", \");\n            });\n            options.pop();\n\n            this.emitLine([\"const _\", enumName, \" = PropTypes.oneOfType([\", ...options, \"]);\"]);\n        });\n\n        const order: number[] = [];\n        const mapKey: Name[] = [];\n        const mapValue: Sourcelike[][] = [];\n        this.forEachObject(\"none\", (type: ObjectType, name: Name) => {\n            mapKey.push(name);\n            mapValue.push(this.gatherSource(() => this.emitObject(name, type)));\n        });\n\n        // order these\n        mapKey.forEach((_, index) => {\n            // assume first\n            let ordinal = 0;\n\n            // pull out all names\n            const source = mapValue[index];\n            const names = source.filter(value => value as Name);\n\n            // must be behind all these names\n            names.forEach(name => {\n                const depName = name;\n\n                // find this name's ordinal, if it has already been added\n                order.forEach(orderItem => {\n                    const depIndex = orderItem;\n                    if (mapKey[depIndex] === depName) {\n                        // this is the index of the dependency, so make sure we come after it\n                        ordinal = Math.max(ordinal, depIndex + 1);\n                    }\n                });\n            });\n\n            // insert index\n            order.splice(ordinal, 0, index);\n        });\n\n        // now emit ordered source\n        order.forEach(i => this.emitGatheredSource(mapValue[i]));\n\n        // now emit top levels\n        this.forEachTopLevel(\"none\", (type, name) => {\n            if (type instanceof PrimitiveType) {\n                this.ensureBlankLine();\n                this.emitExport(name, this.typeMapTypeFor(type));\n            } else {\n                if (type.kind === \"array\") {\n                    this.ensureBlankLine();\n                    this.emitExport(name, [\"PropTypes.arrayOf(\", this.typeMapTypeFor((type as ArrayType).items), \")\"]);\n                } else {\n                    this.ensureBlankLine();\n                    this.emitExport(name, [\"_\", name]);\n                }\n            }\n        });\n    }\n\n    private emitObject(name: Name, t: ObjectType): void {\n        this.ensureBlankLine();\n        this.emitLine(\"_\", name, \" = PropTypes.shape({\");\n        this.indent(() => {\n            this.forEachClassProperty(t, \"none\", (_, jsonName, property) => {\n                this.emitLine(`\"${utf16StringEscape(jsonName)}\"`, \": \", this.typeMapTypeForProperty(property), \",\");\n            });\n        });\n        this.emitLine(\"});\");\n    }\n\n    protected emitSourceStructure(): void {\n        if (this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n        } else {\n            this.emitUsageComments();\n        }\n\n        this.emitImports();\n\n        this.emitTypes();\n    }\n}\n","import { iterableFirst, mapFirst } from \"collection-utils\";\n\nimport { addDescriptionToSchema } from \"../attributes/Description\";\nimport { ConvenienceRenderer } from \"../ConvenienceRenderer\";\nimport { type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { type Option } from \"../RendererOptions\";\nimport {\n    allUpperWordStyle,\n    combineWords,\n    firstUpperWordStyle,\n    legalizeCharacters,\n    splitIntoWords\n} from \"../support/Strings\";\nimport { defined, panic } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport {\n    type EnumType,\n    type ObjectType,\n    type Type,\n    type UnionType,\n    transformedStringTypeTargetTypeKindsMap\n} from \"../Type\";\nimport { type StringTypeMapping, getNoStringTypeMapping } from \"../TypeBuilder\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { matchTypeExhaustive } from \"../TypeUtils\";\n\nexport class JSONSchemaTargetLanguage extends TargetLanguage {\n    public constructor() {\n        super(\"JSON Schema\", [\"schema\", \"json-schema\"], \"schema\");\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [];\n    }\n\n    public get stringTypeMapping(): StringTypeMapping {\n        return getNoStringTypeMapping();\n    }\n\n    public get supportsOptionalClassProperties(): boolean {\n        return true;\n    }\n\n    public get supportsFullObjectType(): boolean {\n        return true;\n    }\n\n    protected makeRenderer(renderContext: RenderContext, _untypedOptionValues: FixMeOptionsType): JSONSchemaRenderer {\n        return new JSONSchemaRenderer(this, renderContext);\n    }\n}\n\nconst namingFunction = funPrefixNamer(\"namer\", jsonNameStyle);\n\nconst legalizeName = legalizeCharacters(cp => cp >= 32 && cp < 128 && cp !== 0x2f /* slash */);\n\nfunction jsonNameStyle(original: string): string {\n    const words = splitIntoWords(original);\n    return combineWords(\n        words,\n        legalizeName,\n        firstUpperWordStyle,\n        firstUpperWordStyle,\n        allUpperWordStyle,\n        allUpperWordStyle,\n        \"\",\n        _ => true\n    );\n}\n\ninterface Schema {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [name: string]: any;\n}\n\nexport class JSONSchemaRenderer extends ConvenienceRenderer {\n    protected makeNamedTypeNamer(): Namer {\n        return namingFunction;\n    }\n\n    protected namerForObjectProperty(): null {\n        return null;\n    }\n\n    protected makeUnionMemberNamer(): null {\n        return null;\n    }\n\n    protected makeEnumCaseNamer(): null {\n        return null;\n    }\n\n    private nameForType(t: Type): string {\n        return defined(this.names.get(this.nameForNamedType(t)));\n    }\n\n    private makeOneOf(types: ReadonlySet<Type>): Schema {\n        const first = iterableFirst(types);\n        if (first === undefined) {\n            return panic(\"Must have at least one type for oneOf\");\n        }\n\n        if (types.size === 1) {\n            return this.schemaForType(first);\n        }\n\n        return { anyOf: Array.from(types).map((t: Type) => this.schemaForType(t)) };\n    }\n\n    private makeRef(t: Type): Schema {\n        return { $ref: `#/definitions/${this.nameForType(t)}` };\n    }\n\n    private addAttributesToSchema(t: Type, schema: Schema): void {\n        const attributes = this.typeGraph.attributeStore.attributesForType(t);\n        for (const [kind, attr] of attributes) {\n            kind.addToSchema(schema, t, attr);\n        }\n    }\n\n    private schemaForType(t: Type): Schema {\n        const schema = matchTypeExhaustive(\n            t,\n            _noneType => {\n                return panic(\"none type should have been replaced\");\n            },\n            _anyType => ({}),\n            _nullType => ({ type: \"null\" }),\n            _boolType => ({ type: \"boolean\" }),\n            _integerType => ({ type: \"integer\" }),\n            _doubleType => ({ type: \"number\" }),\n            _stringType => ({ type: \"string\" }),\n            arrayType => ({ type: \"array\", items: this.schemaForType(arrayType.items) }),\n            classType => this.makeRef(classType),\n            mapType => this.definitionForObject(mapType, undefined),\n            objectType => this.makeRef(objectType),\n            enumType => this.makeRef(enumType),\n            unionType => {\n                if (this.unionNeedsName(unionType)) {\n                    return this.makeRef(unionType);\n                } else {\n                    return this.definitionForUnion(unionType);\n                }\n            },\n            transformedStringType => {\n                const target = transformedStringTypeTargetTypeKindsMap.get(transformedStringType.kind);\n                if (target === undefined) {\n                    return panic(`Unknown transformed string type ${transformedStringType.kind}`);\n                }\n\n                return { type: \"string\", format: target.jsonSchema };\n            }\n        );\n        if (schema.$ref === undefined) {\n            this.addAttributesToSchema(t, schema);\n        }\n\n        return schema;\n    }\n\n    private definitionForObject(o: ObjectType, title: string | undefined): Schema {\n        let properties: Schema | undefined;\n        let required: string[] | undefined;\n        if (o.getProperties().size === 0) {\n            properties = undefined;\n            required = undefined;\n        } else {\n            const props: Schema = {};\n            const req: string[] = [];\n            for (const [name, p] of o.getProperties()) {\n                const prop = this.schemaForType(p.type);\n                if (prop.description === undefined) {\n                    addDescriptionToSchema(prop, this.descriptionForClassProperty(o, name));\n                }\n\n                props[name] = prop;\n                if (!p.isOptional) {\n                    req.push(name);\n                }\n            }\n\n            properties = props;\n            required = req.sort();\n        }\n\n        const additional = o.getAdditionalProperties();\n        const additionalProperties = additional !== undefined ? this.schemaForType(additional) : false;\n        const schema = {\n            type: \"object\",\n            additionalProperties,\n            properties,\n            required,\n            title\n        };\n        this.addAttributesToSchema(o, schema);\n        return schema;\n    }\n\n    private definitionForUnion(u: UnionType, title?: string): Schema {\n        const oneOf = this.makeOneOf(u.sortedMembers);\n        if (title !== undefined) {\n            oneOf.title = title;\n        }\n\n        this.addAttributesToSchema(u, oneOf);\n        return oneOf;\n    }\n\n    private definitionForEnum(e: EnumType, title: string): Schema {\n        const schema = { type: \"string\", enum: Array.from(e.cases), title };\n        this.addAttributesToSchema(e, schema);\n        return schema;\n    }\n\n    protected emitSourceStructure(): void {\n        // FIXME: Find a good way to do multiple top-levels.  Maybe multiple files?\n        const topLevelType = this.topLevels.size === 1 ? this.schemaForType(defined(mapFirst(this.topLevels))) : {};\n        const schema = Object.assign({ $schema: \"http://json-schema.org/draft-06/schema#\" }, topLevelType);\n        const definitions: { [name: string]: Schema } = {};\n        this.forEachObject(\"none\", (o: ObjectType, name: Name) => {\n            const title = defined(this.names.get(name));\n            definitions[title] = this.definitionForObject(o, title);\n        });\n        this.forEachUnion(\"none\", (u, name) => {\n            if (!this.unionNeedsName(u)) return;\n            const title = defined(this.names.get(name));\n            definitions[title] = this.definitionForUnion(u, title);\n        });\n        this.forEachEnum(\"none\", (e, name) => {\n            const title = defined(this.names.get(name));\n            definitions[title] = this.definitionForEnum(e, title);\n        });\n        schema.definitions = definitions;\n\n        this.emitMultiline(JSON.stringify(schema, undefined, \"    \"));\n    }\n}\n","import { arrayIntercalate, iterableSome } from \"collection-utils\";\n\nimport { anyTypeIssueAnnotation, nullTypeIssueAnnotation } from \"../Annotation\";\nimport { ConvenienceRenderer, type ForbiddenWordsInfo } from \"../ConvenienceRenderer\";\nimport { type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { EnumOption, type Option, type OptionValues, StringOption, getOptionValues } from \"../RendererOptions\";\nimport { type Sourcelike, maybeAnnotated, modifySource } from \"../Source\";\nimport { AcronymStyleOptions, acronymOption, acronymStyle } from \"../support/Acronyms\";\nimport {\n    allLowerWordStyle,\n    allUpperWordStyle,\n    camelCase,\n    combineWords,\n    escapeNonPrintableMapper,\n    firstUpperWordStyle,\n    intToHex,\n    isDigit,\n    isLetterOrUnderscore,\n    isNumeric,\n    isPrintable,\n    legalizeCharacters,\n    splitIntoWords,\n    utf32ConcatMap\n} from \"../support/Strings\";\nimport { assertNever, mustNotHappen } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport {\n    ArrayType,\n    type ClassProperty,\n    ClassType,\n    type EnumType,\n    MapType,\n    type ObjectType,\n    type PrimitiveType,\n    type Type,\n    UnionType\n} from \"../Type\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { matchType, nullableFromUnion, removeNullFromUnion } from \"../TypeUtils\";\n\nexport enum Framework {\n    None = \"None\",\n    Jackson = \"Jackson\",\n    Klaxon = \"Klaxon\",\n    KotlinX = \"KotlinX\"\n}\n\nexport const kotlinOptions = {\n    framework: new EnumOption(\n        \"framework\",\n        \"Serialization framework\",\n        [\n            [\"just-types\", Framework.None],\n            [\"jackson\", Framework.Jackson],\n            [\"klaxon\", Framework.Klaxon],\n            [\"kotlinx\", Framework.KotlinX]\n        ],\n        \"klaxon\"\n    ),\n    acronymStyle: acronymOption(AcronymStyleOptions.Pascal),\n    packageName: new StringOption(\"package\", \"Package\", \"PACKAGE\", \"quicktype\")\n};\n\nexport class KotlinTargetLanguage extends TargetLanguage {\n    public constructor() {\n        super(\"Kotlin\", [\"kotlin\"], \"kt\");\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [kotlinOptions.framework, kotlinOptions.acronymStyle, kotlinOptions.packageName];\n    }\n\n    public get supportsOptionalClassProperties(): boolean {\n        return true;\n    }\n\n    public get supportsUnionsWithBothNumberTypes(): boolean {\n        return true;\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): ConvenienceRenderer {\n        const options = getOptionValues(kotlinOptions, untypedOptionValues);\n\n        switch (options.framework) {\n            case Framework.None:\n                return new KotlinRenderer(this, renderContext, options);\n            case Framework.Jackson:\n                return new KotlinJacksonRenderer(this, renderContext, options);\n            case Framework.Klaxon:\n                return new KotlinKlaxonRenderer(this, renderContext, options);\n            case Framework.KotlinX:\n                return new KotlinXRenderer(this, renderContext, options);\n            default:\n                return assertNever(options.framework);\n        }\n    }\n}\n\nconst keywords = [\n    \"package\",\n    \"as\",\n    \"typealias\",\n    \"class\",\n    \"this\",\n    \"super\",\n    \"val\",\n    \"var\",\n    \"fun\",\n    \"for\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"is\",\n    \"in\",\n    \"throw\",\n    \"return\",\n    \"break\",\n    \"continue\",\n    \"object\",\n    \"if\",\n    \"try\",\n    \"else\",\n    \"while\",\n    \"do\",\n    \"when\",\n    \"interface\",\n    \"typeof\",\n    \"klaxon\",\n    \"toJson\",\n    \"Any\",\n    \"Boolean\",\n    \"Double\",\n    \"Float\",\n    \"Long\",\n    \"Int\",\n    \"Short\",\n    \"System\",\n    \"Byte\",\n    \"String\",\n    \"Array\",\n    \"List\",\n    \"Map\",\n    \"Enum\",\n    \"Class\",\n    \"JsonObject\",\n    \"JsonValue\",\n    \"Converter\",\n    \"Klaxon\"\n];\n\nfunction isPartCharacter(codePoint: number): boolean {\n    return isLetterOrUnderscore(codePoint) || isNumeric(codePoint);\n}\n\nfunction isStartCharacter(codePoint: number): boolean {\n    return isPartCharacter(codePoint) && !isDigit(codePoint);\n}\n\nconst legalizeName = legalizeCharacters(isPartCharacter);\n\nfunction kotlinNameStyle(\n    isUpper: boolean,\n    original: string,\n    acronymsStyle: (s: string) => string = allUpperWordStyle\n): string {\n    const words = splitIntoWords(original);\n    return combineWords(\n        words,\n        legalizeName,\n        isUpper ? firstUpperWordStyle : allLowerWordStyle,\n        firstUpperWordStyle,\n        isUpper ? allUpperWordStyle : allLowerWordStyle,\n        acronymsStyle,\n        \"\",\n        isStartCharacter\n    );\n}\n\nfunction unicodeEscape(codePoint: number): string {\n    return \"\\\\u\" + intToHex(codePoint, 4);\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst _stringEscape = utf32ConcatMap(escapeNonPrintableMapper(isPrintable, unicodeEscape));\n\nfunction stringEscape(s: string): string {\n    // \"$this\" is a template string in Kotlin so we have to escape $\n    return _stringEscape(s).replace(/\\$/g, \"\\\\$\");\n}\n\nexport class KotlinRenderer extends ConvenienceRenderer {\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        protected readonly _kotlinOptions: OptionValues<typeof kotlinOptions>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return keywords;\n    }\n\n    protected forbiddenForObjectProperties(_o: ObjectType, _classNamed: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected forbiddenForEnumCases(_e: EnumType, _enumName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected forbiddenForUnionMembers(_u: UnionType, _unionName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: false };\n    }\n\n    protected topLevelNameStyle(rawName: string): string {\n        return kotlinNameStyle(true, rawName);\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return funPrefixNamer(\"upper\", s => kotlinNameStyle(true, s, acronymStyle(this._kotlinOptions.acronymStyle)));\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return funPrefixNamer(\"lower\", s => kotlinNameStyle(false, s, acronymStyle(this._kotlinOptions.acronymStyle)));\n    }\n\n    protected makeUnionMemberNamer(): Namer {\n        return funPrefixNamer(\"upper\", s => kotlinNameStyle(true, s) + \"Value\");\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return funPrefixNamer(\"upper\", s => kotlinNameStyle(true, s, acronymStyle(this._kotlinOptions.acronymStyle)));\n    }\n\n    protected emitDescriptionBlock(lines: Sourcelike[]): void {\n        this.emitCommentLines(lines, { lineStart: \" * \", beforeComment: \"/**\", afterComment: \" */\" });\n    }\n\n    protected emitBlock(line: Sourcelike, f: () => void, delimiter: \"curly\" | \"paren\" | \"lambda\" = \"curly\"): void {\n        const [open, close] = delimiter === \"curly\" ? [\"{\", \"}\"] : delimiter === \"paren\" ? [\"(\", \")\"] : [\"{\", \"})\"];\n        this.emitLine(line, \" \", open);\n        this.indent(f);\n        this.emitLine(close);\n    }\n\n    protected anySourceType(optional: string): Sourcelike {\n        return [\"Any\", optional];\n    }\n\n    // (asarazan): I've broken out the following two functions\n    // because some renderers, such as kotlinx, can cope with `any`, while some get mad.\n    protected arrayType(arrayType: ArrayType, withIssues = false, _noOptional = false): Sourcelike {\n        return [\"List<\", this.kotlinType(arrayType.items, withIssues), \">\"];\n    }\n\n    protected mapType(mapType: MapType, withIssues = false, _noOptional = false): Sourcelike {\n        return [\"Map<String, \", this.kotlinType(mapType.values, withIssues), \">\"];\n    }\n\n    protected kotlinType(t: Type, withIssues = false, noOptional = false): Sourcelike {\n        const optional = noOptional ? \"\" : \"?\";\n        return matchType<Sourcelike>(\n            t,\n            _anyType => {\n                return maybeAnnotated(withIssues, anyTypeIssueAnnotation, this.anySourceType(optional));\n            },\n            _nullType => {\n                return maybeAnnotated(withIssues, nullTypeIssueAnnotation, this.anySourceType(optional));\n            },\n            _boolType => \"Boolean\",\n            _integerType => \"Long\",\n            _doubleType => \"Double\",\n            _stringType => \"String\",\n            arrayType => this.arrayType(arrayType, withIssues),\n            classType => this.nameForNamedType(classType),\n            mapType => this.mapType(mapType, withIssues),\n            enumType => this.nameForNamedType(enumType),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) return [this.kotlinType(nullable, withIssues), optional];\n                return this.nameForNamedType(unionType);\n            }\n        );\n    }\n\n    protected emitUsageHeader(): void {\n        // To be overridden\n    }\n\n    protected emitHeader(): void {\n        if (this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n        } else {\n            this.emitUsageHeader();\n        }\n\n        this.ensureBlankLine();\n        this.emitLine(\"package \", this._kotlinOptions.packageName);\n        this.ensureBlankLine();\n    }\n\n    protected emitTopLevelPrimitive(t: PrimitiveType, name: Name): void {\n        const elementType = this.kotlinType(t);\n        this.emitLine([\"typealias \", name, \" = \", elementType, \"\"]);\n    }\n\n    protected emitTopLevelArray(t: ArrayType, name: Name): void {\n        const elementType = this.kotlinType(t.items);\n        this.emitLine([\"typealias \", name, \" = ArrayList<\", elementType, \">\"]);\n    }\n\n    protected emitTopLevelMap(t: MapType, name: Name): void {\n        const elementType = this.kotlinType(t.values);\n        this.emitLine([\"typealias \", name, \" = HashMap<String, \", elementType, \">\"]);\n    }\n\n    protected emitEmptyClassDefinition(c: ClassType, className: Name): void {\n        this.emitDescription(this.descriptionForType(c));\n        this.emitClassAnnotations(c, className);\n        this.emitLine(\"class \", className, \"()\");\n    }\n\n    protected emitClassDefinition(c: ClassType, className: Name): void {\n        if (c.getProperties().size === 0) {\n            this.emitEmptyClassDefinition(c, className);\n            return;\n        }\n\n        const kotlinType = (p: ClassProperty): Sourcelike => {\n            if (p.isOptional) {\n                return [this.kotlinType(p.type, true, true), \"?\"];\n            } else {\n                return this.kotlinType(p.type, true);\n            }\n        };\n\n        this.emitDescription(this.descriptionForType(c));\n        this.emitClassAnnotations(c, className);\n        this.emitLine(\"data class \", className, \" (\");\n        this.indent(() => {\n            let count = c.getProperties().size;\n            let first = true;\n            this.forEachClassProperty(c, \"none\", (name, jsonName, p) => {\n                const nullable = p.type.kind === \"union\" && nullableFromUnion(p.type as UnionType) !== null;\n                const nullableOrOptional = p.isOptional || p.type.kind === \"null\" || nullable;\n                const last = --count === 0;\n                let meta: Array<() => void> = [];\n\n                const description = this.descriptionForClassProperty(c, jsonName);\n                if (description !== undefined) {\n                    meta.push(() => this.emitDescription(description));\n                }\n\n                this.renameAttribute(name, jsonName, !nullableOrOptional, meta);\n\n                if (meta.length > 0 && !first) {\n                    this.ensureBlankLine();\n                }\n\n                for (const emit of meta) {\n                    emit();\n                }\n\n                this.emitLine(\"val \", name, \": \", kotlinType(p), nullableOrOptional ? \" = null\" : \"\", last ? \"\" : \",\");\n\n                if (meta.length > 0 && !last) {\n                    this.ensureBlankLine();\n                }\n\n                first = false;\n            });\n        });\n\n        this.emitClassDefinitionMethods(c, className);\n    }\n\n    protected emitClassDefinitionMethods(_c: ClassType, _className: Name): void {\n        this.emitLine(\")\");\n    }\n\n    protected emitClassAnnotations(_c: Type, _className: Name): void {\n        // to be overridden\n    }\n\n    protected renameAttribute(_name: Name, _jsonName: string, _required: boolean, _meta: Array<() => void>): void {\n        // to be overridden\n    }\n\n    protected emitEnumDefinition(e: EnumType, enumName: Name): void {\n        this.emitDescription(this.descriptionForType(e));\n\n        this.emitBlock([\"enum class \", enumName], () => {\n            let count = e.cases.size;\n            this.forEachEnumCase(e, \"none\", name => {\n                this.emitLine(name, --count === 0 ? \"\" : \",\");\n            });\n        });\n    }\n\n    protected emitUnionDefinition(u: UnionType, unionName: Name): void {\n        function sortBy(t: Type): string {\n            const kind = t.kind;\n            if (kind === \"class\") return kind;\n            return \"_\" + kind;\n        }\n\n        this.emitDescription(this.descriptionForType(u));\n\n        const [maybeNull, nonNulls] = removeNullFromUnion(u, sortBy);\n        this.emitClassAnnotations(u, unionName);\n        this.emitBlock([\"sealed class \", unionName], () => {\n            {\n                let table: Sourcelike[][] = [];\n                this.forEachUnionMember(u, nonNulls, \"none\", null, (name, t) => {\n                    table.push([\n                        [\"class \", name, \"(val value: \", this.kotlinType(t), \")\"],\n                        [\" : \", unionName, \"()\"]\n                    ]);\n                });\n                if (maybeNull !== null) {\n                    table.push([\n                        [\"class \", this.nameForUnionMember(u, maybeNull), \"()\"],\n                        [\" : \", unionName, \"()\"]\n                    ]);\n                }\n\n                this.emitTable(table);\n            }\n\n            this.emitUnionDefinitionMethods(u, nonNulls, maybeNull, unionName);\n        });\n    }\n\n    protected emitUnionDefinitionMethods(\n        _u: UnionType,\n        _nonNulls: ReadonlySet<Type>,\n        _maybeNull: PrimitiveType | null,\n        _unionName: Name\n    ): void {\n        // to be overridden\n    }\n\n    protected emitSourceStructure(): void {\n        this.emitHeader();\n\n        // Top-level arrays, maps\n        this.forEachTopLevel(\"leading\", (t, name) => {\n            if (t instanceof ArrayType) {\n                this.emitTopLevelArray(t, name);\n            } else if (t instanceof MapType) {\n                this.emitTopLevelMap(t, name);\n            } else if (t.isPrimitive()) {\n                this.emitTopLevelPrimitive(t, name);\n            }\n        });\n\n        this.forEachNamedType(\n            \"leading-and-interposing\",\n            (c: ClassType, n: Name) => this.emitClassDefinition(c, n),\n            (e, n) => this.emitEnumDefinition(e, n),\n            (u, n) => this.emitUnionDefinition(u, n)\n        );\n    }\n}\n\nexport class KotlinKlaxonRenderer extends KotlinRenderer {\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        _kotlinOptions: OptionValues<typeof kotlinOptions>\n    ) {\n        super(targetLanguage, renderContext, _kotlinOptions);\n    }\n\n    private unionMemberFromJsonValue(t: Type, e: Sourcelike): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => [e, \".inside\"],\n            _nullType => \"null\",\n            _boolType => [e, \".boolean\"],\n            _integerType => [\"(\", e, \".int?.toLong() ?: \", e, \".longValue)\"],\n            _doubleType => [e, \".double\"],\n            _stringType => [e, \".string\"],\n            arrayType => [e, \".array?.let { klaxon.parseFromJsonArray<\", this.kotlinType(arrayType.items), \">(it) }\"],\n            _classType => [e, \".obj?.let { klaxon.parseFromJsonObject<\", this.kotlinType(t), \">(it) }\"],\n            _mapType => [e, \".obj?.let { klaxon.parseFromJsonObject<\", this.kotlinType(t), \">(it) }\"],\n            enumType => [e, \".string?.let { \", this.kotlinType(enumType), \".fromValue(it) }\"],\n            _unionType => mustNotHappen()\n        );\n    }\n\n    private unionMemberJsonValueGuard(t: Type, _e: Sourcelike): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => \"is Any\",\n            _nullType => \"null\",\n            _boolType => \"is Boolean\",\n            _integerType => \"is Int, is Long\",\n            _doubleType => \"is Double\",\n            _stringType => \"is String\",\n            _arrayType => \"is JsonArray<*>\",\n            // These could be stricter, but for now we don't allow maps\n            // and objects in the same union\n            _classType => \"is JsonObject\",\n            _mapType => \"is JsonObject\",\n            // This could be stricter, but for now we don't allow strings\n            // and enums in the same union\n            _enumType => \"is String\",\n            _unionType => mustNotHappen()\n        );\n    }\n\n    protected emitUsageHeader(): void {\n        this.emitLine(\"// To parse the JSON, install Klaxon and do:\");\n        this.emitLine(\"//\");\n        this.forEachTopLevel(\"none\", (_, name) => {\n            this.emitLine(\"//   val \", modifySource(camelCase, name), \" = \", name, \".fromJson(jsonString)\");\n        });\n    }\n\n    protected emitHeader(): void {\n        super.emitHeader();\n\n        this.emitLine(\"import com.beust.klaxon.*\");\n\n        const hasUnions = iterableSome(\n            this.typeGraph.allNamedTypes(),\n            t => t instanceof UnionType && nullableFromUnion(t) === null\n        );\n        const hasEmptyObjects = iterableSome(\n            this.typeGraph.allNamedTypes(),\n            c => c instanceof ClassType && c.getProperties().size === 0\n        );\n        if (hasUnions || this.haveEnums || hasEmptyObjects) {\n            this.emitGenericConverter();\n        }\n\n        let converters: Sourcelike[][] = [];\n        if (hasEmptyObjects) {\n            converters.push([[\".convert(JsonObject::class,\"], [\" { it.obj!! },\"], [\" { it.toJsonString() })\"]]);\n        }\n\n        this.forEachEnum(\"none\", (_, name) => {\n            converters.push([\n                [\".convert(\", name, \"::class,\"],\n                [\" { \", name, \".fromValue(it.string!!) },\"],\n                [' { \"\\\\\"${it.value}\\\\\"\" })']\n            ]);\n        });\n        this.forEachUnion(\"none\", (_, name) => {\n            converters.push([\n                [\".convert(\", name, \"::class,\"],\n                [\" { \", name, \".fromJson(it) },\"],\n                [\" { it.toJson() }, true)\"]\n            ]);\n        });\n\n        this.ensureBlankLine();\n        this.emitLine(\"private val klaxon = Klaxon()\");\n        if (converters.length > 0) {\n            this.indent(() => this.emitTable(converters));\n        }\n    }\n\n    protected emitTopLevelArray(t: ArrayType, name: Name): void {\n        const elementType = this.kotlinType(t.items);\n        this.emitBlock(\n            [\"class \", name, \"(elements: Collection<\", elementType, \">) : ArrayList<\", elementType, \">(elements)\"],\n            () => {\n                this.emitLine(\"public fun toJson() = klaxon.toJsonString(this)\");\n                this.ensureBlankLine();\n                this.emitBlock(\"companion object\", () => {\n                    this.emitLine(\n                        \"public fun fromJson(json: String) = \",\n                        name,\n                        \"(klaxon.parseArray<\",\n                        elementType,\n                        \">(json)!!)\"\n                    );\n                });\n            }\n        );\n    }\n\n    protected emitTopLevelMap(t: MapType, name: Name): void {\n        const elementType = this.kotlinType(t.values);\n        this.emitBlock(\n            [\n                \"class \",\n                name,\n                \"(elements: Map<String, \",\n                elementType,\n                \">) : HashMap<String, \",\n                elementType,\n                \">(elements)\"\n            ],\n            () => {\n                this.emitLine(\"public fun toJson() = klaxon.toJsonString(this)\");\n                this.ensureBlankLine();\n                this.emitBlock(\"companion object\", () => {\n                    this.emitBlock(\n                        [\"public fun fromJson(json: String) = \", name],\n                        () => {\n                            this.emitLine(\n                                \"klaxon.parseJsonObject(java.io.StringReader(json)) as Map<String, \",\n                                elementType,\n                                \">\"\n                            );\n                        },\n                        \"paren\"\n                    );\n                });\n            }\n        );\n    }\n\n    private klaxonRenameAttribute(propName: Name, jsonName: string, ignore = false): Sourcelike | undefined {\n        const escapedName = stringEscape(jsonName);\n        const namesDiffer = this.sourcelikeToString(propName) !== escapedName;\n        const properties: Sourcelike[] = [];\n        if (namesDiffer) {\n            properties.push(['name = \"', escapedName, '\"']);\n        }\n\n        if (ignore) {\n            properties.push(\"ignored = true\");\n        }\n\n        return properties.length === 0 ? undefined : [\"@Json(\", arrayIntercalate(\", \", properties), \")\"];\n    }\n\n    protected emitEmptyClassDefinition(c: ClassType, className: Name): void {\n        this.emitDescription(this.descriptionForType(c));\n\n        this.emitLine(\"typealias \", className, \" = JsonObject\");\n    }\n\n    protected emitClassDefinitionMethods(c: ClassType, className: Name): void {\n        const isTopLevel = iterableSome(this.topLevels, ([_, top]) => top === c);\n        if (isTopLevel) {\n            this.emitBlock(\")\", () => {\n                this.emitLine(\"public fun toJson() = klaxon.toJsonString(this)\");\n                this.ensureBlankLine();\n                this.emitBlock(\"companion object\", () => {\n                    this.emitLine(\"public fun fromJson(json: String) = klaxon.parse<\", className, \">(json)\");\n                });\n            });\n        } else {\n            this.emitLine(\")\");\n        }\n    }\n\n    protected renameAttribute(name: Name, jsonName: string, _required: boolean, meta: Array<() => void>): void {\n        const rename = this.klaxonRenameAttribute(name, jsonName);\n        if (rename !== undefined) {\n            meta.push(() => this.emitLine(rename));\n        }\n    }\n\n    protected emitEnumDefinition(e: EnumType, enumName: Name): void {\n        this.emitDescription(this.descriptionForType(e));\n\n        this.emitBlock([\"enum class \", enumName, \"(val value: String)\"], () => {\n            let count = e.cases.size;\n            this.forEachEnumCase(e, \"none\", (name, json) => {\n                this.emitLine(name, `(\"${stringEscape(json)}\")`, --count === 0 ? \";\" : \",\");\n            });\n            this.ensureBlankLine();\n            this.emitBlock(\"companion object\", () => {\n                this.emitBlock([\"public fun fromValue(value: String): \", enumName, \" = when (value)\"], () => {\n                    let table: Sourcelike[][] = [];\n                    this.forEachEnumCase(e, \"none\", (name, json) => {\n                        table.push([[`\"${stringEscape(json)}\"`], [\" -> \", name]]);\n                    });\n                    table.push([[\"else\"], [\" -> throw IllegalArgumentException()\"]]);\n                    this.emitTable(table);\n                });\n            });\n        });\n    }\n\n    private emitGenericConverter(): void {\n        this.ensureBlankLine();\n        this.emitLine(\n            \"private fun <T> Klaxon.convert(k: kotlin.reflect.KClass<*>, fromJson: (JsonValue) -> T, toJson: (T) -> String, isUnion: Boolean = false) =\"\n        );\n        this.indent(() => {\n            this.emitLine(\"this.converter(object: Converter {\");\n            this.indent(() => {\n                this.emitLine('@Suppress(\"UNCHECKED_CAST\")');\n                this.emitTable([\n                    [\"override fun toJson(value: Any)\", \" = toJson(value as T)\"],\n                    [\"override fun fromJson(jv: JsonValue)\", \" = fromJson(jv) as Any\"],\n                    [\n                        \"override fun canConvert(cls: Class<*>)\",\n                        \" = cls == k.java || (isUnion && cls.superclass == k.java)\"\n                    ]\n                ]);\n            });\n            this.emitLine(\"})\");\n        });\n    }\n\n    protected emitUnionDefinitionMethods(\n        u: UnionType,\n        nonNulls: ReadonlySet<Type>,\n        maybeNull: PrimitiveType | null,\n        unionName: Name\n    ): void {\n        this.ensureBlankLine();\n        this.emitLine(\"public fun toJson(): String = klaxon.toJsonString(when (this) {\");\n        this.indent(() => {\n            let toJsonTable: Sourcelike[][] = [];\n            this.forEachUnionMember(u, nonNulls, \"none\", null, name => {\n                toJsonTable.push([[\"is \", name], [\" -> this.value\"]]);\n            });\n            if (maybeNull !== null) {\n                const name = this.nameForUnionMember(u, maybeNull);\n                toJsonTable.push([[\"is \", name], [' -> \"null\"']]);\n            }\n\n            this.emitTable(toJsonTable);\n        });\n        this.emitLine(\"})\");\n        this.ensureBlankLine();\n        this.emitBlock(\"companion object\", () => {\n            this.emitLine(\"public fun fromJson(jv: JsonValue): \", unionName, \" = when (jv.inside) {\");\n            this.indent(() => {\n                let table: Sourcelike[][] = [];\n                this.forEachUnionMember(u, nonNulls, \"none\", null, (name, t) => {\n                    table.push([\n                        [this.unionMemberJsonValueGuard(t, \"jv.inside\")],\n                        [\" -> \", name, \"(\", this.unionMemberFromJsonValue(t, \"jv\"), \"!!)\"]\n                    ]);\n                });\n                if (maybeNull !== null) {\n                    const name = this.nameForUnionMember(u, maybeNull);\n                    table.push([[this.unionMemberJsonValueGuard(maybeNull, \"jv.inside\")], [\" -> \", name, \"()\"]]);\n                }\n\n                table.push([[\"else\"], [\" -> throw IllegalArgumentException()\"]]);\n                this.emitTable(table);\n            });\n            this.emitLine(\"}\");\n        });\n    }\n}\n\nexport class KotlinJacksonRenderer extends KotlinRenderer {\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        _kotlinOptions: OptionValues<typeof kotlinOptions>\n    ) {\n        super(targetLanguage, renderContext, _kotlinOptions);\n    }\n\n    private unionMemberJsonValueGuard(t: Type, _e: Sourcelike): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => \"is Any\",\n            _nullType => \"null\",\n            _boolType => \"is BooleanNode\",\n            _integerType => \"is IntNode, is LongNode\",\n            _doubleType => \"is DoubleNode\",\n            _stringType => \"is TextNode\",\n            _arrayType => \"is ArrayNode\",\n            // These could be stricter, but for now we don't allow maps\n            // and objects in the same union\n            _classType => \"is ObjectNode\",\n            _mapType => \"is ObjectNode\",\n            // This could be stricter, but for now we don't allow strings\n            // and enums in the same union\n            _enumType => \"is TextNode\",\n            _unionType => mustNotHappen()\n        );\n    }\n\n    protected emitUsageHeader(): void {\n        this.emitLine(\"// To parse the JSON, install jackson-module-kotlin and do:\");\n        this.emitLine(\"//\");\n        this.forEachTopLevel(\"none\", (_, name) => {\n            this.emitLine(\"//   val \", modifySource(camelCase, name), \" = \", name, \".fromJson(jsonString)\");\n        });\n    }\n\n    protected emitHeader(): void {\n        super.emitHeader();\n\n        this.emitMultiline(`import com.fasterxml.jackson.annotation.*\nimport com.fasterxml.jackson.core.*\nimport com.fasterxml.jackson.databind.*\nimport com.fasterxml.jackson.databind.deser.std.StdDeserializer\nimport com.fasterxml.jackson.databind.module.SimpleModule\nimport com.fasterxml.jackson.databind.node.*\nimport com.fasterxml.jackson.databind.ser.std.StdSerializer\nimport com.fasterxml.jackson.module.kotlin.*`);\n\n        const hasUnions = iterableSome(\n            this.typeGraph.allNamedTypes(),\n            t => t instanceof UnionType && nullableFromUnion(t) === null\n        );\n        const hasEmptyObjects = iterableSome(\n            this.typeGraph.allNamedTypes(),\n            c => c instanceof ClassType && c.getProperties().size === 0\n        );\n        if (hasUnions || this.haveEnums || hasEmptyObjects) {\n            this.emitGenericConverter();\n        }\n\n        let converters: Sourcelike[][] = [];\n        // if (hasEmptyObjects) {\n        //     converters.push([[\"convert(JsonNode::class,\"], [\" { it },\"], [\" { writeValueAsString(it) })\"]]);\n        // }\n        this.forEachEnum(\"none\", (_, name) => {\n            converters.push([\n                [\"convert(\", name, \"::class,\"],\n                [\" { \", name, \".fromValue(it.asText()) },\"],\n                [' { \"\\\\\"${it.value}\\\\\"\" })']\n            ]);\n        });\n        this.forEachUnion(\"none\", (_, name) => {\n            converters.push([\n                [\"convert(\", name, \"::class,\"],\n                [\" { \", name, \".fromJson(it) },\"],\n                [\" { it.toJson() }, true)\"]\n            ]);\n        });\n\n        this.ensureBlankLine();\n        this.emitLine(\"val mapper = jacksonObjectMapper().apply {\");\n        this.indent(() => {\n            this.emitLine(\"propertyNamingStrategy = PropertyNamingStrategy.LOWER_CAMEL_CASE\");\n            this.emitLine(\"setSerializationInclusion(JsonInclude.Include.NON_NULL)\");\n        });\n\n        if (converters.length > 0) {\n            this.indent(() => this.emitTable(converters));\n        }\n\n        this.emitLine(\"}\");\n    }\n\n    protected emitTopLevelArray(t: ArrayType, name: Name): void {\n        const elementType = this.kotlinType(t.items);\n        this.emitBlock(\n            [\"class \", name, \"(elements: Collection<\", elementType, \">) : ArrayList<\", elementType, \">(elements)\"],\n            () => {\n                this.emitLine(\"fun toJson() = mapper.writeValueAsString(this)\");\n                this.ensureBlankLine();\n                this.emitBlock(\"companion object\", () => {\n                    this.emitLine(\"fun fromJson(json: String) = mapper.readValue<\", name, \">(json)\");\n                });\n            }\n        );\n    }\n\n    protected emitTopLevelMap(t: MapType, name: Name): void {\n        const elementType = this.kotlinType(t.values);\n        this.emitBlock(\n            [\n                \"class \",\n                name,\n                \"(elements: Map<String, \",\n                elementType,\n                \">) : HashMap<String, \",\n                elementType,\n                \">(elements)\"\n            ],\n            () => {\n                this.emitLine(\"fun toJson() = mapper.writeValueAsString(this)\");\n                this.ensureBlankLine();\n                this.emitBlock(\"companion object\", () => {\n                    this.emitLine(\"fun fromJson(json: String) = mapper.readValue<\", name, \">(json)\");\n                });\n            }\n        );\n    }\n\n    private jacksonRenameAttribute(\n        propName: Name,\n        jsonName: string,\n        required: boolean,\n        ignore = false\n    ): Sourcelike | undefined {\n        const escapedName = stringEscape(jsonName);\n        const namesDiffer = this.sourcelikeToString(propName) !== escapedName;\n        const properties: Sourcelike[] = [];\n        const isPrefixBool = jsonName.startsWith(\"is\"); // https://github.com/FasterXML/jackson-module-kotlin/issues/80\n        const propertyOpts: Sourcelike[] = [];\n\n        if (namesDiffer || isPrefixBool) {\n            propertyOpts.push('\"' + escapedName + '\"');\n        }\n\n        if (required) {\n            propertyOpts.push(\"required=true\");\n        }\n\n        if (propertyOpts.length > 0) {\n            properties.push([\"@get:JsonProperty(\", arrayIntercalate(\", \", propertyOpts), \")\"]);\n            properties.push([\"@field:JsonProperty(\", arrayIntercalate(\", \", propertyOpts), \")\"]);\n        }\n\n        if (ignore) {\n            properties.push(\"@get:JsonIgnore\");\n            properties.push(\"@field:JsonIgnore\");\n        }\n\n        return properties.length === 0 ? undefined : properties;\n    }\n\n    protected emitEmptyClassDefinition(c: ClassType, className: Name): void {\n        this.emitDescription(this.descriptionForType(c));\n\n        this.emitLine(\"typealias \", className, \" = JsonNode\");\n    }\n\n    protected emitClassDefinitionMethods(c: ClassType, className: Name): void {\n        const isTopLevel = iterableSome(this.topLevels, ([_, top]) => top === c);\n        if (isTopLevel) {\n            this.emitBlock(\")\", () => {\n                this.emitLine(\"fun toJson() = mapper.writeValueAsString(this)\");\n                this.ensureBlankLine();\n                this.emitBlock(\"companion object\", () => {\n                    this.emitLine(\"fun fromJson(json: String) = mapper.readValue<\", className, \">(json)\");\n                });\n            });\n        } else {\n            this.emitLine(\")\");\n        }\n    }\n\n    protected renameAttribute(name: Name, jsonName: string, required: boolean, meta: Array<() => void>): void {\n        const rename = this.jacksonRenameAttribute(name, jsonName, required);\n        if (rename !== undefined) {\n            meta.push(() => this.emitLine(rename));\n        }\n    }\n\n    protected emitEnumDefinition(e: EnumType, enumName: Name): void {\n        this.emitDescription(this.descriptionForType(e));\n\n        this.emitBlock([\"enum class \", enumName, \"(val value: String)\"], () => {\n            let count = e.cases.size;\n            this.forEachEnumCase(e, \"none\", (name, json) => {\n                this.emitLine(name, `(\"${stringEscape(json)}\")`, --count === 0 ? \";\" : \",\");\n            });\n            this.ensureBlankLine();\n            this.emitBlock(\"companion object\", () => {\n                this.emitBlock([\"fun fromValue(value: String): \", enumName, \" = when (value)\"], () => {\n                    let table: Sourcelike[][] = [];\n                    this.forEachEnumCase(e, \"none\", (name, json) => {\n                        table.push([[`\"${stringEscape(json)}\"`], [\" -> \", name]]);\n                    });\n                    table.push([[\"else\"], [\" -> throw IllegalArgumentException()\"]]);\n                    this.emitTable(table);\n                });\n            });\n        });\n    }\n\n    private emitGenericConverter(): void {\n        this.ensureBlankLine();\n        this.emitMultiline(`\n@Suppress(\"UNCHECKED_CAST\")\nprivate fun <T> ObjectMapper.convert(k: kotlin.reflect.KClass<*>, fromJson: (JsonNode) -> T, toJson: (T) -> String, isUnion: Boolean = false) = registerModule(SimpleModule().apply {\n    addSerializer(k.java as Class<T>, object : StdSerializer<T>(k.java as Class<T>) {\n        override fun serialize(value: T, gen: JsonGenerator, provider: SerializerProvider) = gen.writeRawValue(toJson(value))\n    })\n    addDeserializer(k.java as Class<T>, object : StdDeserializer<T>(k.java as Class<T>) {\n        override fun deserialize(p: JsonParser, ctxt: DeserializationContext) = fromJson(p.readValueAsTree())\n    })\n})`);\n    }\n\n    protected emitUnionDefinitionMethods(\n        u: UnionType,\n        nonNulls: ReadonlySet<Type>,\n        maybeNull: PrimitiveType | null,\n        unionName: Name\n    ): void {\n        this.ensureBlankLine();\n        this.emitLine(\"fun toJson(): String = mapper.writeValueAsString(when (this) {\");\n        this.indent(() => {\n            let toJsonTable: Sourcelike[][] = [];\n            this.forEachUnionMember(u, nonNulls, \"none\", null, name => {\n                toJsonTable.push([[\"is \", name], [\" -> this.value\"]]);\n            });\n            if (maybeNull !== null) {\n                const name = this.nameForUnionMember(u, maybeNull);\n                toJsonTable.push([[\"is \", name], [' -> \"null\"']]);\n            }\n\n            this.emitTable(toJsonTable);\n        });\n        this.emitLine(\"})\");\n        this.ensureBlankLine();\n        this.emitBlock(\"companion object\", () => {\n            this.emitLine(\"fun fromJson(jn: JsonNode): \", unionName, \" = when (jn) {\");\n            this.indent(() => {\n                let table: Sourcelike[][] = [];\n                this.forEachUnionMember(u, nonNulls, \"none\", null, (name, t) => {\n                    table.push([[this.unionMemberJsonValueGuard(t, \"jn\")], [\" -> \", name, \"(mapper.treeToValue(jn))\"]]);\n                });\n                if (maybeNull !== null) {\n                    const name = this.nameForUnionMember(u, maybeNull);\n                    table.push([[this.unionMemberJsonValueGuard(maybeNull, \"jn\")], [\" -> \", name, \"()\"]]);\n                }\n\n                table.push([[\"else\"], [\" -> throw IllegalArgumentException()\"]]);\n                this.emitTable(table);\n            });\n            this.emitLine(\"}\");\n        });\n    }\n}\n\n/**\n * Currently supports simple classes, enums, and TS string unions (which are also enums).\n * TODO: Union, Any, Top Level Array, Top Level Map\n */\nexport class KotlinXRenderer extends KotlinRenderer {\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        _kotlinOptions: OptionValues<typeof kotlinOptions>\n    ) {\n        super(targetLanguage, renderContext, _kotlinOptions);\n    }\n\n    protected anySourceType(optional: string): Sourcelike {\n        return [\"JsonElement\", optional];\n    }\n\n    protected arrayType(arrayType: ArrayType, withIssues = false, noOptional = false): Sourcelike {\n        const valType = this.kotlinType(arrayType.items, withIssues, true);\n        const name = this.sourcelikeToString(valType);\n        if (name === \"JsonObject\" || name === \"JsonElement\") {\n            return \"JsonArray\";\n        }\n\n        return super.arrayType(arrayType, withIssues, noOptional);\n    }\n\n    protected mapType(mapType: MapType, withIssues = false, noOptional = false): Sourcelike {\n        const valType = this.kotlinType(mapType.values, withIssues, true);\n        const name = this.sourcelikeToString(valType);\n        if (name === \"JsonObject\" || name === \"JsonElement\") {\n            return \"JsonObject\";\n        }\n\n        return super.mapType(mapType, withIssues, noOptional);\n    }\n\n    protected emitTopLevelMap(t: MapType, name: Name): void {\n        const elementType = this.kotlinType(t.values);\n        if (elementType === \"JsonObject\") {\n            this.emitLine([\"typealias \", name, \" = JsonObject\"]);\n        } else {\n            super.emitTopLevelMap(t, name);\n        }\n    }\n\n    protected emitTopLevelArray(t: ArrayType, name: Name): void {\n        const elementType = this.kotlinType(t.items);\n        this.emitLine([\"typealias \", name, \" = JsonArray<\", elementType, \">\"]);\n    }\n\n    protected emitUsageHeader(): void {\n        this.emitLine(\"// To parse the JSON, install kotlin's serialization plugin and do:\");\n        this.emitLine(\"//\");\n        const table: Sourcelike[][] = [];\n        table.push([\"// val \", \"json\", \" = Json { allowStructuredMapKeys = true }\"]);\n        this.forEachTopLevel(\"none\", (_, name) => {\n            table.push([\n                \"// val \",\n                modifySource(camelCase, name),\n                ` = json.parse(${this.sourcelikeToString(name)}.serializer(), jsonString)`\n            ]);\n        });\n        this.emitTable(table);\n    }\n\n    protected emitHeader(): void {\n        super.emitHeader();\n\n        this.emitLine(\"import kotlinx.serialization.*\");\n        this.emitLine(\"import kotlinx.serialization.json.*\");\n        this.emitLine(\"import kotlinx.serialization.descriptors.*\");\n        this.emitLine(\"import kotlinx.serialization.encoding.*\");\n    }\n\n    protected emitClassAnnotations(_c: Type, _className: Name): void {\n        this.emitLine(\"@Serializable\");\n    }\n\n    protected renameAttribute(name: Name, jsonName: string, _required: boolean, meta: Array<() => void>): void {\n        const rename = this._rename(name, jsonName);\n        if (rename !== undefined) {\n            meta.push(() => this.emitLine(rename));\n        }\n    }\n\n    private _rename(propName: Name, jsonName: string): Sourcelike | undefined {\n        const escapedName = stringEscape(jsonName);\n        const namesDiffer = this.sourcelikeToString(propName) !== escapedName;\n        if (namesDiffer) {\n            return ['@SerialName(\"', escapedName, '\")'];\n        }\n\n        return undefined;\n    }\n\n    protected emitEnumDefinition(e: EnumType, enumName: Name): void {\n        this.emitDescription(this.descriptionForType(e));\n\n        this.emitLine([\"@Serializable\"]);\n        this.emitBlock([\"enum class \", enumName, \"(val value: String)\"], () => {\n            let count = e.cases.size;\n            this.forEachEnumCase(e, \"none\", (name, json) => {\n                const jsonEnum = stringEscape(json);\n                this.emitLine(`@SerialName(\"${jsonEnum}\") `, name, `(\"${jsonEnum}\")`, --count === 0 ? \";\" : \",\");\n            });\n        });\n    }\n}\n","import { iterableFirst, iterableSome, mapContains, mapFirst, mapSome } from \"collection-utils\";\nimport unicode from \"unicode-properties\";\n\nimport { ConvenienceRenderer, type ForbiddenWordsInfo } from \"../ConvenienceRenderer\";\nimport { type Name, Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport {\n    BooleanOption,\n    EnumOption,\n    type Option,\n    type OptionValues,\n    StringOption,\n    getOptionValues\n} from \"../RendererOptions\";\nimport { type Sourcelike, modifySource } from \"../Source\";\nimport {\n    addPrefixIfNecessary,\n    allLowerWordStyle,\n    allUpperWordStyle,\n    camelCase,\n    combineWords,\n    fastIsUpperCase,\n    firstUpperWordStyle,\n    repeatString,\n    splitIntoWords,\n    stringEscape,\n    utf16LegalizeCharacters\n} from \"../support/Strings\";\nimport { assert, defined } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport { ArrayType, type ClassProperty, ClassType, EnumType, MapType, Type, UnionType } from \"../Type\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { isAnyOrNull, matchType, nullableFromUnion } from \"../TypeUtils\";\n\nexport type MemoryAttribute = \"assign\" | \"strong\" | \"copy\";\nexport interface OutputFeatures {\n    implementation: boolean;\n    interface: boolean;\n}\n\nconst DEBUG = false;\nconst DEFAULT_CLASS_PREFIX = \"QT\";\n\nexport const objcOptions = {\n    features: new EnumOption(\"features\", \"Interface and implementation\", [\n        [\"all\", { interface: true, implementation: true }],\n        [\"interface\", { interface: true, implementation: false }],\n        [\"implementation\", { interface: false, implementation: true }]\n    ]),\n    justTypes: new BooleanOption(\"just-types\", \"Plain types only\", false),\n    marshallingFunctions: new BooleanOption(\"functions\", \"C-style functions\", false),\n    classPrefix: new StringOption(\"class-prefix\", \"Class prefix\", \"PREFIX\", DEFAULT_CLASS_PREFIX),\n    extraComments: new BooleanOption(\"extra-comments\", \"Extra comments\", false)\n};\n\nexport class ObjectiveCTargetLanguage extends TargetLanguage {\n    public constructor() {\n        super(\"Objective-C\", [\"objc\", \"objective-c\", \"objectivec\"], \"m\");\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [\n            objcOptions.justTypes,\n            objcOptions.classPrefix,\n            objcOptions.features,\n            objcOptions.extraComments,\n            objcOptions.marshallingFunctions\n        ];\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): ObjectiveCRenderer {\n        return new ObjectiveCRenderer(this, renderContext, getOptionValues(objcOptions, untypedOptionValues));\n    }\n}\n\nfunction typeNameStyle(prefix: string, original: string): string {\n    const words = splitIntoWords(original);\n    const result = combineWords(\n        words,\n        legalizeName,\n        firstUpperWordStyle,\n        firstUpperWordStyle,\n        allUpperWordStyle,\n        allUpperWordStyle,\n        \"\",\n        isStartCharacter\n    );\n    return addPrefixIfNecessary(prefix, result);\n}\n\nfunction propertyNameStyle(original: string, isBool = false): string {\n    // Objective-C developers are uncomfortable with property \"id\"\n    // so we use an alternate name in this special case.\n    if (original === \"id\") {\n        original = \"identifier\";\n    }\n\n    let words = splitIntoWords(original);\n\n    if (isBool) {\n        if (words.length === 0) {\n            words = [{ word: \"flag\", isAcronym: false }];\n        } else if (!words[0].isAcronym && !booleanPrefixes.includes(words[0].word)) {\n            words = [{ word: \"is\", isAcronym: false }, ...words];\n        }\n    }\n\n    // Properties cannot even begin with any of the forbidden names\n    // For example, properies named new* are treated differently by ARC\n    if (words.length > 0 && forbiddenPropertyNames.includes(words[0].word)) {\n        words = [{ word: \"the\", isAcronym: false }, ...words];\n    }\n\n    return combineWords(\n        words,\n        legalizeName,\n        allLowerWordStyle,\n        firstUpperWordStyle,\n        allLowerWordStyle,\n        allUpperWordStyle,\n        \"\",\n        isStartCharacter\n    );\n}\n\nconst keywords = [\n    /*\n    \"_Bool\",\n    \"_Complex\",\n    \"_Imaginary\",\n    */\n    \"asm\",\n    \"atomic\",\n    \"auto\",\n    \"bool\",\n    \"break\",\n    \"case\",\n    \"char\",\n    \"const\",\n    \"continue\",\n    \"default\",\n    \"do\",\n    \"double\",\n    \"else\",\n    \"enum\",\n    \"extern\",\n    \"false\",\n    \"float\",\n    \"for\",\n    \"goto\",\n    \"if\",\n    \"inline\",\n    \"int\",\n    \"long\",\n    \"nil\",\n    \"nonatomic\",\n    \"register\",\n    \"restrict\",\n    \"retain\",\n    \"return\",\n    \"short\",\n    \"signed\",\n    \"sizeof\",\n    \"static\",\n    \"struct\",\n    \"switch\",\n    \"typedef\",\n    \"typeof\",\n    \"true\",\n    \"union\",\n    \"unsigned\",\n    \"void\",\n    \"volatile\",\n    \"while\"\n];\n\nconst forbiddenPropertyNames = [\n    \"id\",\n    \"hash\",\n    \"description\",\n    \"init\",\n    \"copy\",\n    \"mutableCopy\",\n    \"superclass\",\n    \"debugDescription\",\n    \"new\"\n];\n\nconst booleanPrefixes = [\n    \"is\",\n    \"are\",\n    \"were\",\n    \"was\",\n    \"will\",\n    \"all\",\n    \"some\",\n    \"many\",\n    \"has\",\n    \"have\",\n    \"had\",\n    \"does\",\n    \"do\",\n    \"requires\",\n    \"require\",\n    \"needs\",\n    \"need\"\n];\n\nfunction isStartCharacter(utf16Unit: number): boolean {\n    return unicode.isAlphabetic(utf16Unit) || utf16Unit === 0x5f; // underscore\n}\n\nfunction isPartCharacter(utf16Unit: number): boolean {\n    const category: string = unicode.getCategory(utf16Unit);\n    return [\"Nd\", \"Pc\", \"Mn\", \"Mc\"].includes(category) || isStartCharacter(utf16Unit);\n}\n\nconst legalizeName = utf16LegalizeCharacters(isPartCharacter);\n\nconst staticEnumValuesIdentifier = \"values\";\nconst forbiddenForEnumCases = [\"new\", staticEnumValuesIdentifier];\n\nfunction splitExtension(filename: string): [string, string] {\n    const i = filename.lastIndexOf(\".\");\n    const extension = i !== -1 ? filename.split(\".\").pop() : \"m\";\n    filename = i !== -1 ? filename.slice(0, i) : filename;\n    return [filename, extension ?? \"m\"];\n}\n\nexport class ObjectiveCRenderer extends ConvenienceRenderer {\n    private _currentFilename: string | undefined;\n\n    private readonly _classPrefix: string;\n\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        private readonly _options: OptionValues<typeof objcOptions>\n    ) {\n        super(targetLanguage, renderContext);\n\n        // Infer the class prefix from a top-level name if it's not given\n        if (_options.classPrefix === DEFAULT_CLASS_PREFIX) {\n            const aTopLevel = defined(iterableFirst(this.topLevels.keys()));\n            this._classPrefix = this.inferClassPrefix(aTopLevel);\n        } else {\n            this._classPrefix = _options.classPrefix;\n        }\n    }\n\n    private inferClassPrefix(name: string): string {\n        const l = name.length;\n        let firstNonUpper = 0;\n        while (firstNonUpper < l && fastIsUpperCase(name.charCodeAt(firstNonUpper))) {\n            firstNonUpper += 1;\n        }\n\n        if (firstNonUpper < 2) return DEFAULT_CLASS_PREFIX;\n        return name.slice(0, firstNonUpper - 1);\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return keywords;\n    }\n\n    protected forbiddenForObjectProperties(_c: ClassType, _className: Name): ForbiddenWordsInfo {\n        return { names: forbiddenPropertyNames, includeGlobalForbidden: true };\n    }\n\n    protected forbiddenForEnumCases(_e: EnumType, _enumName: Name): ForbiddenWordsInfo {\n        return { names: forbiddenForEnumCases, includeGlobalForbidden: true };\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return funPrefixNamer(\"types\", rawName => typeNameStyle(this._classPrefix, rawName));\n    }\n\n    protected namerForObjectProperty(_: ClassType, p: ClassProperty): Namer {\n        // TODO why is underscore being removed?\n        return new Namer(\"properties\", s => propertyNameStyle(s, p.type.kind === \"bool\"), [\n            \"_\",\n            \"the\",\n            \"one\",\n            \"some\",\n            \"another\"\n        ]);\n    }\n\n    protected makeUnionMemberNamer(): null {\n        return null;\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return new Namer(\"enum-cases\", propertyNameStyle, []);\n    }\n\n    protected namedTypeToNameForTopLevel(type: Type): Type | undefined {\n        return type;\n    }\n\n    protected emitDescriptionBlock(lines: Sourcelike[]): void {\n        this.emitCommentLines(lines, { lineStart: \"/// \" });\n    }\n\n    protected emitBlock(line: Sourcelike, f: () => void): void {\n        this.emitLine(line, \" {\");\n        this.indent(f);\n        this.emitLine(\"}\");\n    }\n\n    protected emitMethod(declaration: Sourcelike, f: () => void): void {\n        this.emitLine(declaration);\n        this.emitLine(\"{\");\n        this.indent(f);\n        this.emitLine(\"}\");\n    }\n\n    protected emitExtraComments(...comments: Sourcelike[]): void {\n        if (!this._options.extraComments) return;\n        for (const comment of comments) {\n            this.emitLine(\"// \", comment);\n        }\n    }\n\n    protected startFile(basename: Sourcelike, extension: string): void {\n        assert(this._currentFilename === undefined, \"Previous file wasn't finished\");\n        // FIXME: The filenames should actually be Sourcelikes, too\n        this._currentFilename = `${this.sourcelikeToString(basename)}.${extension}`;\n    }\n\n    protected finishFile(): void {\n        super.finishFile(defined(this._currentFilename));\n        this._currentFilename = undefined;\n    }\n\n    protected memoryAttribute(t: Type, isNullable: boolean): MemoryAttribute {\n        return matchType<MemoryAttribute>(\n            t,\n            _anyType => \"copy\",\n            _nullType => \"copy\",\n            _boolType => (isNullable ? \"strong\" : \"assign\"),\n            _integerType => (isNullable ? \"strong\" : \"assign\"),\n            _doubleType => (isNullable ? \"strong\" : \"assign\"),\n            _stringType => \"copy\",\n            _arrayType => \"copy\",\n            _classType => \"strong\",\n            _mapType => \"copy\",\n            _enumType => \"assign\",\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                return nullable !== null ? this.memoryAttribute(nullable, true) : \"copy\";\n            }\n        );\n    }\n\n    protected objcType(t: Type, nullableOrBoxed = false): [Sourcelike, string] {\n        return matchType<[Sourcelike, string]>(\n            t,\n            _anyType => [\"id\", \"\"],\n            // For now, we're treating nulls just like any\n            _nullType => [\"id\", \"\"],\n            _boolType => (nullableOrBoxed ? [\"NSNumber\", \" *\"] : [\"BOOL\", \"\"]),\n            _integerType => (nullableOrBoxed ? [\"NSNumber\", \" *\"] : [\"NSInteger\", \"\"]),\n            _doubleType => (nullableOrBoxed ? [\"NSNumber\", \" *\"] : [\"double\", \"\"]),\n            _stringType => [\"NSString\", \" *\"],\n            arrayType => {\n                const itemType = arrayType.items;\n                const itemTypeName = this.objcType(itemType, true);\n                // NSArray<id>* === NSArray*\n                if (isAnyOrNull(itemType)) {\n                    return [\"NSArray\", \" *\"];\n                }\n\n                return [[\"NSArray<\", itemTypeName, \">\"], \" *\"];\n            },\n            classType => [this.nameForNamedType(classType), \" *\"],\n            mapType => [[\"NSDictionary<NSString *, \", this.objcType(mapType.values, true), \">\"], \" *\"],\n            enumType => [this.nameForNamedType(enumType), \" *\"],\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                return nullable !== null ? this.objcType(nullable, true) : [\"id\", \"\"];\n            }\n        );\n    }\n\n    private jsonType(t: Type): [Sourcelike, string] {\n        return matchType<[Sourcelike, string]>(\n            t,\n            _anyType => [\"id\", \"\"],\n            // For now, we're treating nulls just like any\n            _nullType => [\"id\", \"\"],\n            _boolType => [\"NSNumber\", \" *\"],\n            _integerType => [\"NSNumber\", \" *\"],\n            _doubleType => [\"NSNumber\", \" *\"],\n            _stringType => [\"NSString\", \" *\"],\n            _arrayType => [\"NSArray\", \" *\"],\n            _classType => [\"NSDictionary<NSString *, id>\", \" *\"],\n            mapType => [[\"NSDictionary<NSString *, \", this.jsonType(mapType.values), \">\"], \" *\"],\n            _enumType => [\"NSString\", \" *\"],\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                return nullable !== null ? this.jsonType(nullable) : [\"id\", \"\"];\n            }\n        );\n    }\n\n    protected fromDynamicExpression(t: Type, ...dynamic: Sourcelike[]): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => dynamic,\n            _nullType => dynamic,\n            _boolType => dynamic,\n            _integerType => dynamic,\n            _doubleType => dynamic,\n            _stringType => dynamic,\n            arrayType => [\"map(\", dynamic, \", λ(id x, \", this.fromDynamicExpression(arrayType.items, \"x\"), \"))\"],\n            classType => [\"[\", this.nameForNamedType(classType), \" fromJSONDictionary:\", dynamic, \"]\"],\n            mapType => [\"map(\", dynamic, \", λ(id x, \", this.fromDynamicExpression(mapType.values, \"x\"), \"))\"],\n            enumType => [\"[\", this.nameForNamedType(enumType), \" withValue:\", dynamic, \"]\"],\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                return nullable !== null ? this.fromDynamicExpression(nullable, dynamic) : dynamic;\n            }\n        );\n    }\n\n    protected toDynamicExpression(t: Type, typed: Sourcelike): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => [\"NSNullify(\", typed, \")\"],\n            _nullType => [\"NSNullify(\", typed, \")\"],\n            // Sadly, KVC\n            _boolType => [typed, \" ? @YES : @NO\"],\n            _integerType => typed,\n            _doubleType => typed,\n            _stringType => typed,\n            arrayType => {\n                if (this.implicitlyConvertsFromJSON(arrayType)) {\n                    // TODO check each value type\n                    return typed;\n                }\n\n                return [\"map(\", typed, \", λ(id x, \", this.toDynamicExpression(arrayType.items, \"x\"), \"))\"];\n            },\n            _classType => [\"[\", typed, \" JSONDictionary]\"],\n            mapType => {\n                if (this.implicitlyConvertsFromJSON(mapType)) {\n                    // TODO check each value type\n                    return typed;\n                }\n\n                return [\"map(\", typed, \", λ(id x, \", this.toDynamicExpression(mapType.values, \"x\"), \"))\"];\n            },\n            _enumType => [\"[\", typed, \" value]\"],\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    if (this.implicitlyConvertsFromJSON(nullable)) {\n                        return [\"NSNullify(\", typed, \")\"];\n                    } else {\n                        return [\"NSNullify(\", this.toDynamicExpression(nullable, typed), \")\"];\n                    }\n                } else {\n                    // TODO support unions\n                    return typed;\n                }\n            }\n        );\n    }\n\n    protected implicitlyConvertsFromJSON(t: Type): boolean {\n        if (t instanceof ClassType) {\n            return false;\n        } else if (t instanceof EnumType) {\n            return false;\n        } else if (t instanceof ArrayType) {\n            return this.implicitlyConvertsFromJSON(t.items);\n        } else if (t instanceof MapType) {\n            return this.implicitlyConvertsFromJSON(t.values);\n        } else if (t.isPrimitive()) {\n            return true;\n        } else if (t instanceof UnionType) {\n            const nullable = nullableFromUnion(t);\n            if (nullable !== null) {\n                return this.implicitlyConvertsFromJSON(nullable);\n            } else {\n                // We don't support unions yet, so this is just untyped\n                return true;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    protected implicitlyConvertsToJSON(t: Type): boolean {\n        return this.implicitlyConvertsFromJSON(t) && \"bool\" !== t.kind;\n    }\n\n    protected emitPropertyAssignment(propertyName: Name, jsonName: string, propertyType: Type): void {\n        const name = [\"_\", propertyName];\n        matchType(\n            propertyType,\n            anyType => this.emitLine(name, \" = \", this.fromDynamicExpression(anyType, name), \";\"),\n            nullType => this.emitLine(name, \" = \", this.fromDynamicExpression(nullType, name), \";\"),\n            boolType => this.emitLine(name, \" = \", this.fromDynamicExpression(boolType, name), \";\"),\n            integerType => this.emitLine(name, \" = \", this.fromDynamicExpression(integerType, name), \";\"),\n            doubleType => this.emitLine(name, \" = \", this.fromDynamicExpression(doubleType, name), \";\"),\n            stringType => this.emitLine(name, \" = \", this.fromDynamicExpression(stringType, name), \";\"),\n            arrayType => this.emitLine(name, \" = \", this.fromDynamicExpression(arrayType, name), \";\"),\n            classType => this.emitLine(name, \" = \", this.fromDynamicExpression(classType, [\"(id)\", name]), \";\"),\n            mapType => {\n                const itemType = mapType.values;\n                this.emitLine(\n                    name,\n                    \" = map(\",\n                    name,\n                    \", \",\n                    [\"λ(id x, \", this.fromDynamicExpression(itemType, \"x\"), \")\"],\n                    \");\"\n                );\n            },\n            enumType => this.emitLine(name, \" = \", this.fromDynamicExpression(enumType, [\"(id)\", name]), \";\"),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    this.emitPropertyAssignment(propertyName, jsonName, nullable);\n                } else {\n                    // TODO This is a union, but for now we just leave it dynamic\n                    this.emitLine(name, \" = \", this.fromDynamicExpression(unionType, name), \";\");\n                }\n            }\n        );\n    }\n\n    protected emitPrivateClassInterface(_: ClassType, name: Name): void {\n        this.emitLine(\"@interface \", name, \" (JSONConversion)\");\n        this.emitLine(\"+ (instancetype)fromJSONDictionary:(NSDictionary *)dict;\");\n        this.emitLine(\"- (NSDictionary *)JSONDictionary;\");\n        this.emitLine(\"@end\");\n    }\n\n    protected pointerAwareTypeName(t: Type | [Sourcelike, string]): Sourcelike {\n        const name = t instanceof Type ? this.objcType(t) : t;\n        const isPointer = name[1] !== \"\";\n        return isPointer ? name : [name, \" \"];\n    }\n\n    private emitNonClassTopLevelTypedef(t: Type, name: Name): void {\n        let nonPointerTypeName = this.objcType(t)[0];\n        this.emitLine(\"typedef \", nonPointerTypeName, \" \", name, \";\");\n    }\n\n    private topLevelFromDataPrototype(name: Name): Sourcelike {\n        return [name, \" *_Nullable \", name, \"FromData(NSData *data, NSError **error)\"];\n    }\n\n    private topLevelFromJSONPrototype(name: Name): Sourcelike {\n        return [name, \" *_Nullable \", name, \"FromJSON(NSString *json, NSStringEncoding encoding, NSError **error)\"];\n    }\n\n    private topLevelToDataPrototype(name: Name, pad = false): Sourcelike {\n        const parameter = this.variableNameForTopLevel(name);\n        const padding = pad ? repeatString(\" \", this.sourcelikeToString(name).length - \"NSData\".length) : \"\";\n        return [\"NSData\", padding, \" *_Nullable \", name, \"ToData(\", name, \" *\", parameter, \", NSError **error)\"];\n    }\n\n    private topLevelToJSONPrototype(name: Name, pad = false): Sourcelike {\n        const parameter = this.variableNameForTopLevel(name);\n        const padding = pad ? repeatString(\" \", this.sourcelikeToString(name).length - \"NSString\".length) : \"\";\n        return [\n            \"NSString\",\n            padding,\n            \" *_Nullable \",\n            name,\n            \"ToJSON(\",\n            name,\n            \" *\",\n            parameter,\n            \", NSStringEncoding encoding, NSError **error)\"\n        ];\n    }\n\n    private emitTopLevelFunctionDeclarations(_: Type, name: Name): void {\n        this.emitLine(this.topLevelFromDataPrototype(name), \";\");\n        this.emitLine(this.topLevelFromJSONPrototype(name), \";\");\n        this.emitLine(this.topLevelToDataPrototype(name, true), \";\");\n        this.emitLine(this.topLevelToJSONPrototype(name, true), \";\");\n    }\n\n    private emitTryCatchAsError(inTry: () => void, inCatch: () => void): void {\n        this.emitLine(\"@try {\");\n        this.indent(inTry);\n        this.emitLine(\"} @catch (NSException *exception) {\");\n        this.indent(() => {\n            this.emitLine(\n                '*error = [NSError errorWithDomain:@\"JSONSerialization\" code:-1 userInfo:@{ @\"exception\": exception }];'\n            );\n            inCatch();\n        });\n        this.emitLine(\"}\");\n    }\n\n    private emitTopLevelFunctions(t: Type, name: Name): void {\n        const parameter = this.variableNameForTopLevel(name);\n\n        this.ensureBlankLine();\n        this.emitMethod(this.topLevelFromDataPrototype(name), () => {\n            this.emitTryCatchAsError(\n                () => {\n                    this.emitLine(\n                        \"id json = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:error];\"\n                    );\n                    this.emitLine(\"return *error ? nil : \", this.fromDynamicExpression(t, \"json\"), \";\");\n                },\n                () => this.emitLine(\"return nil;\")\n            );\n        });\n\n        this.ensureBlankLine();\n        this.emitMethod(this.topLevelFromJSONPrototype(name), () => {\n            this.emitLine(\"return \", name, \"FromData([json dataUsingEncoding:encoding], error);\");\n        });\n\n        this.ensureBlankLine();\n        this.emitMethod(this.topLevelToDataPrototype(name), () => {\n            this.emitTryCatchAsError(\n                () => {\n                    this.emitLine(\"id json = \", this.toDynamicExpression(t, parameter), \";\");\n                    this.emitLine(\n                        \"NSData *data = [NSJSONSerialization dataWithJSONObject:json options:kNilOptions error:error];\"\n                    );\n                    this.emitLine(\"return *error ? nil : data;\");\n                },\n                () => this.emitLine(\"return nil;\")\n            );\n        });\n\n        this.ensureBlankLine();\n        this.emitMethod(this.topLevelToJSONPrototype(name), () => {\n            this.emitLine(\"NSData *data = \", name, \"ToData(\", parameter, \", error);\");\n            this.emitLine(\"return data ? [[NSString alloc] initWithData:data encoding:encoding] : nil;\");\n        });\n    }\n\n    private emitClassInterface(t: ClassType, className: Name): void {\n        const isTopLevel = mapContains(this.topLevels, t);\n\n        this.emitDescription(this.descriptionForType(t));\n\n        this.emitLine(\"@interface \", className, \" : NSObject\");\n        if (DEBUG) this.emitLine(\"@property NSDictionary<NSString *, id> *_json;\");\n        this.emitPropertyTable(t, (name, _json, property) => {\n            let attributes = [\"nonatomic\"];\n            // TODO offer a 'readonly' option\n            // TODO We must add \"copy\" if it's NSCopy, otherwise \"strong\"\n            if (property.type.isNullable) {\n                attributes.push(\"nullable\");\n            }\n\n            attributes.push(this.memoryAttribute(property.type, property.type.isNullable));\n            return [\n                [\"@property \", [\"(\", attributes.join(\", \"), \")\"], \" \"],\n                [this.pointerAwareTypeName(property.type), name, \";\"]\n            ];\n        });\n\n        if (!this._options.justTypes && isTopLevel) {\n            if (t.getProperties().size > 0) this.ensureBlankLine();\n\n            this.emitLine(\n                \"+ (_Nullable instancetype)fromJSON:(NSString *)json encoding:(NSStringEncoding)encoding error:(NSError *_Nullable *)error;\"\n            );\n            this.emitLine(\"+ (_Nullable instancetype)fromData:(NSData *)data error:(NSError *_Nullable *)error;\");\n            this.emitLine(\n                \"- (NSString *_Nullable)toJSON:(NSStringEncoding)encoding error:(NSError *_Nullable *)error;\"\n            );\n            this.emitLine(\"- (NSData *_Nullable)toData:(NSError *_Nullable *)error;\");\n        }\n\n        this.emitLine(\"@end\");\n    }\n\n    protected hasIrregularProperties(t: ClassType): boolean {\n        let irregular = false;\n        this.forEachClassProperty(t, \"none\", (name, jsonName) => {\n            irregular = irregular || stringEscape(jsonName) !== this.sourcelikeToString(name);\n        });\n        return irregular;\n    }\n\n    protected hasUnsafeProperties(t: ClassType): boolean {\n        let unsafe = false;\n        this.forEachClassProperty(t, \"none\", (_, __, property) => {\n            unsafe = unsafe || !this.implicitlyConvertsToJSON(property.type);\n        });\n        return unsafe;\n    }\n\n    // TODO Implement NSCopying\n    private emitClassImplementation(t: ClassType, className: Name): void {\n        const isTopLevel = mapContains(this.topLevels, t);\n\n        const hasIrregularProperties = this.hasIrregularProperties(t);\n        const hasUnsafeProperties = this.hasUnsafeProperties(t);\n\n        this.emitLine(\"@implementation \", className);\n        if (!this._options.justTypes) {\n            this.emitMethod(\"+ (NSDictionary<NSString *, NSString *> *)properties\", () => {\n                this.emitLine(\"static NSDictionary<NSString *, NSString *> *properties;\");\n                this.emitLine(\"return properties = properties ? properties : @{\");\n                this.indent(() => {\n                    this.forEachClassProperty(t, \"none\", (name, jsonName) =>\n                        this.emitLine(`@\"${stringEscape(jsonName)}\": @\"`, name, '\",')\n                    );\n                });\n                this.emitLine(\"};\");\n            });\n            this.ensureBlankLine();\n\n            if (isTopLevel) {\n                this.emitMethod(\n                    \"+ (_Nullable instancetype)fromData:(NSData *)data error:(NSError *_Nullable *)error\",\n                    () => {\n                        this.emitLine(\"return \", className, \"FromData(data, error);\");\n                    }\n                );\n                this.ensureBlankLine();\n                this.emitMethod(\n                    \"+ (_Nullable instancetype)fromJSON:(NSString *)json encoding:(NSStringEncoding)encoding error:(NSError *_Nullable *)error\",\n                    () => {\n                        this.emitLine(\"return \", className, \"FromJSON(json, encoding, error);\");\n                    }\n                );\n                this.ensureBlankLine();\n            }\n\n            this.emitMethod(\"+ (instancetype)fromJSONDictionary:(NSDictionary *)dict\", () => {\n                this.emitLine(\"return dict ? [[\", className, \" alloc] initWithJSONDictionary:dict] : nil;\");\n            });\n            this.ensureBlankLine();\n            this.emitMethod(\"- (instancetype)initWithJSONDictionary:(NSDictionary *)dict\", () => {\n                this.emitBlock(\"if (self = [super init])\", () => {\n                    if (DEBUG) this.emitLine(\"__json = dict;\");\n\n                    this.emitLine(\"[self setValuesForKeysWithDictionary:dict];\");\n                    this.forEachClassProperty(t, \"none\", (name, jsonName, property) => {\n                        if (!this.implicitlyConvertsFromJSON(property.type)) {\n                            this.emitPropertyAssignment(name, jsonName, property.type);\n                        }\n                    });\n                });\n                this.emitLine(\"return self;\");\n            });\n\n            this.ensureBlankLine();\n            this.emitMethod(\"- (void)setValue:(nullable id)value forKey:(NSString *)key\", () => {\n                this.emitLine(\"id resolved = \", className, \".properties[key];\");\n                this.emitLine(\"if (resolved) [super setValue:value forKey:resolved];\");\n            });\n\n            // setNilValueForKey: is automatically invoked by the NSObject setValue:forKey: when it is passed nil for a scalar (a.k.a. non-nullable) object\n            // The approach below sets the scalar to 0 in this case, and therefore assumes an initializer with incomplete data shouldn't be grounds for raising an exception.\n            // Put another way, if the initializer didn't have a key at all, there wouldn't be an exception raised, so sending nil for something probably shouldn't cause one.\n            this.ensureBlankLine();\n            this.emitMethod(\"- (void)setNilValueForKey:(NSString *)key\", () => {\n                this.emitLine(\"id resolved = \", className, \".properties[key];\");\n                this.emitLine(\"if (resolved) [super setValue:@(0) forKey:resolved];\");\n            });\n\n            this.ensureBlankLine();\n            this.emitMethod(\"- (NSDictionary *)JSONDictionary\", () => {\n                if (!hasIrregularProperties && !hasUnsafeProperties) {\n                    this.emitLine(\"return [self dictionaryWithValuesForKeys:\", className, \".properties.allValues];\");\n                    return;\n                }\n\n                this.emitLine(\n                    \"id dict = [[self dictionaryWithValuesForKeys:\",\n                    className,\n                    \".properties.allValues] mutableCopy];\"\n                );\n                this.ensureBlankLine();\n\n                if (hasIrregularProperties) {\n                    this.emitExtraComments(\"Rewrite property names that differ in JSON\");\n                    this.emitBlock([\"for (id jsonName in \", className, \".properties)\"], () => {\n                        this.emitLine(\"id propertyName = \", className, \".properties[jsonName];\");\n                        this.emitBlock(\"if (![jsonName isEqualToString:propertyName])\", () => {\n                            this.emitLine(\"dict[jsonName] = dict[propertyName];\");\n                            this.emitLine(\"[dict removeObjectForKey:propertyName];\");\n                        });\n                    });\n                }\n\n                if (hasUnsafeProperties) {\n                    this.ensureBlankLine();\n                    this.emitExtraComments(\"Map values that need translation\");\n                    this.emitLine(\"[dict addEntriesFromDictionary:@{\");\n                    this.indent(() => {\n                        this.forEachClassProperty(t, \"none\", (propertyName, jsonKey, property) => {\n                            if (!this.implicitlyConvertsToJSON(property.type)) {\n                                const key = stringEscape(jsonKey);\n                                const name = [\"_\", propertyName];\n                                this.emitLine('@\"', key, '\": ', this.toDynamicExpression(property.type, name), \",\");\n                            }\n                        });\n                    });\n                    this.emitLine(\"}];\");\n                }\n\n                this.ensureBlankLine();\n                this.emitLine(\"return dict;\");\n            });\n\n            if (isTopLevel) {\n                this.ensureBlankLine();\n                this.emitMethod(\"- (NSData *_Nullable)toData:(NSError *_Nullable *)error\", () => {\n                    this.emitLine(\"return \", className, \"ToData(self, error);\");\n                });\n                this.ensureBlankLine();\n                this.emitMethod(\n                    \"- (NSString *_Nullable)toJSON:(NSStringEncoding)encoding error:(NSError *_Nullable *)error\",\n                    () => {\n                        this.emitLine(\"return \", className, \"ToJSON(self, encoding, error);\");\n                    }\n                );\n            }\n        }\n\n        this.emitLine(\"@end\");\n    }\n\n    protected emitMark(label: string): void {\n        this.ensureBlankLine();\n        this.emitLine(`#pragma mark - ${label}`);\n        this.ensureBlankLine();\n    }\n\n    protected variableNameForTopLevel(name: Name): Sourcelike {\n        const camelCaseName = modifySource(serialized => {\n            // 1. remove class prefix\n            serialized = serialized.slice(this._classPrefix.length);\n            // 2. camel case\n            return camelCase(serialized);\n        }, name);\n        return camelCaseName;\n    }\n\n    private emitPseudoEnumInterface(enumType: EnumType, enumName: Name): void {\n        this.emitDescription(this.descriptionForType(enumType));\n\n        this.emitLine(\"@interface \", enumName, \" : NSObject\");\n        this.emitLine(\"@property (nonatomic, readonly, copy) NSString *value;\");\n        this.emitLine(\"+ (instancetype _Nullable)withValue:(NSString *)value;\");\n        this.forEachEnumCase(enumType, \"none\", (name, _) => {\n            this.emitLine(\"+ (\", enumName, \" *)\", name, \";\");\n        });\n        this.emitLine(\"@end\");\n    }\n\n    private emitPseudoEnumImplementation(enumType: EnumType, enumName: Name): void {\n        this.emitLine(\"@implementation \", enumName);\n\n        const instances = [enumName, \".\", staticEnumValuesIdentifier];\n        this.emitMethod([\"+ (NSDictionary<NSString *, \", enumName, \" *> *)\", staticEnumValuesIdentifier], () => {\n            this.emitLine(\"static NSDictionary<NSString *, \", enumName, \" *> *\", staticEnumValuesIdentifier, \";\");\n            this.emitLine(\n                \"return \",\n                staticEnumValuesIdentifier,\n                \" = \",\n                staticEnumValuesIdentifier,\n                \" ? \",\n                staticEnumValuesIdentifier,\n                \" : @{\"\n            );\n            this.indent(() => {\n                this.forEachEnumCase(enumType, \"none\", (_, jsonValue) => {\n                    const value = ['@\"', stringEscape(jsonValue), '\"'];\n                    this.emitLine(value, \": [[\", enumName, \" alloc] initWithValue:\", value, \"],\");\n                });\n            });\n            this.emitLine(\"};\");\n        });\n\n        this.ensureBlankLine();\n        this.forEachEnumCase(enumType, \"none\", (name, jsonValue) => {\n            this.emitLine(\n                \"+ (\",\n                enumName,\n                \" *)\",\n                name,\n                \" { return \",\n                instances,\n                '[@\"',\n                stringEscape(jsonValue),\n                '\"]; }'\n            );\n        });\n        this.ensureBlankLine();\n\n        this.emitMethod(\"+ (instancetype _Nullable)withValue:(NSString *)value\", () =>\n            this.emitLine(\"return \", instances, \"[value];\")\n        );\n\n        this.ensureBlankLine();\n        this.emitMethod(\"- (instancetype)initWithValue:(NSString *)value\", () => {\n            this.emitLine(\"if (self = [super init]) _value = value;\");\n            this.emitLine(\"return self;\");\n        });\n        this.ensureBlankLine();\n\n        this.emitLine(\"- (NSUInteger)hash { return _value.hash; }\");\n        this.emitLine(\"@end\");\n    }\n\n    protected emitSourceStructure(proposedFilename: string): void {\n        const fileMode = proposedFilename !== \"stdout\";\n        if (!fileMode) {\n            // We don't have a filename, so we use a top-level name\n            const firstTopLevel = defined(mapFirst(this.topLevels));\n            proposedFilename = this.sourcelikeToString(this.nameForNamedType(firstTopLevel)) + \".m\";\n        }\n\n        const [filename, extension] = splitExtension(proposedFilename);\n\n        if (this._options.features.interface) {\n            this.startFile(filename, \"h\");\n\n            if (this.leadingComments !== undefined) {\n                this.emitComments(this.leadingComments);\n            } else if (!this._options.justTypes) {\n                this.emitCommentLines([\"To parse this JSON:\", \"\"]);\n                this.emitLine(\"//   NSError *error;\");\n                this.forEachTopLevel(\"none\", (t, topLevelName) => {\n                    const fromJsonExpression =\n                        t instanceof ClassType\n                            ? [\"[\", topLevelName, \" fromJSON:json encoding:NSUTF8Encoding error:&error];\"]\n                            : [topLevelName, \"FromJSON(json, NSUTF8Encoding, &error);\"];\n                    this.emitLine(\n                        \"//   \",\n                        topLevelName,\n                        \" *\",\n                        this.variableNameForTopLevel(topLevelName),\n                        \" = \",\n                        fromJsonExpression\n                    );\n                });\n            }\n\n            this.ensureBlankLine();\n            this.emitLine(\"#import <Foundation/Foundation.h>\");\n            this.ensureBlankLine();\n\n            // Emit @class declarations for top-level array+maps and classes\n            this.forEachNamedType(\n                \"none\",\n                (_: ClassType, className: Name) => this.emitLine(\"@class \", className, \";\"),\n                (_, enumName) => this.emitLine(\"@class \", enumName, \";\"),\n                () => null\n            );\n            this.ensureBlankLine();\n\n            this.ensureBlankLine();\n            this.emitLine(\"NS_ASSUME_NONNULL_BEGIN\");\n            this.ensureBlankLine();\n\n            if (this.haveEnums) {\n                this.emitMark(\"Boxed enums\");\n                this.forEachEnum(\"leading-and-interposing\", (t, n) => this.emitPseudoEnumInterface(t, n));\n            }\n\n            // Emit interfaces for top-level array+maps and classes\n            this.forEachTopLevel(\n                \"leading-and-interposing\",\n                (t, n) => this.emitNonClassTopLevelTypedef(t, n),\n                t => !(t instanceof ClassType)\n            );\n\n            const hasTopLevelNonClassTypes = iterableSome(this.topLevels, ([_, t]) => !(t instanceof ClassType));\n            if (!this._options.justTypes && (hasTopLevelNonClassTypes || this._options.marshallingFunctions)) {\n                this.ensureBlankLine();\n                this.emitMark(\"Top-level marshaling functions\");\n                this.forEachTopLevel(\n                    \"leading-and-interposing\",\n                    (t, n) => this.emitTopLevelFunctionDeclarations(t, n),\n                    // Objective-C developers get freaked out by C functions, so we don't\n                    // declare them for top-level object types (we always need them for non-object types)\n                    t => this._options.marshallingFunctions || !(t instanceof ClassType)\n                );\n            }\n\n            this.emitMark(\"Object interfaces\");\n            this.forEachNamedType(\n                \"leading-and-interposing\",\n                (c: ClassType, className: Name) => this.emitClassInterface(c, className),\n                () => null,\n                () => null\n            );\n\n            this.ensureBlankLine();\n            this.emitLine(\"NS_ASSUME_NONNULL_END\");\n            this.finishFile();\n        }\n\n        if (this._options.features.implementation) {\n            this.startFile(filename, extension);\n\n            this.emitLine(`#import \"${filename}.h\"`);\n            this.ensureBlankLine();\n\n            if (!this._options.justTypes) {\n                this.ensureBlankLine();\n                this.emitExtraComments(\"Shorthand for simple blocks\");\n                this.emitLine(\"#define λ(decl, expr) (^(decl) { return (expr); })\");\n                this.ensureBlankLine();\n                this.emitExtraComments(\"nil → NSNull conversion for JSON dictionaries\");\n                this.emitBlock(\"static id NSNullify(id _Nullable x)\", () =>\n                    this.emitLine(\"return (x == nil || x == NSNull.null) ? NSNull.null : x;\")\n                );\n                this.ensureBlankLine();\n                this.emitLine(\"NS_ASSUME_NONNULL_BEGIN\");\n                this.ensureBlankLine();\n\n                // We wouldn't need to emit these private iterfaces if we emitted implementations in forward-order\n                // but the code is more readable and explicit if we do this.\n                if (this._options.extraComments) {\n                    this.emitMark(\"Private model interfaces\");\n                }\n\n                this.forEachNamedType(\n                    \"leading-and-interposing\",\n                    (c: ClassType, className: Name) => this.emitPrivateClassInterface(c, className),\n                    () => null,\n                    () => null\n                );\n\n                if (this.haveEnums) {\n                    if (this._options.extraComments) {\n                        this.ensureBlankLine();\n                        this.emitExtraComments(\n                            \"These enum-like reference types are needed so that enum\",\n                            \"values can be contained by NSArray and NSDictionary.\"\n                        );\n                        this.ensureBlankLine();\n                    }\n\n                    this.forEachEnum(\"leading-and-interposing\", (t, n) => this.emitPseudoEnumImplementation(t, n));\n                }\n\n                this.ensureBlankLine();\n                this.emitMapFunction();\n                this.ensureBlankLine();\n\n                this.emitMark(\"JSON serialization\");\n                this.forEachTopLevel(\"leading-and-interposing\", (t, n) => this.emitTopLevelFunctions(t, n));\n            }\n\n            this.forEachNamedType(\n                \"leading-and-interposing\",\n                (c: ClassType, className: Name) => this.emitClassImplementation(c, className),\n                () => null,\n                () => null\n            );\n\n            if (!this._options.justTypes) {\n                this.ensureBlankLine();\n                this.emitLine(\"NS_ASSUME_NONNULL_END\");\n            }\n\n            this.finishFile();\n        }\n    }\n\n    private get needsMap(): boolean {\n        // TODO this isn't complete (needs union support, for example)\n        function needsMap(t: Type): boolean {\n            return (\n                t instanceof MapType ||\n                t instanceof ArrayType ||\n                (t instanceof ClassType && mapSome(t.getProperties(), p => needsMap(p.type)))\n            );\n        }\n\n        return iterableSome(this.typeGraph.allTypesUnordered(), needsMap);\n    }\n\n    protected emitMapFunction(): void {\n        if (this.needsMap) {\n            this.emitMultiline(`static id map(id collection, id (^f)(id value)) {\n    id result = nil;\n    if ([collection isKindOfClass:NSArray.class]) {\n        result = [NSMutableArray arrayWithCapacity:[collection count]];\n        for (id x in collection) [result addObject:f(x)];\n    } else if ([collection isKindOfClass:NSDictionary.class]) {\n        result = [NSMutableDictionary dictionaryWithCapacity:[collection count]];\n        for (id key in collection) [result setObject:f([collection objectForKey:key]) forKey:key];\n    }\n    return result;\n}`);\n        }\n    }\n}\n","import * as _ from \"lodash\";\n\nimport { type PrimitiveStringTypeKind, type StringTypeMapping, type TransformedStringTypeKind } from \"..\";\nimport { anyTypeIssueAnnotation, nullTypeIssueAnnotation } from \"../Annotation\";\nimport { ConvenienceRenderer, type ForbiddenWordsInfo } from \"../ConvenienceRenderer\";\nimport { DependencyName, type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { BooleanOption, type Option, type OptionValues, getOptionValues } from \"../RendererOptions\";\nimport { type Sourcelike, maybeAnnotated } from \"../Source\";\nimport { AcronymStyleOptions, acronymOption, acronymStyle } from \"../support/Acronyms\";\nimport {\n    allLowerWordStyle,\n    allUpperWordStyle,\n    combineWords,\n    escapeNonPrintableMapper,\n    firstUpperWordStyle,\n    isAscii,\n    isDigit,\n    isLetter,\n    splitIntoWords,\n    standardUnicodeHexEscape,\n    utf16ConcatMap,\n    utf16LegalizeCharacters\n} from \"../support/Strings\";\nimport { defined } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport { type ClassProperty, type ClassType, type EnumType, type Type, type UnionType } from \"../Type\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { directlyReachableSingleNamedType, matchType, nullableFromUnion } from \"../TypeUtils\";\n\nexport const phpOptions = {\n    withGet: new BooleanOption(\"with-get\", \"Create Getter\", true),\n    fastGet: new BooleanOption(\"fast-get\", \"getter without validation\", false),\n    withSet: new BooleanOption(\"with-set\", \"Create Setter\", false),\n    withClosing: new BooleanOption(\"with-closing\", \"PHP Closing Tag\", false),\n    acronymStyle: acronymOption(AcronymStyleOptions.Pascal)\n};\n\nexport class PhpTargetLanguage extends TargetLanguage {\n    public constructor() {\n        super(\"PHP\", [\"php\"], \"php\");\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return _.values(phpOptions);\n    }\n\n    public get supportsUnionsWithBothNumberTypes(): boolean {\n        return true;\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): PhpRenderer {\n        const options = getOptionValues(phpOptions, untypedOptionValues);\n        return new PhpRenderer(this, renderContext, options);\n    }\n\n    public get stringTypeMapping(): StringTypeMapping {\n        const mapping: Map<TransformedStringTypeKind, PrimitiveStringTypeKind> = new Map();\n        mapping.set(\"date\", \"date\"); // TODO is not implemented yet\n        mapping.set(\"time\", \"time\"); // TODO is not implemented yet\n        mapping.set(\"uuid\", \"uuid\"); // TODO is not implemented yet\n        mapping.set(\"date-time\", \"date-time\");\n        return mapping;\n    }\n}\n\nexport const stringEscape = utf16ConcatMap(escapeNonPrintableMapper(isAscii, standardUnicodeHexEscape));\n\nfunction isStartCharacter(codePoint: number): boolean {\n    if (codePoint === 0x5f) return true; // underscore\n    return isAscii(codePoint) && isLetter(codePoint);\n}\n\nfunction isPartCharacter(codePoint: number): boolean {\n    return isStartCharacter(codePoint) || (isAscii(codePoint) && isDigit(codePoint));\n}\n\nconst legalizeName = utf16LegalizeCharacters(isPartCharacter);\n\nexport function phpNameStyle(\n    startWithUpper: boolean,\n    upperUnderscore: boolean,\n    original: string,\n    acronymsStyle: (s: string) => string = allUpperWordStyle\n): string {\n    const words = splitIntoWords(original);\n    return combineWords(\n        words,\n        legalizeName,\n        upperUnderscore ? allUpperWordStyle : startWithUpper ? firstUpperWordStyle : allLowerWordStyle,\n        upperUnderscore ? allUpperWordStyle : firstUpperWordStyle,\n        upperUnderscore || startWithUpper ? allUpperWordStyle : allLowerWordStyle,\n        acronymsStyle,\n        upperUnderscore ? \"_\" : \"\",\n        isStartCharacter\n    );\n}\n\nexport interface FunctionNames {\n    readonly from: Name;\n    readonly getter: Name;\n    readonly sample: Name;\n    readonly setter: Name;\n    readonly to: Name;\n    readonly validate: Name;\n}\n\nexport class PhpRenderer extends ConvenienceRenderer {\n    private readonly _gettersAndSettersForPropertyName = new Map<Name, FunctionNames>();\n\n    private _haveEmittedLeadingComments = false;\n\n    protected readonly _converterClassname: string = \"Converter\";\n\n    protected readonly _converterKeywords: string[] = [];\n\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        protected readonly _options: OptionValues<typeof phpOptions>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected forbiddenForObjectProperties(_c: ClassType, _className: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return this.getNameStyling(\"typeNamingFunction\");\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return this.getNameStyling(\"propertyNamingFunction\");\n    }\n\n    protected makeUnionMemberNamer(): Namer {\n        return this.getNameStyling(\"propertyNamingFunction\");\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return this.getNameStyling(\"enumCaseNamingFunction\");\n    }\n\n    protected unionNeedsName(u: UnionType): boolean {\n        return nullableFromUnion(u) === null;\n    }\n\n    protected namedTypeToNameForTopLevel(type: Type): Type | undefined {\n        return directlyReachableSingleNamedType(type);\n    }\n\n    protected makeNamesForPropertyGetterAndSetter(\n        _c: ClassType,\n        _className: Name,\n        _p: ClassProperty,\n        _jsonName: string,\n        name: Name\n    ): FunctionNames {\n        const getterName = new DependencyName(\n            this.getNameStyling(\"propertyNamingFunction\"),\n            name.order,\n            lookup => `get_${lookup(name)}`\n        );\n        const setterName = new DependencyName(\n            this.getNameStyling(\"propertyNamingFunction\"),\n            name.order,\n            lookup => `set_${lookup(name)}`\n        );\n        const validateName = new DependencyName(\n            this.getNameStyling(\"propertyNamingFunction\"),\n            name.order,\n            lookup => `validate_${lookup(name)}`\n        );\n        const fromName = new DependencyName(\n            this.getNameStyling(\"propertyNamingFunction\"),\n            name.order,\n            lookup => `from_${lookup(name)}`\n        );\n        const toName = new DependencyName(\n            this.getNameStyling(\"propertyNamingFunction\"),\n            name.order,\n            lookup => `to_${lookup(name)}`\n        );\n        const sampleName = new DependencyName(\n            this.getNameStyling(\"propertyNamingFunction\"),\n            name.order,\n            lookup => `sample_${lookup(name)}`\n        );\n        return {\n            getter: getterName,\n            setter: setterName,\n            validate: validateName,\n            from: fromName,\n            to: toName,\n            sample: sampleName\n        };\n    }\n\n    protected makePropertyDependencyNames(\n        c: ClassType,\n        className: Name,\n        p: ClassProperty,\n        jsonName: string,\n        name: Name\n    ): Name[] {\n        const getterAndSetterNames = this.makeNamesForPropertyGetterAndSetter(c, className, p, jsonName, name);\n        this._gettersAndSettersForPropertyName.set(name, getterAndSetterNames);\n        return [\n            getterAndSetterNames.getter,\n            getterAndSetterNames.setter,\n            getterAndSetterNames.validate,\n            getterAndSetterNames.to,\n            getterAndSetterNames.from,\n            getterAndSetterNames.sample\n        ];\n    }\n\n    private getNameStyling(convention: string): Namer {\n        const styling: { [key: string]: Namer } = {\n            typeNamingFunction: funPrefixNamer(\"types\", n =>\n                phpNameStyle(true, false, n, acronymStyle(this._options.acronymStyle))\n            ),\n            propertyNamingFunction: funPrefixNamer(\"properties\", n =>\n                phpNameStyle(false, false, n, acronymStyle(this._options.acronymStyle))\n            ),\n            enumCaseNamingFunction: funPrefixNamer(\"enum-cases\", n =>\n                phpNameStyle(true, true, n, acronymStyle(this._options.acronymStyle))\n            )\n        };\n        return styling[convention];\n    }\n\n    protected startFile(_basename: Sourcelike): void {\n        this.ensureBlankLine();\n        if (!this._haveEmittedLeadingComments && this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n            this.ensureBlankLine();\n            this._haveEmittedLeadingComments = true;\n        }\n    }\n\n    protected finishFile(): void {\n        // empty\n    }\n\n    protected emitFileHeader(fileName: Sourcelike, _imports: string[]): void {\n        this.startFile(fileName);\n        this.emitLine(\"// This is a autogenerated file:\", fileName);\n        this.ensureBlankLine();\n    }\n\n    public emitDescriptionBlock(lines: Sourcelike[]): void {\n        this.emitCommentLines(lines, { lineStart: \" * \", beforeComment: \"/**\", afterComment: \" */\" });\n    }\n\n    public emitBlock(line: Sourcelike, f: () => void): void {\n        this.emitLine(line, \" {\");\n        this.indent(f);\n        this.emitLine(\"}\");\n    }\n\n    protected phpType(_reference: boolean, t: Type, isOptional = false, prefix = \"?\", suffix = \"\"): Sourcelike {\n        function optionalize(s: Sourcelike): Sourcelike {\n            return [isOptional ? prefix : \"\", s, isOptional ? suffix : \"\"];\n        }\n\n        return matchType<Sourcelike>(\n            t,\n            _anyType => maybeAnnotated(isOptional, anyTypeIssueAnnotation, \"Object\"),\n            _nullType => maybeAnnotated(isOptional, nullTypeIssueAnnotation, \"Object\"),\n            _boolType => optionalize(\"bool\"),\n            _integerType => optionalize(\"int\"),\n            _doubleType => optionalize(\"float\"),\n            _stringType => optionalize(\"string\"),\n            _arrayType => optionalize(\"array\"),\n            classType => optionalize(this.nameForNamedType(classType)),\n            _mapType => optionalize(\"stdClass\"),\n            enumType => optionalize(this.nameForNamedType(enumType)),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) return this.phpType(true, nullable, true, prefix, suffix);\n                return this.nameForNamedType(unionType);\n            },\n            transformedStringType => {\n                if (transformedStringType.kind === \"time\") {\n                    throw Error('transformedStringType.kind === \"time\"');\n                }\n\n                if (transformedStringType.kind === \"date\") {\n                    throw Error('transformedStringType.kind === \"date\"');\n                }\n\n                if (transformedStringType.kind === \"date-time\") {\n                    return \"DateTime\";\n                }\n\n                if (transformedStringType.kind === \"uuid\") {\n                    throw Error('transformedStringType.kind === \"uuid\"');\n                }\n\n                return \"string\";\n            }\n        );\n    }\n\n    protected phpDocConvertType(className: Name, t: Type): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => \"any\",\n            _nullType => \"null\",\n            _boolType => \"bool\",\n            _integerType => \"int\",\n            _doubleType => \"float\",\n            _stringType => \"string\",\n            arrayType => [this.phpDocConvertType(className, arrayType.items), \"[]\"],\n            _classType => _classType.getCombinedName(),\n            _mapType => \"stdClass\",\n            enumType => this.nameForNamedType(enumType),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    return [this.phpDocConvertType(className, nullable), \"|null\"];\n                }\n\n                throw Error(\"union are not supported\");\n            },\n            transformedStringType => {\n                if (transformedStringType.kind === \"date-time\") {\n                    return \"DateTime\";\n                }\n\n                throw Error('transformedStringType.kind === \"unknown\"');\n            }\n        );\n    }\n\n    protected phpConvertType(className: Name, t: Type): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => \"any\",\n            _nullType => \"null\",\n            _boolType => \"bool\",\n            _integerType => \"int\",\n            _doubleType => \"float\",\n            _stringType => \"string\",\n            _arrayType => \"array\",\n            _classType => \"stdClass\",\n            _mapType => \"stdClass\",\n            _enumType => \"string\", // TODO number this.nameForNamedType(enumType),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    return [\"?\", this.phpConvertType(className, nullable)];\n                }\n\n                throw Error(\"union are not supported\");\n            },\n            transformedStringType => {\n                if (transformedStringType.kind === \"date-time\") {\n                    return \"string\";\n                }\n\n                throw Error('transformedStringType.kind === \"unknown\"');\n            }\n        );\n    }\n\n    protected phpToObjConvert(className: Name, t: Type, lhs: Sourcelike[], args: Sourcelike[]): void {\n        matchType(\n            t,\n            _anyType => this.emitLine(...lhs, ...args, \"; /*any*/\"),\n            _nullType => this.emitLine(...lhs, ...args, \"; /*null*/\"),\n            _boolType => this.emitLine(...lhs, ...args, \"; /*bool*/\"),\n            _integerType => this.emitLine(...lhs, ...args, \"; /*int*/\"),\n            _doubleType => this.emitLine(...lhs, ...args, \"; /*float*/\"),\n            _stringType => this.emitLine(...lhs, ...args, \"; /*string*/\"),\n            arrayType => {\n                this.emitLine(...lhs, \"array_map(function ($value) {\");\n                this.indent(() => {\n                    this.phpToObjConvert(className, arrayType.items, [\"return \"], [\"$value\"]);\n                    // this.emitLine(\"return $tmp;\");\n                });\n                this.emitLine(\"}, \", ...args, \");\");\n            },\n            _classType => this.emitLine(...lhs, ...args, \"->to(); \", \"/*class*/\"),\n            mapType => {\n                this.emitBlock([\"function to($my): stdClass\"], () => {\n                    this.emitLine(\"$out = new stdClass();\");\n                    this.emitBlock([\"foreach ($my as $k => $v)\"], () => {\n                        this.phpToObjConvert(className, mapType.values, [\"$my->$k = \"], [\"$v\"]);\n                    });\n                    this.emitLine(\"return $out;\");\n                });\n                this.emitLine(\"return to(\", ...args, \");\");\n            },\n            enumType => this.emitLine(...lhs, this.nameForNamedType(enumType), \"::to(\", ...args, \"); \", \"/*enum*/\"),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    this.emitLine(\"if (!is_null(\", ...args, \")) {\");\n                    this.indent(() => this.phpToObjConvert(className, nullable, lhs, args));\n                    this.emitLine(\"} else {\");\n                    this.indent(() => this.emitLine(...lhs, \" null;\"));\n                    this.emitLine(\"}\");\n                    return;\n                }\n\n                throw Error(\"union are not supported\");\n            },\n            transformedStringType => {\n                if (transformedStringType.kind === \"date-time\") {\n                    this.emitLine(...lhs, ...args, \"->format(DateTimeInterface::ISO8601);\");\n                    return;\n                }\n\n                throw Error('transformedStringType.kind === \"unknown\"');\n            }\n        );\n    }\n\n    private transformDateTime(className: Name, attrName: Sourcelike, scopeAttrName: Sourcelike[]): void {\n        this.emitBlock([\"if (!is_a(\", scopeAttrName, \", 'DateTime'))\"], () =>\n            this.emitLine(\"throw new Exception('Attribute Error:\", className, \"::\", attrName, \"');\")\n        );\n        // if (lhs !== undefined) {\n        //     this.emitLine(lhs, \"$tmp;\");\n        // }\n    }\n\n    protected phpFromObjConvert(className: Name, t: Type, lhs: Sourcelike[], args: Sourcelike[]): void {\n        matchType(\n            t,\n            _anyType => this.emitLine(...lhs, ...args, \"; /*any*/\"),\n            _nullType => this.emitLine(...lhs, ...args, \"; /*null*/\"),\n            _boolType => this.emitLine(...lhs, ...args, \"; /*bool*/\"),\n            _integerType => this.emitLine(...lhs, ...args, \"; /*int*/\"),\n            _doubleType => this.emitLine(...lhs, ...args, \"; /*float*/\"),\n            _stringType => this.emitLine(...lhs, ...args, \"; /*string*/\"),\n            arrayType => {\n                this.emitLine(...lhs, \" array_map(function ($value) {\");\n                this.indent(() => {\n                    this.phpFromObjConvert(className, arrayType.items, [\"return \"], [\"$value\"]);\n                    // this.emitLine(\"return $tmp;\");\n                });\n                this.emitLine(\"}, \", ...args, \");\");\n            },\n            classType =>\n                this.emitLine(...lhs, this.nameForNamedType(classType), \"::from(\", ...args, \"); \", \"/*class*/\"),\n            mapType => {\n                this.emitBlock([\"function from($my): stdClass\"], () => {\n                    this.emitLine(\"$out = new stdClass();\");\n                    this.emitBlock([\"foreach ($my as $k => $v)\"], () => {\n                        this.phpFromObjConvert(className, mapType.values, [\"$out->$k = \"], [\"$v\"]);\n                    });\n                    this.emitLine(\"return $out;\");\n                });\n                this.emitLine(\"return from(\", ...args, \");\");\n            },\n            enumType => this.emitLine(...lhs, this.nameForNamedType(enumType), \"::from(\", ...args, \"); \", \"/*enum*/\"),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    this.emitLine(\"if (!is_null(\", ...args, \")) {\");\n                    this.indent(() => this.phpFromObjConvert(className, nullable, lhs, args));\n                    this.emitLine(\"} else {\");\n                    this.indent(() => this.emitLine(\"return null;\"));\n                    this.emitLine(\"}\");\n                    return;\n                }\n\n                throw Error(\"union are not supported\");\n            },\n            transformedStringType => {\n                if (transformedStringType.kind === \"date-time\") {\n                    this.emitLine(\"$tmp = \", \"DateTime::createFromFormat(DateTimeInterface::ISO8601, \", args, \");\");\n                    this.transformDateTime(className, \"\", [\"$tmp\"]);\n                    this.emitLine(\"return $tmp;\");\n                    return;\n                }\n\n                throw Error('transformedStringType.kind === \"unknown\"');\n            }\n        );\n    }\n\n    protected phpSampleConvert(\n        className: Name,\n        t: Type,\n        lhs: Sourcelike[],\n        args: Sourcelike[],\n        idx: number,\n        suffix: Sourcelike\n    ): void {\n        matchType(\n            t,\n            _anyType =>\n                this.emitLine(\n                    ...lhs,\n                    \"'AnyType::\",\n                    className,\n                    \"::\",\n                    args,\n                    \"::\" + idx,\n                    \"'\",\n                    suffix,\n                    \"/*\",\n                    \"\" + idx,\n                    \":\",\n                    args,\n                    \"*/\"\n                ),\n            _nullType => this.emitLine(...lhs, \"null\", suffix, \" /*\", \"\" + idx, \":\", args, \"*/\"),\n            _boolType => this.emitLine(...lhs, \"true\", suffix, \" /*\", \"\" + idx, \":\", args, \"*/\"),\n            _integerType => this.emitLine(...lhs, \"\" + idx, suffix, \" /*\", \"\" + idx, \":\", args, \"*/\"),\n            _doubleType => this.emitLine(...lhs, \"\" + (idx + idx / 1000), suffix, \" /*\", \"\" + idx, \":\", args, \"*/\"),\n            _stringType =>\n                this.emitLine(\n                    ...lhs,\n                    \"'\",\n                    className,\n                    \"::\",\n                    args,\n                    \"::\" + idx,\n                    \"'\",\n                    suffix,\n                    \" /*\",\n                    \"\" + idx,\n                    \":\",\n                    args,\n                    \"*/\"\n                ),\n            arrayType => {\n                this.emitLine(...lhs, \" array(\");\n                this.indent(() => {\n                    this.phpSampleConvert(className, arrayType.items, [], [], idx, \"\");\n                });\n                this.emitLine(\"); /* \", \"\" + idx, \":\", args, \"*/\");\n            },\n            classType =>\n                this.emitLine(\n                    ...lhs,\n                    this.nameForNamedType(classType),\n                    \"::sample()\",\n                    suffix,\n                    \" /*\",\n                    \"\" + idx,\n                    \":\",\n                    args,\n                    \"*/\"\n                ),\n            mapType => {\n                this.emitBlock([\"function sample(): stdClass\"], () => {\n                    this.emitLine(\"$out = new stdClass();\");\n                    this.phpSampleConvert(className, mapType.values, [\"$out->{'\", className, \"'} = \"], args, idx, \";\");\n                    this.emitLine(\"return $out;\");\n                });\n                this.emitLine(\"return sample();\");\n            },\n            enumType => this.emitLine(...lhs, this.nameForNamedType(enumType), \"::sample()\", suffix, \" /*enum*/\"),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    this.phpSampleConvert(className, nullable, lhs, args, idx, suffix);\n                    return;\n                }\n\n                throw Error(\"union are not supported:\" + unionType);\n            },\n            transformedStringType => {\n                if (transformedStringType.kind === \"date-time\") {\n                    const x = _.pad(\"\" + (1 + (idx % 31)), 2, \"0\");\n                    this.emitLine(\n                        ...lhs,\n                        \"DateTime::createFromFormat(DateTimeInterface::ISO8601, '\",\n                        `2020-12-${x}T12:${x}:${x}+00:00`,\n                        \"')\",\n                        suffix\n                    );\n                    // this.emitLine(\"return sample();\");\n                    return;\n                }\n\n                throw Error('transformedStringType.kind === \"unknown\"');\n            }\n        );\n    }\n\n    private phpValidate(className: Name, t: Type, attrName: Sourcelike, scopeAttrName: string): void {\n        const is = (isfn: string, myT: Name = className): void => {\n            this.emitBlock([\"if (!\", isfn, \"(\", scopeAttrName, \"))\"], () =>\n                this.emitLine('throw new Exception(\"Attribute Error:', myT, \"::\", attrName, '\");')\n            );\n        };\n\n        matchType(\n            t,\n            _anyType => is(\"defined\"),\n            _nullType => is(\"is_null\"),\n            _boolType => is(\"is_bool\"),\n            _integerType => is(\"is_integer\"),\n            _doubleType => is(\"is_float\"),\n            _stringType => is(\"is_string\"),\n            arrayType => {\n                is(\"is_array\");\n                this.emitLine(\"array_walk(\", scopeAttrName, \", function(\", scopeAttrName, \"_v) {\");\n                this.indent(() => {\n                    this.phpValidate(className, arrayType.items, attrName, `${scopeAttrName}_v`);\n                });\n                this.emitLine(\"});\");\n            },\n            _classType => {\n                this.emitLine(scopeAttrName, \"->validate();\");\n            },\n            mapType => {\n                this.emitLine(\"foreach (\", scopeAttrName, \" as $k => $v) {\");\n                this.indent(() => {\n                    this.phpValidate(className, mapType.values, attrName, \"$v\");\n                });\n                this.emitLine(\"}\");\n            },\n            enumType => {\n                this.emitLine(this.phpType(false, enumType), \"::to(\", scopeAttrName, \");\");\n            },\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    this.emitBlock([\"if (!is_null(\", scopeAttrName, \"))\"], () => {\n                        this.phpValidate(className, nullable, attrName, scopeAttrName);\n                    });\n                    return;\n                }\n\n                throw Error(\"not implemented\");\n            },\n            transformedStringType => {\n                if (transformedStringType.kind === \"date-time\") {\n                    this.transformDateTime(className, attrName, [scopeAttrName]);\n                    return;\n                }\n\n                throw Error(`transformedStringType.kind === ${transformedStringType.kind}`);\n            }\n        );\n    }\n\n    protected emitFromMethod(\n        names: FunctionNames,\n        p: ClassProperty,\n        className: Name,\n        _name: Name,\n        desc?: string[]\n    ): void {\n        this.emitLine(\"/**\");\n        if (desc !== undefined) {\n            this.emitLine(\" * \", desc);\n            this.emitLine(\" *\");\n        }\n\n        // this.emitLine(\" * @param \", this.phpType(false, p.type, false, \"\", \"|null\"));\n        this.emitLine(\" * @param \", this.phpConvertType(className, p.type), \" $value\");\n        this.emitLine(\" * @throws Exception\");\n        this.emitLine(\" * @return \", this.phpType(false, p.type));\n        this.emitLine(\" */\");\n        this.emitBlock(\n            [\n                \"public static function \",\n                names.from,\n                \"(\",\n                this.phpConvertType(className, p.type),\n                \" $value): \",\n                this.phpType(false, p.type)\n            ],\n            () => {\n                this.phpFromObjConvert(className, p.type, [\"return \"], [\"$value\"]);\n                // this.emitLine(\"return $ret;\");\n            }\n        );\n    }\n\n    protected emitToMethod(names: FunctionNames, p: ClassProperty, className: Name, name: Name, desc?: string[]): void {\n        this.emitLine(\"/**\");\n        if (desc !== undefined) {\n            this.emitLine(\" * \", desc);\n            this.emitLine(\" *\");\n        }\n\n        this.emitLine(\" * @throws Exception\");\n        this.emitLine(\" * @return \", this.phpConvertType(className, p.type));\n        this.emitLine(\" */\");\n        this.emitBlock([\"public function \", names.to, \"(): \", this.phpConvertType(className, p.type)], () => {\n            this.emitBlock([\"if (\", className, \"::\", names.validate, \"($this->\", name, \")) \"], () => {\n                this.phpToObjConvert(className, p.type, [\"return \"], [\"$this->\", name]);\n            });\n            this.emitLine(\"throw new Exception('never get to this \", className, \"::\", name, \"');\");\n        });\n    }\n\n    protected emitValidateMethod(\n        names: FunctionNames,\n        p: ClassProperty,\n        className: Name,\n        name: Name,\n        desc?: string[]\n    ): void {\n        this.emitLine(\"/**\");\n        if (desc !== undefined) {\n            this.emitLine(\" * \", desc);\n            this.emitLine(\" *\");\n        }\n\n        this.emitLine(\" * @param \", this.phpType(false, p.type, false, \"\", \"|null\"));\n        this.emitLine(\" * @return bool\");\n        this.emitLine(\" * @throws Exception\");\n        this.emitLine(\" */\");\n        this.emitBlock(\n            [\"public static function \", names.validate, \"(\", this.phpType(false, p.type), \" $value): bool\"],\n            () => {\n                this.phpValidate(className, p.type, name, \"$value\");\n                this.emitLine(\"return true;\");\n            }\n        );\n    }\n\n    protected emitGetMethod(\n        names: FunctionNames,\n        p: ClassProperty,\n        className: Name,\n        name: Name,\n        desc?: string[]\n    ): void {\n        if (this._options.withGet) {\n            this.emitLine(\"/**\");\n            if (desc !== undefined) {\n                this.emitLine(\" * \", desc);\n                this.emitLine(\" *\");\n            }\n\n            if (!this._options.fastGet) {\n                this.emitLine(\" * @throws Exception\");\n            }\n\n            const rendered = this.phpType(false, p.type);\n            this.emitLine(\" * @return \", rendered);\n            this.emitLine(\" */\");\n            this.emitBlock([\"public function \", names.getter, \"(): \", rendered], () => {\n                if (!this._options.fastGet) {\n                    this.emitBlock([\"if (\", className, \"::\", names.validate, \"($this->\", name, \")) \"], () => {\n                        this.emitLine(\"return $this->\", name, \";\");\n                    });\n                    this.emitLine(\n                        \"throw new Exception('never get to \",\n                        names.getter,\n                        \" \",\n                        className,\n                        \"::\",\n                        name,\n                        \"');\"\n                    );\n                } else {\n                    this.emitLine(\"return $this->\", name, \";\");\n                }\n            });\n        }\n    }\n\n    protected emitSetMethod(\n        names: FunctionNames,\n        p: ClassProperty,\n        className: Name,\n        name: Name,\n        desc?: string[]\n    ): void {\n        if (this._options.withSet) {\n            this.emitLine(\"/**\");\n            if (desc !== undefined) {\n                this.emitLine(\" * \", desc);\n                this.emitLine(\" *\");\n            }\n\n            this.emitLine(\" * @param \", this.phpType(false, p.type, false, \"\", \"|null\"));\n            this.emitLine(\" * @throws Exception\");\n            this.emitLine(\" */\");\n            this.emitBlock([\"public function \", names.setter, \"(\", this.phpType(false, p.type), \" $value)\"], () => {\n                this.emitBlock([\"if (\", className, \"::\", names.validate, \"($value)) \"], () => {\n                    this.emitLine(\"$this->\", name, \" = $value;\");\n                });\n            });\n        }\n    }\n\n    protected emitSampleMethod(\n        names: FunctionNames,\n        p: ClassProperty,\n        className: Name,\n        name: Name,\n        desc: string[] | undefined,\n        idx: number\n    ): void {\n        if (this._options.withGet) {\n            this.emitLine(\"/**\");\n            if (desc !== undefined) {\n                this.emitLine(\" * \", desc);\n                this.emitLine(\" *\");\n            }\n\n            const rendered = this.phpType(false, p.type);\n            this.emitLine(\" * @return \", rendered);\n            this.emitLine(\" */\");\n            this.emitBlock([\"public static function \", names.sample, \"(): \", rendered], () => {\n                this.phpSampleConvert(className, p.type, [\"return \"], [name], idx, \";\");\n            });\n        }\n    }\n\n    protected emitClassDefinition(c: ClassType, className: Name): void {\n        this.emitFileHeader(className, []);\n\n        this.emitBlock([\"class \", className], () => {\n            this.forEachClassProperty(c, \"none\", (name, jsonName, p) => {\n                this.emitLine(\n                    \"private \",\n                    this.phpType(false, p.type),\n                    \" $\",\n                    name,\n                    \"; // json:\",\n                    jsonName,\n                    \" \",\n                    p.type.isNullable ? \"Optional\" : \"Required\"\n                );\n            });\n\n            this.ensureBlankLine();\n            const comments: Sourcelike[][] = [];\n            const args: Sourcelike[][] = [];\n            let prefix = \"\";\n            this.forEachClassProperty(c, \"none\", (name, __, p) => {\n                args.push([prefix, this.phpType(false, p.type), \" $\", name]);\n                prefix = \", \";\n                comments.push([\" * @param \", this.phpType(false, p.type, false, \"\", \"|null\"), \" $\", name, \"\\n\"]);\n            });\n            this.emitBlock([\"/**\\n\", ...comments, \" */\\n\", \"public function __construct(\", ...args, \")\"], () => {\n                this.forEachClassProperty(c, \"none\", name => {\n                    this.emitLine(\"$this->\", name, \" = $\", name, \";\");\n                });\n            });\n\n            let idx = 31;\n            this.forEachClassProperty(c, \"leading-and-interposing\", (name, jsonName, p) => {\n                const desc = this.descriptionForClassProperty(c, jsonName);\n                const names = defined(this._gettersAndSettersForPropertyName.get(name));\n\n                this.ensureBlankLine();\n                this.emitFromMethod(names, p, className, name, desc);\n                this.ensureBlankLine();\n                this.emitToMethod(names, p, className, name, desc);\n                this.ensureBlankLine();\n                this.emitValidateMethod(names, p, className, name, desc);\n                this.ensureBlankLine();\n                this.emitGetMethod(names, p, className, name, desc);\n                this.ensureBlankLine();\n                this.emitSetMethod(names, p, className, name, desc);\n                this.ensureBlankLine();\n                this.emitSampleMethod(names, p, className, name, desc, idx++);\n            });\n\n            this.ensureBlankLine();\n            this.emitBlock(\n                [\"/**\\n\", \" * @throws Exception\\n\", \" * @return bool\\n\", \" */\\n\", \"public function validate(): bool\"],\n                () => {\n                    let lines: Sourcelike[][] = [];\n                    let p = \"return \";\n                    this.forEachClassProperty(c, \"none\", (name, _jsonName, _p) => {\n                        const names = defined(this._gettersAndSettersForPropertyName.get(name));\n                        lines.push([p, className, \"::\", names.validate, \"($this->\", name, \")\"]);\n                        p = \"|| \";\n                    });\n                    lines.forEach((line, jdx) => {\n                        this.emitLine(...line, lines.length === jdx + 1 ? \";\" : \"\");\n                    });\n                }\n            );\n\n            this.ensureBlankLine();\n            this.emitBlock(\n                [\n                    \"/**\\n\",\n                    \" * @return stdClass\\n\",\n                    \" * @throws Exception\\n\",\n                    \" */\\n\",\n                    \"public function to(): stdClass \"\n                ],\n                () => {\n                    this.emitLine(\"$out = new stdClass();\");\n                    this.forEachClassProperty(c, \"none\", (name, jsonName) => {\n                        const names = defined(this._gettersAndSettersForPropertyName.get(name));\n                        this.emitLine(\"$out->{'\", jsonName, \"'} = $this->\", names.to, \"();\");\n                    });\n                    this.emitLine(\"return $out;\");\n                }\n            );\n\n            this.ensureBlankLine();\n            this.emitBlock(\n                [\n                    \"/**\\n\",\n                    \" * @param stdClass $obj\\n\",\n                    \" * @return \",\n                    className,\n                    \"\\n\",\n                    \" * @throws Exception\\n\",\n                    \" */\\n\",\n                    \"public static function from(stdClass $obj): \",\n                    className\n                ],\n                () => {\n                    if (this._options.fastGet) {\n                        this.forEachClassProperty(c, \"none\", name => {\n                            const names = defined(this._gettersAndSettersForPropertyName.get(name));\n                            this.emitLine(className, \"::\", names.validate, \"($this->\", name, \", true);\");\n                        });\n                    }\n\n                    this.emitLine(\"return new \", className, \"(\");\n                    let comma = \" \";\n                    this.forEachClassProperty(c, \"none\", (name, jsonName) => {\n                        const names = defined(this._gettersAndSettersForPropertyName.get(name));\n                        this.emitLine(comma, className, \"::\", names.from, \"($obj->{'\", jsonName, \"'})\");\n                        comma = \",\";\n                    });\n                    this.emitLine(\");\");\n                }\n            );\n            this.ensureBlankLine();\n            this.emitBlock(\n                [\"/**\\n\", \" * @return \", className, \"\\n\", \" */\\n\", \"public static function sample(): \", className],\n                () => {\n                    this.emitLine(\"return new \", className, \"(\");\n                    let comma = \" \";\n                    this.forEachClassProperty(c, \"none\", name => {\n                        const names = defined(this._gettersAndSettersForPropertyName.get(name));\n                        this.emitLine(comma, className, \"::\", names.sample, \"()\");\n                        comma = \",\";\n                    });\n                    this.emitLine(\");\");\n                }\n            );\n        });\n        this.finishFile();\n    }\n\n    protected emitUnionAttributes(_u: UnionType, _unionName: Name): void {\n        // empty\n    }\n\n    protected emitUnionSerializer(_u: UnionType, _unionName: Name): void {\n        // empty\n    }\n\n    protected emitUnionDefinition(_u: UnionType, _unionName: Name): void {\n        throw Error(\"emitUnionDefinition not implemented\");\n    }\n\n    protected emitEnumSerializationAttributes(_e: EnumType): void {\n        // Empty\n    }\n\n    protected emitEnumDeserializationAttributes(_e: EnumType): void {\n        // Empty\n    }\n\n    protected emitEnumDefinition(e: EnumType, enumName: Name): void {\n        this.emitFileHeader(enumName, []);\n        this.emitDescription(this.descriptionForType(e));\n        const caseNames: Sourcelike[] = [];\n        caseNames.push(\";\");\n        const enumSerdeType = \"string\";\n        this.emitBlock([\"class \", enumName], () => {\n            this.forEachEnumCase(e, \"none\", (name, _jsonName) => {\n                this.emitLine(\"public static \", enumName, \" $\", name, \";\");\n            });\n\n            this.emitBlock(\"public static function init()\", () => {\n                this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n                    this.emitLine(enumName, \"::$\", name, \" = new \", enumName, \"('\", jsonName, \"');\");\n                });\n            });\n\n            this.emitLine(\"private \", enumSerdeType, \" $enum;\");\n            this.emitBlock([\"public function __construct(\", enumSerdeType, \" $enum)\"], () => {\n                this.emitLine(\"$this->enum = $enum;\");\n            });\n\n            this.ensureBlankLine();\n            this.emitEnumSerializationAttributes(e);\n\n            this.emitBlock(\n                [\n                    \"/**\\n\",\n                    \" * @param \",\n                    enumName,\n                    \"\\n\",\n                    \" * @return \",\n                    enumSerdeType,\n                    \"\\n\",\n                    \" * @throws Exception\\n\",\n                    \" */\\n\",\n                    \"public static function to(\",\n                    enumName,\n                    \" $obj): \",\n                    enumSerdeType\n                ],\n                () => {\n                    this.emitLine(\"switch ($obj->enum) {\");\n                    this.indent(() => {\n                        this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n                            // Todo String or Number\n                            this.emitLine(\n                                \"case \",\n                                enumName,\n                                \"::$\",\n                                name,\n                                \"->enum: return '\",\n                                stringEscape(jsonName),\n                                \"';\"\n                            );\n                        });\n                    });\n                    this.emitLine(\"}\");\n                    this.emitLine(\"throw new Exception('the give value is not an enum-value.');\");\n                }\n            );\n            this.ensureBlankLine();\n            this.emitEnumDeserializationAttributes(e);\n\n            this.emitBlock(\n                [\n                    \"/**\\n\",\n                    \" * @param mixed\\n\",\n                    \" * @return \",\n                    enumName,\n                    \"\\n\",\n                    \" * @throws Exception\\n\",\n                    \" */\\n\",\n                    \"public static function from($obj): \",\n                    enumName\n                ],\n                () => {\n                    this.emitLine(\"switch ($obj) {\");\n                    this.indent(() => {\n                        this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n                            // Todo String or Enum\n                            this.emitLine(\"case '\", stringEscape(jsonName), \"': return \", enumName, \"::$\", name, \";\");\n                        });\n                    });\n                    this.emitLine(\"}\");\n                    this.emitLine('throw new Exception(\"Cannot deserialize ', enumName, '\");');\n                }\n            );\n            this.ensureBlankLine();\n            this.emitBlock(\n                [\"/**\\n\", \" * @return \", enumName, \"\\n\", \" */\\n\", \"public static function sample(): \", enumName],\n                () => {\n                    const lines: Sourcelike[] = [];\n                    this.forEachEnumCase(e, \"none\", name => {\n                        lines.push([enumName, \"::$\", name]);\n                    });\n                    this.emitLine(\"return \", lines[0], \";\");\n                }\n            );\n        });\n        this.emitLine(enumName, \"::init();\");\n        this.finishFile();\n    }\n\n    protected emitSourceStructure(givenFilename: string): void {\n        this.emitLine(\"<?php\");\n        this.forEachNamedType(\n            \"leading-and-interposing\",\n            (c: ClassType, n: Name) => this.emitClassDefinition(c, n),\n            (e, n) => this.emitEnumDefinition(e, n),\n            (u, n) => this.emitUnionDefinition(u, n)\n        );\n        if (this._options.withClosing) {\n            this.emitLine(\"?>\");\n        }\n\n        super.finishFile(defined(givenFilename));\n    }\n}\n","import { ConvenienceRenderer, type ForbiddenWordsInfo } from \"../ConvenienceRenderer\";\nimport { type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { type Option } from \"../RendererOptions\";\nimport { type MultiWord, type Sourcelike, multiWord, parenIfNeeded, singleWord } from \"../Source\";\nimport { isLetterOrUnderscoreOrDigit, legalizeCharacters, makeNameStyle, stringEscape } from \"../support/Strings\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport { ArrayType, type ClassType, type EnumType, MapType, PrimitiveType, type Type, type UnionType } from \"../Type\";\nimport { type FixMeOptionsAnyType } from \"../types\";\nimport { matchType, nullableFromUnion, removeNullFromUnion } from \"../TypeUtils\";\n\nexport const pikeOptions = {};\n\nconst keywords = [\n    \"auto\",\n    \"nomask\",\n    \"final\",\n    \"static\",\n    \"extern\",\n    \"private\",\n    \"local\",\n    \"public\",\n    \"protected\",\n    \"inline\",\n    \"optional\",\n    \"variant\",\n    \"void\",\n    \"mixed\",\n    \"array\",\n    \"__attribute__\",\n    \"__deprecated__\",\n    \"mapping\",\n    \"multiset\",\n    \"object\",\n    \"function\",\n    \"__func__\",\n    \"program\",\n    \"string\",\n    \"float\",\n    \"int\",\n    \"enum\",\n    \"typedef\",\n    \"if\",\n    \"do\",\n    \"for\",\n    \"while\",\n    \"else\",\n    \"foreach\",\n    \"catch\",\n    \"gauge\",\n    \"class\",\n    \"break\",\n    \"case\",\n    \"const\",\n    \"constant\",\n    \"continue\",\n    \"default\",\n    \"import\",\n    \"inherit\",\n    \"lambda\",\n    \"predef\",\n    \"return\",\n    \"sscanf\",\n    \"switch\",\n    \"typeof\",\n    \"global\"\n];\n\nconst legalizeName = legalizeCharacters(isLetterOrUnderscoreOrDigit);\nconst enumNamingFunction = funPrefixNamer(\"enumNamer\", makeNameStyle(\"upper-underscore\", legalizeName));\nconst namingFunction = funPrefixNamer(\"genericNamer\", makeNameStyle(\"underscore\", legalizeName));\nconst namedTypeNamingFunction = funPrefixNamer(\"typeNamer\", makeNameStyle(\"pascal\", legalizeName));\n\nexport class PikeTargetLanguage extends TargetLanguage {\n    public constructor() {\n        super(\"Pike\", [\"pike\", \"pikelang\"], \"pmod\");\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [];\n    }\n\n    protected makeRenderer(renderContext: RenderContext): PikeRenderer {\n        return new PikeRenderer(this, renderContext);\n    }\n}\n\nexport class PikeRenderer extends ConvenienceRenderer {\n    protected emitSourceStructure(): void {\n        this.emitInformationComment();\n        this.ensureBlankLine();\n        this.forEachTopLevel(\n            \"leading\",\n            (t, name) => {\n                this.emitTopLevelTypedef(t, name);\n                this.ensureBlankLine();\n                this.emitTopLevelConverter(t, name);\n                this.ensureBlankLine();\n            },\n            t => this.namedTypeToNameForTopLevel(t) === undefined\n        );\n        this.ensureBlankLine();\n        this.forEachNamedType(\n            \"leading-and-interposing\",\n            (c: ClassType, className: Name) => this.emitClassDefinition(c, className),\n            (e, n) => this.emitEnum(e, n),\n            (u, n) => this.emitUnion(u, n)\n        );\n    }\n\n    protected get enumCasesInGlobalNamespace(): boolean {\n        return true;\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return enumNamingFunction;\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return namedTypeNamingFunction;\n    }\n\n    protected makeUnionMemberNamer(): Namer {\n        return namingFunction;\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return namingFunction;\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return [...keywords];\n    }\n\n    protected forbiddenForObjectProperties(_c: ClassType, _className: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected forbiddenForEnumCases(_e: EnumType, _enumName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected forbiddenForUnionMembers(_u: UnionType, _unionName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected sourceFor(t: Type): MultiWord {\n        if ([\"class\", \"object\", \"enum\"].includes(t.kind)) {\n            return singleWord(this.nameForNamedType(t));\n        }\n\n        return matchType<MultiWord>(\n            t,\n            _anyType => singleWord(\"mixed\"),\n            _nullType => singleWord(\"mixed\"),\n            _boolType => singleWord(\"bool\"),\n            _integerType => singleWord(\"int\"),\n            _doubleType => singleWord(\"float\"),\n            _stringType => singleWord(\"string\"),\n            arrayType => singleWord([\"array(\", this.sourceFor(arrayType.items).source, \")\"]),\n            _classType => singleWord(this.nameForNamedType(_classType)),\n            mapType => {\n                let valueSource: Sourcelike;\n                const v = mapType.values;\n\n                valueSource = this.sourceFor(v).source;\n                return singleWord([\"mapping(string:\", valueSource, \")\"]);\n            },\n            _enumType => singleWord(\"enum\"),\n            unionType => {\n                if (nullableFromUnion(unionType) !== null) {\n                    const children = Array.from(unionType.getChildren()).map(c => parenIfNeeded(this.sourceFor(c)));\n                    return multiWord(\"|\", ...children);\n                } else {\n                    return singleWord(this.nameForNamedType(unionType));\n                }\n            }\n        );\n    }\n\n    protected emitClassDefinition(c: ClassType, className: Name): void {\n        this.emitDescription(this.descriptionForType(c));\n        this.emitBlock([\"class \", className], () => {\n            this.emitClassMembers(c);\n            this.ensureBlankLine();\n            this.emitEncodingFunction(c);\n        });\n        this.ensureBlankLine();\n        this.emitDecodingFunction(className, c);\n    }\n\n    protected emitEnum(e: EnumType, enumName: Name): void {\n        this.emitBlock([e.kind, \" \", enumName], () => {\n            let table: Sourcelike[][] = [];\n            this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n                table.push([\n                    [name, ' = \"', stringEscape(jsonName), '\", '],\n                    ['// json: \"', jsonName, '\"']\n                ]);\n            });\n            this.emitTable(table);\n        });\n    }\n\n    protected emitUnion(u: UnionType, unionName: Name): void {\n        const isMaybeWithSingleType = nullableFromUnion(u);\n\n        if (isMaybeWithSingleType !== null) {\n            return;\n        }\n\n        this.emitDescription(this.descriptionForType(u));\n\n        const [, nonNulls] = removeNullFromUnion(u);\n\n        let types: Sourcelike[][] = [];\n        this.forEachUnionMember(u, nonNulls, \"none\", null, (_name, t) => {\n            const pikeType = this.sourceFor(t).source;\n            types.push([pikeType]);\n        });\n\n        this.emitLine([\n            \"typedef \",\n            types.map(r => r.map(sl => this.sourcelikeToString(sl))).join(\"|\"),\n            \" \",\n            unionName,\n            \";\"\n        ]);\n        this.ensureBlankLine();\n        this.emitBlock([unionName, \" \", unionName, \"_from_JSON(mixed json)\"], () => {\n            this.emitLine([\"return json;\"]);\n        });\n    }\n\n    private emitBlock(line: Sourcelike, f: () => void, opening: Sourcelike = \" {\", closing: Sourcelike = \"}\"): void {\n        this.emitLine(line, opening);\n        this.indent(f);\n        this.emitLine(closing);\n    }\n\n    private emitMappingBlock(line: Sourcelike, f: () => void): void {\n        this.emitBlock(line, f, \"([\", \"]);\");\n    }\n\n    private emitClassMembers(c: ClassType): void {\n        let table: Sourcelike[][] = [];\n        this.forEachClassProperty(c, \"none\", (name, jsonName, p) => {\n            const pikeType = this.sourceFor(p.type).source;\n\n            table.push([\n                [pikeType, \" \"],\n                [name, \"; \"],\n                ['// json: \"', jsonName, '\"']\n            ]);\n        });\n        this.emitTable(table);\n    }\n\n    private emitInformationComment(): void {\n        this.emitCommentLines(\n            [\n                \"This source has been automatically generated by quicktype.\",\n                \"( https://github.com/quicktype/quicktype )\",\n                \"\",\n                \"To use this code, simply import it into your project as a Pike module.\",\n                \"To JSON-encode your object, you can pass it to `Standards.JSON.encode`\",\n                \"or call `encode_json` on it.\",\n                \"\",\n                \"To decode a JSON string, first pass it to `Standards.JSON.decode`,\",\n                \"and then pass the result to `<YourClass>_from_JSON`.\",\n                \"It will return an instance of <YourClass>.\",\n                \"Bear in mind that these functions have unexpected behavior,\",\n                \"and will likely throw an error, if the JSON string does not\",\n                \"match the expected interface, even if the JSON itself is valid.\"\n            ],\n            { lineStart: \"// \" }\n        );\n    }\n\n    private emitTopLevelTypedef(t: Type, name: Name): void {\n        this.emitLine(\"typedef \", this.sourceFor(t).source, \" \", name, \";\");\n    }\n\n    private emitTopLevelConverter(t: Type, name: Name): void {\n        this.emitBlock([name, \" \", name, \"_from_JSON(mixed json)\"], () => {\n            if (t instanceof PrimitiveType) {\n                this.emitLine([\"return json;\"]);\n            } else if (t instanceof ArrayType) {\n                if (t.items instanceof PrimitiveType) this.emitLine([\"return json;\"]);\n                else this.emitLine([\"return map(json, \", this.sourceFor(t.items).source, \"_from_JSON);\"]);\n            } else if (t instanceof MapType) {\n                const type = this.sourceFor(t.values).source;\n                this.emitLine([\"mapping(string:\", type, \") retval = ([]);\"]);\n                let assignmentRval: Sourcelike;\n                if (t.values instanceof PrimitiveType) assignmentRval = [\"(\", type, \") v\"];\n                else assignmentRval = [type, \"_from_JSON(v)\"];\n                this.emitBlock([\"foreach (json; string k; mixed v)\"], () => {\n                    this.emitLine([\"retval[k] = \", assignmentRval, \";\"]);\n                });\n                this.emitLine([\"return retval;\"]);\n            }\n        });\n    }\n\n    private emitEncodingFunction(c: ClassType): void {\n        this.emitBlock([\"string encode_json()\"], () => {\n            this.emitMappingBlock([\"mapping(string:mixed) json = \"], () => {\n                this.forEachClassProperty(c, \"none\", (name, jsonName) => {\n                    this.emitLine(['\"', stringEscape(jsonName), '\" : ', name, \",\"]);\n                });\n            });\n            this.ensureBlankLine();\n            this.emitLine([\"return Standards.JSON.encode(json);\"]);\n        });\n    }\n\n    private emitDecodingFunction(className: Name, c: ClassType): void {\n        this.emitBlock([className, \" \", className, \"_from_JSON(mixed json)\"], () => {\n            this.emitLine([className, \" retval = \", className, \"();\"]);\n            this.ensureBlankLine();\n            this.forEachClassProperty(c, \"none\", (name, jsonName) => {\n                this.emitLine([\"retval.\", name, ' = json[\"', stringEscape(jsonName), '\"];']);\n            });\n            this.ensureBlankLine();\n            this.emitLine([\"return retval;\"]);\n        });\n    }\n}\n","import {\n    arrayIntercalate,\n    iterableFirst,\n    iterableSome,\n    mapSortBy,\n    mapUpdateInto,\n    setUnionInto\n} from \"collection-utils\";\nimport unicode from \"unicode-properties\";\n\nimport { ConvenienceRenderer, type ForbiddenWordsInfo, topLevelNameOrder } from \"../ConvenienceRenderer\";\nimport { DependencyName, type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { BooleanOption, EnumOption, type Option, type OptionValues, getOptionValues } from \"../RendererOptions\";\nimport { type MultiWord, type Sourcelike, modifySource, multiWord, parenIfNeeded, singleWord } from \"../Source\";\nimport {\n    type WordStyle,\n    allLowerWordStyle,\n    allUpperWordStyle,\n    combineWords,\n    firstUpperWordStyle,\n    originalWord,\n    splitIntoWords,\n    stringEscape,\n    utf16LegalizeCharacters\n} from \"../support/Strings\";\nimport { assertNever, defined, panic } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport {\n    ChoiceTransformer,\n    DecodingChoiceTransformer,\n    DecodingTransformer,\n    EncodingTransformer,\n    ParseStringTransformer,\n    StringifyTransformer,\n    type Transformer,\n    UnionInstantiationTransformer,\n    UnionMemberMatchTransformer,\n    followTargetType,\n    transformationForType\n} from \"../Transformers\";\nimport {\n    type ClassProperty,\n    ClassType,\n    EnumType,\n    type PrimitiveStringTypeKind,\n    type TransformedStringTypeKind,\n    type Type,\n    UnionType\n} from \"../Type\";\nimport { type StringTypeMapping } from \"../TypeBuilder\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { matchType, nullableFromUnion, removeNullFromUnion } from \"../TypeUtils\";\n\nconst forbiddenTypeNames = [\n    \"Any\",\n    \"True\",\n    \"False\",\n    \"None\",\n    \"Enum\",\n    \"List\",\n    \"Dict\",\n    \"Optional\",\n    \"Union\",\n    \"Iterable\",\n    \"Type\",\n    \"TypeVar\",\n    \"T\",\n    \"EnumT\"\n];\nconst forbiddenPropertyNames = [\n    \"and\",\n    \"as\",\n    \"assert\",\n    \"async\",\n    \"await\",\n    \"bool\",\n    \"break\",\n    \"class\",\n    \"continue\",\n    \"datetime\",\n    \"def\",\n    \"del\",\n    \"dict\",\n    \"elif\",\n    \"else\",\n    \"except\",\n    \"finally\",\n    \"float\",\n    \"for\",\n    \"from\",\n    \"global\",\n    \"if\",\n    \"import\",\n    \"in\",\n    \"int\",\n    \"is\",\n    \"lambda\",\n    \"nonlocal\",\n    \"not\",\n    \"or\",\n    \"pass\",\n    \"print\",\n    \"raise\",\n    \"return\",\n    \"self\",\n    \"str\",\n    \"try\",\n    \"while\",\n    \"with\",\n    \"yield\"\n];\n\nexport interface PythonFeatures {\n    dataClasses: boolean;\n    typeHints: boolean;\n}\n\nexport const pythonOptions = {\n    features: new EnumOption<PythonFeatures>(\n        \"python-version\",\n        \"Python version\",\n        [\n            [\"3.5\", { typeHints: false, dataClasses: false }],\n            [\"3.6\", { typeHints: true, dataClasses: false }],\n            [\"3.7\", { typeHints: true, dataClasses: true }]\n        ],\n        \"3.6\"\n    ),\n    justTypes: new BooleanOption(\"just-types\", \"Classes only\", false),\n    nicePropertyNames: new BooleanOption(\"nice-property-names\", \"Transform property names to be Pythonic\", true)\n};\n\nexport class PythonTargetLanguage extends TargetLanguage {\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [pythonOptions.features, pythonOptions.justTypes, pythonOptions.nicePropertyNames];\n    }\n\n    public get stringTypeMapping(): StringTypeMapping {\n        const mapping: Map<TransformedStringTypeKind, PrimitiveStringTypeKind> = new Map();\n        const dateTimeType = \"date-time\";\n        mapping.set(\"date\", dateTimeType);\n        mapping.set(\"time\", dateTimeType);\n        mapping.set(\"date-time\", dateTimeType);\n        mapping.set(\"uuid\", \"uuid\");\n        mapping.set(\"integer-string\", \"integer-string\");\n        mapping.set(\"bool-string\", \"bool-string\");\n        return mapping;\n    }\n\n    public get supportsUnionsWithBothNumberTypes(): boolean {\n        return true;\n    }\n\n    public get supportsOptionalClassProperties(): boolean {\n        return false;\n    }\n\n    public needsTransformerForType(t: Type): boolean {\n        if (t instanceof UnionType) {\n            return iterableSome(t.members, m => this.needsTransformerForType(m));\n        }\n\n        return t.kind === \"integer-string\" || t.kind === \"bool-string\";\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): PythonRenderer {\n        const options = getOptionValues(pythonOptions, untypedOptionValues);\n        if (options.justTypes) {\n            return new PythonRenderer(this, renderContext, options);\n        } else {\n            return new JSONPythonRenderer(this, renderContext, options);\n        }\n    }\n}\n\nfunction isNormalizedStartCharacter3(utf16Unit: number): boolean {\n    // FIXME: add Other_ID_Start - https://docs.python.org/3/reference/lexical_analysis.html#identifiers\n    const category: string = unicode.getCategory(utf16Unit);\n    return [\"Lu\", \"Ll\", \"Lt\", \"Lm\", \"Lo\", \"Nl\"].includes(category);\n}\n\nfunction isNormalizedPartCharacter3(utf16Unit: number): boolean {\n    // FIXME: add Other_ID_Continue - https://docs.python.org/3/reference/lexical_analysis.html#identifiers\n    if (isNormalizedStartCharacter3(utf16Unit)) return true;\n    const category: string = unicode.getCategory(utf16Unit);\n    return [\"Mn\", \"Mc\", \"Nd\", \"Pc\"].includes(category);\n}\n\nfunction isStartCharacter3(utf16Unit: number): boolean {\n    const s = String.fromCharCode(utf16Unit).normalize(\"NFKC\");\n    const l = s.length;\n    if (l === 0 || !isNormalizedStartCharacter3(s.charCodeAt(0))) return false;\n    for (let i = 1; i < l; i++) {\n        if (!isNormalizedPartCharacter3(s.charCodeAt(i))) return false;\n    }\n\n    return true;\n}\n\nfunction isPartCharacter3(utf16Unit: number): boolean {\n    const s = String.fromCharCode(utf16Unit).normalize(\"NFKC\");\n    const l = s.length;\n    for (let i = 0; i < l; i++) {\n        if (!isNormalizedPartCharacter3(s.charCodeAt(i))) return false;\n    }\n\n    return true;\n}\n\nconst legalizeName3 = utf16LegalizeCharacters(isPartCharacter3);\n\nfunction classNameStyle(original: string): string {\n    const words = splitIntoWords(original);\n    return combineWords(\n        words,\n        legalizeName3,\n        firstUpperWordStyle,\n        firstUpperWordStyle,\n        allUpperWordStyle,\n        allUpperWordStyle,\n        \"\",\n        isStartCharacter3\n    );\n}\n\nfunction getWordStyle(uppercase: boolean, forceSnakeNameStyle: boolean): WordStyle {\n    if (!forceSnakeNameStyle) {\n        return originalWord;\n    }\n\n    return uppercase ? allUpperWordStyle : allLowerWordStyle;\n}\n\nfunction snakeNameStyle(original: string, uppercase: boolean, forceSnakeNameStyle: boolean): string {\n    const wordStyle = getWordStyle(uppercase, forceSnakeNameStyle);\n    const separator = forceSnakeNameStyle ? \"_\" : \"\";\n    const words = splitIntoWords(original);\n    return combineWords(words, legalizeName3, wordStyle, wordStyle, wordStyle, wordStyle, separator, isStartCharacter3);\n}\n\nexport class PythonRenderer extends ConvenienceRenderer {\n    private readonly imports: Map<string, Set<string>> = new Map();\n\n    private readonly declaredTypes: Set<Type> = new Set();\n\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        protected readonly pyOptions: OptionValues<typeof pythonOptions>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return forbiddenTypeNames;\n    }\n\n    protected forbiddenForObjectProperties(_: ClassType, _classNamed: Name): ForbiddenWordsInfo {\n        return { names: forbiddenPropertyNames, includeGlobalForbidden: false };\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return funPrefixNamer(\"type\", classNameStyle);\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return funPrefixNamer(\"property\", s => snakeNameStyle(s, false, this.pyOptions.nicePropertyNames));\n    }\n\n    protected makeUnionMemberNamer(): null {\n        return null;\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return funPrefixNamer(\"enum-case\", s => snakeNameStyle(s, true, this.pyOptions.nicePropertyNames));\n    }\n\n    protected get commentLineStart(): string {\n        return \"# \";\n    }\n\n    protected emitDescriptionBlock(lines: Sourcelike[]): void {\n        if (lines.length === 1) {\n            const docstring = modifySource(content => {\n                if (content.endsWith('\"')) {\n                    return content.slice(0, -1) + '\\\\\"';\n                }\n\n                return content;\n            }, lines[0]);\n            this.emitComments([{ customLines: [docstring], lineStart: '\"\"\"', lineEnd: '\"\"\"' }]);\n        } else {\n            this.emitCommentLines(lines, {\n                firstLineStart: '\"\"\"',\n                lineStart: \"\",\n                afterComment: '\"\"\"'\n            });\n        }\n    }\n\n    protected get needsTypeDeclarationBeforeUse(): boolean {\n        return true;\n    }\n\n    protected canBeForwardDeclared(t: Type): boolean {\n        const kind = t.kind;\n        return kind === \"class\" || kind === \"enum\";\n    }\n\n    protected emitBlock(line: Sourcelike, f: () => void): void {\n        this.emitLine(line);\n        this.indent(f);\n    }\n\n    protected string(s: string): Sourcelike {\n        const openQuote = '\"';\n        return [openQuote, stringEscape(s), '\"'];\n    }\n\n    protected withImport(module: string, name: string): Sourcelike {\n        if (this.pyOptions.features.typeHints || module !== \"typing\") {\n            // FIXME: This is ugly.  We should rather not generate that import in the first\n            // place, but right now we just make the type source and then throw it away.  It's\n            // not a performance issue, so it's fine, I just bemoan this special case, and\n            // potential others down the road.\n            mapUpdateInto(this.imports, module, s => (s ? setUnionInto(s, [name]) : new Set([name])));\n        }\n\n        return name;\n    }\n\n    protected withTyping(name: string): Sourcelike {\n        return this.withImport(\"typing\", name);\n    }\n\n    protected namedType(t: Type): Sourcelike {\n        const name = this.nameForNamedType(t);\n        if (this.declaredTypes.has(t)) return name;\n        return [\"'\", name, \"'\"];\n    }\n\n    protected pythonType(t: Type, _isRootTypeDef = false): Sourcelike {\n        const actualType = followTargetType(t);\n\n        return matchType<Sourcelike>(\n            actualType,\n            _anyType => this.withTyping(\"Any\"),\n            _nullType => \"None\",\n            _boolType => \"bool\",\n            _integerType => \"int\",\n            _doubletype => \"float\",\n            _stringType => \"str\",\n            arrayType => [this.withTyping(\"List\"), \"[\", this.pythonType(arrayType.items), \"]\"],\n            classType => this.namedType(classType),\n            mapType => [this.withTyping(\"Dict\"), \"[str, \", this.pythonType(mapType.values), \"]\"],\n            enumType => this.namedType(enumType),\n            unionType => {\n                const [hasNull, nonNulls] = removeNullFromUnion(unionType);\n                const memberTypes = Array.from(nonNulls).map(m => this.pythonType(m));\n\n                if (hasNull !== null) {\n                    let rest: string[] = [];\n                    if (!this.getAlphabetizeProperties() && this.pyOptions.features.dataClasses && _isRootTypeDef) {\n                        // Only push \"= None\" if this is a root level type def\n                        //   otherwise we may get type defs like List[Optional[int] = None]\n                        //   which are invalid\n                        rest.push(\" = None\");\n                    }\n\n                    if (nonNulls.size > 1) {\n                        this.withImport(\"typing\", \"Union\");\n                        return [\n                            this.withTyping(\"Optional\"),\n                            \"[Union[\",\n                            arrayIntercalate(\", \", memberTypes),\n                            \"]]\",\n                            ...rest\n                        ];\n                    } else {\n                        return [this.withTyping(\"Optional\"), \"[\", defined(iterableFirst(memberTypes)), \"]\", ...rest];\n                    }\n                } else {\n                    return [this.withTyping(\"Union\"), \"[\", arrayIntercalate(\", \", memberTypes), \"]\"];\n                }\n            },\n            transformedStringType => {\n                if (transformedStringType.kind === \"date-time\") {\n                    return this.withImport(\"datetime\", \"datetime\");\n                }\n\n                if (transformedStringType.kind === \"uuid\") {\n                    return this.withImport(\"uuid\", \"UUID\");\n                }\n\n                return panic(`Transformed type ${transformedStringType.kind} not supported`);\n            }\n        );\n    }\n\n    protected declarationLine(t: Type): Sourcelike {\n        if (t instanceof ClassType) {\n            return [\"class \", this.nameForNamedType(t), \":\"];\n        }\n\n        if (t instanceof EnumType) {\n            return [\"class \", this.nameForNamedType(t), \"(\", this.withImport(\"enum\", \"Enum\"), \"):\"];\n        }\n\n        return panic(`Can't declare type ${t.kind}`);\n    }\n\n    protected declareType<T extends Type>(t: T, emitter: () => void): void {\n        this.emitBlock(this.declarationLine(t), () => {\n            this.emitDescription(this.descriptionForType(t));\n            emitter();\n        });\n        this.declaredTypes.add(t);\n    }\n\n    protected emitClassMembers(t: ClassType): void {\n        if (this.pyOptions.features.dataClasses) return;\n\n        const args: Sourcelike[] = [];\n        this.forEachClassProperty(t, \"none\", (name, _, cp) => {\n            args.push([name, this.typeHint(\": \", this.pythonType(cp.type))]);\n        });\n        this.emitBlock(\n            [\"def __init__(self, \", arrayIntercalate(\", \", args), \")\", this.typeHint(\" -> None\"), \":\"],\n            () => {\n                if (args.length === 0) {\n                    this.emitLine(\"pass\");\n                } else {\n                    this.forEachClassProperty(t, \"none\", name => {\n                        this.emitLine(\"self.\", name, \" = \", name);\n                    });\n                }\n            }\n        );\n    }\n\n    protected typeHint(...sl: Sourcelike[]): Sourcelike {\n        if (this.pyOptions.features.typeHints) {\n            return sl;\n        }\n\n        return [];\n    }\n\n    protected typingDecl(name: Sourcelike, type: string): Sourcelike {\n        return [name, this.typeHint(\": \", this.withTyping(type))];\n    }\n\n    protected typingReturn(type: string): Sourcelike {\n        return this.typeHint(\" -> \", this.withTyping(type));\n    }\n\n    protected sortClassProperties(\n        properties: ReadonlyMap<string, ClassProperty>,\n        propertyNames: ReadonlyMap<string, Name>\n    ): ReadonlyMap<string, ClassProperty> {\n        if (this.pyOptions.features.dataClasses) {\n            return mapSortBy(properties, (p: ClassProperty) => {\n                return (p.type instanceof UnionType && nullableFromUnion(p.type) != null) || p.isOptional ? 1 : 0;\n            });\n        } else {\n            return super.sortClassProperties(properties, propertyNames);\n        }\n    }\n\n    protected emitClass(t: ClassType): void {\n        if (this.pyOptions.features.dataClasses) {\n            this.emitLine(\"@\", this.withImport(\"dataclasses\", \"dataclass\"));\n        }\n\n        this.declareType(t, () => {\n            if (this.pyOptions.features.typeHints) {\n                if (t.getProperties().size === 0) {\n                    this.emitLine(\"pass\");\n                } else {\n                    this.forEachClassProperty(t, \"none\", (name, jsonName, cp) => {\n                        this.emitLine(name, this.typeHint(\": \", this.pythonType(cp.type, true)));\n                        this.emitDescription(this.descriptionForClassProperty(t, jsonName));\n                    });\n                }\n\n                this.ensureBlankLine();\n            }\n\n            this.emitClassMembers(t);\n        });\n    }\n\n    protected emitEnum(t: EnumType): void {\n        this.declareType(t, () => {\n            this.forEachEnumCase(t, \"none\", (name, jsonName) => {\n                this.emitLine([name, \" = \", this.string(jsonName)]);\n            });\n        });\n    }\n\n    protected emitImports(): void {\n        this.imports.forEach((names, module) => {\n            this.emitLine(\"from \", module, \" import \", Array.from(names).join(\", \"));\n        });\n    }\n\n    protected emitSupportCode(): void {\n        return;\n    }\n\n    protected emitClosingCode(): void {\n        return;\n    }\n\n    protected emitSourceStructure(_givenOutputFilename: string): void {\n        const declarationLines = this.gatherSource(() => {\n            this.forEachNamedType(\n                [\"interposing\", 2],\n                (c: ClassType) => this.emitClass(c),\n                e => this.emitEnum(e),\n                _u => {\n                    return;\n                }\n            );\n        });\n\n        const closingLines = this.gatherSource(() => this.emitClosingCode());\n        const supportLines = this.gatherSource(() => this.emitSupportCode());\n\n        if (this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n        }\n\n        this.ensureBlankLine();\n        this.emitImports();\n        this.ensureBlankLine(2);\n        this.emitGatheredSource(supportLines);\n        this.ensureBlankLine(2);\n        this.emitGatheredSource(declarationLines);\n        this.ensureBlankLine(2);\n        this.emitGatheredSource(closingLines);\n    }\n}\n\nexport type ConverterFunction =\n    | \"none\"\n    | \"bool\"\n    | \"int\"\n    | \"from-float\"\n    | \"to-float\"\n    | \"str\"\n    | \"to-enum\"\n    | \"list\"\n    | \"to-class\"\n    | \"dict\"\n    | \"union\"\n    | \"from-datetime\"\n    | \"from-stringified-bool\"\n    | \"is-type\";\n\ninterface TopLevelConverterNames {\n    fromDict: Name;\n    toDict: Name;\n}\n\n// A value or a lambda.  All four combinations are valid:\n//\n// * `value` and `lambda`: a value given by applying `value` to `lambda`, i.e. `lambda(value)`\n// * `lambda` only: a lambda given by `lambda`\n// * `value` only: a value given by `value`\n// * neither: the identity function, i.e. `lambda x: x`\nexport interface ValueOrLambda {\n    lambda?: MultiWord;\n    value: Sourcelike | undefined;\n}\n\n// Return the result of composing `input` and `f`.  `input` can be a\n// value or a lambda, but `f` must be a lambda or a TypeScript function\n// (i.e. it can't be a value).\n//\n// * If `input` is a value, the result is `f(input)`.\n// * If `input` is a lambda, the result is `lambda x: f(input(x))`\nfunction compose(input: ValueOrLambda, f: (arg: Sourcelike) => Sourcelike): ValueOrLambda;\n// FIXME: refactor this\n// eslint-disable-next-line @typescript-eslint/unified-signatures\nfunction compose(input: ValueOrLambda, f: ValueOrLambda): ValueOrLambda;\nfunction compose(input: ValueOrLambda, f: ValueOrLambda | ((arg: Sourcelike) => Sourcelike)): ValueOrLambda {\n    if (typeof f === \"function\") {\n        if (input.value !== undefined) {\n            // `input` is a value, so just apply `f` to its source form.\n            return { value: f(makeValue(input)) };\n        }\n\n        if (input.lambda !== undefined) {\n            // `input` is a lambda, so build `lambda x: f(input(x))`.\n            return { lambda: multiWord(\" \", \"lambda x:\", f([parenIfNeeded(input.lambda), \"(x)\"])), value: undefined };\n        }\n\n        // `input` is the identify function, so the composition is `lambda x: f(x)`.\n        return { lambda: multiWord(\" \", \"lambda x:\", f(\"x\")), value: undefined };\n    }\n\n    if (f.value !== undefined) {\n        return panic(\"Cannot compose into a value\");\n    }\n\n    if (f.lambda === undefined) {\n        // `f` is the identity function, so the result is just `input`.\n        return input;\n    }\n\n    if (input.value === undefined) {\n        // `input` is a lambda\n        if (input.lambda === undefined) {\n            // `input` is the identity function, so the result is just `f`.\n            return f;\n        }\n\n        // `input` is a lambda, so the result is `lambda x: f(input(x))`.\n        return {\n            lambda: multiWord(\"\", \"lambda x: \", parenIfNeeded(f.lambda), \"(\", parenIfNeeded(input.lambda), \"(x))\"),\n            value: undefined\n        };\n    }\n\n    // `input` is a value, so return `f(input)`.\n    return { lambda: f.lambda, value: makeValue(input) };\n}\n\nconst identity: ValueOrLambda = { value: undefined };\n\n// If `vol` is a lambda, return it in its source form.  If it's\n// a value, return a `lambda` that returns the value.\nfunction makeLambda(vol: ValueOrLambda): MultiWord {\n    if (vol.lambda !== undefined) {\n        if (vol.value === undefined) {\n            return vol.lambda;\n        }\n\n        return multiWord(\"\", \"lambda x: \", parenIfNeeded(vol.lambda), \"(\", vol.value, \")\");\n    } else if (vol.value !== undefined) {\n        return multiWord(\" \", \"lambda x:\", vol.value);\n    }\n\n    return multiWord(\" \", \"lambda x:\", \"x\");\n}\n\n// If `vol` is a value, return the value in its source form.\n// Calling this with `vol` being a lambda is not allowed.\nfunction makeValue(vol: ValueOrLambda): Sourcelike {\n    if (vol.value === undefined) {\n        return panic(\"Cannot make value from lambda without value\");\n    }\n\n    if (vol.lambda !== undefined) {\n        return [parenIfNeeded(vol.lambda), \"(\", vol.value, \")\"];\n    }\n\n    return vol.value;\n}\n\nexport class JSONPythonRenderer extends PythonRenderer {\n    private readonly _deserializerFunctions = new Set<ConverterFunction>();\n\n    private readonly _converterNamer = funPrefixNamer(\"converter\", s =>\n        snakeNameStyle(s, false, this.pyOptions.nicePropertyNames)\n    );\n\n    private readonly _topLevelConverterNames = new Map<Name, TopLevelConverterNames>();\n\n    private _haveTypeVar = false;\n\n    private _haveEnumTypeVar = false;\n\n    private _haveDateutil = false;\n\n    protected emitTypeVar(tvar: string, constraints: Sourcelike): void {\n        if (!this.pyOptions.features.typeHints) {\n            return;\n        }\n\n        this.emitLine(tvar, \" = \", this.withTyping(\"TypeVar\"), \"(\", this.string(tvar), constraints, \")\");\n    }\n\n    protected typeVar(): string {\n        this._haveTypeVar = true;\n        // FIXME: This is ugly, but the code that requires the type variables, in\n        // `emitImports` actually runs after imports have been imported.  The proper\n        // solution would be to either allow more complex dependencies, or to\n        // gather-emit the type variable declarations, too.  Unfortunately the\n        // gather-emit is a bit buggy with blank lines, and I can't be bothered to\n        // fix it now.\n        this.withTyping(\"TypeVar\");\n        return \"T\";\n    }\n\n    protected enumTypeVar(): string {\n        this._haveEnumTypeVar = true;\n        // See the comment above.\n        this.withTyping(\"TypeVar\");\n        this.withImport(\"enum\", \"Enum\");\n        return \"EnumT\";\n    }\n\n    protected cast(type: Sourcelike, v: Sourcelike): Sourcelike {\n        if (!this.pyOptions.features.typeHints) {\n            return v;\n        }\n\n        return [this.withTyping(\"cast\"), \"(\", type, \", \", v, \")\"];\n    }\n\n    protected emitNoneConverter(): void {\n        // FIXME: We can't return the None type here because mypy thinks that means\n        // We're not returning any value, when we're actually returning `None`.\n        this.emitBlock(\n            [\"def from_none(\", this.typingDecl(\"x\", \"Any\"), \")\", this.typeHint(\" -> \", this.withTyping(\"Any\")), \":\"],\n            () => {\n                this.emitLine(\"assert x is None\");\n                this.emitLine(\"return x\");\n            }\n        );\n    }\n\n    protected emitBoolConverter(): void {\n        this.emitBlock([\"def from_bool(\", this.typingDecl(\"x\", \"Any\"), \")\", this.typeHint(\" -> bool\"), \":\"], () => {\n            this.emitLine(\"assert isinstance(x, bool)\");\n            this.emitLine(\"return x\");\n        });\n    }\n\n    protected emitIntConverter(): void {\n        this.emitBlock([\"def from_int(\", this.typingDecl(\"x\", \"Any\"), \")\", this.typeHint(\" -> int\"), \":\"], () => {\n            this.emitLine(\"assert isinstance(x, int) and not isinstance(x, bool)\");\n            this.emitLine(\"return x\");\n        });\n    }\n\n    protected emitFromFloatConverter(): void {\n        this.emitBlock([\"def from_float(\", this.typingDecl(\"x\", \"Any\"), \")\", this.typeHint(\" -> float\"), \":\"], () => {\n            this.emitLine(\"assert isinstance(x, (float, int)) and not isinstance(x, bool)\");\n            this.emitLine(\"return float(x)\");\n        });\n    }\n\n    protected emitToFloatConverter(): void {\n        this.emitBlock([\"def to_float(\", this.typingDecl(\"x\", \"Any\"), \")\", this.typeHint(\" -> float\"), \":\"], () => {\n            this.emitLine(\"assert isinstance(x, (int, float))\");\n            this.emitLine(\"return x\");\n        });\n    }\n\n    protected emitStrConverter(): void {\n        this.emitBlock([\"def from_str(\", this.typingDecl(\"x\", \"Any\"), \")\", this.typeHint(\" -> str\"), \":\"], () => {\n            const strType = \"str\";\n            this.emitLine(\"assert isinstance(x, \", strType, \")\");\n            this.emitLine(\"return x\");\n        });\n    }\n\n    protected emitToEnumConverter(): void {\n        const tvar = this.enumTypeVar();\n        this.emitBlock(\n            [\n                \"def to_enum(c\",\n                this.typeHint(\": \", this.withTyping(\"Type\"), \"[\", tvar, \"]\"),\n                \", \",\n                this.typingDecl(\"x\", \"Any\"),\n                \")\",\n                this.typeHint(\" -> \", tvar),\n                \":\"\n            ],\n            () => {\n                this.emitLine(\"assert isinstance(x, c)\");\n                this.emitLine(\"return x.value\");\n            }\n        );\n    }\n\n    protected emitListConverter(): void {\n        const tvar = this.typeVar();\n        this.emitBlock(\n            [\n                \"def from_list(f\",\n                this.typeHint(\": \", this.withTyping(\"Callable\"), \"[[\", this.withTyping(\"Any\"), \"], \", tvar, \"]\"),\n                \", \",\n                this.typingDecl(\"x\", \"Any\"),\n                \")\",\n                this.typeHint(\" -> \", this.withTyping(\"List\"), \"[\", tvar, \"]\"),\n                \":\"\n            ],\n            () => {\n                this.emitLine(\"assert isinstance(x, list)\");\n                this.emitLine(\"return [f(y) for y in x]\");\n            }\n        );\n    }\n\n    protected emitToClassConverter(): void {\n        const tvar = this.typeVar();\n        this.emitBlock(\n            [\n                \"def to_class(c\",\n                this.typeHint(\": \", this.withTyping(\"Type\"), \"[\", tvar, \"]\"),\n                \", \",\n                this.typingDecl(\"x\", \"Any\"),\n                \")\",\n                this.typeHint(\" -> dict\"),\n                \":\"\n            ],\n            () => {\n                this.emitLine(\"assert isinstance(x, c)\");\n                this.emitLine(\"return \", this.cast(this.withTyping(\"Any\"), \"x\"), \".to_dict()\");\n            }\n        );\n    }\n\n    protected emitDictConverter(): void {\n        const tvar = this.typeVar();\n        this.emitBlock(\n            [\n                \"def from_dict(f\",\n                this.typeHint(\": \", this.withTyping(\"Callable\"), \"[[\", this.withTyping(\"Any\"), \"], \", tvar, \"]\"),\n                \", \",\n                this.typingDecl(\"x\", \"Any\"),\n                \")\",\n                this.typeHint(\" -> \", this.withTyping(\"Dict\"), \"[str, \", tvar, \"]\"),\n                \":\"\n            ],\n            () => {\n                this.emitLine(\"assert isinstance(x, dict)\");\n                this.emitLine(\"return { k: f(v) for (k, v) in x.items() }\");\n            }\n        );\n    }\n\n    // This is not easily idiomatically typeable in Python.  See\n    // https://stackoverflow.com/questions/51066468/computed-types-in-mypy/51084497\n    protected emitUnionConverter(): void {\n        this.emitMultiline(`def from_union(fs, x):\n    for f in fs:\n        try:\n            return f(x)\n        except:\n            pass\n    assert False`);\n    }\n\n    protected emitFromDatetimeConverter(): void {\n        this.emitBlock(\n            [\n                \"def from_datetime(\",\n                this.typingDecl(\"x\", \"Any\"),\n                \")\",\n                this.typeHint(\" -> \", this.withImport(\"datetime\", \"datetime\")),\n                \":\"\n            ],\n            () => {\n                this._haveDateutil = true;\n                this.emitLine(\"return dateutil.parser.parse(x)\");\n            }\n        );\n    }\n\n    protected emitFromStringifiedBoolConverter(): void {\n        this.emitBlock(\n            [\"def from_stringified_bool(x\", this.typeHint(\": str\"), \")\", this.typeHint(\" -> bool\"), \":\"],\n            () => {\n                this.emitBlock('if x == \"true\":', () => this.emitLine(\"return True\"));\n                this.emitBlock('if x == \"false\":', () => this.emitLine(\"return False\"));\n                this.emitLine(\"assert False\");\n            }\n        );\n    }\n\n    protected emitIsTypeConverter(): void {\n        const tvar = this.typeVar();\n        this.emitBlock(\n            [\n                \"def is_type(t\",\n                this.typeHint(\": \", this.withTyping(\"Type\"), \"[\", tvar, \"]\"),\n                \", \",\n                this.typingDecl(\"x\", \"Any\"),\n                \")\",\n                this.typeHint(\" -> \", tvar),\n                \":\"\n            ],\n            () => {\n                this.emitLine(\"assert isinstance(x, t)\");\n                this.emitLine(\"return x\");\n            }\n        );\n    }\n\n    protected emitConverter(cf: ConverterFunction): void {\n        switch (cf) {\n            case \"none\": {\n                this.emitNoneConverter();\n                return;\n            }\n\n            case \"bool\": {\n                this.emitBoolConverter();\n                return;\n            }\n\n            case \"int\": {\n                this.emitIntConverter();\n                return;\n            }\n\n            case \"from-float\": {\n                this.emitFromFloatConverter();\n                return;\n            }\n\n            case \"to-float\": {\n                this.emitToFloatConverter();\n                return;\n            }\n\n            case \"str\": {\n                this.emitStrConverter();\n                return;\n            }\n\n            case \"to-enum\": {\n                this.emitToEnumConverter();\n                return;\n            }\n\n            case \"list\": {\n                this.emitListConverter();\n                return;\n            }\n\n            case \"to-class\": {\n                this.emitToClassConverter();\n                return;\n            }\n\n            case \"dict\": {\n                this.emitDictConverter();\n                return;\n            }\n\n            case \"union\": {\n                this.emitUnionConverter();\n                return;\n            }\n\n            case \"from-datetime\": {\n                this.emitFromDatetimeConverter();\n                return;\n            }\n\n            case \"from-stringified-bool\": {\n                this.emitFromStringifiedBoolConverter();\n                return;\n            }\n\n            case \"is-type\": {\n                this.emitIsTypeConverter();\n                return;\n            }\n\n            default:\n                return assertNever(cf);\n        }\n    }\n\n    // Return the name of the Python converter function `cf`.\n    protected conv(cf: ConverterFunction): Sourcelike {\n        this._deserializerFunctions.add(cf);\n        const name = cf.replace(/-/g, \"_\");\n        if (cf.startsWith(\"from-\") || cf.startsWith(\"to-\") || cf.startsWith(\"is-\")) return name;\n        return [\"from_\", name];\n    }\n\n    // Applies the converter function to `arg`\n    protected convFn(cf: ConverterFunction, arg: ValueOrLambda): ValueOrLambda {\n        return compose(arg, { lambda: singleWord(this.conv(cf)), value: undefined });\n    }\n\n    protected typeObject(t: Type): Sourcelike {\n        const s = matchType<Sourcelike | undefined>(\n            t,\n            _anyType => undefined,\n            _nullType => \"type(None)\",\n            _boolType => \"bool\",\n            _integerType => \"int\",\n            _doubleType => \"float\",\n            _stringType => \"str\",\n            _arrayType => \"List\",\n            classType => this.nameForNamedType(classType),\n            _mapType => \"dict\",\n            enumType => this.nameForNamedType(enumType),\n            _unionType => undefined,\n            transformedStringType => {\n                if (transformedStringType.kind === \"date-time\") {\n                    return this.withImport(\"datetime\", \"datetime\");\n                }\n\n                if (transformedStringType.kind === \"uuid\") {\n                    return this.withImport(\"uuid\", \"UUID\");\n                }\n\n                return undefined;\n            }\n        );\n        if (s === undefined) {\n            return panic(`No type object for ${t.kind}`);\n        }\n\n        return s;\n    }\n\n    protected transformer(inputTransformer: ValueOrLambda, xfer: Transformer, targetType: Type): ValueOrLambda {\n        const consume = (consumer: Transformer | undefined, vol: ValueOrLambda): ValueOrLambda => {\n            if (consumer === undefined) {\n                return vol;\n            }\n\n            return this.transformer(vol, consumer, targetType);\n        };\n\n        const isType = (t: Type, valueToCheck: ValueOrLambda): ValueOrLambda => {\n            return compose(valueToCheck, v => [this.conv(\"is-type\"), \"(\", this.typeObject(t), \", \", v, \")\"]);\n        };\n\n        if (xfer instanceof DecodingChoiceTransformer || xfer instanceof ChoiceTransformer) {\n            const lambdas = xfer.transformers.map(x => makeLambda(this.transformer(identity, x, targetType)).source);\n            return compose(inputTransformer, v => [\n                this.conv(\"union\"),\n                \"([\",\n                arrayIntercalate(\", \", lambdas),\n                \"], \",\n                v,\n                \")\"\n            ]);\n        } else if (xfer instanceof DecodingTransformer) {\n            const consumer = xfer.consumer;\n            const vol = this.deserializer(inputTransformer, xfer.sourceType);\n            return consume(consumer, vol);\n        } else if (xfer instanceof EncodingTransformer) {\n            return this.serializer(inputTransformer, xfer.sourceType);\n        } else if (xfer instanceof UnionInstantiationTransformer) {\n            return inputTransformer;\n        } else if (xfer instanceof UnionMemberMatchTransformer) {\n            const consumer = xfer.transformer;\n            const vol = isType(xfer.memberType, inputTransformer);\n            return consume(consumer, vol);\n        } else if (xfer instanceof ParseStringTransformer) {\n            const consumer = xfer.consumer;\n            const immediateTargetType = consumer === undefined ? targetType : consumer.sourceType;\n            let vol: ValueOrLambda;\n            switch (immediateTargetType.kind) {\n                case \"integer\":\n                    vol = compose(inputTransformer, v => [\"int(\", v, \")\"]);\n                    break;\n                case \"bool\":\n                    vol = this.convFn(\"from-stringified-bool\", inputTransformer);\n                    break;\n                case \"enum\":\n                    vol = this.deserializer(inputTransformer, immediateTargetType);\n                    break;\n                case \"date-time\":\n                    vol = this.convFn(\"from-datetime\", inputTransformer);\n                    break;\n                case \"uuid\":\n                    vol = compose(inputTransformer, v => [this.withImport(\"uuid\", \"UUID\"), \"(\", v, \")\"]);\n                    break;\n                default:\n                    return panic(`Parsing of ${immediateTargetType.kind} in a transformer is not supported`);\n            }\n\n            return consume(consumer, vol);\n        } else if (xfer instanceof StringifyTransformer) {\n            const consumer = xfer.consumer;\n            let vol: ValueOrLambda;\n            switch (xfer.sourceType.kind) {\n                case \"integer\":\n                    vol = compose(inputTransformer, v => [\"str(\", v, \")\"]);\n                    break;\n                case \"bool\":\n                    vol = compose(inputTransformer, v => [\"str(\", v, \").lower()\"]);\n                    break;\n                case \"enum\":\n                    vol = this.serializer(inputTransformer, xfer.sourceType);\n                    break;\n                case \"date-time\":\n                    vol = compose(inputTransformer, v => [v, \".isoformat()\"]);\n                    break;\n                case \"uuid\":\n                    vol = compose(inputTransformer, v => [\"str(\", v, \")\"]);\n                    break;\n                default:\n                    return panic(`Parsing of ${xfer.sourceType.kind} in a transformer is not supported`);\n            }\n\n            return consume(consumer, vol);\n        } else {\n            return panic(`Transformer ${xfer.kind} is not supported`);\n        }\n    }\n\n    // Returns the code to deserialize `value` as type `t`.  If `t` has\n    // an associated transformer, the code for that transformer is\n    // returned.\n    protected deserializer(value: ValueOrLambda, t: Type): ValueOrLambda {\n        const xf = transformationForType(t);\n        if (xf !== undefined) {\n            return this.transformer(value, xf.transformer, xf.targetType);\n        }\n\n        return matchType<ValueOrLambda>(\n            t,\n            _anyType => value,\n            _nullType => this.convFn(\"none\", value),\n            _boolType => this.convFn(\"bool\", value),\n            _integerType => this.convFn(\"int\", value),\n            _doubleType => this.convFn(\"from-float\", value),\n            _stringType => this.convFn(\"str\", value),\n            arrayType =>\n                compose(value, v => [\n                    this.conv(\"list\"),\n                    \"(\",\n                    makeLambda(this.deserializer(identity, arrayType.items)).source,\n                    \", \",\n                    v,\n                    \")\"\n                ]),\n            classType =>\n                compose(value, {\n                    lambda: singleWord(this.nameForNamedType(classType), \".from_dict\"),\n                    value: undefined\n                }),\n            mapType =>\n                compose(value, v => [\n                    this.conv(\"dict\"),\n                    \"(\",\n                    makeLambda(this.deserializer(identity, mapType.values)).source,\n                    \", \",\n                    v,\n                    \")\"\n                ]),\n            enumType => compose(value, { lambda: singleWord(this.nameForNamedType(enumType)), value: undefined }),\n            unionType => {\n                // FIXME: handle via transformers\n                const deserializers = Array.from(unionType.members).map(\n                    m => makeLambda(this.deserializer(identity, m)).source\n                );\n                return compose(value, v => [\n                    this.conv(\"union\"),\n                    \"([\",\n                    arrayIntercalate(\", \", deserializers),\n                    \"], \",\n                    v,\n                    \")\"\n                ]);\n            },\n            transformedStringType => {\n                // FIXME: handle via transformers\n                if (transformedStringType.kind === \"date-time\") {\n                    return this.convFn(\"from-datetime\", value);\n                }\n\n                if (transformedStringType.kind === \"uuid\") {\n                    return compose(value, v => [this.withImport(\"uuid\", \"UUID\"), \"(\", v, \")\"]);\n                }\n\n                return panic(`Transformed type ${transformedStringType.kind} not supported`);\n            }\n        );\n    }\n\n    protected serializer(value: ValueOrLambda, t: Type): ValueOrLambda {\n        const xf = transformationForType(t);\n        if (xf !== undefined) {\n            const reverse = xf.reverse;\n            return this.transformer(value, reverse.transformer, reverse.targetType);\n        }\n\n        return matchType<ValueOrLambda>(\n            t,\n            _anyType => value,\n            _nullType => this.convFn(\"none\", value),\n            _boolType => this.convFn(\"bool\", value),\n            _integerType => this.convFn(\"int\", value),\n            _doubleType => this.convFn(\"to-float\", value),\n            _stringType => this.convFn(\"str\", value),\n            arrayType =>\n                compose(value, v => [\n                    this.conv(\"list\"),\n                    \"(\",\n                    makeLambda(this.serializer(identity, arrayType.items)).source,\n                    \", \",\n                    v,\n                    \")\"\n                ]),\n            classType =>\n                compose(value, v => [this.conv(\"to-class\"), \"(\", this.nameForNamedType(classType), \", \", v, \")\"]),\n            mapType =>\n                compose(value, v => [\n                    this.conv(\"dict\"),\n                    \"(\",\n                    makeLambda(this.serializer(identity, mapType.values)).source,\n                    \", \",\n                    v,\n                    \")\"\n                ]),\n            enumType => compose(value, v => [this.conv(\"to-enum\"), \"(\", this.nameForNamedType(enumType), \", \", v, \")\"]),\n            unionType => {\n                const serializers = Array.from(unionType.members).map(\n                    m => makeLambda(this.serializer(identity, m)).source\n                );\n                return compose(value, v => [\n                    this.conv(\"union\"),\n                    \"([\",\n                    arrayIntercalate(\", \", serializers),\n                    \"], \",\n                    v,\n                    \")\"\n                ]);\n            },\n            transformedStringType => {\n                if (transformedStringType.kind === \"date-time\") {\n                    return compose(value, v => [v, \".isoformat()\"]);\n                }\n\n                if (transformedStringType.kind === \"uuid\") {\n                    return compose(value, v => [\"str(\", v, \")\"]);\n                }\n\n                return panic(`Transformed type ${transformedStringType.kind} not supported`);\n            }\n        );\n    }\n\n    protected emitClassMembers(t: ClassType): void {\n        super.emitClassMembers(t);\n        this.ensureBlankLine();\n\n        const className = this.nameForNamedType(t);\n\n        this.emitLine(\"@staticmethod\");\n        this.emitBlock(\n            [\"def from_dict(\", this.typingDecl(\"obj\", \"Any\"), \")\", this.typeHint(\" -> \", this.namedType(t)), \":\"],\n            () => {\n                const args: Sourcelike[] = [];\n                this.emitLine(\"assert isinstance(obj, dict)\");\n                this.forEachClassProperty(t, \"none\", (name, jsonName, cp) => {\n                    const property = { value: [\"obj.get(\", this.string(jsonName), \")\"] };\n                    this.emitLine(name, \" = \", makeValue(this.deserializer(property, cp.type)));\n                    args.push(name);\n                });\n                this.emitLine(\"return \", className, \"(\", arrayIntercalate(\", \", args), \")\");\n            }\n        );\n        this.ensureBlankLine();\n\n        this.emitBlock([\"def to_dict(self)\", this.typeHint(\" -> dict\"), \":\"], () => {\n            this.emitLine(\"result\", this.typeHint(\": dict\"), \" = {}\");\n            this.forEachClassProperty(t, \"none\", (name, jsonName, cp) => {\n                const property = { value: [\"self.\", name] };\n                if (cp.isOptional) {\n                    this.emitBlock([\"if self.\", name, \" is not None:\"], () => {\n                        this.emitLine(\n                            \"result[\",\n                            this.string(jsonName),\n                            \"] = \",\n                            makeValue(this.serializer(property, cp.type))\n                        );\n                    });\n                } else {\n                    this.emitLine(\n                        \"result[\",\n                        this.string(jsonName),\n                        \"] = \",\n                        makeValue(this.serializer(property, cp.type))\n                    );\n                }\n            });\n            this.emitLine(\"return result\");\n        });\n    }\n\n    protected emitImports(): void {\n        super.emitImports();\n        if (this._haveDateutil) {\n            this.emitLine(\"import dateutil.parser\");\n        }\n\n        if (!this._haveTypeVar && !this._haveEnumTypeVar) return;\n\n        this.ensureBlankLine(2);\n        if (this._haveTypeVar) {\n            this.emitTypeVar(this.typeVar(), []);\n        }\n\n        if (this._haveEnumTypeVar) {\n            this.emitTypeVar(this.enumTypeVar(), [\", bound=\", this.withImport(\"enum\", \"Enum\")]);\n        }\n    }\n\n    protected emitSupportCode(): void {\n        const map = Array.from(this._deserializerFunctions).map(f => [f, f] as [ConverterFunction, ConverterFunction]);\n        this.forEachWithBlankLines(map, [\"interposing\", 2], cf => {\n            this.emitConverter(cf);\n        });\n    }\n\n    protected makeTopLevelDependencyNames(_t: Type, topLevelName: Name): DependencyName[] {\n        const fromDict = new DependencyName(\n            this._converterNamer,\n            topLevelNameOrder,\n            l => `${l(topLevelName)}_from_dict`\n        );\n        const toDict = new DependencyName(this._converterNamer, topLevelNameOrder, l => `${l(topLevelName)}_to_dict`);\n        this._topLevelConverterNames.set(topLevelName, { fromDict, toDict });\n        return [fromDict, toDict];\n    }\n\n    protected emitDefaultLeadingComments(): void {\n        this.ensureBlankLine();\n        if (this._haveDateutil) {\n            this.emitCommentLines([\n                \"This code parses date/times, so please\",\n                \"\",\n                \"    pip install python-dateutil\",\n                \"\"\n            ]);\n        }\n\n        this.emitCommentLines([\n            \"To use this code, make sure you\",\n            \"\",\n            \"    import json\",\n            \"\",\n            \"and then, to convert JSON from a string, do\",\n            \"\"\n        ]);\n        this.forEachTopLevel(\"none\", (_, name) => {\n            const { fromDict } = defined(this._topLevelConverterNames.get(name));\n            this.emitLine(this.commentLineStart, \"    result = \", fromDict, \"(json.loads(json_string))\");\n        });\n    }\n\n    protected emitClosingCode(): void {\n        this.forEachTopLevel([\"interposing\", 2], (t, name) => {\n            const { fromDict, toDict } = defined(this._topLevelConverterNames.get(name));\n            const pythonType = this.pythonType(t);\n            this.emitBlock(\n                [\"def \", fromDict, \"(\", this.typingDecl(\"s\", \"Any\"), \")\", this.typeHint(\" -> \", pythonType), \":\"],\n                () => {\n                    this.emitLine(\"return \", makeValue(this.deserializer({ value: \"s\" }, t)));\n                }\n            );\n            this.ensureBlankLine(2);\n            this.emitBlock(\n                [\"def \", toDict, \"(x\", this.typeHint(\": \", pythonType), \")\", this.typingReturn(\"Any\"), \":\"],\n                () => {\n                    this.emitLine(\"return \", makeValue(this.serializer({ value: \"x\" }, t)));\n                }\n            );\n        });\n    }\n}\n","export const keywords = [\n    \"__ENCODING__\",\n    \"__FILE__\",\n    \"__LINE__\",\n    \"alias\",\n    \"and\",\n    \"begin\",\n    \"BEGIN\",\n    \"break\",\n    \"case\",\n    \"class\",\n    \"def\",\n    \"defined?\",\n    \"do\",\n    \"else\",\n    \"elsif\",\n    \"end\",\n    \"END\",\n    \"ensure\",\n    \"false\",\n    \"for\",\n    \"if\",\n    \"in\",\n    \"module\",\n    \"next\",\n    \"nil\",\n    \"not\",\n    \"or\",\n    \"redo\",\n    \"rescue\",\n    \"retry\",\n    \"return\",\n    \"self\",\n    \"super\",\n    \"then\",\n    \"true\",\n    \"undef\",\n    \"unless\",\n    \"until\",\n    \"when\",\n    \"while\",\n    \"yield\",\n];\n\nconst globalClasses = [\n    \"ArgumentError\",\n    \"Array\",\n    \"BasicObject\",\n    \"Class\",\n    \"ClosedQueueError\",\n    \"Comparable\",\n    \"Complex\",\n    \"ConditionVariable\",\n    \"Continuation\",\n    \"Data\",\n    \"Date\",\n    \"Dir\",\n    \"ENV\",\n    \"EOFError\",\n    \"Encoding\",\n    \"EncodingError\",\n    \"Enumerable\",\n    \"Enumerator\",\n    \"Errno\",\n    \"Exception\",\n    \"FalseClass\",\n    \"Fiber\",\n    \"FiberError\",\n    \"File\",\n    \"FileTest\",\n    \"Float\",\n    \"FloatDomainError\",\n    \"FrozenError\",\n    \"GC\",\n    \"Hash\",\n    \"IO\",\n    \"IOError\",\n    \"IndexError\",\n    \"Integer\",\n    \"Interrupt\",\n    \"KeyError\",\n    \"LoadError\",\n    \"LocalJumpError\",\n    \"Marshal\",\n    \"MatchData\",\n    \"Math\",\n    \"Method\",\n    \"Module\",\n    \"Mutex\",\n    \"NameError\",\n    \"NilClass\",\n    \"NoMemoryError\",\n    \"NoMethodError\",\n    \"NotImplementedError\",\n    \"Numeric\",\n    \"Object\",\n    \"ObjectSpace\",\n    \"Proc\",\n    \"Process\",\n    \"Queue\",\n    \"Random\",\n    \"Range\",\n    \"RangeError\",\n    \"Rational\",\n    \"Regexp\",\n    \"RegexpError\",\n    \"RubyVM\",\n    \"RuntimeError\",\n    \"ScriptError\",\n    \"SecurityError\",\n    \"Set\",\n    \"Signal\",\n    \"SignalException\",\n    \"SizedQueue\",\n    \"StandardError\",\n    \"StopIteration\",\n    \"String\",\n    \"Struct\",\n    \"Symbol\",\n    \"SyntaxError\",\n    \"SystemCallError\",\n    \"SystemExit\",\n    \"SystemStackError\",\n    \"Thread\",\n    \"ThreadError\",\n    \"ThreadGroup\",\n    \"Time\",\n    \"TracePoint\",\n    \"TrueClass\",\n    \"TypeError\",\n    \"UnboundMethod\",\n    \"UncaughtThrowError\",\n    \"Undefined\",\n    \"UnicodeNormalize\",\n    \"Warning\",\n    \"ZeroDivisionError\",\n];\n\nconst kernel = [\n    \"__callee__\",\n    \"__dir__\",\n    \"__id__\",\n    \"__method__\",\n    \"__send__\",\n    \"!\",\n    \"!=\",\n    \"!~\",\n    \"<\",\n    \"<=\",\n    \"<=>\",\n    \"==\",\n    \"===\",\n    \"=~\",\n    \">\",\n    \">=\",\n    \"abort\",\n    \"ancestors\",\n    \"at_exit\",\n    \"autoload\",\n    \"autoload?\",\n    \"binding\",\n    \"block_given?\",\n    \"caller\",\n    \"caller_locations\",\n    \"catch\",\n    \"class\",\n    \"class_eval\",\n    \"class_exec\",\n    \"class_variable_defined?\",\n    \"class_variable_get\",\n    \"class_variable_set\",\n    \"class_variables\",\n    \"clone\",\n    \"const_defined?\",\n    \"const_get\",\n    \"const_missing\",\n    \"const_set\",\n    \"constants\",\n    \"define_singleton_method\",\n    \"deprecate_constant\",\n    \"display\",\n    \"dup\",\n    \"enum_for\",\n    \"eql?\",\n    \"equal?\",\n    \"eval\",\n    \"exec\",\n    \"exit\",\n    \"exit!\",\n    \"extend\",\n    \"fail\",\n    \"fork\",\n    \"format\",\n    \"freeze\",\n    \"frozen?\",\n    \"gets\",\n    \"global_variables\",\n    \"hash\",\n    \"include\",\n    \"include?\",\n    \"included_modules\",\n    \"inspect\",\n    \"instance_eval\",\n    \"instance_exec\",\n    \"instance_method\",\n    \"instance_methods\",\n    \"instance_of?\",\n    \"instance_variable_defined?\",\n    \"instance_variable_get\",\n    \"instance_variable_set\",\n    \"instance_variables\",\n    \"is_a?\",\n    \"iterator?\",\n    \"itself\",\n    \"kind_of?\",\n    \"lambda\",\n    \"load\",\n    \"local_variables\",\n    \"loop\",\n    \"method\",\n    \"method_defined?\",\n    \"methods\",\n    \"module_eval\",\n    \"module_exec\",\n    \"name\",\n    \"new\",\n    \"nil?\",\n    \"object_id\",\n    \"open\",\n    \"p\",\n    \"prepend\",\n    \"print\",\n    \"printf\",\n    \"private_class_method\",\n    \"private_constant\",\n    \"private_instance_methods\",\n    \"private_method_defined?\",\n    \"private_methods\",\n    \"proc\",\n    \"protected_instance_methods\",\n    \"protected_method_defined?\",\n    \"protected_methods\",\n    \"public_class_method\",\n    \"public_constant\",\n    \"public_instance_method\",\n    \"public_instance_methods\",\n    \"public_method\",\n    \"public_method_defined?\",\n    \"public_methods\",\n    \"public_send\",\n    \"putc\",\n    \"puts\",\n    \"raise\",\n    \"rand\",\n    \"readline\",\n    \"readlines\",\n    \"remove_class_variable\",\n    \"remove_instance_variable\",\n    \"require\",\n    \"require_relative\",\n    \"respond_to?\",\n    \"select\",\n    \"send\",\n    \"set_trace_func\",\n    \"singleton_class\",\n    \"singleton_class?\",\n    \"singleton_method\",\n    \"singleton_methods\",\n    \"sleep\",\n    \"spawn\",\n    \"sprintf\",\n    \"srand\",\n    \"syscall\",\n    \"system\",\n    \"taint\",\n    \"tainted?\",\n    \"tap\",\n    \"test\",\n    \"throw\",\n    \"to_enum\",\n    \"to_s\",\n    \"trace_var\",\n    \"trap\",\n    \"trust\",\n    \"untaint\",\n    \"untrace_var\",\n    \"untrust\",\n    \"untrusted?\",\n    \"warn\",\n];\n\nexport const globals = kernel.concat(globalClasses);\n\nexport const reservedProperties = [\n    \"__id__\",\n    \"__send__\",\n    \"break\",\n    \"call\",\n    \"case\",\n    \"class\",\n    \"clone\",\n    \"constrained_type\",\n    \"constrained?\",\n    \"constrained\",\n    \"constructor\",\n    \"default\",\n    \"define_singleton_method\",\n    \"display\",\n    \"dup\",\n    \"enum_for\",\n    \"enum\",\n    \"extend\",\n    \"freeze\",\n    \"gem\",\n    \"hash\",\n    \"inspect\",\n    \"instance_eval\",\n    \"instance_exec\",\n    \"instance_variable_defined?\",\n    \"instance_variable_get\",\n    \"instance_variable_set\",\n    \"instance_variables\",\n    \"itself\",\n    \"meta\",\n    \"method\",\n    \"methods\",\n    \"next\",\n    \"object_id\",\n    \"optional\",\n    \"options\",\n    \"pristine\",\n    \"private_methods\",\n    \"protected_methods\",\n    \"public_method\",\n    \"public_methods\",\n    \"public_send\",\n    \"remove_instance_variable\",\n    \"rule\",\n    \"safe\",\n    \"self\",\n    \"send\",\n    \"singleton_class\",\n    \"singleton_method\",\n    \"singleton_methods\",\n    \"taint\",\n    \"tap\",\n    \"to_ast\",\n    \"to_enum\",\n    \"to_json\",\n    \"to_s\",\n    \"trust\",\n    \"try\",\n    \"type\",\n    \"untaint\",\n    \"undef\",\n    \"untrust\",\n    \"while\",\n    \"with\",\n];\n","import * as unicode from \"unicode-properties\";\n\nimport { ConvenienceRenderer, type ForbiddenWordsInfo } from \"../../ConvenienceRenderer\";\nimport { type Name, Namer } from \"../../Naming\";\nimport { type RenderContext } from \"../../Renderer\";\nimport {\n    BooleanOption,\n    EnumOption,\n    type Option,\n    type OptionValues,\n    StringOption,\n    getOptionValues\n} from \"../../RendererOptions\";\nimport { type Sourcelike, modifySource } from \"../../Source\";\nimport {\n    allLowerWordStyle,\n    allUpperWordStyle,\n    combineWords,\n    escapeNonPrintableMapper,\n    firstUpperWordStyle,\n    intToHex,\n    isLetterOrUnderscore,\n    isPrintable,\n    legalizeCharacters,\n    snakeCase,\n    splitIntoWords,\n    utf32ConcatMap\n} from \"../../support/Strings\";\nimport { TargetLanguage } from \"../../TargetLanguage\";\nimport {\n    ArrayType,\n    type ClassProperty,\n    ClassType,\n    type EnumType,\n    MapType,\n    type Type,\n    type UnionType\n} from \"../../Type\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../../types\";\nimport { matchType, nullableFromUnion, removeNullFromUnion } from \"../../TypeUtils\";\n\nimport * as keywords from \"./keywords\";\n\nconst forbiddenForObjectProperties = Array.from(new Set([...keywords.keywords, ...keywords.reservedProperties]));\n\nfunction unicodeEscape(codePoint: number): string {\n    return \"\\\\u{\" + intToHex(codePoint, 0) + \"}\";\n}\n\nconst stringEscape = utf32ConcatMap(escapeNonPrintableMapper(isPrintable, unicodeEscape));\n\nexport enum Strictness {\n    Coercible = \"Coercible::\",\n    None = \"Types::\",\n    Strict = \"Strict::\"\n}\n\nexport const rubyOptions = {\n    justTypes: new BooleanOption(\"just-types\", \"Plain types only\", false),\n    strictness: new EnumOption(\"strictness\", \"Type strictness\", [\n        [\"strict\", Strictness.Strict],\n        [\"coercible\", Strictness.Coercible],\n        [\"none\", Strictness.None]\n    ]),\n    namespace: new StringOption(\"namespace\", \"Specify a wrapping Namespace\", \"NAME\", \"\", \"secondary\")\n};\n\nexport class RubyTargetLanguage extends TargetLanguage {\n    public constructor() {\n        super(\"Ruby\", [\"ruby\"], \"rb\");\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [rubyOptions.justTypes, rubyOptions.strictness, rubyOptions.namespace];\n    }\n\n    public get supportsOptionalClassProperties(): boolean {\n        return true;\n    }\n\n    protected get defaultIndentation(): string {\n        return \"  \";\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): RubyRenderer {\n        return new RubyRenderer(this, renderContext, getOptionValues(rubyOptions, untypedOptionValues));\n    }\n}\n\nconst isStartCharacter = isLetterOrUnderscore;\n\nfunction isPartCharacter(utf16Unit: number): boolean {\n    const category: string = unicode.getCategory(utf16Unit);\n    return [\"Nd\", \"Pc\", \"Mn\", \"Mc\"].includes(category) || isStartCharacter(utf16Unit);\n}\n\nconst legalizeName = legalizeCharacters(isPartCharacter);\n\nfunction simpleNameStyle(original: string, uppercase: boolean): string {\n    if (/^[0-9]+$/.test(original)) {\n        original = original + \"N\";\n    }\n\n    const words = splitIntoWords(original);\n    return combineWords(\n        words,\n        legalizeName,\n        uppercase ? firstUpperWordStyle : allLowerWordStyle,\n        uppercase ? firstUpperWordStyle : allLowerWordStyle,\n        allUpperWordStyle,\n        allUpperWordStyle,\n        \"\",\n        isStartCharacter\n    );\n}\n\nfunction memberNameStyle(original: string): string {\n    const words = splitIntoWords(original);\n    return combineWords(\n        words,\n        legalizeName,\n        allLowerWordStyle,\n        allLowerWordStyle,\n        allLowerWordStyle,\n        allLowerWordStyle,\n        \"_\",\n        isStartCharacter\n    );\n}\n\nexport class RubyRenderer extends ConvenienceRenderer {\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        private readonly _options: OptionValues<typeof rubyOptions>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected get commentLineStart(): string {\n        return \"# \";\n    }\n\n    protected get needsTypeDeclarationBeforeUse(): boolean {\n        return true;\n    }\n\n    protected canBeForwardDeclared(t: Type): boolean {\n        return \"class\" === t.kind;\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return keywords.globals.concat([\"Types\", \"JSON\", \"Dry\", \"Constructor\", \"Self\"]);\n    }\n\n    protected forbiddenForObjectProperties(_c: ClassType, _classNamed: Name): ForbiddenWordsInfo {\n        return { names: forbiddenForObjectProperties, includeGlobalForbidden: true };\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return new Namer(\"types\", n => simpleNameStyle(n, true), []);\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return new Namer(\"properties\", memberNameStyle, []);\n    }\n\n    protected makeUnionMemberNamer(): Namer {\n        return new Namer(\"properties\", memberNameStyle, []);\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return new Namer(\"enum-cases\", n => simpleNameStyle(n, true), []);\n    }\n\n    private dryType(t: Type, isOptional = false): Sourcelike {\n        const optional = isOptional ? \".optional\" : \"\";\n        return matchType<Sourcelike>(\n            t,\n            _anyType => [\"Types::Any\", optional],\n            _nullType => [\"Types::Nil\", optional],\n            _boolType => [\"Types::Bool\", optional],\n            _integerType => [\"Types::Integer\", optional],\n            _doubleType => [\"Types::Double\", optional],\n            _stringType => [\"Types::String\", optional],\n            arrayType => [\"Types.Array(\", this.dryType(arrayType.items), \")\", optional],\n            classType => [this.nameForNamedType(classType), optional],\n            mapType => [\"Types::Hash.meta(of: \", this.dryType(mapType.values), \")\", optional],\n            enumType => [\"Types::\", this.nameForNamedType(enumType), optional],\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    return [this.dryType(nullable), \".optional\"];\n                }\n\n                return [\"Types.Instance(\", this.nameForNamedType(unionType), \")\", optional];\n            }\n        );\n    }\n\n    private exampleUse(t: Type, exp: Sourcelike, depth = 6, optional = false): Sourcelike {\n        if (depth-- <= 0) {\n            return exp;\n        }\n\n        const safeNav = optional ? \"&\" : \"\";\n\n        return matchType<Sourcelike>(\n            t,\n            _anyType => exp,\n            _nullType => [exp, \".nil?\"],\n            _boolType => exp,\n            _integerType => [exp, \".even?\"],\n            _doubleType => exp,\n            _stringType => exp,\n            arrayType => this.exampleUse(arrayType.items, [exp, safeNav, \".first\"], depth),\n            classType => {\n                let info: { name: Name; prop: ClassProperty } | undefined;\n                this.forEachClassProperty(classType, \"none\", (name, _json, prop) => {\n                    if ([\"class\", \"map\", \"array\"].includes(prop.type.kind)) {\n                        info = { name, prop };\n                    } else if (info === undefined) {\n                        info = { name, prop };\n                    }\n                });\n                if (info !== undefined) {\n                    return this.exampleUse(info.prop.type, [exp, safeNav, \".\", info.name], depth, info.prop.isOptional);\n                }\n\n                return exp;\n            },\n            mapType => this.exampleUse(mapType.values, [exp, safeNav, '[\"…\"]'], depth),\n            enumType => {\n                let name: Name | undefined;\n                // FIXME: This is a terrible way to get the first enum case name.\n                this.forEachEnumCase(enumType, \"none\", theName => {\n                    if (name === undefined) {\n                        name = theName;\n                    }\n                });\n                if (name !== undefined) {\n                    return [exp, \" == \", this.nameForNamedType(enumType), \"::\", name];\n                }\n\n                return exp;\n            },\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    if ([\"class\", \"map\", \"array\"].includes(nullable.kind)) {\n                        return this.exampleUse(nullable, exp, depth, true);\n                    }\n\n                    return [exp, \".nil?\"];\n                }\n\n                return exp;\n            }\n        );\n    }\n\n    private jsonSample(t: Type): Sourcelike {\n        function inner(): string {\n            if (t instanceof ArrayType) {\n                return \"[…]\";\n            } else if (t instanceof MapType) {\n                return \"{…}\";\n            } else if (t instanceof ClassType) {\n                return \"{…}\";\n            } else {\n                return \"…\";\n            }\n        }\n\n        return `\"${inner()}\"`;\n    }\n\n    private fromDynamic(t: Type, e: Sourcelike, optional = false, castPrimitives = false): Sourcelike {\n        const primitiveCast = [this.dryType(t, optional), \"[\", e, \"]\"];\n        const primitive = castPrimitives ? primitiveCast : e;\n        const safeAccess = optional ? \"&\" : \"\";\n        return matchType<Sourcelike>(\n            t,\n            _anyType => primitive,\n            _nullType => primitive,\n            _boolType => primitive,\n            _integerType => primitive,\n            _doubleType => primitive,\n            _stringType => primitive,\n            arrayType => [e, safeAccess, \".map { |x| \", this.fromDynamic(arrayType.items, \"x\", false, true), \" }\"],\n            classType => {\n                const expression = [this.nameForNamedType(classType), \".from_dynamic!(\", e, \")\"];\n                return optional ? [e, \" ? \", expression, \" : nil\"] : expression;\n            },\n            mapType => [\n                [\"Types::Hash\", optional ? \".optional\" : \"\", \"[\", e, \"]\"],\n                safeAccess,\n                \".map { |k, v| [k, \",\n                this.fromDynamic(mapType.values, \"v\", false, true),\n                \"] }\",\n                safeAccess,\n                \".to_h\"\n            ],\n            enumType => {\n                const expression = [\"Types::\", this.nameForNamedType(enumType), \"[\", e, \"]\"];\n                return optional ? [e, \".nil? ? nil : \", expression] : expression;\n            },\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    return this.fromDynamic(nullable, e, true);\n                }\n\n                const expression = [this.nameForNamedType(unionType), \".from_dynamic!(\", e, \")\"];\n                return optional ? [e, \" ? \", expression, \" : nil\"] : expression;\n            }\n        );\n    }\n\n    private toDynamic(t: Type, e: Sourcelike, optional = false): Sourcelike {\n        if (this.marshalsImplicitlyToDynamic(t)) {\n            return e;\n        }\n\n        return matchType<Sourcelike>(\n            t,\n            _anyType => e,\n            _nullType => e,\n            _boolType => e,\n            _integerType => e,\n            _doubleType => e,\n            _stringType => e,\n            arrayType => [e, optional ? \"&\" : \"\", \".map { |x| \", this.toDynamic(arrayType.items, \"x\"), \" }\"],\n            _classType => [e, optional ? \"&\" : \"\", \".to_dynamic\"],\n            mapType => [e, optional ? \"&\" : \"\", \".map { |k, v| [k, \", this.toDynamic(mapType.values, \"v\"), \"] }.to_h\"],\n            _enumType => e,\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    return this.toDynamic(nullable, e, true);\n                }\n\n                if (this.marshalsImplicitlyToDynamic(unionType)) {\n                    return e;\n                }\n\n                return [e, optional ? \"&\" : \"\", \".to_dynamic\"];\n            }\n        );\n    }\n\n    private marshalsImplicitlyToDynamic(t: Type): boolean {\n        return matchType<boolean>(\n            t,\n            _anyType => true,\n            _nullType => true,\n            _boolType => true,\n            _integerType => true,\n            _doubleType => true,\n            _stringType => true,\n            arrayType => this.marshalsImplicitlyToDynamic(arrayType.items),\n            _classType => false,\n            mapType => this.marshalsImplicitlyToDynamic(mapType.values),\n            _enumType => true,\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    return this.marshalsImplicitlyToDynamic(nullable);\n                }\n\n                return false;\n            }\n        );\n    }\n\n    // This is only to be used to allow class properties to possibly\n    // marshal implicitly. They are allowed to do this because they will\n    // be checked in Dry::Struct.new\n    private propertyTypeMarshalsImplicitlyFromDynamic(t: Type): boolean {\n        return matchType<boolean>(\n            t,\n            _anyType => true,\n            _nullType => true,\n            _boolType => true,\n            _integerType => true,\n            _doubleType => true,\n            _stringType => true,\n            arrayType => this.propertyTypeMarshalsImplicitlyFromDynamic(arrayType.items),\n            _classType => false,\n            // Map properties must be checked because Dry:Types doesn't have a generic Map\n            _mapType => false,\n            _enumType => true,\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    return this.propertyTypeMarshalsImplicitlyFromDynamic(nullable);\n                }\n\n                return false;\n            }\n        );\n    }\n\n    private emitBlock(source: Sourcelike, emit: () => void): void {\n        this.emitLine(source);\n        this.indent(emit);\n        this.emitLine(\"end\");\n    }\n\n    private emitModule(emit: () => void): void {\n        const emitModuleInner = (moduleName: string): void => {\n            const [firstModule, ...subModules] = moduleName.split(\"::\");\n            if (subModules.length > 0) {\n                this.emitBlock([\"module \", firstModule], () => {\n                    emitModuleInner(subModules.join(\"::\"));\n                });\n            } else {\n                this.emitBlock([\"module \", moduleName], emit);\n            }\n        };\n\n        if (this._options.namespace !== undefined && this._options.namespace !== \"\") {\n            emitModuleInner(this._options.namespace);\n        } else {\n            emit();\n        }\n    }\n\n    private emitClass(c: ClassType, className: Name): void {\n        this.emitDescription(this.descriptionForType(c));\n        this.emitBlock([\"class \", className, \" < Dry::Struct\"], () => {\n            let table: Sourcelike[][] = [];\n            let count = c.getProperties().size;\n            this.forEachClassProperty(c, \"none\", (name, jsonName, p) => {\n                const last = --count === 0;\n                const description = this.descriptionForClassProperty(c, jsonName);\n                const attribute = [\n                    [\"attribute :\", name, \",\"],\n                    [\" \", this.dryType(p.type), p.isOptional ? \".optional\" : \"\"]\n                ];\n                if (description !== undefined) {\n                    if (table.length > 0) {\n                        this.emitTable(table);\n                        table = [];\n                    }\n\n                    this.ensureBlankLine();\n                    this.emitDescriptionBlock(description);\n                    this.emitLine(attribute);\n                    if (!last) {\n                        this.ensureBlankLine();\n                    }\n                } else {\n                    table.push(attribute);\n                }\n            });\n            if (table.length > 0) {\n                this.emitTable(table);\n            }\n\n            if (this._options.justTypes) {\n                return;\n            }\n\n            this.ensureBlankLine();\n            this.emitBlock([\"def self.from_dynamic!(d)\"], () => {\n                this.emitLine(\"d = Types::Hash[d]\");\n                this.emitLine(\"new(\");\n                this.indent(() => {\n                    const inits: Sourcelike[][] = [];\n                    this.forEachClassProperty(c, \"none\", (name, jsonName, p) => {\n                        const dynamic = p.isOptional\n                            ? // If key is not found in hash, this will be nil\n                              `d[\"${stringEscape(jsonName)}\"]`\n                            : // This will raise a runtime error if the key is not found in the hash\n                              `d.fetch(\"${stringEscape(jsonName)}\")`;\n\n                        if (this.propertyTypeMarshalsImplicitlyFromDynamic(p.type)) {\n                            inits.push([\n                                [name, \": \"],\n                                [dynamic, \",\"]\n                            ]);\n                        } else {\n                            const expression = this.fromDynamic(p.type, dynamic, p.isOptional);\n                            inits.push([\n                                [name, \": \"],\n                                [expression, \",\"]\n                            ]);\n                        }\n                    });\n                    this.emitTable(inits);\n                });\n                this.emitLine(\")\");\n            });\n\n            this.ensureBlankLine();\n            this.emitBlock(\"def self.from_json!(json)\", () => {\n                this.emitLine(\"from_dynamic!(JSON.parse(json))\");\n            });\n\n            this.ensureBlankLine();\n            this.emitBlock([\"def to_dynamic\"], () => {\n                this.emitLine(\"{\");\n                this.indent(() => {\n                    const inits: Sourcelike[][] = [];\n                    this.forEachClassProperty(c, \"none\", (name, jsonName, p) => {\n                        const expression = this.toDynamic(p.type, name, p.isOptional);\n                        inits.push([[`\"${stringEscape(jsonName)}\"`], [\" => \", expression, \",\"]]);\n                    });\n                    this.emitTable(inits);\n                });\n                this.emitLine(\"}\");\n            });\n            this.ensureBlankLine();\n            this.emitBlock(\"def to_json(options = nil)\", () => {\n                this.emitLine(\"JSON.generate(to_dynamic, options)\");\n            });\n        });\n    }\n\n    private emitEnum(e: EnumType, enumName: Name): void {\n        this.emitDescription(this.descriptionForType(e));\n        this.emitBlock([\"module \", enumName], () => {\n            const table: Sourcelike[][] = [];\n            this.forEachEnumCase(e, \"none\", (name, json) => {\n                table.push([[name], [` = \"${stringEscape(json)}\"`]]);\n            });\n            this.emitTable(table);\n        });\n    }\n\n    private emitUnion(u: UnionType, unionName: Name): void {\n        this.emitDescription(this.descriptionForType(u));\n        this.emitBlock([\"class \", unionName, \" < Dry::Struct\"], () => {\n            const table: Sourcelike[][] = [];\n            this.forEachUnionMember(u, u.getChildren(), \"none\", null, (name, t) => {\n                table.push([[\"attribute :\", name, \", \"], [this.dryType(t, true)]]);\n            });\n            this.emitTable(table);\n\n            if (this._options.justTypes) {\n                return;\n            }\n\n            this.ensureBlankLine();\n            const [maybeNull, nonNulls] = removeNullFromUnion(u, false);\n            this.emitBlock(\"def self.from_dynamic!(d)\", () => {\n                const memberNames = Array.from(u.getChildren()).map(member => this.nameForUnionMember(u, member));\n                this.forEachUnionMember(u, u.getChildren(), \"none\", null, (name, t) => {\n                    const nilMembers = memberNames\n                        .filter(n => n !== name)\n                        .map(memberName => [\", \", memberName, \": nil\"]);\n                    if (this.propertyTypeMarshalsImplicitlyFromDynamic(t)) {\n                        this.emitBlock([\"if schema[:\", name, \"].right.valid? d\"], () => {\n                            this.emitLine(\"return new(\", name, \": d\", nilMembers, \")\");\n                        });\n                    } else {\n                        this.emitLine(\"begin\");\n                        this.indent(() => {\n                            this.emitLine(\"value = \", this.fromDynamic(t, \"d\"));\n                            this.emitBlock([\"if schema[:\", name, \"].right.valid? value\"], () => {\n                                this.emitLine(\"return new(\", name, \": value\", nilMembers, \")\");\n                            });\n                        });\n                        this.emitLine(\"rescue\");\n                        this.emitLine(\"end\");\n                    }\n                });\n                this.emitLine('raise \"Invalid union\"');\n            });\n\n            this.ensureBlankLine();\n            this.emitBlock(\"def self.from_json!(json)\", () => {\n                this.emitLine(\"from_dynamic!(JSON.parse(json))\");\n            });\n\n            this.ensureBlankLine();\n            this.emitBlock(\"def to_dynamic\", () => {\n                let first = true;\n                this.forEachUnionMember(u, nonNulls, \"none\", null, (name, t) => {\n                    this.emitLine(first ? \"if\" : \"elsif\", \" \", name, \" != nil\");\n                    this.indent(() => {\n                        this.emitLine(this.toDynamic(t, name));\n                    });\n                    first = false;\n                });\n                if (maybeNull !== null) {\n                    this.emitLine(\"else\");\n                    this.indent(() => {\n                        this.emitLine(\"nil\");\n                    });\n                }\n\n                this.emitLine(\"end\");\n            });\n\n            this.ensureBlankLine();\n            this.emitBlock(\"def to_json(options = nil)\", () => {\n                this.emitLine(\"JSON.generate(to_dynamic, options)\");\n            });\n        });\n    }\n\n    private emitTypesModule(): void {\n        this.emitBlock([\"module Types\"], () => {\n            this.emitLine(\"include Dry.Types(default: :nominal)\");\n\n            const declarations: Sourcelike[][] = [];\n\n            if (this._options.strictness !== Strictness.None) {\n                let has = { int: false, nil: false, bool: false, hash: false, string: false, double: false };\n                this.forEachType(t => {\n                    has = {\n                        int: has.int || t.kind === \"integer\",\n                        nil: has.nil || t.kind === \"null\",\n                        bool: has.bool || t.kind === \"bool\",\n                        hash: has.hash || t.kind === \"map\" || t.kind === \"class\",\n                        string: has.string || t.kind === \"string\" || t.kind === \"enum\",\n                        double: has.double || t.kind === \"double\"\n                    };\n                });\n                if (has.int) declarations.push([[\"Integer\"], [` = ${this._options.strictness}Integer`]]);\n                if (this._options.strictness === Strictness.Strict) {\n                    if (has.nil) declarations.push([[\"Nil\"], [` = ${this._options.strictness}Nil`]]);\n                }\n\n                if (has.bool) declarations.push([[\"Bool\"], [` = ${this._options.strictness}Bool`]]);\n                if (has.hash) declarations.push([[\"Hash\"], [` = ${this._options.strictness}Hash`]]);\n                if (has.string) declarations.push([[\"String\"], [` = ${this._options.strictness}String`]]);\n                if (has.double)\n                    declarations.push([\n                        [\"Double\"],\n                        [` = ${this._options.strictness}Float | ${this._options.strictness}Integer`]\n                    ]);\n            }\n\n            this.forEachEnum(\"none\", (enumType, enumName) => {\n                const cases: Sourcelike[][] = [];\n                this.forEachEnumCase(enumType, \"none\", (_name, json) => {\n                    cases.push([cases.length === 0 ? \"\" : \", \", `\"${stringEscape(json)}\"`]);\n                });\n                declarations.push([[enumName], [\" = \", this._options.strictness, \"String.enum(\", ...cases, \")\"]]);\n            });\n\n            if (declarations.length > 0) {\n                this.ensureBlankLine();\n                this.emitTable(declarations);\n            }\n        });\n    }\n\n    protected emitSourceStructure(): void {\n        if (this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n        } else if (!this._options.justTypes) {\n            this.emitLine(\"# This code may look unusually verbose for Ruby (and it is), but\");\n            this.emitLine(\"# it performs some subtle and complex validation of JSON data.\");\n            this.emitLine(\"#\");\n            this.emitLine(\"# To parse this JSON, add 'dry-struct' and 'dry-types' gems, then do:\");\n            this.emitLine(\"#\");\n            this.forEachTopLevel(\"none\", (topLevel, name) => {\n                const variable = modifySource(snakeCase, name);\n                this.emitLine(\"#   \", variable, \" = \", name, \".from_json! \", this.jsonSample(topLevel));\n                this.emitLine(\"#   puts \", this.exampleUse(topLevel, variable));\n                this.emitLine(\"#\");\n            });\n            this.emitLine(\"# If from_json! succeeds, the value returned matches the schema.\");\n        }\n\n        this.ensureBlankLine();\n\n        this.emitLine(\"require 'json'\");\n        this.emitLine(\"require 'dry-types'\");\n        this.emitLine(\"require 'dry-struct'\");\n\n        this.ensureBlankLine();\n\n        this.emitModule(() => {\n            this.emitTypesModule();\n\n            this.forEachDeclaration(\"leading-and-interposing\", decl => {\n                if (decl.kind === \"forward\") {\n                    this.emitCommentLines([\"(forward declaration)\"]);\n                    this.emitModule(() => {\n                        this.emitLine(\"class \", this.nameForNamedType(decl.type), \" < Dry::Struct; end\");\n                    });\n                }\n            });\n\n            this.forEachNamedType(\n                \"leading-and-interposing\",\n                (c: ClassType, n: Name) => this.emitClass(c, n),\n                (e, n) => this.emitEnum(e, n),\n                (u, n) => this.emitUnion(u, n)\n            );\n\n            if (!this._options.justTypes) {\n                this.forEachTopLevel(\n                    \"leading-and-interposing\",\n                    (topLevel, name) => {\n                        const self = modifySource(snakeCase, name);\n\n                        // The json gem defines to_json on maps and primitives, so we only need to supply\n                        // it for arrays.\n                        const needsToJsonDefined = \"array\" === topLevel.kind;\n\n                        const classDeclaration = (): void => {\n                            this.emitBlock([\"class \", name], () => {\n                                this.emitBlock([\"def self.from_json!(json)\"], () => {\n                                    if (needsToJsonDefined) {\n                                        this.emitLine(\n                                            self,\n                                            \" = \",\n                                            this.fromDynamic(topLevel, \"JSON.parse(json, quirks_mode: true)\")\n                                        );\n                                        this.emitBlock([self, \".define_singleton_method(:to_json) do\"], () => {\n                                            this.emitLine(\"JSON.generate(\", this.toDynamic(topLevel, \"self\"), \")\");\n                                        });\n                                        this.emitLine(self);\n                                    } else {\n                                        this.emitLine(\n                                            this.fromDynamic(topLevel, \"JSON.parse(json, quirks_mode: true)\")\n                                        );\n                                    }\n                                });\n                            });\n                        };\n\n                        this.emitModule(() => {\n                            classDeclaration();\n                        });\n                    },\n                    t => this.namedTypeToNameForTopLevel(t) === undefined\n                );\n            }\n        });\n    }\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { mapFirst } from \"collection-utils\";\n\nimport { anyTypeIssueAnnotation, nullTypeIssueAnnotation } from \"../Annotation\";\nimport { ConvenienceRenderer, type ForbiddenWordsInfo } from \"../ConvenienceRenderer\";\nimport { type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { BooleanOption, EnumOption, type Option, type OptionValues, getOptionValues } from \"../RendererOptions\";\nimport { type Sourcelike, maybeAnnotated } from \"../Source\";\nimport {\n    allLowerWordStyle,\n    combineWords,\n    escapeNonPrintableMapper,\n    firstUpperWordStyle,\n    intToHex,\n    isAscii,\n    isLetterOrUnderscore,\n    isLetterOrUnderscoreOrDigit,\n    isPrintable,\n    legalizeCharacters,\n    splitIntoWords,\n    utf32ConcatMap\n} from \"../support/Strings\";\nimport { defined } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport { type ClassType, type EnumType, type Type, UnionType } from \"../Type\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { matchType, nullableFromUnion, removeNullFromUnion } from \"../TypeUtils\";\n\nexport enum Density {\n    Normal = \"Normal\",\n    Dense = \"Dense\"\n}\n\nexport enum Visibility {\n    Private = \"Private\",\n    Crate = \"Crate\",\n    Public = \"Public\"\n}\n\nexport const rustOptions = {\n    density: new EnumOption(\"density\", \"Density\", [\n        [\"normal\", Density.Normal],\n        [\"dense\", Density.Dense]\n    ]),\n    visibility: new EnumOption(\"visibility\", \"Field visibility\", [\n        [\"private\", Visibility.Private],\n        [\"crate\", Visibility.Crate],\n        [\"public\", Visibility.Public]\n    ]),\n    deriveDebug: new BooleanOption(\"derive-debug\", \"Derive Debug impl\", false),\n    deriveClone: new BooleanOption(\"derive-clone\", \"Derive Clone impl\", false),\n    derivePartialEq: new BooleanOption(\"derive-partial-eq\", \"Derive PartialEq impl\", false),\n    skipSerializingNone: new BooleanOption(\"skip-serializing-none\", \"Skip serializing empty Option fields\", false),\n    edition2018: new BooleanOption(\"edition-2018\", \"Edition 2018\", true),\n    leadingComments: new BooleanOption(\"leading-comments\", \"Leading Comments\", true)\n};\n\ntype NameToParts = (name: string) => string[];\ntype PartsToName = (parts: string[]) => string;\ninterface NamingStyle {\n    fromParts: PartsToName;\n    regex: RegExp;\n    toParts: NameToParts;\n}\n\nconst namingStyles: Record<string, NamingStyle> = {\n    snake_case: {\n        regex: /^[a-z][a-z0-9]*(_[a-z0-9]+)*$/,\n        toParts: (name: string): string[] => name.split(\"_\"),\n        fromParts: (parts: string[]): string => parts.map(p => p.toLowerCase()).join(\"_\")\n    },\n    SCREAMING_SNAKE_CASE: {\n        regex: /^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$/,\n        toParts: (name: string): string[] => name.split(\"_\"),\n        fromParts: (parts: string[]): string => parts.map(p => p.toUpperCase()).join(\"_\")\n    },\n    camelCase: {\n        regex: /^[a-z]+([A-Z0-9][a-z]*)*$/,\n        toParts: (name: string): string[] => namingStyles.snake_case.toParts(name.replace(/(.)([A-Z])/g, \"$1_$2\")),\n        fromParts: (parts: string[]): string =>\n            parts\n                .map((p, i) =>\n                    i === 0 ? p.toLowerCase() : p.substring(0, 1).toUpperCase() + p.substring(1).toLowerCase()\n                )\n                .join(\"\")\n    },\n    PascalCase: {\n        regex: /^[A-Z][a-z]*([A-Z0-9][a-z]*)*$/,\n        toParts: (name: string): string[] => namingStyles.snake_case.toParts(name.replace(/(.)([A-Z])/g, \"$1_$2\")),\n        fromParts: (parts: string[]): string =>\n            parts.map(p => p.substring(0, 1).toUpperCase() + p.substring(1).toLowerCase()).join(\"\")\n    },\n    \"kebab-case\": {\n        regex: /^[a-z][a-z0-9]*(-[a-z0-9]+)*$/,\n        toParts: (name: string): string[] => name.split(\"-\"),\n        fromParts: (parts: string[]): string => parts.map(p => p.toLowerCase()).join(\"-\")\n    },\n    \"SCREAMING-KEBAB-CASE\": {\n        regex: /^[A-Z][A-Z0-9]*(-[A-Z0-9]+)*$/,\n        toParts: (name: string): string[] => name.split(\"-\"),\n        fromParts: (parts: string[]): string => parts.map(p => p.toUpperCase()).join(\"-\")\n    },\n    lowercase: {\n        regex: /^[a-z][a-z0-9]*$/,\n        toParts: (name: string): string[] => [name],\n        fromParts: (parts: string[]): string => parts.map(p => p.toLowerCase()).join(\"\")\n    },\n    UPPERCASE: {\n        regex: /^[A-Z][A-Z0-9]*$/,\n        toParts: (name: string): string[] => [name],\n        fromParts: (parts: string[]): string => parts.map(p => p.toUpperCase()).join(\"\")\n    }\n};\n\nexport class RustTargetLanguage extends TargetLanguage {\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): RustRenderer {\n        return new RustRenderer(this, renderContext, getOptionValues(rustOptions, untypedOptionValues));\n    }\n\n    public constructor() {\n        super(\"Rust\", [\"rust\", \"rs\", \"rustlang\"], \"rs\");\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [\n            rustOptions.density,\n            rustOptions.visibility,\n            rustOptions.deriveDebug,\n            rustOptions.deriveClone,\n            rustOptions.derivePartialEq,\n            rustOptions.edition2018,\n            rustOptions.leadingComments,\n            rustOptions.skipSerializingNone\n        ];\n    }\n}\n\nconst keywords = [\n    \"Serialize\",\n    \"Deserialize\",\n\n    // Special reserved identifiers used internally for elided lifetimes,\n    // unnamed method parameters, crate root module, error recovery etc.\n    \"{{root}}\",\n    \"$crate\",\n\n    // Keywords used in the language.\n    \"as\",\n    \"async\",\n    \"box\",\n    \"break\",\n    \"const\",\n    \"continue\",\n    \"crate\",\n    \"else\",\n    \"enum\",\n    \"extern\",\n    \"false\",\n    \"fn\",\n    \"for\",\n    \"if\",\n    \"impl\",\n    \"in\",\n    \"let\",\n    \"loop\",\n    \"match\",\n    \"mod\",\n    \"move\",\n    \"mut\",\n    \"pub\",\n    \"ref\",\n    \"return\",\n    \"self\",\n    \"Self\",\n    \"static\",\n    \"struct\",\n    \"super\",\n    \"trait\",\n    \"true\",\n    \"type\",\n    \"unsafe\",\n    \"use\",\n    \"where\",\n    \"while\",\n\n    // Keywords reserved for future use.\n    \"abstract\",\n    \"alignof\",\n    \"become\",\n    \"do\",\n    \"final\",\n    \"macro\",\n    \"offsetof\",\n    \"override\",\n    \"priv\",\n    \"proc\",\n    \"pure\",\n    \"sizeof\",\n    \"typeof\",\n    \"unsized\",\n    \"virtual\",\n    \"yield\",\n\n    // Weak keywords, have special meaning only in specific contexts.\n    \"catch\",\n    \"default\",\n    \"dyn\",\n    \"'static\",\n    \"union\",\n\n    // Conflict between `std::Option` and potentially generated Option\n    \"option\"\n];\n\nconst isAsciiLetterOrUnderscoreOrDigit = (codePoint: number): boolean => {\n    if (!isAscii(codePoint)) {\n        return false;\n    }\n\n    return isLetterOrUnderscoreOrDigit(codePoint);\n};\n\nconst isAsciiLetterOrUnderscore = (codePoint: number): boolean => {\n    if (!isAscii(codePoint)) {\n        return false;\n    }\n\n    return isLetterOrUnderscore(codePoint);\n};\n\nconst legalizeName = legalizeCharacters(isAsciiLetterOrUnderscoreOrDigit);\n\nfunction rustStyle(original: string, isSnakeCase: boolean): string {\n    const words = splitIntoWords(original);\n\n    const wordStyle = isSnakeCase ? allLowerWordStyle : firstUpperWordStyle;\n\n    const combined = combineWords(\n        words,\n        legalizeName,\n        wordStyle,\n        wordStyle,\n        wordStyle,\n        wordStyle,\n        isSnakeCase ? \"_\" : \"\",\n        isAsciiLetterOrUnderscore\n    );\n\n    return combined === \"_\" ? \"_underscore\" : combined;\n}\n\nconst snakeNamingFunction = funPrefixNamer(\"default\", (original: string) => rustStyle(original, true));\nconst camelNamingFunction = funPrefixNamer(\"camel\", (original: string) => rustStyle(original, false));\n\nconst standardUnicodeRustEscape = (codePoint: number): string => {\n    if (codePoint <= 0xffff) {\n        return \"\\\\u{\" + intToHex(codePoint, 4) + \"}\";\n    } else {\n        return \"\\\\u{\" + intToHex(codePoint, 6) + \"}\";\n    }\n};\n\nconst rustStringEscape = utf32ConcatMap(escapeNonPrintableMapper(isPrintable, standardUnicodeRustEscape));\n\nexport class RustRenderer extends ConvenienceRenderer {\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        private readonly _options: OptionValues<typeof rustOptions>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return camelNamingFunction;\n    }\n\n    protected namerForObjectProperty(): Namer | null {\n        return snakeNamingFunction;\n    }\n\n    protected makeUnionMemberNamer(): Namer | null {\n        return camelNamingFunction;\n    }\n\n    protected makeEnumCaseNamer(): Namer | null {\n        return camelNamingFunction;\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return keywords;\n    }\n\n    protected forbiddenForObjectProperties(_c: ClassType, _className: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected forbiddenForUnionMembers(_u: UnionType, _unionName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected forbiddenForEnumCases(_e: EnumType, _enumName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected get commentLineStart(): string {\n        return \"/// \";\n    }\n\n    private nullableRustType(t: Type, withIssues: boolean): Sourcelike {\n        return [\"Option<\", this.breakCycle(t, withIssues), \">\"];\n    }\n\n    protected isImplicitCycleBreaker(t: Type): boolean {\n        const kind = t.kind;\n        return kind === \"array\" || kind === \"map\";\n    }\n\n    private rustType(t: Type, withIssues = false): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => maybeAnnotated(withIssues, anyTypeIssueAnnotation, \"Option<serde_json::Value>\"),\n            _nullType => maybeAnnotated(withIssues, nullTypeIssueAnnotation, \"Option<serde_json::Value>\"),\n            _boolType => \"bool\",\n            _integerType => \"i64\",\n            _doubleType => \"f64\",\n            _stringType => \"String\",\n            arrayType => [\"Vec<\", this.rustType(arrayType.items, withIssues), \">\"],\n            classType => this.nameForNamedType(classType),\n            mapType => [\"HashMap<String, \", this.rustType(mapType.values, withIssues), \">\"],\n            enumType => this.nameForNamedType(enumType),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n\n                if (nullable !== null) return this.nullableRustType(nullable, withIssues);\n\n                const [hasNull] = removeNullFromUnion(unionType);\n\n                const isCycleBreaker = this.isCycleBreakerType(unionType);\n\n                const name = isCycleBreaker\n                    ? [\"Box<\", this.nameForNamedType(unionType), \">\"]\n                    : this.nameForNamedType(unionType);\n\n                return hasNull !== null ? ([\"Option<\", name, \">\"] as Sourcelike) : name;\n            }\n        );\n    }\n\n    private breakCycle(t: Type, withIssues: boolean): Sourcelike {\n        const rustType = this.rustType(t, withIssues);\n        const isCycleBreaker = this.isCycleBreakerType(t);\n\n        return isCycleBreaker ? [\"Box<\", rustType, \">\"] : rustType;\n    }\n\n    private emitRenameAttribute(\n        propName: Name,\n        jsonName: string,\n        defaultNamingStyle: string,\n        preferedNamingStyle: string\n    ): void {\n        const escapedName = rustStringEscape(jsonName);\n        const name = namingStyles[defaultNamingStyle].fromParts(this.sourcelikeToString(propName).split(\" \"));\n        const styledName = nameToNamingStyle(name, preferedNamingStyle);\n        const namesDiffer = escapedName !== styledName;\n        if (namesDiffer) {\n            this.emitLine('#[serde(rename = \"', escapedName, '\")]');\n        }\n    }\n\n    private emitSkipSerializeNone(t: Type): void {\n        if (t instanceof UnionType) {\n            const nullable = nullableFromUnion(t);\n            if (nullable !== null) this.emitLine('#[serde(skip_serializing_if = \"Option::is_none\")]');\n        }\n    }\n\n    private get visibility(): string {\n        if (this._options.visibility === Visibility.Crate) {\n            return \"pub(crate) \";\n        } else if (this._options.visibility === Visibility.Public) {\n            return \"pub \";\n        }\n\n        return \"\";\n    }\n\n    protected emitStructDefinition(c: ClassType, className: Name): void {\n        this.emitDescription(this.descriptionForType(c));\n        this.emitLine(\n            \"#[derive(\",\n            this._options.deriveDebug ? \"Debug, \" : \"\",\n            this._options.deriveClone ? \"Clone, \" : \"\",\n            this._options.derivePartialEq ? \"PartialEq, \" : \"\",\n            \"Serialize, Deserialize)]\"\n        );\n\n        // List the possible naming styles for every class property\n        const propertiesNamingStyles: { [key: string]: string[] } = {};\n        this.forEachClassProperty(c, \"none\", (_name, jsonName, _prop) => {\n            propertiesNamingStyles[jsonName] = listMatchingNamingStyles(jsonName);\n        });\n\n        // Set the default naming style on the struct\n        const defaultStyle = \"snake_case\";\n        const preferedNamingStyle = getPreferedNamingStyle(Object.values(propertiesNamingStyles).flat(), defaultStyle);\n        if (preferedNamingStyle !== defaultStyle) {\n            this.emitLine(`#[serde(rename_all = \"${preferedNamingStyle}\")]`);\n        }\n\n        const blankLines = this._options.density === Density.Dense ? \"none\" : \"interposing\";\n        const structBody = (): void =>\n            this.forEachClassProperty(c, blankLines, (name, jsonName, prop) => {\n                this.emitDescription(this.descriptionForClassProperty(c, jsonName));\n                this.emitRenameAttribute(name, jsonName, defaultStyle, preferedNamingStyle);\n                if (this._options.skipSerializingNone) {\n                    this.emitSkipSerializeNone(prop.type);\n                }\n\n                this.emitLine(this.visibility, name, \": \", this.breakCycle(prop.type, true), \",\");\n            });\n\n        this.emitBlock([\"pub struct \", className], structBody);\n    }\n\n    protected emitBlock(line: Sourcelike, f: () => void): void {\n        this.emitLine(line, \" {\");\n        this.indent(f);\n        this.emitLine(\"}\");\n    }\n\n    protected emitUnion(u: UnionType, unionName: Name): void {\n        const isMaybeWithSingleType = nullableFromUnion(u);\n\n        if (isMaybeWithSingleType !== null) {\n            return;\n        }\n\n        this.emitDescription(this.descriptionForType(u));\n        this.emitLine(\n            \"#[derive(\",\n            this._options.deriveDebug ? \"Debug, \" : \"\",\n            this._options.deriveClone ? \"Clone, \" : \"\",\n            this._options.derivePartialEq ? \"PartialEq, \" : \"\",\n            \"Serialize, Deserialize)]\"\n        );\n        this.emitLine(\"#[serde(untagged)]\");\n\n        const [, nonNulls] = removeNullFromUnion(u);\n\n        const blankLines = this._options.density === Density.Dense ? \"none\" : \"interposing\";\n        this.emitBlock([\"pub enum \", unionName], () =>\n            this.forEachUnionMember(u, nonNulls, blankLines, null, (fieldName, t) => {\n                const rustType = this.breakCycle(t, true);\n                this.emitLine([fieldName, \"(\", rustType, \"),\"]);\n            })\n        );\n    }\n\n    protected emitEnumDefinition(e: EnumType, enumName: Name): void {\n        this.emitDescription(this.descriptionForType(e));\n        this.emitLine(\n            \"#[derive(\",\n            this._options.deriveDebug ? \"Debug, \" : \"\",\n            this._options.deriveClone ? \"Clone, \" : \"\",\n            this._options.derivePartialEq ? \"PartialEq, \" : \"\",\n            \"Serialize, Deserialize)]\"\n        );\n\n        // List the possible naming styles for every enum case\n        const enumCasesNamingStyles: { [key: string]: string[] } = {};\n        this.forEachEnumCase(e, \"none\", (_name, jsonName) => {\n            enumCasesNamingStyles[jsonName] = listMatchingNamingStyles(jsonName);\n        });\n\n        // Set the default naming style on the enum\n        const defaultStyle = \"PascalCase\";\n        const preferedNamingStyle = getPreferedNamingStyle(Object.values(enumCasesNamingStyles).flat(), defaultStyle);\n        if (preferedNamingStyle !== defaultStyle) {\n            this.emitLine(`#[serde(rename_all = \"${preferedNamingStyle}\")]`);\n        }\n\n        const blankLines = this._options.density === Density.Dense ? \"none\" : \"interposing\";\n        this.emitBlock([\"pub enum \", enumName], () =>\n            this.forEachEnumCase(e, blankLines, (name, jsonName) => {\n                this.emitRenameAttribute(name, jsonName, defaultStyle, preferedNamingStyle);\n                this.emitLine([name, \",\"]);\n            })\n        );\n    }\n\n    protected emitTopLevelAlias(t: Type, name: Name): void {\n        this.emitLine(\"pub type \", name, \" = \", this.rustType(t), \";\");\n    }\n\n    protected emitLeadingComments(): void {\n        if (this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n            return;\n        }\n\n        const topLevelName = defined(mapFirst(this.topLevels)).getCombinedName();\n        this.emitMultiline(\n            `// Example code that deserializes and serializes the model.\n// extern crate serde;\n// #[macro_use]\n// extern crate serde_derive;\n// extern crate serde_json;\n//\n// use generated_module::${topLevelName};\n//\n// fn main() {\n//     let json = r#\"{\"answer\": 42}\"#;\n//     let model: ${topLevelName} = serde_json::from_str(&json).unwrap();\n// }`\n        );\n    }\n\n    protected emitSourceStructure(): void {\n        if (this._options.leadingComments) {\n            this.emitLeadingComments();\n        }\n\n        this.ensureBlankLine();\n        if (this._options.edition2018) {\n            this.emitLine(\"use serde::{Serialize, Deserialize};\");\n        } else {\n            this.emitLine(\"extern crate serde_derive;\");\n        }\n\n        if (this.haveMaps) {\n            this.emitLine(\"use std::collections::HashMap;\");\n        }\n\n        this.forEachTopLevel(\n            \"leading\",\n            (t, name) => this.emitTopLevelAlias(t, name),\n            t => this.namedTypeToNameForTopLevel(t) === undefined\n        );\n\n        this.forEachNamedType(\n            \"leading-and-interposing\",\n            (c: ClassType, name: Name) => this.emitStructDefinition(c, name),\n            (e, name) => this.emitEnumDefinition(e, name),\n            (u, name) => this.emitUnion(u, name)\n        );\n    }\n}\n\nfunction getPreferedNamingStyle(namingStyleOccurences: string[], defaultStyle: string): string {\n    const occurrences = Object.fromEntries(Object.keys(namingStyles).map(key => [key, 0]));\n    namingStyleOccurences.forEach(style => ++occurrences[style]);\n    const max = Math.max(...Object.values(occurrences));\n    const preferedStyles = Object.entries(occurrences)\n        .filter(([_style, num]) => num === max)\n        .map(([style, _num]) => style);\n    if (preferedStyles.includes(defaultStyle)) {\n        return defaultStyle;\n    }\n\n    return preferedStyles[0];\n}\n\nfunction listMatchingNamingStyles(name: string): string[] {\n    return Object.entries(namingStyles)\n        .filter(([_, { regex }]) => regex.test(name))\n        .map(([namingStyle, _]) => namingStyle);\n}\n\nfunction nameToNamingStyle(name: string, style: string): string {\n    if (namingStyles[style].regex.test(name)) {\n        return name;\n    }\n\n    const fromStyle = listMatchingNamingStyles(name)[0];\n    if (fromStyle === undefined) {\n        return name;\n    }\n\n    return namingStyles[style].fromParts(namingStyles[fromStyle].toParts(name));\n}\n","import { anyTypeIssueAnnotation, nullTypeIssueAnnotation } from \"../Annotation\";\nimport { ConvenienceRenderer, type ForbiddenWordsInfo } from \"../ConvenienceRenderer\";\nimport { type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { EnumOption, type Option, type OptionValues, StringOption, getOptionValues } from \"../RendererOptions\";\nimport { type Sourcelike, maybeAnnotated } from \"../Source\";\nimport {\n    allLowerWordStyle,\n    allUpperWordStyle,\n    combineWords,\n    firstUpperWordStyle,\n    isDigit,\n    isLetterOrUnderscore,\n    isNumeric,\n    legalizeCharacters,\n    splitIntoWords\n} from \"../support/Strings\";\nimport { assertNever } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport {\n    ArrayType,\n    type ClassProperty,\n    type ClassType,\n    type EnumType,\n    MapType,\n    type ObjectType,\n    type Type,\n    type UnionType\n} from \"../Type\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { matchType, nullableFromUnion, removeNullFromUnion } from \"../TypeUtils\";\n\nexport enum Framework {\n    None = \"None\",\n    Upickle = \"Upickle\",\n    Circe = \"Circe\"\n}\n\nexport const scala3Options = {\n    framework: new EnumOption(\n        \"framework\",\n        \"Serialization framework\",\n        [\n            [\"just-types\", Framework.None],\n            [\"circe\", Framework.Circe],\n            [\"upickle\", Framework.Upickle]\n        ],\n        undefined\n    ),\n    packageName: new StringOption(\"package\", \"Package\", \"PACKAGE\", \"quicktype\")\n};\n\n// Use backticks for param names with symbols\nconst invalidSymbols = [\n    \":\",\n    \"-\",\n    \"+\",\n    \"!\",\n    \"@\",\n    \"#\",\n    \"$\",\n    \"%\",\n    \"^\",\n    \"&\",\n    \"*\",\n    \"(\",\n    \")\",\n    \">\",\n    \"<\",\n    \"/\",\n    \";\",\n    \"'\",\n    '\"',\n    \"{\",\n    \"}\",\n    \":\",\n    \"~\",\n    \"`\",\n    \".\"\n];\n\nconst keywords = [\n    \"abstract\",\n    \"case\",\n    \"catch\",\n    \"class\",\n    \"def\",\n    \"do\",\n    \"else\",\n    \"enum\",\n    \"extends\",\n    \"export\",\n    \"false\",\n    \"final\",\n    \"finally\",\n    \"for\",\n    \"forSome\",\n    \"if\",\n    \"implicit\",\n    \"import\",\n    \"lazy\",\n    \"match\",\n    \"new\",\n    \"null\",\n    \"object\",\n    \"override\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"return\",\n    \"sealed\",\n    \"super\",\n    \"this\",\n    \"then\",\n    \"throw\",\n    \"trait\",\n    \"try\",\n    \"true\",\n    \"type\",\n    \"val\",\n    \"var\",\n    \"while\",\n    \"with\",\n    \"yield\",\n    \"Any\",\n    \"Boolean\",\n    \"Double\",\n    \"Float\",\n    \"Long\",\n    \"Int\",\n    \"Short\",\n    \"System\",\n    \"Byte\",\n    \"String\",\n    \"Array\",\n    \"List\",\n    \"Map\",\n    \"Enum\"\n];\n\n/**\n * Check if given parameter name should be wrapped in a backtick\n * @param paramName\n */\nconst shouldAddBacktick = (paramName: string): boolean => {\n    return (\n        keywords.some(s => paramName === s) ||\n        invalidSymbols.some(s => paramName.includes(s)) ||\n        !isNaN(+parseFloat(paramName)) ||\n        !isNaN(parseInt(paramName.charAt(0)))\n    );\n};\n\nconst wrapOption = (s: string, optional: boolean): string => {\n    if (optional) {\n        return \"Option[\" + s + \"]\";\n    } else {\n        return s;\n    }\n};\n\nfunction isPartCharacter(codePoint: number): boolean {\n    return isLetterOrUnderscore(codePoint) || isNumeric(codePoint);\n}\n\nfunction isStartCharacter(codePoint: number): boolean {\n    return isPartCharacter(codePoint) && !isDigit(codePoint);\n}\n\nconst legalizeName = legalizeCharacters(isPartCharacter);\n\nfunction scalaNameStyle(isUpper: boolean, original: string): string {\n    const words = splitIntoWords(original);\n    return combineWords(\n        words,\n        legalizeName,\n        isUpper ? firstUpperWordStyle : allLowerWordStyle,\n        firstUpperWordStyle,\n        isUpper ? allUpperWordStyle : allLowerWordStyle,\n        allUpperWordStyle,\n        \"\",\n        isStartCharacter\n    );\n}\n\n/* function unicodeEscape(codePoint: number): string {\n    return \"\\\\u\" + intToHex(codePoint, 4);\n} */\n\n// const _stringEscape = utf32ConcatMap(escapeNonPrintableMapper(isPrintable, unicodeEscape));\n\n/* function stringEscape(s: string): string {\n    // \"$this\" is a template string in Kotlin so we have to escape $\n    return _stringEscape(s).replace(/\\$/g, \"\\\\$\");\n} */\n\nconst upperNamingFunction = funPrefixNamer(\"upper\", s => scalaNameStyle(true, s));\nconst lowerNamingFunction = funPrefixNamer(\"lower\", s => scalaNameStyle(false, s));\n\nexport class Scala3Renderer extends ConvenienceRenderer {\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        protected readonly _scalaOptions: OptionValues<typeof scala3Options>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return keywords;\n    }\n\n    protected forbiddenForObjectProperties(_: ObjectType, _classNamed: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected forbiddenForEnumCases(_: EnumType, _enumName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected forbiddenForUnionMembers(_u: UnionType, _unionName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: false };\n    }\n\n    protected topLevelNameStyle(rawName: string): string {\n        return scalaNameStyle(true, rawName);\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return upperNamingFunction;\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return lowerNamingFunction;\n    }\n\n    protected makeUnionMemberNamer(): Namer {\n        return funPrefixNamer(\"upper\", s => scalaNameStyle(true, s) + \"Value\");\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return funPrefixNamer(\"upper\", s => s.replace(\" \", \"\")); // TODO - add backticks where appropriate\n    }\n\n    protected emitDescriptionBlock(lines: Sourcelike[]): void {\n        this.emitCommentLines(lines, { lineStart: \" * \", beforeComment: \"/**\", afterComment: \" */\" });\n    }\n\n    protected emitBlock(\n        line: Sourcelike,\n        f: () => void,\n        delimiter: \"curly\" | \"paren\" | \"lambda\" | \"none\" = \"curly\"\n    ): void {\n        const [open, close] =\n            delimiter === \"curly\"\n                ? [\"{\", \"}\"]\n                : delimiter === \"paren\"\n                  ? [\"(\", \")\"]\n                  : delimiter === \"none\"\n                    ? [\"\", \"\"]\n                    : [\"{\", \"})\"];\n        this.emitLine(line, \" \", open);\n        this.indent(f);\n        this.emitLine(close);\n    }\n\n    protected anySourceType(optional: boolean): Sourcelike {\n        return [wrapOption(\"Any\", optional)];\n    }\n\n    // (asarazan): I've broken out the following two functions\n    // because some renderers, such as kotlinx, can cope with `any`, while some get mad.\n    protected arrayType(arrayType: ArrayType, withIssues = false): Sourcelike {\n        return [\"Seq[\", this.scalaType(arrayType.items, withIssues), \"]\"];\n    }\n\n    protected mapType(mapType: MapType, withIssues = false): Sourcelike {\n        return [\"Map[String, \", this.scalaType(mapType.values, withIssues), \"]\"];\n    }\n\n    protected scalaType(t: Type, withIssues = false, noOptional = false): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => {\n                return maybeAnnotated(withIssues, anyTypeIssueAnnotation, this.anySourceType(!noOptional));\n            },\n            _nullType => {\n                // return \"None.type\"\n                return maybeAnnotated(withIssues, nullTypeIssueAnnotation, this.anySourceType(!noOptional));\n            },\n            _boolType => \"Boolean\",\n            _integerType => \"Long\",\n            _doubleType => \"Double\",\n            _stringType => \"String\",\n            arrayType => this.arrayType(arrayType, withIssues),\n            classType => this.nameForNamedType(classType),\n            mapType => this.mapType(mapType, withIssues),\n            enumType => this.nameForNamedType(enumType),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    if (noOptional) {\n                        return [this.scalaType(nullable, withIssues)];\n                    } else {\n                        return [\"Option[\", this.scalaType(nullable, withIssues), \"]\"];\n                    }\n                }\n\n                return this.nameForNamedType(unionType);\n            }\n        );\n    }\n\n    protected emitUsageHeader(): void {\n        // To be overridden\n    }\n\n    protected emitHeader(): void {\n        if (this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n        } else {\n            this.emitUsageHeader();\n        }\n\n        this.ensureBlankLine();\n        this.emitLine(\"package \", this._scalaOptions.packageName);\n        this.ensureBlankLine();\n    }\n\n    protected emitTopLevelArray(t: ArrayType, name: Name): void {\n        const elementType = this.scalaType(t.items);\n        this.emitLine([\"type \", name, \" = List[\", elementType, \"]\"]);\n    }\n\n    protected emitTopLevelMap(t: MapType, name: Name): void {\n        const elementType = this.scalaType(t.values);\n        this.emitLine([\"type \", name, \" = Map[String, \", elementType, \"]\"]);\n    }\n\n    protected emitEmptyClassDefinition(c: ClassType, className: Name): void {\n        this.emitDescription(this.descriptionForType(c));\n        this.emitLine(\"case class \", className, \"()\");\n    }\n\n    protected emitClassDefinition(c: ClassType, className: Name): void {\n        if (c.getProperties().size === 0) {\n            this.emitEmptyClassDefinition(c, className);\n            return;\n        }\n\n        const scalaType = (p: ClassProperty): Sourcelike => {\n            if (p.isOptional) {\n                return [\"Option[\", this.scalaType(p.type, true, true), \"]\"];\n            } else {\n                return this.scalaType(p.type, true);\n            }\n        };\n\n        this.emitDescription(this.descriptionForType(c));\n        this.emitLine(\"case class \", className, \" (\");\n        this.indent(() => {\n            let count = c.getProperties().size;\n            let first = true;\n            this.forEachClassProperty(c, \"none\", (_, jsonName, p) => {\n                const nullable = p.type.kind === \"union\" && nullableFromUnion(p.type as UnionType) !== null;\n                const nullableOrOptional = p.isOptional || p.type.kind === \"null\" || nullable;\n                const last = --count === 0;\n                const meta: Array<() => void> = [];\n\n                const description = this.descriptionForClassProperty(c, jsonName);\n                if (description !== undefined) {\n                    meta.push(() => this.emitDescription(description));\n                }\n\n                if (meta.length > 0 && !first) {\n                    this.ensureBlankLine();\n                }\n\n                for (const emit of meta) {\n                    emit();\n                }\n\n                const nameNeedsBackticks = jsonName.endsWith(\"_\") || shouldAddBacktick(jsonName);\n                const nameWithBackticks = nameNeedsBackticks ? \"`\" + jsonName + \"`\" : jsonName;\n                this.emitLine(\n                    \"val \",\n                    nameWithBackticks,\n                    \" : \",\n                    scalaType(p),\n                    p.isOptional ? \" = None\" : nullableOrOptional ? \" = None\" : \"\",\n                    last ? \"\" : \",\"\n                );\n\n                if (meta.length > 0 && !last) {\n                    this.ensureBlankLine();\n                }\n\n                first = false;\n            });\n        });\n\n        this.emitClassDefinitionMethods();\n    }\n\n    protected emitClassDefinitionMethods(): void {\n        this.emitLine(\")\");\n    }\n\n    protected emitEnumDefinition(e: EnumType, enumName: Name): void {\n        this.emitDescription(this.descriptionForType(e));\n\n        this.emitBlock(\n            [\"enum \", enumName, \" : \"],\n            () => {\n                let count = e.cases.size;\n                if (count > 0) {\n                    this.emitItem(\"\\t case \");\n                }\n\n                this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n                    if (!(jsonName == \"\")) {\n                        const backticks =\n                            shouldAddBacktick(jsonName) ||\n                            jsonName.includes(\" \") ||\n                            !isNaN(parseInt(jsonName.charAt(0)));\n                        if (backticks) {\n                            this.emitItem(\"`\");\n                        }\n\n                        this.emitItemOnce([name]);\n                        if (backticks) {\n                            this.emitItem(\"`\");\n                        }\n\n                        if (--count > 0) this.emitItem([\",\"]);\n                    } else {\n                        --count;\n                    }\n                });\n            },\n            \"none\"\n        );\n    }\n\n    protected emitUnionDefinition(u: UnionType, unionName: Name): void {\n        function sortBy(t: Type): string {\n            const kind = t.kind;\n            if (kind === \"class\") return kind;\n            return \"_\" + kind;\n        }\n\n        this.emitDescription(this.descriptionForType(u));\n\n        const [maybeNull, nonNulls] = removeNullFromUnion(u, sortBy);\n        const theTypes: Sourcelike[] = [];\n        this.forEachUnionMember(u, nonNulls, \"none\", null, (_, t) => {\n            theTypes.push(this.scalaType(t));\n        });\n        if (maybeNull !== null) {\n            theTypes.push(this.nameForUnionMember(u, maybeNull));\n        }\n\n        this.emitItem([\"type \", unionName, \" = \"]);\n        theTypes.forEach((t, i) => {\n            this.emitItem(i === 0 ? t : [\" | \", t]);\n        });\n        this.ensureBlankLine();\n    }\n\n    protected emitSourceStructure(): void {\n        this.emitHeader();\n\n        // Top-level arrays, maps\n        this.forEachTopLevel(\"leading\", (t, name) => {\n            if (t instanceof ArrayType) {\n                this.emitTopLevelArray(t, name);\n            } else if (t instanceof MapType) {\n                this.emitTopLevelMap(t, name);\n            }\n        });\n\n        this.forEachNamedType(\n            \"leading-and-interposing\",\n            (c: ClassType, n: Name) => this.emitClassDefinition(c, n),\n            (e, n) => this.emitEnumDefinition(e, n),\n            (u, n) => this.emitUnionDefinition(u, n)\n        );\n    }\n}\n\nexport class UpickleRenderer extends Scala3Renderer {\n    protected emitClassDefinitionMethods(): void {\n        this.emitLine(\") derives ReadWriter \");\n    }\n\n    protected emitHeader(): void {\n        super.emitHeader();\n\n        this.emitLine(\"import upickle.default.*\");\n        this.ensureBlankLine();\n    }\n}\n\nexport class CirceRenderer extends Scala3Renderer {\n    private seenUnionTypes: string[] = [];\n\n    protected circeEncoderForType(t: Type, __ = false, noOptional = false, paramName: string = \"\"): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => [\"Encoder.encodeJson(\", paramName, \")\"],\n            _nullType => [\"Encoder.encodeNone(\", paramName, \")\"],\n            _boolType => [\"Encoder.encodeBoolean(\", paramName, \")\"],\n            _integerType => [\"Encoder.encodeLong(\", paramName, \")\"],\n            _doubleType => [\"Encoder.encodeDouble(\", paramName, \")\"],\n            _stringType => [\"Encoder.encodeString(\", paramName, \")\"],\n            arrayType => [\"Encoder.encodeSeq[\", this.scalaType(arrayType.items), \"].apply(\", paramName, \")\"],\n            classType => [\"Encoder.AsObject[\", this.scalaType(classType), \"].apply(\", paramName, \")\"],\n            mapType => [\"Encoder.encodeMap[String,\", this.scalaType(mapType.values), \"].apply(\", paramName, \")\"],\n            _ => [\"Encoder.encodeString(\", paramName, \")\"],\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    if (noOptional) {\n                        return [\"Encoder.AsObject[\", this.nameForNamedType(nullable), \"]\"];\n                    } else {\n                        return [\"Encoder.AsObject[Option[\", this.nameForNamedType(nullable), \"]]\"];\n                    }\n                }\n\n                return [\"Encoder.AsObject[\", this.nameForNamedType(unionType), \"]\"];\n            }\n        );\n    }\n\n    protected emitEmptyClassDefinition(c: ClassType, className: Name): void {\n        this.emitDescription(this.descriptionForType(c));\n        this.ensureBlankLine();\n        this.emitLine(\"case class \", className, \"()  derives Encoder.AsObject, Decoder\");\n    }\n\n    protected anySourceType(optional: boolean): Sourcelike {\n        return [wrapOption(\"Json\", optional)];\n    }\n\n    protected emitClassDefinitionMethods(): void {\n        this.emitLine(\") derives Encoder.AsObject, Decoder\");\n    }\n\n    protected emitEnumDefinition(e: EnumType, enumName: Name): void {\n        this.emitDescription(this.descriptionForType(e));\n\n        this.ensureBlankLine();\n        this.emitItem([\"type \", enumName, \" = \"]);\n        let count = e.cases.size;\n        this.forEachEnumCase(e, \"none\", (_, jsonName) => {\n            // if (!(jsonName == \"\")) {\n            /*                 const backticks = \n                                shouldAddBacktick(jsonName) || \n                                jsonName.includes(\" \") || \n                                !isNaN(parseInt(jsonName.charAt(0)))\n                            if (backticks) {this.emitItem(\"`\")} else  */\n            this.emitItem(['\"', jsonName, '\"']);\n            //                if (backticks) {this.emitItem(\"`\")}\n            if (--count > 0) this.emitItem([\" | \"]);\n            // } else {\n            // --count\n            // }\n        });\n        this.ensureBlankLine();\n    }\n\n    protected emitHeader(): void {\n        super.emitHeader();\n\n        this.emitLine(\"import scala.util.Try\");\n        this.emitLine(\"import io.circe.syntax._\");\n        this.emitLine(\"import io.circe._\");\n        this.emitLine(\"import cats.syntax.functor._\");\n        this.ensureBlankLine();\n\n        this.emitLine(\"// For serialising string unions\");\n        this.emitLine(\n            \"given [A <: Singleton](using A <:< String): Decoder[A] = Decoder.decodeString.emapTry(x => Try(x.asInstanceOf[A])) \"\n        );\n        this.emitLine(\n            \"given [A <: Singleton](using ev: A <:< String): Encoder[A] = Encoder.encodeString.contramap(ev) \"\n        );\n        this.ensureBlankLine();\n        this.emitLine(\"// If a union has a null in, then we'll need this too... \");\n        this.emitLine(\"type NullValue = None.type\");\n    }\n\n    protected emitTopLevelArray(t: ArrayType, name: Name): void {\n        super.emitTopLevelArray(t, name);\n        const elementType = this.scalaType(t.items);\n        this.emitLine([\n            \"given (using ev : \",\n            elementType,\n            \"): Encoder[Map[String,\",\n            elementType,\n            \"]] = Encoder.encodeMap[String, \",\n            elementType,\n            \"]\"\n        ]);\n    }\n\n    protected emitTopLevelMap(t: MapType, name: Name): void {\n        super.emitTopLevelMap(t, name);\n        const elementType = this.scalaType(t.values);\n        this.ensureBlankLine();\n        this.emitLine([\n            \"given (using ev : \",\n            elementType,\n            \"): Encoder[Map[String, \",\n            elementType,\n            \"]] = Encoder.encodeMap[String, \",\n            elementType,\n            \"]\"\n        ]);\n    }\n\n    protected emitUnionDefinition(u: UnionType, unionName: Name): void {\n        function sortBy(t: Type): string {\n            const kind = t.kind;\n            if (kind === \"class\") return kind;\n            return \"_\" + kind;\n        }\n\n        this.emitDescription(this.descriptionForType(u));\n\n        const [maybeNull, nonNulls] = removeNullFromUnion(u, sortBy);\n        const theTypes: Sourcelike[] = [];\n        this.forEachUnionMember(u, nonNulls, \"none\", null, (_, t) => {\n            theTypes.push(this.scalaType(t));\n        });\n        if (maybeNull !== null) {\n            theTypes.push(this.nameForUnionMember(u, maybeNull));\n        }\n\n        this.emitItem([\"type \", unionName, \" = \"]);\n        theTypes.forEach((t, i) => {\n            this.emitItem(i === 0 ? t : [\" | \", t]);\n        });\n        const thisUnionType = theTypes.map(x => this.sourcelikeToString(x)).join(\" | \");\n\n        this.ensureBlankLine();\n        if (!this.seenUnionTypes.some(y => y === thisUnionType)) {\n            this.seenUnionTypes.push(thisUnionType);\n            const sourceLikeTypes: Array<[Sourcelike, Type]> = [];\n            this.forEachUnionMember(u, nonNulls, \"none\", null, (_, t) => {\n                sourceLikeTypes.push([this.scalaType(t), t]);\n            });\n            if (maybeNull !== null) {\n                sourceLikeTypes.push([this.nameForUnionMember(u, maybeNull), maybeNull]);\n            }\n\n            this.emitLine([\"given Decoder[\", unionName, \"] = {\"]);\n            this.indent(() => {\n                this.emitLine([\"List[Decoder[\", unionName, \"]](\"]);\n                this.indent(() => {\n                    sourceLikeTypes.forEach(t => {\n                        this.emitLine([\"Decoder[\", t[0], \"].widen,\"]);\n                    });\n                });\n                this.emitLine(\").reduceLeft(_ or _)\");\n            });\n            this.emitLine([\"}\"]);\n\n            this.ensureBlankLine();\n\n            this.emitLine([\"given Encoder[\", unionName, \"] = Encoder.instance {\"]);\n            this.indent(() => {\n                sourceLikeTypes.forEach((t, i) => {\n                    const paramTemp = `enc${i.toString()}`;\n                    this.emitLine([\n                        \"case \",\n                        paramTemp,\n                        \" : \",\n                        t[0],\n                        \" => \",\n                        this.circeEncoderForType(t[1], false, false, paramTemp)\n                    ]);\n                });\n            });\n            this.emitLine(\"}\");\n        }\n    }\n}\n\nexport class Scala3TargetLanguage extends TargetLanguage {\n    public constructor() {\n        super(\"Scala3\", [\"scala3\"], \"scala\");\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [scala3Options.framework, scala3Options.packageName];\n    }\n\n    public get supportsOptionalClassProperties(): boolean {\n        return true;\n    }\n\n    public get supportsUnionsWithBothNumberTypes(): boolean {\n        return true;\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): ConvenienceRenderer {\n        const options = getOptionValues(scala3Options, untypedOptionValues);\n\n        switch (options.framework) {\n            case Framework.None:\n                return new Scala3Renderer(this, renderContext, options);\n            case Framework.Upickle:\n                return new UpickleRenderer(this, renderContext, options);\n            case Framework.Circe:\n                return new CirceRenderer(this, renderContext, options);\n            default:\n                return assertNever(options.framework);\n        }\n    }\n}\n","import { anyTypeIssueAnnotation, nullTypeIssueAnnotation } from \"../Annotation\";\nimport { ConvenienceRenderer, type ForbiddenWordsInfo } from \"../ConvenienceRenderer\";\nimport { type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { EnumOption, type Option, type OptionValues, StringOption, getOptionValues } from \"../RendererOptions\";\nimport { type Sourcelike, maybeAnnotated } from \"../Source\";\nimport {\n    allLowerWordStyle,\n    allUpperWordStyle,\n    combineWords,\n    firstUpperWordStyle,\n    isDigit,\n    isLetterOrUnderscore,\n    isNumeric,\n    legalizeCharacters,\n    splitIntoWords\n} from \"../support/Strings\";\nimport { assertNever } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport {\n    ArrayType,\n    type ClassProperty,\n    type ClassType,\n    type EnumType,\n    MapType,\n    type ObjectType,\n    type Type,\n    type UnionType\n} from \"../Type\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { matchCompoundType, matchType, nullableFromUnion, removeNullFromUnion } from \"../TypeUtils\";\n\nexport enum Framework {\n    None = \"None\"\n}\n\nexport const SmithyOptions = {\n    framework: new EnumOption(\"framework\", \"Serialization framework\", [[\"just-types\", Framework.None]], undefined),\n    packageName: new StringOption(\"package\", \"Package\", \"PACKAGE\", \"quicktype\")\n};\n\n// Use backticks for param names with symbols\nconst invalidSymbols = [\n    \":\",\n    \"-\",\n    \"+\",\n    \"!\",\n    \"@\",\n    \"#\",\n    \"%\",\n    \"^\",\n    \"&\",\n    \"*\",\n    \"(\",\n    \")\",\n    \">\",\n    \"<\",\n    \"/\",\n    \";\",\n    \"'\",\n    '\"',\n    \"{\",\n    \"}\",\n    \":\",\n    \"~\",\n    \"`\",\n    \".\"\n];\n\nconst keywords = [\n    \"abstract\",\n    \"case\",\n    \"catch\",\n    \"do\",\n    \"else\",\n    \"export\",\n    \"false\",\n    \"final\",\n    \"finally\",\n    \"for\",\n    \"forSome\",\n    \"if\",\n    \"implicit\",\n    \"import\",\n    \"new\",\n    \"override\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"return\",\n    \"sealed\",\n    \"super\",\n    \"this\",\n    \"then\",\n    \"throw\",\n    \"trait\",\n    \"try\",\n    \"true\",\n    \"val\",\n    \"var\",\n    \"while\",\n    \"with\",\n    \"yield\",\n    \"Any\",\n    \"Boolean\",\n    \"Double\",\n    \"Float\",\n    \"Long\",\n    \"Int\",\n    \"Short\",\n    \"System\",\n    \"Byte\",\n    \"String\",\n    \"Array\",\n    \"List\",\n    \"Map\",\n    \"Enum\"\n];\n\n/**\n * Check if given parameter name should be wrapped in a backtick\n * @param paramName\n */\nconst shouldAddBacktick = (paramName: string): boolean => {\n    return (\n        keywords.some(s => paramName === s) ||\n        invalidSymbols.some(s => paramName.includes(s)) ||\n        !isNaN(parseFloat(paramName)) ||\n        !isNaN(parseInt(paramName.charAt(0)))\n    );\n};\n\nfunction isPartCharacter(codePoint: number): boolean {\n    return isLetterOrUnderscore(codePoint) || isNumeric(codePoint);\n}\n\nfunction isStartCharacter(codePoint: number): boolean {\n    return isPartCharacter(codePoint) && !isDigit(codePoint);\n}\n\nconst legalizeName = legalizeCharacters(isPartCharacter);\n\nfunction scalaNameStyle(isUpper: boolean, original: string): string {\n    const words = splitIntoWords(original);\n    return combineWords(\n        words,\n        legalizeName,\n        isUpper ? firstUpperWordStyle : allLowerWordStyle,\n        firstUpperWordStyle,\n        isUpper ? allUpperWordStyle : allLowerWordStyle,\n        allUpperWordStyle,\n        \"\",\n        isStartCharacter\n    );\n}\n\nconst upperNamingFunction = funPrefixNamer(\"upper\", s => scalaNameStyle(true, s));\nconst lowerNamingFunction = funPrefixNamer(\"lower\", s => scalaNameStyle(false, s));\n\nexport class Smithy4sRenderer extends ConvenienceRenderer {\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        protected readonly _scalaOptions: OptionValues<typeof SmithyOptions>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return keywords;\n    }\n\n    protected forbiddenForObjectProperties(_: ObjectType, _classNamed: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected forbiddenForEnumCases(_: EnumType, _enumName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected forbiddenForUnionMembers(_u: UnionType, _unionName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: false };\n    }\n\n    protected topLevelNameStyle(rawName: string): string {\n        return scalaNameStyle(true, rawName);\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return upperNamingFunction;\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return lowerNamingFunction;\n    }\n\n    protected makeUnionMemberNamer(): Namer {\n        return funPrefixNamer(\"upper\", s => scalaNameStyle(true, s) + \"Value\");\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return funPrefixNamer(\"upper\", s => s.replace(\" \", \"\")); // TODO - add backticks where appropriate\n    }\n\n    protected emitDescriptionBlock(lines: Sourcelike[]): void {\n        this.emitCommentLines(lines, { lineStart: \" * \", beforeComment: \"/**\", afterComment: \" */\" });\n    }\n\n    protected emitBlock(\n        line: Sourcelike,\n        f: () => void,\n        delimiter: \"curly\" | \"paren\" | \"lambda\" | \"none\" = \"curly\"\n    ): void {\n        const [open, close] =\n            delimiter === \"curly\"\n                ? [\"{\", \"}\"]\n                : delimiter === \"paren\"\n                  ? [\"(\", \")\"]\n                  : delimiter === \"none\"\n                    ? [\"\", \"\"]\n                    : [\"{\", \"})\"];\n        this.emitLine(line, \" \", open);\n        this.indent(f);\n        this.emitLine(close);\n    }\n\n    protected anySourceType(_: boolean): Sourcelike {\n        return [\"Document\"];\n    }\n\n    // (asarazan): I've broken out the following two functions\n    // because some renderers, such as kotlinx, can cope with `any`, while some get mad.\n    protected arrayType(arrayType: ArrayType, _ = false): Sourcelike {\n        // this.emitTopLevelArray(arrayType, new Name(arrayType.getCombinedName().toString() + \"List\"))\n        return arrayType.getCombinedName().toString() + \"List\";\n    }\n\n    protected emitArrayType(_: ArrayType, smithyType: Sourcelike): void {\n        this.emitLine([\"list \", smithyType, \" { member : \", \"}\"]);\n    }\n\n    protected mapType(mapType: MapType, _ = false): Sourcelike {\n        return mapType.getCombinedName().toString() + \"Map\";\n        // return [this.scalaType(mapType.values, withIssues), \"Map\"];\n    }\n\n    protected scalaType(t: Type, withIssues = false, noOptional = false): Sourcelike {\n        return matchType<Sourcelike>(\n            t,\n            _anyType => {\n                return maybeAnnotated(withIssues, anyTypeIssueAnnotation, this.anySourceType(!noOptional));\n            },\n            _nullType => {\n                // return \"None.type\"\n                return maybeAnnotated(withIssues, nullTypeIssueAnnotation, this.anySourceType(!noOptional));\n            },\n            _boolType => \"Boolean\",\n            _integerType => \"Long\",\n            _doubleType => \"Double\",\n            _stringType => \"String\",\n            arrayType => this.arrayType(arrayType, withIssues),\n            classType => this.nameForNamedType(classType),\n            mapType => this.mapType(mapType, withIssues),\n            enumType => this.nameForNamedType(enumType),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) {\n                    return [this.scalaType(nullable, withIssues)];\n                }\n\n                return this.nameForNamedType(unionType);\n            }\n        );\n    }\n\n    protected emitUsageHeader(): void {\n        // To be overridden\n    }\n\n    protected emitHeader(): void {\n        if (this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n        } else {\n            this.emitUsageHeader();\n        }\n\n        this.ensureBlankLine();\n        this.emitLine('$version: \"2\"');\n        this.emitLine(\"namespace \", this._scalaOptions.packageName);\n        this.ensureBlankLine();\n\n        this.emitLine(\"document NullValue\");\n        this.ensureBlankLine();\n    }\n\n    protected emitTopLevelArray(t: ArrayType, name: Name): void {\n        const elementType = this.scalaType(t.items);\n        this.emitLine([\"list \", name, \" { member : \", elementType, \"}\"]);\n    }\n\n    protected emitTopLevelMap(t: MapType, name: Name): void {\n        const elementType = this.scalaType(t.values);\n        this.emitLine([\"map \", name, \" { map[ key : String , value : \", elementType, \"}\"]);\n    }\n\n    protected emitEmptyClassDefinition(c: ClassType, className: Name): void {\n        this.emitDescription(this.descriptionForType(c));\n        this.emitLine(\"structure \", className, \"{}\");\n    }\n\n    protected emitClassDefinition(c: ClassType, className: Name): void {\n        if (c.getProperties().size === 0) {\n            this.emitEmptyClassDefinition(c, className);\n            return;\n        }\n\n        const scalaType = (p: ClassProperty): Sourcelike => {\n            if (p.isOptional) {\n                return [this.scalaType(p.type, true, true)];\n            } else {\n                return [this.scalaType(p.type, true)];\n            }\n        };\n\n        const emitLater: ClassProperty[] = [];\n\n        this.emitDescription(this.descriptionForType(c));\n        this.emitLine(\"structure \", className, \" {\");\n        this.indent(() => {\n            let count = c.getProperties().size;\n            let first = true;\n\n            this.forEachClassProperty(c, \"none\", (_, jsonName, p) => {\n                const nullable = p.type.kind === \"union\" && nullableFromUnion(p.type as UnionType) !== null;\n                const nullableOrOptional = p.isOptional || p.type.kind === \"null\" || nullable;\n                const last = --count === 0;\n                const meta: Array<() => void> = [];\n\n                const laterType = p.type.kind === \"array\" || p.type.kind === \"map\";\n                if (laterType) {\n                    emitLater.push(p);\n                }\n\n                const description = this.descriptionForClassProperty(c, jsonName);\n                if (description !== undefined) {\n                    meta.push(() => this.emitDescription(description));\n                }\n\n                if (meta.length > 0 && !first) {\n                    this.ensureBlankLine();\n                }\n\n                for (const emit of meta) {\n                    emit();\n                }\n\n                const nameNeedsBackticks = jsonName.endsWith(\"_\") || shouldAddBacktick(jsonName);\n                const nameWithBackticks = nameNeedsBackticks ? \"`\" + jsonName + \"`\" : jsonName;\n                this.emitLine(\n                    p.isOptional ? \"\" : nullableOrOptional ? \"\" : \"@required \",\n                    nameWithBackticks,\n                    \" : \",\n                    scalaType(p),\n\n                    last ? \"\" : \",\"\n                );\n\n                if (meta.length > 0 && !last) {\n                    this.ensureBlankLine();\n                }\n\n                first = false;\n            });\n        });\n        this.emitClassDefinitionMethods(emitLater);\n    }\n\n    protected emitClassDefinitionMethods(arrayTypes: ClassProperty[]): void {\n        this.emitLine(\"}\");\n        arrayTypes.forEach(p => {\n            function ignore<T extends Type>(_: T): void {\n                return;\n            }\n\n            matchCompoundType(\n                p.type,\n                at => {\n                    this.emitLine([\n                        \"list \",\n                        this.scalaType(at, true),\n                        \"{ member: \",\n                        this.scalaType(at.items, true),\n                        \"}\"\n                    ]);\n                },\n                ignore,\n                mt => {\n                    this.emitLine([\n                        \"map \",\n                        this.scalaType(mt, true),\n                        \"{ key: String , value: \",\n                        this.scalaType(mt.values, true),\n                        \"}\"\n                    ]);\n                },\n                ignore,\n                ignore\n            );\n        });\n    }\n\n    protected emitEnumDefinition(e: EnumType, enumName: Name): void {\n        this.emitDescription(this.descriptionForType(e));\n\n        this.ensureBlankLine();\n        this.emitItem([\"enum \", enumName, \" { \"]);\n        let count = e.cases.size;\n\n        this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n            // if (!(jsonName == \"\")) {\n            /*                 const backticks = \n                                    shouldAddBacktick(jsonName) || \n                                    jsonName.includes(\" \") || \n                                    !isNaN(parseInt(jsonName.charAt(0)))\n                                if (backticks) {this.emitItem(\"`\")} else  */\n            this.emitLine();\n\n            this.emitItem([name, ' = \"', jsonName, '\"']);\n\n            //                if (backticks) {this.emitItem(\"`\")}\n            if (--count > 0) this.emitItem([\",\"]);\n            // } else {\n            // --count\n            // }\n        });\n\n        this.ensureBlankLine();\n        this.emitItem([\"}\"]);\n    }\n\n    protected emitUnionDefinition(u: UnionType, unionName: Name): void {\n        function sortBy(t: Type): string {\n            const kind = t.kind;\n            if (kind === \"class\") return kind;\n            return \"_\" + kind;\n        }\n\n        const emitLater: Type[] = [];\n\n        this.emitDescription(this.descriptionForType(u));\n\n        const [maybeNull, nonNulls] = removeNullFromUnion(u, sortBy);\n        const theTypes: Sourcelike[] = [];\n        this.forEachUnionMember(u, nonNulls, \"none\", null, (_, t) => {\n            const laterType = t.kind === \"array\" || t.kind === \"map\";\n            if (laterType) {\n                emitLater.push(t);\n            }\n\n            theTypes.push(this.scalaType(t));\n        });\n        if (maybeNull !== null) {\n            theTypes.push(this.nameForUnionMember(u, maybeNull));\n        }\n\n        this.emitLine([\"@untagged union \", unionName, \" { \"]);\n        this.indent(() => {\n            theTypes.forEach((t, i) => {\n                this.emitLine([String.fromCharCode(i + 65), \" : \", t]);\n            });\n        });\n        this.emitLine(\"}\");\n        this.ensureBlankLine();\n\n        emitLater.forEach(p => {\n            function ignore<T extends Type>(_: T): void {\n                return;\n            }\n\n            matchCompoundType(\n                p,\n                at => {\n                    this.emitLine([\n                        \"list \",\n                        this.scalaType(at, true),\n                        \"{ member: \",\n                        this.scalaType(at.items, true),\n                        \"}\"\n                    ]);\n                },\n                ignore,\n                mt => {\n                    this.emitLine([\n                        \"map \",\n                        this.scalaType(mt, true),\n                        \"{ key: String , value: \",\n                        this.scalaType(mt.values, true),\n                        \"}\"\n                    ]);\n                },\n                ignore,\n                ignore\n            );\n        });\n    }\n\n    protected emitSourceStructure(): void {\n        this.emitHeader();\n\n        // Top-level arrays, maps\n        this.forEachTopLevel(\"leading\", (t, name) => {\n            if (t instanceof ArrayType) {\n                this.emitTopLevelArray(t, name);\n            } else if (t instanceof MapType) {\n                this.emitTopLevelMap(t, name);\n            }\n        });\n\n        this.forEachNamedType(\n            \"leading-and-interposing\",\n            (c: ClassType, n: Name) => this.emitClassDefinition(c, n),\n            (e, n) => this.emitEnumDefinition(e, n),\n            (u, n) => this.emitUnionDefinition(u, n)\n        );\n    }\n}\n\nexport class SmithyTargetLanguage extends TargetLanguage {\n    public constructor() {\n        super(\"Smithy\", [\"Smithy\"], \"smithy\");\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [SmithyOptions.framework, SmithyOptions.packageName];\n    }\n\n    public get supportsOptionalClassProperties(): boolean {\n        return true;\n    }\n\n    public get supportsUnionsWithBothNumberTypes(): boolean {\n        return true;\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): ConvenienceRenderer {\n        const options = getOptionValues(SmithyOptions, untypedOptionValues);\n\n        switch (options.framework) {\n            case Framework.None:\n                return new Smithy4sRenderer(this, renderContext, options);\n            default:\n                return assertNever(options.framework);\n        }\n    }\n}\n","import { arrayIntercalate } from \"collection-utils\";\n\nimport { anyTypeIssueAnnotation, nullTypeIssueAnnotation } from \"../Annotation\";\nimport { ConvenienceRenderer, type ForbiddenWordsInfo } from \"../ConvenienceRenderer\";\nimport { type DateTimeRecognizer, DefaultDateTimeRecognizer } from \"../DateTime\";\nimport { type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type ForEachPosition, type RenderContext } from \"../Renderer\";\nimport {\n    BooleanOption,\n    EnumOption,\n    type Option,\n    type OptionValues,\n    StringOption,\n    getOptionValues\n} from \"../RendererOptions\";\nimport { type Sourcelike, maybeAnnotated, modifySource } from \"../Source\";\nimport { AcronymStyleOptions, acronymOption, acronymStyle } from \"../support/Acronyms\";\nimport {\n    addPrefixIfNecessary,\n    allLowerWordStyle,\n    allUpperWordStyle,\n    camelCase,\n    combineWords,\n    escapeNonPrintableMapper,\n    firstUpperWordStyle,\n    intToHex,\n    isDigit,\n    isLetterOrUnderscore,\n    isNumeric,\n    isPrintable,\n    legalizeCharacters,\n    splitIntoWords,\n    utf32ConcatMap\n} from \"../support/Strings\";\nimport { assert, defined, panic } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport {\n    ArrayType,\n    type ClassProperty,\n    type ClassType,\n    EnumType,\n    MapType,\n    type PrimitiveStringTypeKind,\n    type TransformedStringTypeKind,\n    type Type,\n    type TypeKind,\n    type UnionType\n} from \"../Type\";\nimport { type StringTypeMapping } from \"../TypeBuilder\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { matchType, nullableFromUnion, removeNullFromUnion } from \"../TypeUtils\";\n\nconst MAX_SAMELINE_PROPERTIES = 4;\n\nexport const swiftOptions = {\n    justTypes: new BooleanOption(\"just-types\", \"Plain types only\", false),\n    convenienceInitializers: new BooleanOption(\"initializers\", \"Generate initializers and mutators\", true),\n    explicitCodingKeys: new BooleanOption(\"coding-keys\", \"Explicit CodingKey values in Codable types\", true),\n    codingKeysProtocol: new StringOption(\n        \"coding-keys-protocol\",\n        \"CodingKeys implements protocols\",\n        \"protocol1, protocol2...\",\n        \"\",\n        \"secondary\"\n    ),\n    alamofire: new BooleanOption(\"alamofire\", \"Alamofire extensions\", false),\n    namedTypePrefix: new StringOption(\"type-prefix\", \"Prefix for type names\", \"PREFIX\", \"\", \"secondary\"),\n    useClasses: new EnumOption(\"struct-or-class\", \"Structs or classes\", [\n        [\"struct\", false],\n        [\"class\", true]\n    ]),\n    mutableProperties: new BooleanOption(\"mutable-properties\", \"Use var instead of let for object properties\", false),\n    acronymStyle: acronymOption(AcronymStyleOptions.Pascal),\n    dense: new EnumOption(\n        \"density\",\n        \"Code density\",\n        [\n            [\"dense\", true],\n            [\"normal\", false]\n        ],\n        \"dense\",\n        \"secondary\"\n    ),\n    linux: new BooleanOption(\"support-linux\", \"Support Linux\", false, \"secondary\"),\n    objcSupport: new BooleanOption(\n        \"objective-c-support\",\n        \"Objects inherit from NSObject and @objcMembers is added to classes\",\n        false\n    ),\n    optionalEnums: new BooleanOption(\"optional-enums\", \"If no matching case is found enum value is set to null\", false),\n    swift5Support: new BooleanOption(\"swift-5-support\", \"Renders output in a Swift 5 compatible mode\", false),\n    sendable: new BooleanOption(\"sendable\", \"Mark generated models as Sendable\", false),\n    multiFileOutput: new BooleanOption(\n        \"multi-file-output\",\n        \"Renders each top-level object in its own Swift file\",\n        false\n    ),\n    accessLevel: new EnumOption(\n        \"access-level\",\n        \"Access level\",\n        [\n            [\"internal\", \"internal\"],\n            [\"public\", \"public\"]\n        ],\n        \"internal\",\n        \"secondary\"\n    ),\n    protocol: new EnumOption(\n        \"protocol\",\n        \"Make types implement protocol\",\n        [\n            [\"none\", { equatable: false, hashable: false }],\n            [\"equatable\", { equatable: true, hashable: false }],\n            [\"hashable\", { equatable: false, hashable: true }]\n        ],\n        \"none\",\n        \"secondary\"\n    )\n};\n\n// These are all recognized by Swift as ISO8601 date-times:\n//\n// 2018-08-14T02:45:50+00:00\n// 2018-08-14T02:45:50+00\n// 2018-08-14T02:45:50+1\n// 2018-08-14T02:45:50+1111\n// 2018-08-14T02:45:50+1111:1:33\n// 2018-08-14T02:45:50-00\n// 2018-08-14T02:45:50z\n// 2018-00008-1T002:45:3Z\n\nconst swiftDateTimeRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+([zZ]|[+-]\\d+(:\\d+)?)$/;\n\nclass SwiftDateTimeRecognizer extends DefaultDateTimeRecognizer {\n    public isDateTime(str: string): boolean {\n        return swiftDateTimeRegex.exec(str) !== null;\n    }\n}\n\nexport interface SwiftProperty {\n    jsonName: string;\n    name: Name;\n    parameter: ClassProperty;\n    position: ForEachPosition;\n}\n\nexport class SwiftTargetLanguage extends TargetLanguage {\n    public constructor() {\n        super(\"Swift\", [\"swift\", \"swift4\"], \"swift\");\n    }\n\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [\n            swiftOptions.justTypes,\n            swiftOptions.useClasses,\n            swiftOptions.dense,\n            swiftOptions.convenienceInitializers,\n            swiftOptions.explicitCodingKeys,\n            swiftOptions.codingKeysProtocol,\n            swiftOptions.accessLevel,\n            swiftOptions.alamofire,\n            swiftOptions.linux,\n            swiftOptions.namedTypePrefix,\n            swiftOptions.protocol,\n            swiftOptions.acronymStyle,\n            swiftOptions.objcSupport,\n            swiftOptions.optionalEnums,\n            swiftOptions.sendable,\n            swiftOptions.swift5Support,\n            swiftOptions.multiFileOutput,\n            swiftOptions.mutableProperties\n        ];\n    }\n\n    public get stringTypeMapping(): StringTypeMapping {\n        const mapping: Map<TransformedStringTypeKind, PrimitiveStringTypeKind> = new Map();\n        mapping.set(\"date-time\", \"date-time\");\n        return mapping;\n    }\n\n    public get supportsOptionalClassProperties(): boolean {\n        return true;\n    }\n\n    public get supportsUnionsWithBothNumberTypes(): boolean {\n        return true;\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): SwiftRenderer {\n        return new SwiftRenderer(this, renderContext, getOptionValues(swiftOptions, untypedOptionValues));\n    }\n\n    public get dateTimeRecognizer(): DateTimeRecognizer {\n        return new SwiftDateTimeRecognizer();\n    }\n}\n\nconst keywords = [\n    \"await\",\n    \"associatedtype\",\n    \"class\",\n    \"deinit\",\n    \"enum\",\n    \"extension\",\n    \"fileprivate\",\n    \"func\",\n    \"import\",\n    \"init\",\n    \"inout\",\n    \"internal\",\n    \"let\",\n    \"open\",\n    \"operator\",\n    \"private\",\n    \"protocol\",\n    \"public\",\n    \"static\",\n    \"struct\",\n    \"subscript\",\n    \"typealias\",\n    \"var\",\n    \"break\",\n    \"case\",\n    \"continue\",\n    \"default\",\n    \"defer\",\n    \"do\",\n    \"else\",\n    \"fallthrough\",\n    \"for\",\n    \"guard\",\n    \"if\",\n    \"in\",\n    \"repeat\",\n    \"return\",\n    \"switch\",\n    \"where\",\n    \"while\",\n    \"as\",\n    \"Any\",\n    \"catch\",\n    \"false\",\n    \"is\",\n    \"nil\",\n    \"rethrows\",\n    \"super\",\n    \"self\",\n    \"Self\",\n    \"throw\",\n    \"throws\",\n    \"true\",\n    \"try\",\n    \"_\",\n    \"associativity\",\n    \"convenience\",\n    \"dynamic\",\n    \"didSet\",\n    \"final\",\n    \"get\",\n    \"infix\",\n    \"indirect\",\n    \"lazy\",\n    \"left\",\n    \"mutating\",\n    \"nonmutating\",\n    \"optional\",\n    \"override\",\n    \"postfix\",\n    \"precedence\",\n    \"prefix\",\n    \"Protocol\",\n    \"required\",\n    \"right\",\n    \"set\",\n    \"Type\",\n    \"unowned\",\n    \"weak\",\n    \"willSet\",\n    \"String\",\n    \"Int\",\n    \"Double\",\n    \"Bool\",\n    \"Data\",\n    \"Date\",\n    \"URL\",\n    \"CommandLine\",\n    \"FileHandle\",\n    \"JSONSerialization\",\n    \"checkNull\",\n    \"removeNSNull\",\n    \"nilToNSNull\",\n    \"convertArray\",\n    \"convertOptional\",\n    \"convertDict\",\n    \"convertDouble\",\n    \"jsonString\",\n    \"jsonData\"\n];\n\nfunction isPartCharacter(codePoint: number): boolean {\n    return isLetterOrUnderscore(codePoint) || isNumeric(codePoint);\n}\n\nfunction isStartCharacter(codePoint: number): boolean {\n    return isPartCharacter(codePoint) && !isDigit(codePoint);\n}\n\nconst legalizeName = legalizeCharacters(isPartCharacter);\n\nfunction swiftNameStyle(\n    prefix: string,\n    isUpper: boolean,\n    original: string,\n    acronymsStyle: (s: string) => string = allUpperWordStyle\n): string {\n    const words = splitIntoWords(original);\n    const combined = combineWords(\n        words,\n        legalizeName,\n        isUpper ? firstUpperWordStyle : allLowerWordStyle,\n        firstUpperWordStyle,\n        isUpper ? allUpperWordStyle : allLowerWordStyle,\n        acronymsStyle,\n        \"\",\n        isStartCharacter\n    );\n    return addPrefixIfNecessary(prefix, combined);\n}\n\nfunction unicodeEscape(codePoint: number): string {\n    return \"\\\\u{\" + intToHex(codePoint, 0) + \"}\";\n}\n\nconst stringEscape = utf32ConcatMap(escapeNonPrintableMapper(isPrintable, unicodeEscape));\n\nexport class SwiftRenderer extends ConvenienceRenderer {\n    private _currentFilename: string | undefined;\n\n    private _needAny = false;\n\n    private _needNull = false;\n\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        private readonly _options: OptionValues<typeof swiftOptions>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        if (this._options.alamofire) {\n            return [\"DataRequest\", ...keywords];\n        }\n\n        return keywords;\n    }\n\n    protected forbiddenForObjectProperties(_c: ClassType, _classNamed: Name): ForbiddenWordsInfo {\n        return { names: [\"fromURL\", \"json\"], includeGlobalForbidden: true };\n    }\n\n    protected forbiddenForEnumCases(_e: EnumType, _enumName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected forbiddenForUnionMembers(_u: UnionType, _unionName: Name): ForbiddenWordsInfo {\n        return { names: [], includeGlobalForbidden: true };\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return funPrefixNamer(\"upper\", s =>\n            swiftNameStyle(this._options.namedTypePrefix, true, s, acronymStyle(this._options.acronymStyle))\n        );\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return this.lowerNamingFunction;\n    }\n\n    protected makeUnionMemberNamer(): Namer {\n        return this.lowerNamingFunction;\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return this.lowerNamingFunction;\n    }\n\n    protected isImplicitCycleBreaker(t: Type): boolean {\n        const kind = t.kind;\n        return kind === \"array\" || kind === \"map\";\n    }\n\n    protected emitDescriptionBlock(lines: Sourcelike[]): void {\n        this.emitCommentLines(lines, { lineStart: \"/// \" });\n    }\n\n    private emitBlock(line: Sourcelike, f: () => void): void {\n        this.emitLine(line, \" {\");\n        this.indent(f);\n        this.emitLine(\"}\");\n    }\n\n    private emitBlockWithAccess(line: Sourcelike, f: () => void): void {\n        this.emitBlock([this.accessLevel, line], f);\n    }\n\n    private justTypesCase(justTypes: Sourcelike, notJustTypes: Sourcelike): Sourcelike {\n        if (this._options.justTypes) return justTypes;\n        else return notJustTypes;\n    }\n\n    private get lowerNamingFunction(): Namer {\n        return funPrefixNamer(\"lower\", s => swiftNameStyle(\"\", false, s, acronymStyle(this._options.acronymStyle)));\n    }\n\n    protected swiftPropertyType(p: ClassProperty): Sourcelike {\n        if (p.isOptional || (this._options.optionalEnums && p.type.kind === \"enum\")) {\n            return [this.swiftType(p.type, true, true), \"?\"];\n        } else {\n            return this.swiftType(p.type, true);\n        }\n    }\n\n    protected swiftType(t: Type, withIssues = false, noOptional = false): Sourcelike {\n        const optional = noOptional ? \"\" : \"?\";\n        return matchType<Sourcelike>(\n            t,\n            _anyType => {\n                this._needAny = true;\n                return maybeAnnotated(\n                    withIssues,\n                    anyTypeIssueAnnotation,\n                    this.justTypesCase([\"Any\", optional], \"JSONAny\")\n                );\n            },\n            _nullType => {\n                this._needNull = true;\n                return maybeAnnotated(\n                    withIssues,\n                    nullTypeIssueAnnotation,\n                    this.justTypesCase(\"NSNull\", [\"JSONNull\", optional])\n                );\n            },\n            _boolType => \"Bool\",\n            _integerType => \"Int\",\n            _doubleType => \"Double\",\n            _stringType => \"String\",\n            arrayType => [\"[\", this.swiftType(arrayType.items, withIssues), \"]\"],\n            classType => this.nameForNamedType(classType),\n            mapType => [\"[String: \", this.swiftType(mapType.values, withIssues), \"]\"],\n            enumType => this.nameForNamedType(enumType),\n            unionType => {\n                const nullable = nullableFromUnion(unionType);\n                if (nullable !== null) return [this.swiftType(nullable, withIssues), optional];\n                return this.nameForNamedType(unionType);\n            },\n            transformedStringType => {\n                if (transformedStringType.kind === \"date-time\") {\n                    return \"Date\";\n                } else {\n                    return panic(`Transformed string type ${transformedStringType.kind} not supported`);\n                }\n            }\n        );\n    }\n\n    protected proposedUnionMemberNameForTypeKind(kind: TypeKind): string | null {\n        if (kind === \"enum\") {\n            return \"enumeration\";\n        }\n\n        if (kind === \"union\") {\n            return \"one_of\";\n        }\n\n        return null;\n    }\n\n    private renderSingleFileHeaderComments(): void {\n        this.emitLineOnce(\"// This file was generated from JSON Schema using quicktype, do not modify it directly.\");\n        this.emitLineOnce(\"// To parse the JSON, add this file to your project and do:\");\n        this.emitLineOnce(\"//\");\n        this.forEachTopLevel(\"none\", (t, topLevelName) => {\n            if (this._options.convenienceInitializers && !(t instanceof EnumType)) {\n                this.emitLineOnce(\n                    \"//   let \",\n                    modifySource(camelCase, topLevelName),\n                    \" = try \",\n                    topLevelName,\n                    \"(json)\"\n                );\n            } else {\n                this.emitLineOnce(\n                    \"//   let \",\n                    modifySource(camelCase, topLevelName),\n                    \" = \",\n                    \"try? JSONDecoder().decode(\",\n                    topLevelName,\n                    \".self, from: jsonData)\"\n                );\n            }\n        });\n    }\n\n    private renderHeader(type: Type, name: Name): void {\n        if (this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n        } else if (!this._options.justTypes) {\n            if (this._options.multiFileOutput) {\n                this.emitLineOnce(\n                    \"// This file was generated from JSON Schema using quicktype, do not modify it directly.\"\n                );\n                this.emitLineOnce(\"// To parse the JSON, add this file to your project and do:\");\n                this.emitLineOnce(\"//\");\n                if (this._options.convenienceInitializers && !(type instanceof EnumType)) {\n                    this.emitLine(\"//   let \", modifySource(camelCase, name), \" = try \", name, \"(json)\");\n                } else {\n                    this.emitLine(\n                        \"//   let \",\n                        modifySource(camelCase, name),\n                        \" = \",\n                        \"try? newJSONDecoder().decode(\",\n                        name,\n                        \".self, from: jsonData)\"\n                    );\n                }\n            }\n\n            if (this._options.alamofire) {\n                this.emitLine(\"//\");\n                this.emitLine(\"// To parse values from Alamofire responses:\");\n                this.emitLine(\"//\");\n                this.emitLine(\"//   Alamofire.request(url).response\", name, \" { response in\");\n                this.emitLine(\"//     if let \", modifySource(camelCase, name), \" = response.result.value {\");\n                this.emitLine(\"//       ...\");\n                this.emitLine(\"//     }\");\n                this.emitLine(\"//   }\");\n            }\n\n            if (this._options.protocol.hashable || this._options.protocol.equatable) {\n                this.emitLine(\"//\");\n                this.emitLine(\"// Hashable or Equatable:\");\n                this.emitLine(\n                    \"// The compiler will not be able to synthesize the implementation of Hashable or Equatable\"\n                );\n                this.emitLine(\n                    \"// for types that require the use of JSONAny, nor will the implementation of Hashable be\"\n                );\n                this.emitLine(\"// synthesized for types that have collections (such as arrays or dictionaries).\");\n            }\n        }\n\n        this.ensureBlankLine();\n        this.emitLineOnce(\"import Foundation\");\n        if (!this._options.justTypes && this._options.alamofire) {\n            this.emitLineOnce(\"import Alamofire\");\n        }\n\n        if (this._options.optionalEnums) {\n            this.emitLineOnce(\"import OptionallyDecodable // https://github.com/idrougge/OptionallyDecodable\");\n        }\n\n        this.ensureBlankLine();\n    }\n\n    private renderTopLevelAlias(t: Type, name: Name): void {\n        this.emitLine(this.accessLevel, \"typealias \", name, \" = \", this.swiftType(t, true));\n    }\n\n    protected getProtocolsArray(kind: \"struct\" | \"class\" | \"enum\"): string[] {\n        const protocols: string[] = [];\n\n        // [Michael Fey (@MrRooni), 2019-4-24] Technically NSObject isn't a \"protocol\" in this instance, but this felt like the best place to slot in this superclass declaration.\n        const isClass = kind === \"class\";\n\n        if (isClass && this._options.objcSupport) {\n            protocols.push(\"NSObject\");\n        }\n\n        if (!this._options.justTypes) {\n            protocols.push(\"Codable\");\n        }\n\n        if (this._options.protocol.hashable) {\n            protocols.push(\"Hashable\");\n        }\n\n        if (this._options.protocol.equatable) {\n            protocols.push(\"Equatable\");\n        }\n\n        if (this._options.sendable && (!this._options.mutableProperties || !isClass) && !this._options.objcSupport) {\n            protocols.push(\"Sendable\");\n        }\n\n        return protocols;\n    }\n\n    private getProtocolString(\n        kind: \"struct\" | \"class\" | \"enum\",\n        baseClass: string | undefined = undefined\n    ): Sourcelike {\n        let protocols = this.getProtocolsArray(kind);\n        if (baseClass) {\n            protocols.unshift(baseClass);\n        }\n\n        return protocols.length > 0 ? \": \" + protocols.join(\", \") : \"\";\n    }\n\n    private getEnumPropertyGroups(c: ClassType): typeof groups {\n        type PropertyGroup = Array<{ label?: string; name: Name }>;\n\n        let groups: PropertyGroup[] = [];\n        let group: PropertyGroup = [];\n\n        this.forEachClassProperty(c, \"none\", (name, jsonName) => {\n            const label = stringEscape(jsonName);\n            const redundant = this.sourcelikeToString(name) === label;\n\n            if (this._options.dense && redundant) {\n                group.push({ name });\n            } else {\n                if (group.length > 0) {\n                    groups.push(group);\n                    group = [];\n                }\n\n                groups.push([{ name, label }]);\n            }\n        });\n\n        if (group.length > 0) {\n            groups.push(group);\n        }\n\n        return groups;\n    }\n\n    /// Access level with trailing space (e.g. \"public \"), or empty string\n    private get accessLevel(): string {\n        return this._options.accessLevel === \"internal\"\n            ? \"\" // internal is default, so we don't have to emit it\n            : this._options.accessLevel + \" \";\n    }\n\n    private get objcMembersDeclaration(): string {\n        if (this._options.objcSupport) {\n            return \"@objcMembers \";\n        }\n\n        return \"\";\n    }\n\n    /// startFile takes a file name, appends \".swift\" to it and sets it as the current filename.\n    protected startFile(basename: Sourcelike): void {\n        if (this._options.multiFileOutput === false) {\n            return;\n        }\n\n        assert(this._currentFilename === undefined, \"Previous file wasn't finished: \" + this._currentFilename);\n        // FIXME: The filenames should actually be Sourcelikes, too\n        this._currentFilename = `${this.sourcelikeToString(basename)}.swift`;\n        this.initializeEmitContextForFilename(this._currentFilename);\n    }\n\n    /// endFile pushes the current file name onto the collection of finished files and then resets the current file name. These finished files are used in index.ts to write the output.\n    protected endFile(): void {\n        if (this._options.multiFileOutput === false) {\n            return;\n        }\n\n        this.finishFile(defined(this._currentFilename));\n        this._currentFilename = undefined;\n    }\n\n    protected propertyLinesDefinition(name: Name, parameter: ClassProperty): Sourcelike {\n        const useMutableProperties = this._options.mutableProperties;\n        return [\n            this.accessLevel,\n            useMutableProperties ? \"var \" : \"let \",\n            name,\n            \": \",\n            this.swiftPropertyType(parameter)\n        ];\n    }\n\n    private renderClassDefinition(c: ClassType, className: Name): void {\n        this.startFile(className);\n\n        this.renderHeader(c, className);\n        this.emitDescription(this.descriptionForType(c));\n\n        this.emitMark(this.sourcelikeToString(className), true);\n\n        const isClass = this._options.useClasses || this.isCycleBreakerType(c);\n        const structOrClass = isClass ? \"class\" : \"struct\";\n\n        if (isClass && this._options.objcSupport) {\n            // [Michael Fey (@MrRooni), 2019-4-24] Swift 5 or greater, must come before the access declaration for the class.\n            this.emitItem(this.objcMembersDeclaration);\n        }\n\n        this.emitBlockWithAccess([structOrClass, \" \", className, this.getProtocolString(structOrClass)], () => {\n            if (this._options.dense) {\n                let lastProperty: ClassProperty | undefined = undefined;\n                let lastNames: Name[] = [];\n\n                const emitLastProperty = (): void => {\n                    if (lastProperty === undefined) return;\n\n                    const useMutableProperties = this._options.mutableProperties;\n\n                    let sources: Sourcelike[] = [\n                        [\n                            this._options.optionalEnums && lastProperty.type.kind === \"enum\"\n                                ? \"@OptionallyDecodable \"\n                                : \"\",\n                            this.accessLevel,\n                            useMutableProperties || (this._options.optionalEnums && lastProperty.type.kind === \"enum\")\n                                ? \"var \"\n                                : \"let \"\n                        ]\n                    ];\n                    lastNames.forEach((n, i) => {\n                        if (i > 0) sources.push(\", \");\n                        sources.push(n);\n                    });\n                    sources.push(\": \");\n                    sources.push(this.swiftPropertyType(lastProperty));\n                    this.emitLine(sources);\n\n                    lastProperty = undefined;\n                    lastNames = [];\n                };\n\n                this.forEachClassProperty(c, \"none\", (name, jsonName, p) => {\n                    const description = this.descriptionForClassProperty(c, jsonName);\n                    if (\n                        (lastProperty && !p.equals(lastProperty)) ||\n                        lastNames.length >= MAX_SAMELINE_PROPERTIES ||\n                        description !== undefined\n                    ) {\n                        emitLastProperty();\n                    }\n\n                    if (lastProperty === undefined) {\n                        lastProperty = p;\n                    }\n\n                    lastNames.push(name);\n                    if (description !== undefined) {\n                        this.emitDescription(description);\n                        emitLastProperty();\n                    }\n                });\n                emitLastProperty();\n            } else {\n                this.forEachClassProperty(c, \"none\", (name, jsonName, p) => {\n                    const description = this.descriptionForClassProperty(c, jsonName);\n                    const propertyLines = this.propertyLinesDefinition(name, p);\n                    this.emitDescription(description);\n                    this.emitLine(propertyLines);\n                });\n            }\n\n            if (!this._options.justTypes) {\n                const groups = this.getEnumPropertyGroups(c);\n                const allPropertiesRedundant = groups.every(group => {\n                    return group.every(p => p.label === undefined);\n                });\n                if (!allPropertiesRedundant && c.getProperties().size > 0) {\n                    this.ensureBlankLine();\n                    let enumDeclaration = this.accessLevel;\n                    enumDeclaration += \"enum CodingKeys: String, CodingKey\";\n                    if (this._options.codingKeysProtocol && this._options.codingKeysProtocol.length > 0) {\n                        enumDeclaration += \", \";\n                        enumDeclaration += this._options.codingKeysProtocol;\n                    }\n\n                    this.emitBlock(enumDeclaration, () => {\n                        for (const group of groups) {\n                            const { name, label } = group[0];\n                            if (this._options.explicitCodingKeys && label !== undefined) {\n                                this.emitLine(\"case \", name, ' = \"', label, '\"');\n                            } else {\n                                const names = arrayIntercalate<Sourcelike>(\n                                    \", \",\n                                    group.map(p => p.name)\n                                );\n                                this.emitLine(\"case \", names);\n                            }\n                        }\n                    });\n                }\n            }\n\n            // this main initializer must be defined within the class\n            // declaration since it assigns let constants\n            if (\n                isClass ||\n                // Public structs need explicit initializers\n                // https://github.com/quicktype/quicktype/issues/899\n                this._options.accessLevel === \"public\"\n            ) {\n                // Make an initializer that initalizes all fields\n                this.ensureBlankLine();\n                let initProperties = this.initializableProperties(c);\n                let propertiesLines: Sourcelike[] = [];\n                for (let property of initProperties) {\n                    if (propertiesLines.length > 0) propertiesLines.push(\", \");\n                    propertiesLines.push(property.name, \": \", this.swiftPropertyType(property.parameter));\n                }\n\n                if (this.propertyCount(c) === 0 && this._options.objcSupport) {\n                    this.emitBlockWithAccess([\"override init()\"], () => {\n                        return \"\";\n                    });\n                } else {\n                    this.emitBlockWithAccess([\"init(\", ...propertiesLines, \")\"], () => {\n                        for (let property of initProperties) {\n                            this.emitLine(\"self.\", property.name, \" = \", property.name);\n                        }\n                    });\n                }\n            }\n        });\n\n        if (!this._options.justTypes) {\n            // FIXME: We emit only the MARK line for top-level-enum.schema\n            if (this._options.convenienceInitializers) {\n                this.ensureBlankLine();\n                this.emitMark(this.sourcelikeToString(className) + \" convenience initializers and mutators\");\n                this.ensureBlankLine();\n                this.emitConvenienceInitializersExtension(c, className);\n                this.ensureBlankLine();\n            }\n        }\n\n        this.endFile();\n    }\n\n    protected initializableProperties(c: ClassType): SwiftProperty[] {\n        const properties: SwiftProperty[] = [];\n        this.forEachClassProperty(c, \"none\", (name, jsonName, parameter, position) => {\n            const property = { name, jsonName, parameter, position };\n            properties.push(property);\n        });\n        return properties;\n    }\n\n    private emitNewEncoderDecoder(): void {\n        this.emitBlock(\"func newJSONDecoder() -> JSONDecoder\", () => {\n            this.emitLine(\"let decoder = JSONDecoder()\");\n            if (!this._options.linux) {\n                this.emitBlock(\"if #available(iOS 10.0, OSX 10.12, tvOS 10.0, watchOS 3.0, *)\", () => {\n                    this.emitLine(\"decoder.dateDecodingStrategy = .iso8601\");\n                });\n            } else {\n                this.emitMultiline(`decoder.dateDecodingStrategy = .custom({ (decoder) -> Date in\n    let container = try decoder.singleValueContainer()\n    let dateStr = try container.decode(String.self)\n\n    let formatter = DateFormatter()\n    formatter.calendar = Calendar(identifier: .iso8601)\n    formatter.locale = Locale(identifier: \"en_US_POSIX\")\n    formatter.timeZone = TimeZone(secondsFromGMT: 0)\n    formatter.dateFormat = \"yyyy-MM-dd'T'HH:mm:ss.SSSXXXXX\"\n    if let date = formatter.date(from: dateStr) {\n        return date\n    }\n    formatter.dateFormat = \"yyyy-MM-dd'T'HH:mm:ssXXXXX\"\n    if let date = formatter.date(from: dateStr) {\n        return date\n    }\n    throw DecodingError.typeMismatch(Date.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: \"Could not decode date\"))\n})`);\n            }\n\n            this.emitLine(\"return decoder\");\n        });\n        this.ensureBlankLine();\n        this.emitBlock(\"func newJSONEncoder() -> JSONEncoder\", () => {\n            this.emitLine(\"let encoder = JSONEncoder()\");\n            if (!this._options.linux) {\n                this.emitBlock(\"if #available(iOS 10.0, OSX 10.12, tvOS 10.0, watchOS 3.0, *)\", () => {\n                    this.emitLine(\"encoder.dateEncodingStrategy = .iso8601\");\n                });\n            } else {\n                this.emitMultiline(`let formatter = DateFormatter()\nformatter.calendar = Calendar(identifier: .iso8601)\nformatter.locale = Locale(identifier: \"en_US_POSIX\")\nformatter.timeZone = TimeZone(secondsFromGMT: 0)\nformatter.dateFormat = \"yyyy-MM-dd'T'HH:mm:ssXXXXX\"\nencoder.dateEncodingStrategy = .formatted(formatter)`);\n            }\n\n            this.emitLine(\"return encoder\");\n        });\n    }\n\n    private emitConvenienceInitializersExtension(c: ClassType, className: Name): void {\n        const isClass = this._options.useClasses || this.isCycleBreakerType(c);\n        const convenience = isClass ? \"convenience \" : \"\";\n\n        this.emitBlockWithAccess([\"extension \", className], () => {\n            if (isClass) {\n                this.emitBlock(\"convenience init(data: Data) throws\", () => {\n                    if (this.propertyCount(c) > 0) {\n                        this.emitLine(\"let me = try newJSONDecoder().decode(\", this.swiftType(c), \".self, from: data)\");\n                    } else {\n                        this.emitLine(\"let _ = try newJSONDecoder().decode(\", this.swiftType(c), \".self, from: data)\");\n                    }\n\n                    let args: Sourcelike[] = [];\n                    this.forEachClassProperty(c, \"none\", name => {\n                        if (args.length > 0) args.push(\", \");\n                        args.push(name, \": \", \"me.\", name);\n                    });\n                    this.emitLine(\"self.init(\", ...args, \")\");\n                });\n            } else {\n                this.emitBlock(\"init(data: Data) throws\", () => {\n                    this.emitLine(\"self = try newJSONDecoder().decode(\", this.swiftType(c), \".self, from: data)\");\n                });\n            }\n\n            this.ensureBlankLine();\n            this.emitBlock(\n                [convenience, \"init(_ json: String, using encoding: String.Encoding = .utf8) throws\"],\n                () => {\n                    this.emitBlock(\"guard let data = json.data(using: encoding) else\", () => {\n                        this.emitLine('throw NSError(domain: \"JSONDecoding\", code: 0, userInfo: nil)');\n                    });\n                    this.emitLine(\"try self.init(data: data)\");\n                }\n            );\n            this.ensureBlankLine();\n            this.emitBlock([convenience, \"init(fromURL url: URL) throws\"], () => {\n                this.emitLine(\"try self.init(data: try Data(contentsOf: url))\");\n            });\n\n            this.ensureBlankLine();\n            this.emitConvenienceMutator(c, className);\n\n            // Convenience serializers\n            this.ensureBlankLine();\n            this.emitBlock(\"func jsonData() throws -> Data\", () => {\n                this.emitLine(\"return try newJSONEncoder().encode(self)\");\n            });\n            this.ensureBlankLine();\n            this.emitBlock(\"func jsonString(encoding: String.Encoding = .utf8) throws -> String?\", () => {\n                this.emitLine(\"return String(data: try self.jsonData(), encoding: encoding)\");\n            });\n        });\n    }\n\n    private renderEnumDefinition(e: EnumType, enumName: Name): void {\n        this.startFile(enumName);\n\n        this.emitLineOnce(\"import Foundation\");\n        this.ensureBlankLine();\n\n        this.emitDescription(this.descriptionForType(e));\n        const protocolString = this.getProtocolString(\"enum\", \"String\");\n\n        if (this._options.justTypes) {\n            this.emitBlockWithAccess([\"enum \", enumName, protocolString], () => {\n                this.forEachEnumCase(e, \"none\", name => {\n                    this.emitLine(\"case \", name);\n                });\n            });\n        } else {\n            this.emitBlockWithAccess([\"enum \", enumName, protocolString], () => {\n                this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n                    this.emitLine(\"case \", name, ' = \"', stringEscape(jsonName), '\"');\n                });\n            });\n        }\n\n        this.endFile();\n    }\n\n    private renderUnionDefinition(u: UnionType, unionName: Name): void {\n        this.startFile(unionName);\n\n        this.emitLineOnce(\"import Foundation\");\n        this.ensureBlankLine();\n\n        function sortBy(t: Type): string {\n            const kind = t.kind;\n            if (kind === \"class\") return kind;\n            return \"_\" + kind;\n        }\n\n        const renderUnionCase = (t: Type): void => {\n            this.emitBlock([\"if let x = try? container.decode(\", this.swiftType(t), \".self)\"], () => {\n                this.emitLine(\"self = .\", this.nameForUnionMember(u, t), \"(x)\");\n                this.emitLine(\"return\");\n            });\n        };\n\n        this.emitDescription(this.descriptionForType(u));\n\n        const indirect = this.isCycleBreakerType(u) ? \"indirect \" : \"\";\n        const [maybeNull, nonNulls] = removeNullFromUnion(u, sortBy);\n        this.emitBlockWithAccess([indirect, \"enum \", unionName, this.getProtocolString(\"enum\")], () => {\n            this.forEachUnionMember(u, nonNulls, \"none\", null, (name, t) => {\n                this.emitLine(\"case \", name, \"(\", this.swiftType(t), \")\");\n            });\n            if (maybeNull !== null) {\n                this.emitLine(\"case \", this.nameForUnionMember(u, maybeNull));\n            }\n\n            if (!this._options.justTypes) {\n                this.ensureBlankLine();\n                this.emitBlockWithAccess(\"init(from decoder: Decoder) throws\", () => {\n                    this.emitLine(\"let container = try decoder.singleValueContainer()\");\n                    const boolMember = u.findMember(\"bool\");\n                    if (boolMember !== undefined) renderUnionCase(boolMember);\n                    const integerMember = u.findMember(\"integer\");\n                    if (integerMember !== undefined) renderUnionCase(integerMember);\n                    for (const t of nonNulls) {\n                        if (t.kind === \"bool\" || t.kind === \"integer\") continue;\n                        renderUnionCase(t);\n                    }\n\n                    if (maybeNull !== null) {\n                        this.emitBlock(\"if container.decodeNil()\", () => {\n                            this.emitLine(\"self = .\", this.nameForUnionMember(u, maybeNull));\n                            this.emitLine(\"return\");\n                        });\n                    }\n\n                    this.emitDecodingError(unionName);\n                });\n                this.ensureBlankLine();\n                this.emitBlockWithAccess(\"func encode(to encoder: Encoder) throws\", () => {\n                    this.emitLine(\"var container = encoder.singleValueContainer()\");\n                    this.emitLine(\"switch self {\");\n                    this.forEachUnionMember(u, nonNulls, \"none\", null, (name, _) => {\n                        this.emitLine(\"case .\", name, \"(let x):\");\n                        this.indent(() => this.emitLine(\"try container.encode(x)\"));\n                    });\n                    if (maybeNull !== null) {\n                        this.emitLine(\"case .\", this.nameForUnionMember(u, maybeNull), \":\");\n                        this.indent(() => this.emitLine(\"try container.encodeNil()\"));\n                    }\n\n                    this.emitLine(\"}\");\n                });\n            }\n        });\n        this.endFile();\n    }\n\n    private emitTopLevelMapAndArrayConvenienceInitializerExtensions(t: Type, name: Name): void {\n        let extensionSource: Sourcelike;\n\n        if (t instanceof ArrayType) {\n            extensionSource = [\"Array where Element == \", name, \".Element\"];\n        } else if (t instanceof MapType) {\n            extensionSource = [\"Dictionary where Key == String, Value == \", this.swiftType(t.values)];\n        } else {\n            return;\n        }\n\n        this.emitBlockWithAccess([\"extension \", extensionSource], () => {\n            this.emitBlock([\"init(data: Data) throws\"], () => {\n                this.emitLine(\"self = try newJSONDecoder().decode(\", name, \".self, from: data)\");\n            });\n            this.ensureBlankLine();\n            this.emitBlock(\"init(_ json: String, using encoding: String.Encoding = .utf8) throws\", () => {\n                this.emitBlock(\"guard let data = json.data(using: encoding) else\", () => {\n                    this.emitLine('throw NSError(domain: \"JSONDecoding\", code: 0, userInfo: nil)');\n                });\n                this.emitLine(\"try self.init(data: data)\");\n            });\n            this.ensureBlankLine();\n            this.emitBlock(\"init(fromURL url: URL) throws\", () => {\n                this.emitLine(\"try self.init(data: try Data(contentsOf: url))\");\n            });\n            this.ensureBlankLine();\n            this.emitBlock(\"func jsonData() throws -> Data\", () => {\n                this.emitLine(\"return try newJSONEncoder().encode(self)\");\n            });\n            this.ensureBlankLine();\n            this.emitBlock(\"func jsonString(encoding: String.Encoding = .utf8) throws -> String?\", () => {\n                this.emitLine(\"return String(data: try self.jsonData(), encoding: encoding)\");\n            });\n        });\n    }\n\n    private emitDecodingError(name: Name): void {\n        this.emitLine(\n            \"throw DecodingError.typeMismatch(\",\n            name,\n            '.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: \"Wrong type for ',\n            name,\n            '\"))'\n        );\n    }\n\n    private readonly emitSupportFunctions4 = (): void => {\n        this.startFile(\"JSONSchemaSupport\");\n\n        this.emitLineOnce(\"import Foundation\");\n\n        this.forEachTopLevel(\n            \"leading\",\n            (t: Type, name: Name) => this.renderTopLevelAlias(t, name),\n            t => this.namedTypeToNameForTopLevel(t) === undefined\n        );\n\n        if (this._options.convenienceInitializers) {\n            this.ensureBlankLine();\n            this.forEachTopLevel(\"leading-and-interposing\", (t: Type, name: Name) =>\n                this.emitTopLevelMapAndArrayConvenienceInitializerExtensions(t, name)\n            );\n        }\n\n        if ((!this._options.justTypes && this._options.convenienceInitializers) || this._options.alamofire) {\n            this.ensureBlankLine();\n            this.emitMark(\"Helper functions for creating encoders and decoders\", true);\n            this.ensureBlankLine();\n            this.emitNewEncoderDecoder();\n        }\n\n        if (this._options.alamofire) {\n            this.ensureBlankLine();\n            this.emitMark(\"Alamofire response handlers\", true);\n            this.ensureBlankLine();\n            this.emitAlamofireExtension();\n        }\n\n        // This assumes that this method is called after declarations\n        // are emitted.\n        if (this._needAny || this._needNull) {\n            this.ensureBlankLine();\n            this.emitMark(\"Encode/decode helpers\", true);\n            this.ensureBlankLine();\n            if (this._options.objcSupport) {\n                this.emitLine(this.objcMembersDeclaration, this.accessLevel, \"class JSONNull: NSObject, Codable {\");\n            } else {\n                this.emitLine(this.accessLevel, \"class JSONNull: Codable, Hashable {\");\n            }\n\n            this.ensureBlankLine();\n            this.emitMultiline(`    public static func == (lhs: JSONNull, rhs: JSONNull) -> Bool {\n        return true\n    }`);\n\n            if (this._options.objcSupport === false) {\n                this.ensureBlankLine();\n                this.emitMultiline(`    public var hashValue: Int {\n        return 0\n    }`);\n\n                if (this._options.swift5Support) {\n                    this.ensureBlankLine();\n                    this.emitMultiline(`    public func hash(into hasher: inout Hasher) {\n        // No-op\n    }`);\n                }\n            }\n\n            this.ensureBlankLine();\n            if (this._options.objcSupport) {\n                this.emitItem(\"    override \");\n            } else {\n                this.emitItem(\"    \");\n            }\n\n            this.emitMultiline(`public init() {}\n    \n    public required init(from decoder: Decoder) throws {\n        let container = try decoder.singleValueContainer()\n        if !container.decodeNil() {\n            throw DecodingError.typeMismatch(JSONNull.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: \"Wrong type for JSONNull\"))\n        }\n    }\n    \n    public func encode(to encoder: Encoder) throws {\n        var container = encoder.singleValueContainer()\n        try container.encodeNil()\n    }\n}`);\n        }\n\n        if (this._needAny) {\n            this.ensureBlankLine();\n            this.emitMultiline(`class JSONCodingKey: CodingKey {\n    let key: String\n    \n    required init?(intValue: Int) {\n        return nil\n    }\n    \n    required init?(stringValue: String) {\n        key = stringValue\n    }\n    \n    var intValue: Int? {\n        return nil\n    }\n    \n    var stringValue: String {\n        return key\n    }\n}`);\n\n            this.ensureBlankLine();\n            if (this._options.objcSupport) {\n                this.emitLine(this.objcMembersDeclaration, this.accessLevel, \"class JSONAny: NSObject, Codable {\");\n            } else {\n                this.emitLine(this.accessLevel, \"class JSONAny: Codable {\");\n            }\n\n            this.ensureBlankLine();\n            this.emitMultiline(`    ${this.accessLevel}let value: Any\n    \n    static func decodingError(forCodingPath codingPath: [CodingKey]) -> DecodingError {\n        let context = DecodingError.Context(codingPath: codingPath, debugDescription: \"Cannot decode JSONAny\")\n        return DecodingError.typeMismatch(JSONAny.self, context)\n    }\n    \n    static func encodingError(forValue value: Any, codingPath: [CodingKey]) -> EncodingError {\n        let context = EncodingError.Context(codingPath: codingPath, debugDescription: \"Cannot encode JSONAny\")\n        return EncodingError.invalidValue(value, context)\n    }\n\n    static func decode(from container: SingleValueDecodingContainer) throws -> Any {\n        if let value = try? container.decode(Bool.self) {\n            return value\n        }\n        if let value = try? container.decode(Int64.self) {\n            return value\n        }\n        if let value = try? container.decode(Double.self) {\n            return value\n        }\n        if let value = try? container.decode(String.self) {\n            return value\n        }\n        if container.decodeNil() {\n            return JSONNull()\n        }\n        throw decodingError(forCodingPath: container.codingPath)\n    }\n    \n    static func decode(from container: inout UnkeyedDecodingContainer) throws -> Any {\n        if let value = try? container.decode(Bool.self) {\n            return value\n        }\n        if let value = try? container.decode(Int64.self) {\n            return value\n        }\n        if let value = try? container.decode(Double.self) {\n            return value\n        }\n        if let value = try? container.decode(String.self) {\n            return value\n        }\n        if let value = try? container.decodeNil() {\n            if value {\n                return JSONNull()\n            }\n        }\n        if var container = try? container.nestedUnkeyedContainer() {\n            return try decodeArray(from: &container)\n        }\n        if var container = try? container.nestedContainer(keyedBy: JSONCodingKey.self) {\n            return try decodeDictionary(from: &container)\n        }\n        throw decodingError(forCodingPath: container.codingPath)\n    }\n    \n    static func decode(from container: inout KeyedDecodingContainer<JSONCodingKey>, forKey key: JSONCodingKey) throws -> Any {\n        if let value = try? container.decode(Bool.self, forKey: key) {\n            return value\n        }\n        if let value = try? container.decode(Int64.self, forKey: key) {\n            return value\n        }\n        if let value = try? container.decode(Double.self, forKey: key) {\n            return value\n        }\n        if let value = try? container.decode(String.self, forKey: key) {\n            return value\n        }\n        if let value = try? container.decodeNil(forKey: key) {\n            if value {\n                return JSONNull()\n            }\n        }\n        if var container = try? container.nestedUnkeyedContainer(forKey: key) {\n            return try decodeArray(from: &container)\n        }\n        if var container = try? container.nestedContainer(keyedBy: JSONCodingKey.self, forKey: key) {\n            return try decodeDictionary(from: &container)\n        }\n        throw decodingError(forCodingPath: container.codingPath)\n    }\n    \n    static func decodeArray(from container: inout UnkeyedDecodingContainer) throws -> [Any] {\n        var arr: [Any] = []\n        while !container.isAtEnd {\n            let value = try decode(from: &container)\n            arr.append(value)\n        }\n        return arr\n    }\n\n    static func decodeDictionary(from container: inout KeyedDecodingContainer<JSONCodingKey>) throws -> [String: Any] {\n        var dict = [String: Any]()\n        for key in container.allKeys {\n            let value = try decode(from: &container, forKey: key)\n            dict[key.stringValue] = value\n        }\n        return dict\n    }\n    \n    static func encode(to container: inout UnkeyedEncodingContainer, array: [Any]) throws {\n        for value in array {\n            if let value = value as? Bool {\n                try container.encode(value)\n            } else if let value = value as? Int64 {\n                try container.encode(value)\n            } else if let value = value as? Double {\n                try container.encode(value)\n            } else if let value = value as? String {\n                try container.encode(value)\n            } else if value is JSONNull {\n                try container.encodeNil()\n            } else if let value = value as? [Any] {\n                var container = container.nestedUnkeyedContainer()\n                try encode(to: &container, array: value)\n            } else if let value = value as? [String: Any] {\n                var container = container.nestedContainer(keyedBy: JSONCodingKey.self)\n                try encode(to: &container, dictionary: value)\n            } else {\n                throw encodingError(forValue: value, codingPath: container.codingPath)\n            }\n        }\n    }\n    \n    static func encode(to container: inout KeyedEncodingContainer<JSONCodingKey>, dictionary: [String: Any]) throws {\n        for (key, value) in dictionary {\n            let key = JSONCodingKey(stringValue: key)!\n            if let value = value as? Bool {\n                try container.encode(value, forKey: key)\n            } else if let value = value as? Int64 {\n                try container.encode(value, forKey: key)\n            } else if let value = value as? Double {\n                try container.encode(value, forKey: key)\n            } else if let value = value as? String {\n                try container.encode(value, forKey: key)\n            } else if value is JSONNull {\n                try container.encodeNil(forKey: key)\n            } else if let value = value as? [Any] {\n                var container = container.nestedUnkeyedContainer(forKey: key)\n                try encode(to: &container, array: value)\n            } else if let value = value as? [String: Any] {\n                var container = container.nestedContainer(keyedBy: JSONCodingKey.self, forKey: key)\n                try encode(to: &container, dictionary: value)\n            } else {\n                throw encodingError(forValue: value, codingPath: container.codingPath)\n            }\n        }\n    }\n\n    static func encode(to container: inout SingleValueEncodingContainer, value: Any) throws {\n        if let value = value as? Bool {\n            try container.encode(value)\n        } else if let value = value as? Int64 {\n            try container.encode(value)\n        } else if let value = value as? Double {\n            try container.encode(value)\n        } else if let value = value as? String {\n            try container.encode(value)\n        } else if value is JSONNull {\n            try container.encodeNil()\n        } else {\n            throw encodingError(forValue: value, codingPath: container.codingPath)\n        }\n    }\n    \n    public required init(from decoder: Decoder) throws {\n        if var arrayContainer = try? decoder.unkeyedContainer() {\n            self.value = try JSONAny.decodeArray(from: &arrayContainer)\n        } else if var container = try? decoder.container(keyedBy: JSONCodingKey.self) {\n            self.value = try JSONAny.decodeDictionary(from: &container)\n        } else {\n            let container = try decoder.singleValueContainer()\n            self.value = try JSONAny.decode(from: container)\n        }\n    }\n    \n    public func encode(to encoder: Encoder) throws {\n        if let arr = self.value as? [Any] {\n            var container = encoder.unkeyedContainer()\n            try JSONAny.encode(to: &container, array: arr)\n        } else if let dict = self.value as? [String: Any] {\n            var container = encoder.container(keyedBy: JSONCodingKey.self)\n            try JSONAny.encode(to: &container, dictionary: dict)\n        } else {\n            var container = encoder.singleValueContainer()\n            try JSONAny.encode(to: &container, value: self.value)\n        }\n    }\n}`);\n        }\n\n        this.endFile();\n    };\n\n    private emitConvenienceMutator(c: ClassType, className: Name): void {\n        this.emitLine(\"func with(\");\n        this.indent(() => {\n            this.forEachClassProperty(c, \"none\", (name, _, p, position) => {\n                this.emitLine(\n                    name,\n                    \": \",\n                    this.swiftPropertyType(p),\n                    \"? = nil\",\n                    position !== \"only\" && position !== \"last\" ? \",\" : \"\"\n                );\n            });\n        });\n        this.emitBlock([\") -> \", className], () => {\n            this.emitLine(\"return \", className, \"(\");\n            this.indent(() => {\n                this.forEachClassProperty(c, \"none\", (name, _, _p, position) => {\n                    this.emitLine(\n                        name,\n                        \": \",\n                        name,\n                        \" ?? self.\",\n                        name,\n                        position !== \"only\" && position !== \"last\" ? \",\" : \"\"\n                    );\n                });\n            });\n            this.emitLine(\")\");\n        });\n    }\n\n    protected emitMark(line: Sourcelike, horizontalLine = false): void {\n        this.emitLine(\"// MARK:\", horizontalLine ? \" - \" : \" \", line);\n    }\n\n    protected emitSourceStructure(): void {\n        if (this._options.multiFileOutput === false) {\n            this.renderSingleFileHeaderComments();\n        }\n\n        this.forEachNamedType(\n            \"leading-and-interposing\",\n            (c: ClassType, className: Name) => this.renderClassDefinition(c, className),\n            (e: EnumType, enumName: Name) => this.renderEnumDefinition(e, enumName),\n            (u: UnionType, unionName: Name) => this.renderUnionDefinition(u, unionName)\n        );\n\n        if (!this._options.justTypes) {\n            this.emitSupportFunctions4();\n        }\n    }\n\n    private emitAlamofireExtension(): void {\n        this.ensureBlankLine();\n        this.emitBlockWithAccess(\"extension DataRequest\", () => {\n            this\n                .emitMultiline(`fileprivate func decodableResponseSerializer<T: Decodable>() -> DataResponseSerializer<T> {\n    return DataResponseSerializer { _, response, data, error in\n        guard error == nil else { return .failure(error!) }\n        \n        guard let data = data else {\n            return .failure(AFError.responseSerializationFailed(reason: .inputDataNil))\n        }\n        \n        return Result { try newJSONDecoder().decode(T.self, from: data) }\n    }\n}\n\n@discardableResult\nfileprivate func responseDecodable<T: Decodable>(queue: DispatchQueue? = nil, completionHandler: @escaping (DataResponse<T>) -> Void) -> Self {\n    return response(queue: queue, responseSerializer: decodableResponseSerializer(), completionHandler: completionHandler)\n}`);\n            this.ensureBlankLine();\n            this.forEachTopLevel(\"leading-and-interposing\", (_, name) => {\n                this.emitLine(\"@discardableResult\");\n                this.emitBlock(\n                    [\n                        \"func response\",\n                        name,\n                        \"(queue: DispatchQueue? = nil, completionHandler: @escaping (DataResponse<\",\n                        name,\n                        \">) -> Void) -> Self\"\n                    ],\n                    () => {\n                        this.emitLine(\"return responseDecodable(queue: queue, completionHandler: completionHandler)\");\n                    }\n                );\n            });\n        });\n    }\n}\n","import { arrayIntercalate } from \"collection-utils\";\n\nimport { ConvenienceRenderer } from \"../ConvenienceRenderer\";\nimport { type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { BooleanOption, type Option, type OptionValues, getOptionValues } from \"../RendererOptions\";\nimport { type Sourcelike } from \"../Source\";\nimport { AcronymStyleOptions, acronymStyle } from \"../support/Acronyms\";\nimport {\n    allLowerWordStyle,\n    capitalize,\n    combineWords,\n    firstUpperWordStyle,\n    isLetterOrUnderscore,\n    splitIntoWords,\n    stringEscape,\n    utf16StringEscape\n} from \"../support/Strings\";\nimport { panic } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport { ArrayType, type ClassProperty, EnumType, MapType, type ObjectType, type Type } from \"../Type\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { matchType } from \"../TypeUtils\";\n\nimport { legalizeName } from \"./JavaScript\";\n\nexport const typeScriptEffectSchemaOptions = {\n    justSchema: new BooleanOption(\"just-schema\", \"Schema only\", false)\n};\n\nexport class TypeScriptEffectSchemaTargetLanguage extends TargetLanguage {\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [];\n    }\n\n    public constructor(\n        displayName: string = \"TypeScript Effect Schema\",\n        names: string[] = [\"typescript-effect-schema\"],\n        extension: string = \"ts\"\n    ) {\n        super(displayName, names, extension);\n    }\n\n    protected makeRenderer(\n        renderContext: RenderContext,\n        untypedOptionValues: FixMeOptionsType\n    ): TypeScriptEffectSchemaRenderer {\n        return new TypeScriptEffectSchemaRenderer(\n            this,\n            renderContext,\n            getOptionValues(typeScriptEffectSchemaOptions, untypedOptionValues)\n        );\n    }\n}\n\nexport class TypeScriptEffectSchemaRenderer extends ConvenienceRenderer {\n    private emittedObjects = new Set<Name>();\n\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        private readonly _options: OptionValues<typeof typeScriptEffectSchemaOptions>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return [\"Class\", \"Date\", \"Object\", \"String\", \"Array\", \"JSON\", \"Error\"];\n    }\n\n    protected nameStyle(original: string, upper: boolean): string {\n        const acronyms = acronymStyle(AcronymStyleOptions.Camel);\n        const words = splitIntoWords(original);\n        return combineWords(\n            words,\n            legalizeName,\n            upper ? firstUpperWordStyle : allLowerWordStyle,\n            firstUpperWordStyle,\n            upper ? (s): string => capitalize(acronyms(s)) : allLowerWordStyle,\n            acronyms,\n            \"\",\n            isLetterOrUnderscore\n        );\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return funPrefixNamer(\"types\", s => this.nameStyle(s, true));\n    }\n\n    protected makeUnionMemberNamer(): Namer {\n        return funPrefixNamer(\"properties\", s => this.nameStyle(s, true));\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return funPrefixNamer(\"properties\", s => this.nameStyle(s, true));\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return funPrefixNamer(\"enum-cases\", s => this.nameStyle(s, false));\n    }\n\n    private importStatement(lhs: Sourcelike, moduleName: Sourcelike): Sourcelike {\n        return [\"import \", lhs, \" from \", moduleName, \";\"];\n    }\n\n    protected emitImports(): void {\n        this.ensureBlankLine();\n        this.emitLine(this.importStatement(\"* as S\", '\"@effect/schema/Schema\"'));\n    }\n\n    private typeMapTypeForProperty(p: ClassProperty): Sourcelike {\n        const typeMap = this.typeMapTypeFor(p.type);\n        return p.isOptional ? [\"S.optional(\", typeMap, \")\"] : typeMap;\n    }\n\n    private typeMapTypeFor(t: Type, required: boolean = true): Sourcelike {\n        if (t.kind === \"class\" || t.kind === \"object\" || t.kind === \"enum\") {\n            const name = this.nameForNamedType(t);\n            if (this.emittedObjects.has(name)) {\n                return [name];\n            }\n\n            return [\"S.suspend(() => \", name, \")\"];\n        }\n\n        const match = matchType<Sourcelike>(\n            t,\n            _anyType => \"S.Any\",\n            _nullType => \"S.Null\",\n            _boolType => \"S.Boolean\",\n            _integerType => \"S.Number\",\n            _doubleType => \"S.Number\",\n            _stringType => \"S.String\",\n            arrayType => [\"S.Array(\", this.typeMapTypeFor(arrayType.items, false), \")\"],\n            _classType => panic(\"Should already be handled.\"),\n            _mapType => [\"S.Record(S.String, \", this.typeMapTypeFor(_mapType.values, false), \")\"],\n            _enumType => panic(\"Should already be handled.\"),\n            unionType => {\n                const children = Array.from(unionType.getChildren()).map((type: Type) =>\n                    this.typeMapTypeFor(type, false)\n                );\n                return [\"S.Union(\", ...arrayIntercalate(\", \", children), \")\"];\n            },\n            _transformedStringType => {\n                return \"S.String\";\n            }\n        );\n\n        if (required) {\n            return [match];\n        }\n\n        return match;\n    }\n\n    private emitObject(name: Name, t: ObjectType): void {\n        this.emittedObjects.add(name);\n        this.ensureBlankLine();\n        this.emitLine(\"\\nexport class \", name, \" extends S.Class<\", name, '>(\"', name, '\")({');\n        this.indent(() => {\n            this.forEachClassProperty(t, \"none\", (_, jsonName, property) => {\n                this.emitLine(`\"${utf16StringEscape(jsonName)}\"`, \": \", this.typeMapTypeForProperty(property), \",\");\n            });\n        });\n        this.emitLine(\"}) {}\");\n    }\n\n    private emitEnum(e: EnumType, enumName: Name): void {\n        this.emittedObjects.add(enumName);\n        this.ensureBlankLine();\n        this.emitDescription(this.descriptionForType(e));\n        this.emitLine(\"\\nexport const \", enumName, \" = \", \"S.Literal(\");\n        this.indent(() =>\n            this.forEachEnumCase(e, \"none\", (_, jsonName) => {\n                this.emitLine('\"', stringEscape(jsonName), '\",');\n            })\n        );\n        this.emitLine(\");\");\n        if (!this._options.justSchema) {\n            this.emitLine(\"export type \", enumName, \" = S.Schema.Type<typeof \", enumName, \">;\");\n        }\n    }\n\n    protected walkObjectNames(objectType: ObjectType): Name[] {\n        const names: Name[] = [];\n\n        const recurse = (type: Type): void => {\n            if (type.kind === \"object\" || type.kind === \"class\") {\n                names.push(this.nameForNamedType(type));\n                this.forEachClassProperty(type as ObjectType, \"none\", (_, __, prop) => {\n                    recurse(prop.type);\n                });\n            } else if (type instanceof ArrayType) {\n                recurse(type.items);\n            } else if (type instanceof MapType) {\n                recurse(type.values);\n            } else if (type instanceof EnumType) {\n                for (const t of type.getChildren()) {\n                    recurse(t);\n                }\n            }\n        };\n\n        this.forEachClassProperty(objectType, \"none\", (_, __, prop) => {\n            recurse(prop.type);\n        });\n\n        return names;\n    }\n\n    protected emitSchemas(): void {\n        this.ensureBlankLine();\n\n        this.forEachEnum(\"leading-and-interposing\", (u: EnumType, enumName: Name) => {\n            this.emitEnum(u, enumName);\n        });\n\n        const order: number[] = [];\n        const mapKey: Name[] = [];\n        const mapValue: ObjectType[] = [];\n        this.forEachObject(\"none\", (type: ObjectType, name: Name) => {\n            mapKey.push(name);\n            mapValue.push(type);\n        });\n\n        mapKey.forEach((_, index) => {\n            // assume first\n            let ordinal = 0;\n\n            // pull out all names\n            const source = mapValue[index];\n            const names = this.walkObjectNames(source);\n\n            // must be behind all these names\n            names.forEach(name => {\n                const depName = name;\n\n                // find this name's ordinal, if it has already been added\n                order.forEach(orderItem => {\n                    const depIndex = orderItem;\n                    if (mapKey[depIndex] === depName) {\n                        // this is the index of the dependency, so make sure we come after it\n                        ordinal = Math.max(ordinal, depIndex + 1);\n                    }\n                });\n            });\n\n            // insert index\n            order.splice(ordinal, 0, index);\n        });\n\n        // now emit ordered source\n        order.forEach(i => this.emitGatheredSource(this.gatherSource(() => this.emitObject(mapKey[i], mapValue[i]))));\n    }\n\n    protected emitSourceStructure(): void {\n        if (this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n        }\n\n        this.emitImports();\n        this.emitSchemas();\n    }\n}\n","import { type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { BooleanOption, type Option, type OptionValues, getOptionValues } from \"../RendererOptions\";\nimport { type MultiWord, type Sourcelike, modifySource, multiWord, parenIfNeeded, singleWord } from \"../Source\";\nimport { camelCase, utf16StringEscape } from \"../support/Strings\";\nimport { defined, panic } from \"../support/Support\";\nimport { type TargetLanguage } from \"../TargetLanguage\";\nimport { ArrayType, type ClassType, EnumType, type Type, UnionType } from \"../Type\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { isNamedType, matchType, nullableFromUnion } from \"../TypeUtils\";\n\nimport {\n    JavaScriptRenderer,\n    JavaScriptTargetLanguage,\n    type JavaScriptTypeAnnotations,\n    javaScriptOptions,\n    legalizeName\n} from \"./JavaScript\";\nimport { isES3IdentifierStart } from \"./JavaScriptUnicodeMaps\";\n\nexport const tsFlowOptions = Object.assign({}, javaScriptOptions, {\n    justTypes: new BooleanOption(\"just-types\", \"Interfaces only\", false),\n    nicePropertyNames: new BooleanOption(\"nice-property-names\", \"Transform property names to be JavaScripty\", false),\n    declareUnions: new BooleanOption(\"explicit-unions\", \"Explicitly name unions\", false),\n    preferUnions: new BooleanOption(\"prefer-unions\", \"Use union type instead of enum\", false),\n    preferTypes: new BooleanOption(\"prefer-types\", \"Use types instead of interfaces\", false),\n    preferConstValues: new BooleanOption(\n        \"prefer-const-values\",\n        \"Use string instead of enum for string enums with single value\",\n        false\n    ),\n    readonly: new BooleanOption(\"readonly\", \"Use readonly type members\", false)\n});\n\nconst tsFlowTypeAnnotations = {\n    any: \": any\",\n    anyArray: \": any[]\",\n    anyMap: \": { [k: string]: any }\",\n    string: \": string\",\n    stringArray: \": string[]\",\n    boolean: \": boolean\"\n};\n\nexport abstract class TypeScriptFlowBaseTargetLanguage extends JavaScriptTargetLanguage {\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [\n            tsFlowOptions.justTypes,\n            tsFlowOptions.nicePropertyNames,\n            tsFlowOptions.declareUnions,\n            tsFlowOptions.runtimeTypecheck,\n            tsFlowOptions.runtimeTypecheckIgnoreUnknownProperties,\n            tsFlowOptions.acronymStyle,\n            tsFlowOptions.converters,\n            tsFlowOptions.rawType,\n            tsFlowOptions.preferUnions,\n            tsFlowOptions.preferTypes,\n            tsFlowOptions.preferConstValues,\n            tsFlowOptions.readonly\n        ];\n    }\n\n    public get supportsOptionalClassProperties(): boolean {\n        return true;\n    }\n\n    protected abstract makeRenderer(\n        renderContext: RenderContext,\n        untypedOptionValues: FixMeOptionsType\n    ): JavaScriptRenderer;\n}\n\nexport class TypeScriptTargetLanguage extends TypeScriptFlowBaseTargetLanguage {\n    public constructor() {\n        super(\"TypeScript\", [\"typescript\", \"ts\", \"tsx\"], \"ts\");\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): TypeScriptRenderer {\n        return new TypeScriptRenderer(this, renderContext, getOptionValues(tsFlowOptions, untypedOptionValues));\n    }\n}\n\nfunction quotePropertyName(original: string): string {\n    const escaped = utf16StringEscape(original);\n    const quoted = `\"${escaped}\"`;\n\n    if (original.length === 0) {\n        return quoted;\n    } else if (!isES3IdentifierStart(original.codePointAt(0) as number)) {\n        return quoted;\n    } else if (escaped !== original) {\n        return quoted;\n    } else if (legalizeName(original) !== original) {\n        return quoted;\n    } else {\n        return original;\n    }\n}\n\nexport abstract class TypeScriptFlowBaseRenderer extends JavaScriptRenderer {\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        protected readonly _tsFlowOptions: OptionValues<typeof tsFlowOptions>\n    ) {\n        super(targetLanguage, renderContext, _tsFlowOptions);\n    }\n\n    protected namerForObjectProperty(): Namer {\n        if (this._tsFlowOptions.nicePropertyNames) {\n            return funPrefixNamer(\"properties\", s => this.nameStyle(s, false));\n        } else {\n            return super.namerForObjectProperty();\n        }\n    }\n\n    protected sourceFor(t: Type): MultiWord {\n        if (this._tsFlowOptions.preferConstValues && t.kind === \"enum\" && t instanceof EnumType && t.cases.size === 1) {\n            const item = t.cases.values().next().value;\n            return singleWord(`\"${utf16StringEscape(item)}\"`);\n        }\n\n        if ([\"class\", \"object\", \"enum\"].includes(t.kind)) {\n            return singleWord(this.nameForNamedType(t));\n        }\n\n        return matchType<MultiWord>(\n            t,\n            _anyType => singleWord(\"any\"),\n            _nullType => singleWord(\"null\"),\n            _boolType => singleWord(\"boolean\"),\n            _integerType => singleWord(\"number\"),\n            _doubleType => singleWord(\"number\"),\n            _stringType => singleWord(\"string\"),\n            arrayType => {\n                const itemType = this.sourceFor(arrayType.items);\n                if (\n                    (arrayType.items instanceof UnionType && !this._tsFlowOptions.declareUnions) ||\n                    arrayType.items instanceof ArrayType\n                ) {\n                    return singleWord([\"Array<\", itemType.source, \">\"]);\n                } else {\n                    return singleWord([parenIfNeeded(itemType), \"[]\"]);\n                }\n            },\n            _classType => panic(\"We handled this above\"),\n            mapType => singleWord([\"{ [key: string]: \", this.sourceFor(mapType.values).source, \" }\"]),\n            _enumType => panic(\"We handled this above\"),\n            unionType => {\n                if (!this._tsFlowOptions.declareUnions || nullableFromUnion(unionType) !== null) {\n                    const children = Array.from(unionType.getChildren()).map(c => parenIfNeeded(this.sourceFor(c)));\n                    return multiWord(\" | \", ...children);\n                } else {\n                    return singleWord(this.nameForNamedType(unionType));\n                }\n            },\n            transformedStringType => {\n                if (transformedStringType.kind === \"date-time\") {\n                    return singleWord(\"Date\");\n                }\n\n                return singleWord(\"string\");\n            }\n        );\n    }\n\n    protected abstract emitEnum(e: EnumType, enumName: Name): void;\n\n    protected abstract emitClassBlock(c: ClassType, className: Name): void;\n\n    protected emitClassBlockBody(c: ClassType): void {\n        this.emitPropertyTable(c, (name, _jsonName, p) => {\n            const t = p.type;\n\n            let propertyName: Sourcelike = name;\n            propertyName = modifySource(quotePropertyName, name);\n\n            if (this._tsFlowOptions.readonly) {\n                propertyName = modifySource(_propertyName => \"readonly \" + _propertyName, propertyName);\n            }\n\n            return [\n                [propertyName, p.isOptional ? \"?\" : \"\", \": \"],\n                [this.sourceFor(t).source, \";\"]\n            ];\n        });\n\n        const additionalProperties = c.getAdditionalProperties();\n        if (additionalProperties) {\n            this.emitTable([[\"[property: string]\", \": \", this.sourceFor(additionalProperties).source, \";\"]]);\n        }\n    }\n\n    private emitClass(c: ClassType, className: Name): void {\n        this.emitDescription(this.descriptionForType(c));\n        this.emitClassBlock(c, className);\n    }\n\n    protected emitUnion(u: UnionType, unionName: Name): void {\n        if (!this._tsFlowOptions.declareUnions) {\n            return;\n        }\n\n        this.emitDescription(this.descriptionForType(u));\n\n        const children = multiWord(\" | \", ...Array.from(u.getChildren()).map(c => parenIfNeeded(this.sourceFor(c))));\n        this.emitLine(\"export type \", unionName, \" = \", children.source, \";\");\n    }\n\n    protected emitTypes(): void {\n        // emit primitive top levels\n        this.forEachTopLevel(\"none\", (t, name) => {\n            if (!t.isPrimitive()) {\n                return;\n            }\n\n            this.ensureBlankLine();\n            this.emitDescription(this.descriptionForType(t));\n            this.emitLine(\"type \", name, \" = \", this.sourceFor(t).source, \";\");\n        });\n\n        this.forEachNamedType(\n            \"leading-and-interposing\",\n            (c: ClassType, n: Name) => this.emitClass(c, n),\n            (e, n) => this.emitEnum(e, n),\n            (u, n) => this.emitUnion(u, n)\n        );\n    }\n\n    protected emitUsageComments(): void {\n        if (this._tsFlowOptions.justTypes) return;\n        super.emitUsageComments();\n    }\n\n    protected deserializerFunctionLine(t: Type, name: Name): Sourcelike {\n        const jsonType = this._tsFlowOptions.rawType === \"json\" ? \"string\" : \"any\";\n        return [\"function to\", name, \"(json: \", jsonType, \"): \", this.sourceFor(t).source];\n    }\n\n    protected serializerFunctionLine(t: Type, name: Name): Sourcelike {\n        const camelCaseName = modifySource(camelCase, name);\n        const returnType = this._tsFlowOptions.rawType === \"json\" ? \"string\" : \"any\";\n        return [\"function \", camelCaseName, \"ToJson(value: \", this.sourceFor(t).source, \"): \", returnType];\n    }\n\n    protected get moduleLine(): string | undefined {\n        return undefined;\n    }\n\n    protected get castFunctionLines(): [string, string] {\n        return [\"function cast<T>(val: any, typ: any): T\", \"function uncast<T>(val: T, typ: any): any\"];\n    }\n\n    protected get typeAnnotations(): JavaScriptTypeAnnotations {\n        throw new Error(\"not implemented\");\n    }\n\n    protected emitConvertModule(): void {\n        if (this._tsFlowOptions.justTypes) return;\n        super.emitConvertModule();\n    }\n\n    protected emitConvertModuleHelpers(): void {\n        if (this._tsFlowOptions.justTypes) return;\n        super.emitConvertModuleHelpers();\n    }\n\n    protected emitModuleExports(): void {\n        if (this._tsFlowOptions.justTypes) {\n            return;\n        } else {\n            super.emitModuleExports();\n        }\n    }\n}\n\nexport class TypeScriptRenderer extends TypeScriptFlowBaseRenderer {\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return [\"Array\", \"Date\"];\n    }\n\n    protected deserializerFunctionLine(t: Type, name: Name): Sourcelike {\n        const jsonType = this._tsFlowOptions.rawType === \"json\" ? \"string\" : \"any\";\n        return [\"public static to\", name, \"(json: \", jsonType, \"): \", this.sourceFor(t).source];\n    }\n\n    protected serializerFunctionLine(t: Type, name: Name): Sourcelike {\n        const camelCaseName = modifySource(camelCase, name);\n        const returnType = this._tsFlowOptions.rawType === \"json\" ? \"string\" : \"any\";\n        return [\"public static \", camelCaseName, \"ToJson(value: \", this.sourceFor(t).source, \"): \", returnType];\n    }\n\n    protected get moduleLine(): string | undefined {\n        return \"export class Convert\";\n    }\n\n    protected get typeAnnotations(): JavaScriptTypeAnnotations {\n        return Object.assign({ never: \": never\" }, tsFlowTypeAnnotations);\n    }\n\n    protected emitModuleExports(): void {\n        return;\n    }\n\n    protected emitUsageImportComment(): void {\n        const topLevelNames: Sourcelike[] = [];\n        this.forEachTopLevel(\n            \"none\",\n            (_t, name) => {\n                topLevelNames.push(\", \", name);\n            },\n            isNamedType\n        );\n        this.emitLine(\"//   import { Convert\", topLevelNames, ' } from \"./file\";');\n    }\n\n    protected emitEnum(e: EnumType, enumName: Name): void {\n        this.emitDescription(this.descriptionForType(e));\n\n        // enums with only one value are emitted as constants\n        if (this._tsFlowOptions.preferConstValues && e.cases.size === 1) return;\n\n        if (this._tsFlowOptions.preferUnions) {\n            let items = \"\";\n            e.cases.forEach(item => {\n                if (items === \"\") {\n                    items += `\"${utf16StringEscape(item)}\"`;\n                    return;\n                }\n\n                items += ` | \"${utf16StringEscape(item)}\"`;\n            });\n            this.emitLine(\"export type \", enumName, \" = \", items, \";\");\n        } else {\n            this.emitBlock([\"export enum \", enumName, \" \"], \"\", () => {\n                this.forEachEnumCase(e, \"none\", (name, jsonName) => {\n                    this.emitLine(name, ` = \"${utf16StringEscape(jsonName)}\",`);\n                });\n            });\n        }\n    }\n\n    protected emitClassBlock(c: ClassType, className: Name): void {\n        this.emitBlock(\n            this._tsFlowOptions.preferTypes\n                ? [\"export type \", className, \" = \"]\n                : [\"export interface \", className, \" \"],\n            \"\",\n            () => {\n                this.emitClassBlockBody(c);\n            }\n        );\n    }\n\n    protected emitSourceStructure() {\n        super.emitSourceStructure();\n    }\n}\n\nexport class FlowTargetLanguage extends TypeScriptFlowBaseTargetLanguage {\n    public constructor() {\n        super(\"Flow\", [\"flow\"], \"js\");\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): FlowRenderer {\n        return new FlowRenderer(this, renderContext, getOptionValues(tsFlowOptions, untypedOptionValues));\n    }\n}\n\nexport class FlowRenderer extends TypeScriptFlowBaseRenderer {\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return [\"Class\", \"Date\", \"Object\", \"String\", \"Array\", \"JSON\", \"Error\"];\n    }\n\n    protected get typeAnnotations(): JavaScriptTypeAnnotations {\n        return Object.assign({ never: \"\" }, tsFlowTypeAnnotations);\n    }\n\n    protected emitEnum(e: EnumType, enumName: Name): void {\n        this.emitDescription(this.descriptionForType(e));\n        const lines: string[][] = [];\n        this.forEachEnumCase(e, \"none\", (_, jsonName) => {\n            const maybeOr = lines.length === 0 ? \"  \" : \"| \";\n            lines.push([maybeOr, '\"', utf16StringEscape(jsonName), '\"']);\n        });\n        defined(lines[lines.length - 1]).push(\";\");\n\n        this.emitLine(\"export type \", enumName, \" =\");\n        this.indent(() => {\n            for (const line of lines) {\n                this.emitLine(line);\n            }\n        });\n    }\n\n    protected emitClassBlock(c: ClassType, className: Name): void {\n        this.emitBlock([\"export type \", className, \" = \"], \";\", () => {\n            this.emitClassBlockBody(c);\n        });\n    }\n\n    protected emitSourceStructure(): void {\n        this.emitLine(\"// @flow\");\n        this.ensureBlankLine();\n        super.emitSourceStructure();\n    }\n}\n","import { arrayIntercalate } from \"collection-utils\";\n\nimport { ConvenienceRenderer } from \"../ConvenienceRenderer\";\nimport { type Name, type Namer, funPrefixNamer } from \"../Naming\";\nimport { type RenderContext } from \"../Renderer\";\nimport { BooleanOption, type Option, type OptionValues, getOptionValues } from \"../RendererOptions\";\nimport { type Sourcelike } from \"../Source\";\nimport { AcronymStyleOptions, acronymStyle } from \"../support/Acronyms\";\nimport {\n    allLowerWordStyle,\n    capitalize,\n    combineWords,\n    firstUpperWordStyle,\n    isLetterOrUnderscore,\n    splitIntoWords,\n    stringEscape,\n    utf16StringEscape\n} from \"../support/Strings\";\nimport { panic } from \"../support/Support\";\nimport { TargetLanguage } from \"../TargetLanguage\";\nimport {\n    ArrayType,\n    type ClassProperty,\n    ClassType,\n    type EnumType,\n    ObjectType,\n    type PrimitiveStringTypeKind,\n    SetOperationType,\n    type TransformedStringTypeKind,\n    type Type\n} from \"../Type\";\nimport { type StringTypeMapping } from \"../TypeBuilder\";\nimport { type FixMeOptionsAnyType, type FixMeOptionsType } from \"../types\";\nimport { matchType } from \"../TypeUtils\";\n\nimport { legalizeName } from \"./JavaScript\";\n\nexport const typeScriptZodOptions = {\n    justSchema: new BooleanOption(\"just-schema\", \"Schema only\", false)\n};\n\nexport class TypeScriptZodTargetLanguage extends TargetLanguage {\n    protected getOptions(): Array<Option<FixMeOptionsAnyType>> {\n        return [];\n    }\n\n    public constructor(\n        displayName: string = \"TypeScript Zod\",\n        names: string[] = [\"typescript-zod\"],\n        extension: string = \"ts\"\n    ) {\n        super(displayName, names, extension);\n    }\n\n    public get stringTypeMapping(): StringTypeMapping {\n        const mapping: Map<TransformedStringTypeKind, PrimitiveStringTypeKind> = new Map();\n        const dateTimeType = \"date-time\";\n        mapping.set(\"date-time\", dateTimeType);\n        return mapping;\n    }\n\n    public get supportsOptionalClassProperties(): boolean {\n        return true;\n    }\n\n    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): TypeScriptZodRenderer {\n        return new TypeScriptZodRenderer(\n            this,\n            renderContext,\n            getOptionValues(typeScriptZodOptions, untypedOptionValues)\n        );\n    }\n}\n\nexport class TypeScriptZodRenderer extends ConvenienceRenderer {\n    public constructor(\n        targetLanguage: TargetLanguage,\n        renderContext: RenderContext,\n        protected readonly _options: OptionValues<typeof typeScriptZodOptions>\n    ) {\n        super(targetLanguage, renderContext);\n    }\n\n    protected forbiddenNamesForGlobalNamespace(): string[] {\n        return [\"Class\", \"Date\", \"Object\", \"String\", \"Array\", \"JSON\", \"Error\"];\n    }\n\n    protected nameStyle(original: string, upper: boolean): string {\n        const acronyms = acronymStyle(AcronymStyleOptions.Camel);\n        const words = splitIntoWords(original);\n        return combineWords(\n            words,\n            legalizeName,\n            upper ? firstUpperWordStyle : allLowerWordStyle,\n            firstUpperWordStyle,\n            upper ? (s): string => capitalize(acronyms(s)) : allLowerWordStyle,\n            acronyms,\n            \"\",\n            isLetterOrUnderscore\n        );\n    }\n\n    protected makeNamedTypeNamer(): Namer {\n        return funPrefixNamer(\"types\", s => this.nameStyle(s, true));\n    }\n\n    protected makeUnionMemberNamer(): Namer {\n        return funPrefixNamer(\"properties\", s => this.nameStyle(s, true));\n    }\n\n    protected namerForObjectProperty(): Namer {\n        return funPrefixNamer(\"properties\", s => this.nameStyle(s, true));\n    }\n\n    protected makeEnumCaseNamer(): Namer {\n        return funPrefixNamer(\"enum-cases\", s => this.nameStyle(s, false));\n    }\n\n    protected importStatement(lhs: Sourcelike, moduleName: Sourcelike): Sourcelike {\n        return [\"import \", lhs, \" from \", moduleName, \";\"];\n    }\n\n    protected emitImports(): void {\n        this.ensureBlankLine();\n        this.emitLine(this.importStatement(\"* as z\", '\"zod\"'));\n    }\n\n    protected typeMapTypeForProperty(p: ClassProperty): Sourcelike {\n        const typeMap = this.typeMapTypeFor(p.type);\n        return p.isOptional ? [typeMap, \".optional()\"] : typeMap;\n    }\n\n    protected typeMapTypeFor(t: Type, required: boolean = true): Sourcelike {\n        if ([\"class\", \"object\", \"enum\"].includes(t.kind)) {\n            return [this.nameForNamedType(t), \"Schema\"];\n        }\n\n        const match = matchType<Sourcelike>(\n            t,\n            _anyType => \"z.any()\",\n            _nullType => \"z.null()\",\n            _boolType => \"z.boolean()\",\n            _integerType => \"z.number()\",\n            _doubleType => \"z.number()\",\n            _stringType => \"z.string()\",\n            arrayType => [\"z.array(\", this.typeMapTypeFor(arrayType.items, false), \")\"],\n            _classType => panic(\"Should already be handled.\"),\n            _mapType => [\"z.record(z.string(), \", this.typeMapTypeFor(_mapType.values, false), \")\"],\n            _enumType => panic(\"Should already be handled.\"),\n            unionType => {\n                const children = Array.from(unionType.getChildren()).map((type: Type) =>\n                    this.typeMapTypeFor(type, false)\n                );\n                return [\"z.union([\", ...arrayIntercalate(\", \", children), \"])\"];\n            },\n            _transformedStringType => {\n                if (_transformedStringType.kind === \"date-time\") {\n                    return \"z.coerce.date()\";\n                }\n\n                return \"z.string()\";\n            }\n        );\n\n        if (required) {\n            return [match];\n        }\n\n        return match;\n    }\n\n    protected emitObject(name: Name, t: ObjectType): void {\n        this.ensureBlankLine();\n        this.emitLine(\"\\nexport const \", name, \"Schema = \", \"z.object({\");\n        this.indent(() => {\n            this.forEachClassProperty(t, \"none\", (_, jsonName, property) => {\n                this.emitLine(`\"${utf16StringEscape(jsonName)}\"`, \": \", this.typeMapTypeForProperty(property), \",\");\n            });\n        });\n        this.emitLine(\"});\");\n        if (!this._options.justSchema) {\n            this.emitLine(\"export type \", name, \" = z.infer<typeof \", name, \"Schema>;\");\n        }\n    }\n\n    protected emitEnum(e: EnumType, enumName: Name): void {\n        this.ensureBlankLine();\n        this.emitDescription(this.descriptionForType(e));\n        this.emitLine(\"\\nexport const \", enumName, \"Schema = \", \"z.enum([\");\n        this.indent(() =>\n            this.forEachEnumCase(e, \"none\", (_, jsonName) => {\n                this.emitLine('\"', stringEscape(jsonName), '\",');\n            })\n        );\n        this.emitLine(\"]);\");\n        if (!this._options.justSchema) {\n            this.emitLine(\"export type \", enumName, \" = z.infer<typeof \", enumName, \"Schema>;\");\n        }\n    }\n\n    /** Static function that extracts underlying type refs for types that form part of the\n     * definition of the passed type - used to ensure that these appear in generated source\n     * before types that reference them.\n     *\n     * Primitive types don't need defining and enums are output before other types, hence,\n     * these are ignored.\n     */\n    private static extractUnderlyingTyperefs(type: Type): number[] {\n        let typeRefs: number[] = [];\n        // Ignore enums and primitives\n        if (!type.isPrimitive() && type.kind != \"enum\") {\n            // need to extract constituent types for unions and intersections (which both extend SetOperationType)\n            // and can ignore the union/intersection itself\n            if (type instanceof SetOperationType) {\n                (type as SetOperationType).members.forEach(member => {\n                    // recurse as the underlying type could itself be a union, instersection or array etc.\n                    typeRefs.push(...TypeScriptZodRenderer.extractUnderlyingTyperefs(member));\n                });\n            }\n\n            // need to extract additional properties for object, class and map types (which all extend ObjectType)\n            if (type instanceof ObjectType) {\n                const addType = (type as ObjectType).getAdditionalProperties();\n                if (addType) {\n                    // recurse as the underlying type could itself be a union, instersection or array etc.\n                    typeRefs.push(...TypeScriptZodRenderer.extractUnderlyingTyperefs(addType));\n                }\n            }\n\n            // need to extract items types for ArrayType\n            if (type instanceof ArrayType) {\n                const itemsType = (type as ArrayType).items;\n                if (itemsType) {\n                    // recurse as the underlying type could itself be a union, instersection or array etc.\n                    typeRefs.push(...TypeScriptZodRenderer.extractUnderlyingTyperefs(itemsType));\n                }\n            }\n\n            // Finally return the reference to a class as that will need to be defined (where objects, maps, unions, intersections and arrays do not)\n            if (type instanceof ClassType) {\n                typeRefs.push(type.typeRef);\n            }\n        }\n\n        return typeRefs;\n    }\n\n    protected emitSchemas(): void {\n        this.ensureBlankLine();\n\n        this.forEachEnum(\"leading-and-interposing\", (u: EnumType, enumName: Name) => {\n            this.emitEnum(u, enumName);\n        });\n\n        // All children must be defined before this type to avoid forward references in generated code\n        // Build a model that will tell us if a referenced type has been defined then make multiple\n        // passes over the defined objects to put them into the correct order for output in the\n        // generated sourcecode\n\n        const order: number[] = [];\n        const mapType: ObjectType[] = [];\n        const mapTypeRef: number[] = [];\n        const mapName: Name[] = [];\n        const mapChildTypeRefs: number[][] = [];\n\n        this.forEachObject(\"none\", (type: ObjectType, name: Name) => {\n            mapType.push(type);\n            mapTypeRef.push(type.typeRef);\n            mapName.push(name);\n\n            const children = type.getChildren();\n            let childTypeRefs: number[] = [];\n\n            children.forEach(child => {\n                childTypeRefs = childTypeRefs.concat(TypeScriptZodRenderer.extractUnderlyingTyperefs(child));\n            });\n            mapChildTypeRefs.push(childTypeRefs);\n        });\n\n        // Items to process on this pass\n        let indices: number[] = [];\n        mapType.forEach((_, index) => {\n            indices.push(index);\n        });\n        // items to process on the next pass\n        let deferredIndices: number[] = [];\n\n        // defensive: make sure we don't loop forever, even complex sets shouldn't require many passes\n        const MAX_PASSES = 999;\n        let passNum = 0;\n        do {\n            indices.forEach(index => {\n                // must be behind all these children\n                const childTypeRefs = mapChildTypeRefs[index];\n                let foundAllChildren = true;\n\n                childTypeRefs.forEach(childRef => {\n                    // defensive: first check if there is a definition for the referenced type (there should be)\n                    if (mapTypeRef.includes(childRef)) {\n                        let found = false;\n                        // find this childs's ordinal, if it has already been added\n                        // faster to go through what we've defined so far than all definitions\n\n                        // FIXME: refactor this\n                        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n                        for (let j = 0; j < order.length; j++) {\n                            const childIndex = order[j];\n                            if (mapTypeRef[childIndex] === childRef) {\n                                found = true;\n                                break;\n                            }\n                        }\n\n                        foundAllChildren = foundAllChildren && found;\n                    } else {\n                        console.error(\n                            \"A child type reference was not found amongst all Object definitions! TypeRef: \" + childRef\n                        );\n                    }\n                });\n\n                if (foundAllChildren) {\n                    // insert index into order as we are safe to define this type\n                    order.push(index);\n                } else {\n                    // defer to a subsequent pass as we need to define other types\n                    deferredIndices.push(index);\n                }\n            });\n            indices = deferredIndices;\n            deferredIndices = [];\n            passNum++;\n\n            if (passNum > MAX_PASSES) {\n                // giving up\n                order.push(...deferredIndices);\n                console.warn(\n                    \"Exceeded maximum number of passes when determining output order, output may contain forward references\"\n                );\n            }\n        } while (indices.length > 0 && passNum <= MAX_PASSES);\n\n        // now emit ordered source\n        order.forEach(i => this.emitGatheredSource(this.gatherSource(() => this.emitObject(mapName[i], mapType[i]))));\n    }\n\n    protected emitSourceStructure(): void {\n        if (this.leadingComments !== undefined) {\n            this.emitComments(this.leadingComments);\n        }\n\n        this.emitImports();\n        this.emitSchemas();\n    }\n}\n","import { iterableFind } from \"collection-utils\";\n\nimport { type TargetLanguage } from \"../TargetLanguage\";\n\nimport { CJSONTargetLanguage } from \"./CJSON\";\nimport { CPlusPlusTargetLanguage } from \"./CPlusPlus\";\nimport { CrystalTargetLanguage } from \"./Crystal\";\nimport { CSharpTargetLanguage } from \"./CSharp\";\nimport { DartTargetLanguage } from \"./Dart\";\nimport { ElixirTargetLanguage } from \"./Elixir\";\nimport { ElmTargetLanguage } from \"./Elm\";\nimport { GoTargetLanguage } from \"./Golang\";\nimport { HaskellTargetLanguage } from \"./Haskell\";\nimport { JavaTargetLanguage } from \"./Java\";\nimport { JavaScriptTargetLanguage } from \"./JavaScript\";\n// eslint-disable-next-line import/no-cycle\nimport { JavaScriptPropTypesTargetLanguage } from \"./JavaScriptPropTypes\";\nimport { JSONSchemaTargetLanguage } from \"./JSONSchema\";\nimport { KotlinTargetLanguage } from \"./Kotlin\";\nimport { ObjectiveCTargetLanguage } from \"./Objective-C\";\nimport { PhpTargetLanguage } from \"./Php\";\nimport { PikeTargetLanguage } from \"./Pike\";\nimport { PythonTargetLanguage } from \"./Python\";\nimport { RubyTargetLanguage } from \"./ruby\";\nimport { RustTargetLanguage } from \"./Rust\";\nimport { Scala3TargetLanguage } from \"./Scala3\";\nimport { SmithyTargetLanguage } from \"./Smithy4s\";\nimport { SwiftTargetLanguage } from \"./Swift\";\nimport { TypeScriptEffectSchemaTargetLanguage } from \"./TypeScriptEffectSchema\";\nimport { FlowTargetLanguage, TypeScriptTargetLanguage } from \"./TypeScriptFlow\";\nimport { TypeScriptZodTargetLanguage } from \"./TypeScriptZod\";\n\nexport const all: TargetLanguage[] = [\n    new CSharpTargetLanguage(),\n    new GoTargetLanguage(),\n    new RustTargetLanguage(),\n    new CrystalTargetLanguage(),\n    new CJSONTargetLanguage(),\n    new CPlusPlusTargetLanguage(),\n    new ObjectiveCTargetLanguage(),\n    new JavaTargetLanguage(),\n    new TypeScriptTargetLanguage(),\n    new JavaScriptTargetLanguage(),\n    new JavaScriptPropTypesTargetLanguage(),\n    new FlowTargetLanguage(),\n    new SwiftTargetLanguage(),\n    new Scala3TargetLanguage(),\n    new SmithyTargetLanguage(),\n    new KotlinTargetLanguage(),\n    new ElmTargetLanguage(),\n    new JSONSchemaTargetLanguage(),\n    new RubyTargetLanguage(),\n    new DartTargetLanguage(),\n    new PythonTargetLanguage(\"Python\", [\"python\", \"py\"], \"py\"),\n    new PikeTargetLanguage(),\n    new HaskellTargetLanguage(),\n    new TypeScriptZodTargetLanguage(),\n    new TypeScriptEffectSchemaTargetLanguage(),\n    new ElixirTargetLanguage(),\n    new PhpTargetLanguage()\n];\n\nexport function languageNamed(name: string, targetLanguages?: TargetLanguage[]): TargetLanguage | undefined {\n    if (targetLanguages === undefined) {\n        targetLanguages = all;\n    }\n\n    const maybeTargetLanguage = iterableFind(targetLanguages, l => l.names.includes(name) || l.displayName === name);\n    if (maybeTargetLanguage !== undefined) return maybeTargetLanguage;\n    return iterableFind(targetLanguages, l => l.extension === name);\n}\n","import { addHashCode, hashCodeInit, hashString } from \"collection-utils\";\n\nimport { inferTransformedStringTypeKindForString } from \"../attributes/StringTypes\";\nimport { type DateTimeRecognizer } from \"../DateTime\";\nimport { assert, defined, panic } from \"../support/Support\";\nimport {\n    type TransformedStringTypeKind,\n    isPrimitiveStringTypeKind,\n    transformedStringTypeTargetTypeKindsMap\n} from \"../Type\";\n\nexport enum Tag {\n    Null = 1,\n    False = 2,\n    True = 3,\n    Integer = 4,\n    Double = 5,\n    InternedString = 6,\n    UninternedString = 7,\n    Object = 8,\n    Array = 9,\n    StringFormat = 10,\n    TransformedString = 11\n}\n\nexport type Value = number;\n\nconst TAG_BITS = 4;\nconst TAG_MASK = (1 << TAG_BITS) - 1;\n\nexport function makeValue(t: Tag, index: number): Value {\n    return t | (index << TAG_BITS);\n}\n\nfunction getIndex(v: Value, tag: Tag): number {\n    assert(valueTag(v) === tag, \"Trying to get index for value with invalid tag\");\n    return v >> TAG_BITS;\n}\n\nexport function valueTag(v: Value): Tag {\n    return v & TAG_MASK;\n}\n\ninterface Context {\n    currentArray: Value[] | undefined;\n    currentKey: string | undefined;\n    currentNumberIsDouble: boolean;\n    currentObject: Value[] | undefined;\n}\n\nexport abstract class CompressedJSON<T> {\n    private _rootValue: Value | undefined;\n\n    private _ctx: Context | undefined;\n\n    private _contextStack: Context[] = [];\n\n    private _strings: string[] = [];\n\n    private _stringIndexes: { [str: string]: number } = {};\n\n    private _objects: Value[][] = [];\n\n    private _arrays: Value[][] = [];\n\n    public constructor(\n        public readonly dateTimeRecognizer: DateTimeRecognizer,\n        public readonly handleRefs: boolean\n    ) {}\n\n    public abstract parse(input: T): Promise<Value>;\n\n    public parseSync(_input: T): Value {\n        return panic(\"parseSync not implemented in CompressedJSON\");\n    }\n\n    public getStringForValue(v: Value): string {\n        const tag = valueTag(v);\n        assert(tag === Tag.InternedString || tag === Tag.TransformedString);\n        return this._strings[getIndex(v, tag)];\n    }\n\n    public getObjectForValue = (v: Value): Value[] => {\n        return this._objects[getIndex(v, Tag.Object)];\n    };\n\n    public getArrayForValue = (v: Value): Value[] => {\n        return this._arrays[getIndex(v, Tag.Array)];\n    };\n\n    public getStringFormatTypeKind(v: Value): TransformedStringTypeKind {\n        const kind = this._strings[getIndex(v, Tag.StringFormat)];\n        if (!isPrimitiveStringTypeKind(kind) || kind === \"string\") {\n            return panic(\"Not a transformed string type kind\");\n        }\n\n        return kind;\n    }\n\n    protected get context(): Context {\n        return defined(this._ctx);\n    }\n\n    protected internString(s: string): number {\n        if (Object.prototype.hasOwnProperty.call(this._stringIndexes, s)) {\n            return this._stringIndexes[s];\n        }\n\n        const index = this._strings.length;\n        this._strings.push(s);\n        this._stringIndexes[s] = index;\n        return index;\n    }\n\n    protected makeString(s: string): Value {\n        const value = makeValue(Tag.InternedString, this.internString(s));\n        assert(typeof value === \"number\", `Interned string value is not a number: ${value}`);\n        return value;\n    }\n\n    protected internObject(obj: Value[]): Value {\n        const index = this._objects.length;\n        this._objects.push(obj);\n        return makeValue(Tag.Object, index);\n    }\n\n    protected internArray = (arr: Value[]): Value => {\n        const index = this._arrays.length;\n        this._arrays.push(arr);\n        return makeValue(Tag.Array, index);\n    };\n\n    protected get isExpectingRef(): boolean {\n        return this._ctx !== undefined && this._ctx.currentKey === \"$ref\";\n    }\n\n    protected commitValue(value: Value): void {\n        assert(typeof value === \"number\", `CompressedJSON value is not a number: ${value}`);\n        if (this._ctx === undefined) {\n            assert(\n                this._rootValue === undefined,\n                \"Committing value but nowhere to commit to - root value still there.\"\n            );\n            this._rootValue = value;\n        } else if (this._ctx.currentObject !== undefined) {\n            if (this._ctx.currentKey === undefined) {\n                return panic(\"Must have key and can't have string when committing\");\n            }\n\n            this._ctx.currentObject.push(this.makeString(this._ctx.currentKey), value);\n            this._ctx.currentKey = undefined;\n        } else if (this._ctx.currentArray !== undefined) {\n            this._ctx.currentArray.push(value);\n        } else {\n            return panic(\"Committing value but nowhere to commit to\");\n        }\n    }\n\n    protected commitNull(): void {\n        this.commitValue(makeValue(Tag.Null, 0));\n    }\n\n    protected commitBoolean(v: boolean): void {\n        this.commitValue(makeValue(v ? Tag.True : Tag.False, 0));\n    }\n\n    protected commitNumber(isDouble: boolean): void {\n        const numberTag = isDouble ? Tag.Double : Tag.Integer;\n        this.commitValue(makeValue(numberTag, 0));\n    }\n\n    protected commitString(s: string): void {\n        let value: Value | undefined = undefined;\n        if (this.handleRefs && this.isExpectingRef) {\n            value = this.makeString(s);\n        } else {\n            const format = inferTransformedStringTypeKindForString(s, this.dateTimeRecognizer);\n            if (format !== undefined) {\n                if (defined(transformedStringTypeTargetTypeKindsMap.get(format)).attributesProducer !== undefined) {\n                    value = makeValue(Tag.TransformedString, this.internString(s));\n                } else {\n                    value = makeValue(Tag.StringFormat, this.internString(format));\n                }\n            } else if (s.length <= 64) {\n                value = this.makeString(s);\n            } else {\n                value = makeValue(Tag.UninternedString, 0);\n            }\n        }\n\n        this.commitValue(value);\n    }\n\n    protected finish(): Value {\n        const value = this._rootValue;\n        if (value === undefined) {\n            return panic(\"Finished without root document\");\n        }\n\n        assert(this._ctx === undefined && this._contextStack.length === 0, \"Finished with contexts present\");\n        this._rootValue = undefined;\n        return value;\n    }\n\n    protected pushContext(): void {\n        if (this._ctx !== undefined) {\n            this._contextStack.push(this._ctx);\n        }\n\n        this._ctx = {\n            currentObject: undefined,\n            currentArray: undefined,\n            currentKey: undefined,\n            currentNumberIsDouble: false\n        };\n    }\n\n    protected pushObjectContext(): void {\n        this.pushContext();\n        defined(this._ctx).currentObject = [];\n    }\n\n    protected setPropertyKey(key: string): void {\n        const ctx = this.context;\n        ctx.currentKey = key;\n    }\n\n    protected finishObject(): void {\n        const obj = this.context.currentObject;\n        if (obj === undefined) {\n            return panic(\"Object ended but not started\");\n        }\n\n        this.popContext();\n        this.commitValue(this.internObject(obj));\n    }\n\n    protected pushArrayContext(): void {\n        this.pushContext();\n        defined(this._ctx).currentArray = [];\n    }\n\n    protected finishArray(): void {\n        const arr = this.context.currentArray;\n        if (arr === undefined) {\n            return panic(\"Array ended but not started\");\n        }\n\n        this.popContext();\n        this.commitValue(this.internArray(arr));\n    }\n\n    protected popContext(): void {\n        assert(this._ctx !== undefined, \"Popping context when there isn't one\");\n        this._ctx = this._contextStack.pop();\n    }\n\n    public equals(other: CompressedJSON<unknown>): boolean {\n        return this === other;\n    }\n\n    public hashCode(): number {\n        let hashAccumulator = hashCodeInit;\n        for (const s of this._strings) {\n            hashAccumulator = addHashCode(hashAccumulator, hashString(s));\n        }\n\n        for (const s of Object.getOwnPropertyNames(this._stringIndexes).sort()) {\n            hashAccumulator = addHashCode(hashAccumulator, hashString(s));\n            hashAccumulator = addHashCode(hashAccumulator, this._stringIndexes[s]);\n        }\n\n        for (const o of this._objects) {\n            for (const v of o) {\n                hashAccumulator = addHashCode(hashAccumulator, v);\n            }\n        }\n\n        for (const o of this._arrays) {\n            for (const v of o) {\n                hashAccumulator = addHashCode(hashAccumulator, v);\n            }\n        }\n\n        return hashAccumulator;\n    }\n}\n\nexport class CompressedJSONFromString extends CompressedJSON<string> {\n    public async parse(input: string): Promise<Value> {\n        return this.parseSync(input);\n    }\n\n    public parseSync(input: string): Value {\n        const json = JSON.parse(input);\n        this.process(json);\n        return this.finish();\n    }\n\n    private process(json: unknown): void {\n        if (json === null) {\n            this.commitNull();\n        } else if (typeof json === \"boolean\") {\n            this.commitBoolean(json);\n        } else if (typeof json === \"string\") {\n            this.commitString(json);\n        } else if (typeof json === \"number\") {\n            const isDouble =\n                json !== Math.floor(json) || json < Number.MIN_SAFE_INTEGER || json > Number.MAX_SAFE_INTEGER;\n            this.commitNumber(isDouble);\n        } else if (Array.isArray(json)) {\n            this.pushArrayContext();\n            for (const v of json) {\n                this.process(v);\n            }\n\n            this.finishArray();\n        } else if (typeof json === \"object\") {\n            this.pushObjectContext();\n            for (const key of Object.getOwnPropertyNames(json)) {\n                this.setPropertyKey(key);\n                this.process(json[key as keyof typeof json]);\n            }\n\n            this.finishObject();\n        } else {\n            return panic(\"Invalid JSON object\");\n        }\n    }\n}\n","import { mapMap, mapMerge, mapUpdateInto, setUnionInto } from \"collection-utils\";\n\nimport { StringTypes, stringTypesTypeAttributeKind } from \"./attributes/StringTypes\";\nimport {\n    type TypeAttributes,\n    combineTypeAttributes,\n    emptyTypeAttributes,\n    increaseTypeAttributesDistance,\n    makeTypeAttributesInferred\n} from \"./attributes/TypeAttributes\";\nimport { assert, assertNever, defined, panic } from \"./support/Support\";\nimport {\n    type PrimitiveStringTypeKind,\n    type PrimitiveTypeKind,\n    type Type,\n    type TypeKind,\n    UnionType,\n    isPrimitiveTypeKind\n} from \"./Type\";\nimport { type TypeBuilder } from \"./TypeBuilder\";\nimport { type TypeRef } from \"./TypeGraph\";\nimport { matchTypeExhaustive } from \"./TypeUtils\";\n\n// FIXME: This interface is badly designed.  All the properties\n// should use immutable types, and getMemberKinds should be\n// implementable using the interface, not be part of it.  That\n// means we'll have to expose primitive types, too.\n//\n// Well, maybe getMemberKinds() is fine as it is.\nexport interface UnionTypeProvider<TArrayData, TObjectData> {\n    readonly arrayData: TArrayData;\n    readonly enumCases: ReadonlySet<string>;\n\n    getMemberKinds: () => TypeAttributeMap<TypeKind>;\n\n    readonly lostTypeAttributes: boolean;\n\n    readonly objectData: TObjectData;\n}\n\nexport type TypeAttributeMap<T extends TypeKind> = Map<T, TypeAttributes>;\n\ntype TypeAttributeMapBuilder<T extends TypeKind> = Map<T, TypeAttributes[]>;\n\nfunction addAttributes(\n    accumulatorAttributes: TypeAttributes | undefined,\n    newAttributes: TypeAttributes\n): TypeAttributes {\n    if (accumulatorAttributes === undefined) return newAttributes;\n    return combineTypeAttributes(\"union\", accumulatorAttributes, newAttributes);\n}\n\nfunction setAttributes<T extends TypeKind>(\n    attributeMap: TypeAttributeMap<T>,\n    kind: T,\n    newAttributes: TypeAttributes\n): void {\n    attributeMap.set(kind, addAttributes(attributeMap.get(kind), newAttributes));\n}\n\nfunction addAttributesToBuilder<T extends TypeKind>(\n    builder: TypeAttributeMapBuilder<T>,\n    kind: T,\n    newAttributes: TypeAttributes\n): void {\n    let arr = builder.get(kind);\n    if (arr === undefined) {\n        arr = [];\n        builder.set(kind, arr);\n    }\n\n    arr.push(newAttributes);\n}\n\nfunction buildTypeAttributeMap<T extends TypeKind>(builder: TypeAttributeMapBuilder<T>): TypeAttributeMap<T> {\n    return mapMap(builder, arr => combineTypeAttributes(\"union\", arr));\n}\n\nfunction moveAttributes<T extends TypeKind>(map: TypeAttributeMap<T>, fromKind: T, toKind: T): void {\n    const fromAttributes = defined(map.get(fromKind));\n    map.delete(fromKind);\n    setAttributes(map, toKind, fromAttributes);\n}\n\nexport class UnionAccumulator<TArray, TObject> implements UnionTypeProvider<TArray[], TObject[]> {\n    private readonly _nonStringTypeAttributes: TypeAttributeMapBuilder<TypeKind> = new Map();\n\n    private readonly _stringTypeAttributes: TypeAttributeMapBuilder<PrimitiveStringTypeKind> = new Map();\n\n    public readonly arrayData: TArray[] = [];\n\n    public readonly objectData: TObject[] = [];\n\n    private readonly _enumCases: Set<string> = new Set();\n\n    private _lostTypeAttributes = false;\n\n    public constructor(private readonly _conflateNumbers: boolean) {}\n\n    private have(kind: TypeKind): boolean {\n        return (\n            this._nonStringTypeAttributes.has(kind) || this._stringTypeAttributes.has(kind as PrimitiveStringTypeKind)\n        );\n    }\n\n    public addNone(_attributes: TypeAttributes): void {\n        // FIXME: Add them to all members?  Or add them to the union, which means we'd have\n        // to change getMemberKinds() to also return the attributes for the union itself,\n        // or add a new method that does that.\n        this._lostTypeAttributes = true;\n    }\n\n    public addAny(attributes: TypeAttributes): void {\n        addAttributesToBuilder(this._nonStringTypeAttributes, \"any\", attributes);\n        this._lostTypeAttributes = true;\n    }\n\n    public addPrimitive(kind: PrimitiveTypeKind, attributes: TypeAttributes): void {\n        assert(kind !== \"any\", \"any must be added with addAny\");\n        addAttributesToBuilder(this._nonStringTypeAttributes, kind, attributes);\n    }\n\n    protected addFullStringType(attributes: TypeAttributes, stringTypes: StringTypes | undefined): void {\n        let stringTypesAttributes: TypeAttributes | undefined = undefined;\n        if (stringTypes === undefined) {\n            stringTypes = stringTypesTypeAttributeKind.tryGetInAttributes(attributes);\n        } else {\n            stringTypesAttributes = stringTypesTypeAttributeKind.makeAttributes(stringTypes);\n        }\n\n        if (stringTypes === undefined) {\n            stringTypes = StringTypes.unrestricted;\n            stringTypesAttributes = stringTypesTypeAttributeKind.makeAttributes(stringTypes);\n        }\n\n        const maybeEnumAttributes = this._nonStringTypeAttributes.get(\"enum\");\n        if (stringTypes.isRestricted) {\n            assert(\n                maybeEnumAttributes === undefined,\n                \"We can't add both an enum as well as a restricted string type to a union builder\"\n            );\n        }\n\n        addAttributesToBuilder(this._stringTypeAttributes, \"string\", attributes);\n        if (stringTypesAttributes !== undefined) {\n            addAttributesToBuilder(this._stringTypeAttributes, \"string\", stringTypesAttributes);\n        }\n    }\n\n    public addStringType(kind: PrimitiveStringTypeKind, attributes: TypeAttributes, stringTypes?: StringTypes): void {\n        if (kind === \"string\") {\n            this.addFullStringType(attributes, stringTypes);\n            return;\n        }\n\n        addAttributesToBuilder(this._stringTypeAttributes, kind, attributes);\n        if (stringTypes !== undefined) {\n            addAttributesToBuilder(\n                this._stringTypeAttributes,\n                kind,\n                stringTypesTypeAttributeKind.makeAttributes(stringTypes)\n            );\n        }\n    }\n\n    public addArray(t: TArray, attributes: TypeAttributes): void {\n        this.arrayData.push(t);\n        addAttributesToBuilder(this._nonStringTypeAttributes, \"array\", attributes);\n    }\n\n    public addObject(t: TObject, attributes: TypeAttributes): void {\n        this.objectData.push(t);\n        addAttributesToBuilder(this._nonStringTypeAttributes, \"object\", attributes);\n    }\n\n    public addEnum(cases: ReadonlySet<string>, attributes: TypeAttributes): void {\n        const maybeStringAttributes = this._stringTypeAttributes.get(\"string\");\n        if (maybeStringAttributes !== undefined) {\n            addAttributesToBuilder(this._stringTypeAttributes, \"string\", attributes);\n            return;\n        }\n\n        addAttributesToBuilder(this._nonStringTypeAttributes, \"enum\", attributes);\n        setUnionInto(this._enumCases, cases);\n    }\n\n    public addStringCases(cases: string[], attributes: TypeAttributes): void {\n        this.addFullStringType(attributes, StringTypes.fromCases(cases));\n    }\n\n    public addStringCase(s: string, count: number, attributes: TypeAttributes): void {\n        this.addFullStringType(attributes, StringTypes.fromCase(s, count));\n    }\n\n    public get enumCases(): ReadonlySet<string> {\n        return this._enumCases;\n    }\n\n    public getMemberKinds(): TypeAttributeMap<TypeKind> {\n        assert(!(this.have(\"enum\") && this.have(\"string\")), \"We can't have both strings and enums in the same union\");\n\n        let merged = mapMerge(\n            buildTypeAttributeMap(this._nonStringTypeAttributes),\n            buildTypeAttributeMap(this._stringTypeAttributes)\n        );\n\n        if (merged.size === 0) {\n            return new Map([[\"none\", emptyTypeAttributes] as [TypeKind, TypeAttributes]]);\n        }\n\n        if (this._nonStringTypeAttributes.has(\"any\")) {\n            assert(this._lostTypeAttributes, \"This had to be set when we added 'any'\");\n\n            const allAttributes = combineTypeAttributes(\"union\", Array.from(merged.values()));\n            return new Map([[\"any\", allAttributes] as [TypeKind, TypeAttributes]]);\n        }\n\n        if (this._conflateNumbers && this.have(\"integer\") && this.have(\"double\")) {\n            moveAttributes(merged, \"integer\", \"double\");\n        }\n\n        if (this.have(\"map\")) {\n            moveAttributes(merged, \"map\", \"class\");\n        }\n\n        return merged;\n    }\n\n    public get lostTypeAttributes(): boolean {\n        return this._lostTypeAttributes;\n    }\n}\n\nclass FauxUnion {\n    public getAttributes(): TypeAttributes {\n        return emptyTypeAttributes;\n    }\n}\n\ntype UnionOrFaux = UnionType | FauxUnion;\n\nfunction attributesForTypes(types: Iterable<Type>): [ReadonlyMap<Type, TypeAttributes>, TypeAttributes] {\n    // These two maps are the reverse of each other.  unionsForType is all the unions\n    // that are ancestors of that type, when going from one of the given types, only\n    // following unions.\n    const unionsForType = new Map<Type, Set<UnionOrFaux>>();\n    const typesForUnion = new Map<UnionOrFaux, Set<Type>>();\n\n    // All the unions we've seen, starting from types, stopping when we hit non-unions.\n    const unions = new Set<UnionType>();\n    // All the unions that are equivalent to the single root type.  If more than one type\n    // is given, this will be empty.\n    let unionsEquivalentToRoot: Set<UnionType> = new Set();\n    function traverse(t: Type, path: UnionOrFaux[], isEquivalentToRoot: boolean): void {\n        if (t instanceof UnionType) {\n            unions.add(t);\n            if (isEquivalentToRoot) {\n                unionsEquivalentToRoot = unionsEquivalentToRoot.add(t);\n            }\n\n            isEquivalentToRoot = isEquivalentToRoot && t.members.size === 1;\n            path.push(t);\n            for (const m of t.members) {\n                traverse(m, path, isEquivalentToRoot);\n            }\n\n            path.pop();\n        } else {\n            mapUpdateInto(unionsForType, t, s => (s === undefined ? new Set(path) : setUnionInto(s, path)));\n            for (const u of path) {\n                mapUpdateInto(typesForUnion, u, s => (s === undefined ? new Set([t]) : s.add(t)));\n            }\n        }\n    }\n\n    const rootPath = [new FauxUnion()];\n    const typesArray = Array.from(types);\n    for (const t of typesArray) {\n        traverse(t, rootPath, typesArray.length === 1);\n    }\n\n    const resultAttributes = mapMap(unionsForType, (unionForType, t) => {\n        const singleAncestors = Array.from(unionForType).filter(u => defined(typesForUnion.get(u)).size === 1);\n        assert(\n            singleAncestors.every(u => defined(typesForUnion.get(u)).has(t)),\n            \"We messed up bookkeeping\"\n        );\n        const inheritedAttributes = singleAncestors.map(u => u.getAttributes());\n        return combineTypeAttributes(\"union\", [t.getAttributes()].concat(inheritedAttributes));\n    });\n    const unionAttributes = Array.from(unions).map(u => {\n        const t = typesForUnion.get(u);\n        if (t !== undefined && t.size === 1) {\n            return emptyTypeAttributes;\n        }\n\n        const attributes = u.getAttributes();\n        if (unionsEquivalentToRoot.has(u)) {\n            return attributes;\n        }\n\n        return makeTypeAttributesInferred(attributes);\n    });\n    return [resultAttributes, combineTypeAttributes(\"union\", unionAttributes)];\n}\n\n// FIXME: Move this to UnifyClasses.ts?\nexport class TypeRefUnionAccumulator extends UnionAccumulator<TypeRef, TypeRef> {\n    // There is a method analogous to this in the IntersectionAccumulator.  It might\n    // make sense to find a common interface.\n    private addType(t: Type, attributes: TypeAttributes): void {\n        matchTypeExhaustive(\n            t,\n            _noneType => this.addNone(attributes),\n            _anyType => this.addAny(attributes),\n            _nullType => this.addPrimitive(\"null\", attributes),\n            _boolType => this.addPrimitive(\"bool\", attributes),\n            _integerType => this.addPrimitive(\"integer\", attributes),\n            _doubleType => this.addPrimitive(\"double\", attributes),\n            _stringType => this.addStringType(\"string\", attributes),\n            arrayType => this.addArray(arrayType.items.typeRef, attributes),\n            classType => this.addObject(classType.typeRef, attributes),\n            mapType => this.addObject(mapType.typeRef, attributes),\n            objectType => this.addObject(objectType.typeRef, attributes),\n            // FIXME: We're not carrying counts, so this is not correct if we do enum\n            // inference.  JSON Schema input uses this case, however, without enum\n            // inference, which is fine, but still a bit ugly.\n            enumType => this.addEnum(enumType.cases, attributes),\n            _unionType => {\n                return panic(\"The unions should have been eliminated in attributesForTypesInUnion\");\n            },\n            transformedStringType =>\n                this.addStringType(transformedStringType.kind as PrimitiveStringTypeKind, attributes)\n        );\n    }\n\n    public addTypes(types: Iterable<Type>): TypeAttributes {\n        const [attributesMap, unionAttributes] = attributesForTypes(types);\n        for (const [t, attributes] of attributesMap) {\n            this.addType(t, attributes);\n        }\n\n        return unionAttributes;\n    }\n}\n\nexport abstract class UnionBuilder<TBuilder extends TypeBuilder, TArrayData, TObjectData> {\n    public constructor(protected readonly typeBuilder: TBuilder) {}\n\n    protected abstract makeObject(\n        objects: TObjectData,\n        typeAttributes: TypeAttributes,\n        forwardingRef: TypeRef | undefined\n    ): TypeRef;\n    protected abstract makeArray(\n        arrays: TArrayData,\n        typeAttributes: TypeAttributes,\n        forwardingRef: TypeRef | undefined\n    ): TypeRef;\n\n    private makeTypeOfKind(\n        typeProvider: UnionTypeProvider<TArrayData, TObjectData>,\n        kind: TypeKind,\n        typeAttributes: TypeAttributes,\n        forwardingRef: TypeRef | undefined\n    ): TypeRef {\n        switch (kind) {\n            case \"string\":\n                return this.typeBuilder.getStringType(typeAttributes, undefined, forwardingRef);\n            case \"enum\":\n                return this.typeBuilder.getEnumType(typeAttributes, typeProvider.enumCases, forwardingRef);\n            case \"object\":\n                return this.makeObject(typeProvider.objectData, typeAttributes, forwardingRef);\n            case \"array\":\n                return this.makeArray(typeProvider.arrayData, typeAttributes, forwardingRef);\n            default:\n                if (isPrimitiveTypeKind(kind)) {\n                    return this.typeBuilder.getPrimitiveType(kind, typeAttributes, forwardingRef);\n                }\n\n                if (kind === \"union\" || kind === \"class\" || kind === \"map\" || kind === \"intersection\") {\n                    return panic(`getMemberKinds() shouldn't return ${kind}`);\n                }\n\n                return assertNever(kind);\n        }\n    }\n\n    public buildUnion(\n        typeProvider: UnionTypeProvider<TArrayData, TObjectData>,\n        unique: boolean,\n        typeAttributes: TypeAttributes,\n        forwardingRef?: TypeRef\n    ): TypeRef {\n        const kinds = typeProvider.getMemberKinds();\n\n        if (typeProvider.lostTypeAttributes) {\n            this.typeBuilder.setLostTypeAttributes();\n        }\n\n        // FIXME: We don't reconstitute type attributes here, so it's possible that\n        // we get type refs for the wrong graphs if the transformation making rewrite\n        // makes unions that have to be unified here.  That's a bug anyway, at least\n        // right now, it's just a very bad way of surfacing that error.\n        if (kinds.size === 1) {\n            const [[kind, memberAttributes]] = Array.from(kinds);\n            const allAttributes = combineTypeAttributes(\n                \"union\",\n                typeAttributes,\n                increaseTypeAttributesDistance(memberAttributes)\n            );\n            const t = this.makeTypeOfKind(typeProvider, kind, allAttributes, forwardingRef);\n            return t;\n        }\n\n        const union = unique\n            ? this.typeBuilder.getUniqueUnionType(typeAttributes, undefined, forwardingRef)\n            : undefined;\n\n        const types: TypeRef[] = [];\n        for (const [kind, memberAttributes] of kinds) {\n            types.push(this.makeTypeOfKind(typeProvider, kind, memberAttributes, undefined));\n        }\n\n        const typesSet = new Set(types);\n        if (union !== undefined) {\n            this.typeBuilder.setSetOperationMembers(union, typesSet);\n            return union;\n        } else {\n            return this.typeBuilder.getUnionType(typeAttributes, typesSet, forwardingRef);\n        }\n    }\n}\n","import { StringTypes, inferTransformedStringTypeKindForString } from \"../attributes/StringTypes\";\nimport { type TypeAttributes, emptyTypeAttributes } from \"../attributes/TypeAttributes\";\nimport { messageError } from \"../Messages\";\nimport { assert, assertNever, defined, panic } from \"../support/Support\";\nimport {\n    ArrayType,\n    type ClassProperty,\n    ClassType,\n    MapType,\n    UnionType,\n    transformedStringTypeTargetTypeKindsMap\n} from \"../Type\";\nimport { type TypeBuilder } from \"../TypeBuilder\";\nimport { type TypeRef, derefTypeRef } from \"../TypeGraph\";\nimport { nullableFromUnion } from \"../TypeUtils\";\nimport { UnionAccumulator, UnionBuilder } from \"../UnionBuilder\";\n\nimport { type CompressedJSON, Tag, type Value, valueTag } from \"./CompressedJSON\";\n\n// This should be the recursive type\n//   Value[] | NestedValueArray[]\n// but TypeScript doesn't support that.\n// FIXME: reactor this\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type NestedValueArray = any;\n\nfunction forEachArrayInNestedValueArray(va: NestedValueArray, f: (va: Value[]) => void): void {\n    if (va.length === 0) {\n        return;\n    }\n\n    if (Array.isArray(va[0])) {\n        for (const x of va) {\n            forEachArrayInNestedValueArray(x, f);\n        }\n    } else {\n        f(va);\n    }\n}\n\nfunction forEachValueInNestedValueArray(va: NestedValueArray, f: (v: Value) => void): void {\n    forEachArrayInNestedValueArray(va, a => {\n        for (const x of a) {\n            f(x);\n        }\n    });\n}\n\nclass InferenceUnionBuilder extends UnionBuilder<TypeBuilder, NestedValueArray, NestedValueArray> {\n    public constructor(\n        typeBuilder: TypeBuilder,\n        private readonly _typeInference: TypeInference,\n        private readonly _fixed: boolean\n    ) {\n        super(typeBuilder);\n    }\n\n    protected makeObject(\n        objects: NestedValueArray,\n        typeAttributes: TypeAttributes,\n        forwardingRef: TypeRef | undefined\n    ): TypeRef {\n        return this._typeInference.inferClassType(typeAttributes, objects, this._fixed, forwardingRef);\n    }\n\n    protected makeArray(\n        arrays: NestedValueArray,\n        typeAttributes: TypeAttributes,\n        forwardingRef: TypeRef | undefined\n    ): TypeRef {\n        return this.typeBuilder.getArrayType(\n            typeAttributes,\n            this._typeInference.inferType(emptyTypeAttributes, arrays, this._fixed, forwardingRef)\n        );\n    }\n}\n\nfunction canBeEnumCase(_s: string): boolean {\n    return true;\n}\n\nexport type Accumulator = UnionAccumulator<NestedValueArray, NestedValueArray>;\n\nexport class TypeInference {\n    private _refIntersections: Array<[TypeRef, string[]]> | undefined;\n\n    public constructor(\n        private readonly _cjson: CompressedJSON<unknown>,\n        private readonly _typeBuilder: TypeBuilder,\n        private readonly _inferMaps: boolean,\n        private readonly _inferEnums: boolean\n    ) {}\n\n    private addValuesToAccumulator(valueArray: NestedValueArray, accumulator: Accumulator): void {\n        forEachValueInNestedValueArray(valueArray, value => {\n            const t = valueTag(value);\n            switch (t) {\n                case Tag.Null:\n                    accumulator.addPrimitive(\"null\", emptyTypeAttributes);\n                    break;\n                case Tag.False:\n                case Tag.True:\n                    accumulator.addPrimitive(\"bool\", emptyTypeAttributes);\n                    break;\n                case Tag.Integer:\n                    accumulator.addPrimitive(\"integer\", emptyTypeAttributes);\n                    break;\n                case Tag.Double:\n                    accumulator.addPrimitive(\"double\", emptyTypeAttributes);\n                    break;\n                case Tag.InternedString:\n                    if (this._inferEnums) {\n                        const s = this._cjson.getStringForValue(value);\n                        if (canBeEnumCase(s)) {\n                            accumulator.addStringCase(s, 1, emptyTypeAttributes);\n                        } else {\n                            accumulator.addStringType(\"string\", emptyTypeAttributes);\n                        }\n                    } else {\n                        accumulator.addStringType(\"string\", emptyTypeAttributes);\n                    }\n\n                    break;\n                case Tag.UninternedString:\n                    accumulator.addStringType(\"string\", emptyTypeAttributes);\n                    break;\n                case Tag.Object:\n                    accumulator.addObject(this._cjson.getObjectForValue(value), emptyTypeAttributes);\n                    break;\n                case Tag.Array:\n                    accumulator.addArray(this._cjson.getArrayForValue(value), emptyTypeAttributes);\n                    break;\n                case Tag.StringFormat: {\n                    const kind = this._cjson.getStringFormatTypeKind(value);\n                    accumulator.addStringType(\n                        \"string\",\n                        emptyTypeAttributes,\n                        new StringTypes(new Map(), new Set([kind]))\n                    );\n                    break;\n                }\n\n                case Tag.TransformedString: {\n                    const s = this._cjson.getStringForValue(value);\n                    const kind = inferTransformedStringTypeKindForString(s, this._cjson.dateTimeRecognizer);\n                    if (kind === undefined) {\n                        return panic(\"TransformedString does not have a kind\");\n                    }\n\n                    const producer = defined(transformedStringTypeTargetTypeKindsMap.get(kind)).attributesProducer;\n                    if (producer === undefined) {\n                        return panic(\"TransformedString does not have attribute producer\");\n                    }\n\n                    accumulator.addStringType(\"string\", producer(s), new StringTypes(new Map(), new Set([kind])));\n                    break;\n                }\n\n                default:\n                    return assertNever(t);\n            }\n        });\n    }\n\n    public inferType(\n        typeAttributes: TypeAttributes,\n        valueArray: NestedValueArray,\n        fixed: boolean,\n        forwardingRef?: TypeRef\n    ): TypeRef {\n        const accumulator = this.accumulatorForArray(valueArray);\n        return this.makeTypeFromAccumulator(accumulator, typeAttributes, fixed, forwardingRef);\n    }\n\n    private resolveRef(ref: string, topLevel: TypeRef): TypeRef {\n        if (!ref.startsWith(\"#/\")) {\n            return messageError(\"InferenceJSONReferenceNotRooted\", { reference: ref });\n        }\n\n        const parts = ref.split(\"/\").slice(1);\n        const graph = this._typeBuilder.typeGraph;\n        let tref = topLevel;\n        for (const part of parts) {\n            let t = derefTypeRef(tref, graph);\n            if (t instanceof UnionType) {\n                const nullable = nullableFromUnion(t);\n                if (nullable === null) {\n                    // FIXME: handle unions\n                    return messageError(\"InferenceJSONReferenceToUnion\", { reference: ref });\n                }\n\n                t = nullable;\n            }\n\n            if (t instanceof ClassType) {\n                const cp = t.getProperties().get(part);\n                if (cp === undefined) {\n                    return messageError(\"InferenceJSONReferenceWrongProperty\", { reference: ref });\n                }\n\n                tref = cp.typeRef;\n            } else if (t instanceof MapType) {\n                tref = t.values.typeRef;\n            } else if (t instanceof ArrayType) {\n                if (/^[0-9]+$/.exec(part) === null) {\n                    return messageError(\"InferenceJSONReferenceInvalidArrayIndex\", { reference: ref });\n                }\n\n                tref = t.items.typeRef;\n            } else {\n                return messageError(\"InferenceJSONReferenceWrongProperty\", { reference: ref });\n            }\n        }\n\n        return tref;\n    }\n\n    public inferTopLevelType(typeAttributes: TypeAttributes, valueArray: NestedValueArray, fixed: boolean): TypeRef {\n        assert(this._refIntersections === undefined, \"Didn't reset ref intersections - nested invocations?\");\n        if (this._cjson.handleRefs) {\n            this._refIntersections = [];\n        }\n\n        const topLevel = this.inferType(typeAttributes, valueArray, fixed);\n        if (this._cjson.handleRefs) {\n            for (const [tref, refs] of defined(this._refIntersections)) {\n                const resolved = refs.map(r => this.resolveRef(r, topLevel));\n                this._typeBuilder.setSetOperationMembers(tref, new Set(resolved));\n            }\n\n            this._refIntersections = undefined;\n        }\n\n        return topLevel;\n    }\n\n    private accumulatorForArray(valueArray: NestedValueArray): Accumulator {\n        const accumulator = new UnionAccumulator<NestedValueArray, NestedValueArray>(true);\n        this.addValuesToAccumulator(valueArray, accumulator);\n        return accumulator;\n    }\n\n    private makeTypeFromAccumulator(\n        accumulator: Accumulator,\n        typeAttributes: TypeAttributes,\n        fixed: boolean,\n        forwardingRef?: TypeRef\n    ): TypeRef {\n        const unionBuilder = new InferenceUnionBuilder(this._typeBuilder, this, fixed);\n        return unionBuilder.buildUnion(accumulator, false, typeAttributes, forwardingRef);\n    }\n\n    public inferClassType(\n        typeAttributes: TypeAttributes,\n        objects: NestedValueArray,\n        fixed: boolean,\n        forwardingRef?: TypeRef\n    ): TypeRef {\n        const propertyNames: string[] = [];\n        const propertyValues: { [name: string]: Value[] } = {};\n\n        forEachArrayInNestedValueArray(objects, arr => {\n            for (let i = 0; i < arr.length; i += 2) {\n                const key = this._cjson.getStringForValue(arr[i]);\n                const value = arr[i + 1];\n                if (!Object.prototype.hasOwnProperty.call(propertyValues, key)) {\n                    propertyNames.push(key);\n                    propertyValues[key] = [];\n                }\n\n                propertyValues[key].push(value);\n            }\n        });\n\n        if (this._cjson.handleRefs && propertyNames.length === 1 && propertyNames[0] === \"$ref\") {\n            const values = propertyValues.$ref;\n            if (values.every(v => valueTag(v) === Tag.InternedString)) {\n                const allRefs = values.map(v => this._cjson.getStringForValue(v));\n                // FIXME: Add is-ref attribute\n                const tref = this._typeBuilder.getUniqueIntersectionType(typeAttributes, undefined);\n                defined(this._refIntersections).push([tref, allRefs]);\n                return tref;\n            }\n        }\n\n        if (this._inferMaps && propertyNames.length > 500) {\n            const accumulator = new UnionAccumulator<NestedValueArray, NestedValueArray>(true);\n            for (const key of propertyNames) {\n                this.addValuesToAccumulator(propertyValues[key], accumulator);\n            }\n\n            const values = this.makeTypeFromAccumulator(accumulator, emptyTypeAttributes, fixed);\n            return this._typeBuilder.getMapType(typeAttributes, values, forwardingRef);\n        }\n\n        const properties = new Map<string, ClassProperty>();\n        for (const key of propertyNames) {\n            const values = propertyValues[key];\n            const t = this.inferType(emptyTypeAttributes, values, false);\n            const isOptional = values.length < objects.length;\n            properties.set(key, this._typeBuilder.makeClassProperty(t, isOptional));\n        }\n\n        if (fixed) {\n            return this._typeBuilder.getUniqueClassType(typeAttributes, true, properties, forwardingRef);\n        } else {\n            return this._typeBuilder.getClassType(typeAttributes, properties, forwardingRef);\n        }\n    }\n}\n","import { arrayMapSync, iterableFind, iterableFirst, iterableSome, setFilterMap, withDefault } from \"collection-utils\";\n\nimport { descriptionTypeAttributeKind } from \"../attributes/Description\";\nimport { makeNamesTypeAttributes } from \"../attributes/TypeNames\";\n// eslint-disable-next-line import/no-cycle\nimport { languageNamed } from \"../language/All\";\nimport { messageError } from \"../Messages\";\nimport { type RunContext } from \"../Run\";\nimport { defined, errorMessage, panic } from \"../support/Support\";\nimport { type TargetLanguage } from \"../TargetLanguage\";\nimport { type TypeBuilder } from \"../TypeBuilder\";\n\nimport { type CompressedJSON, CompressedJSONFromString, type Value } from \"./CompressedJSON\";\nimport { TypeInference } from \"./Inference\";\n\nexport interface Input<T> {\n    addSource: (source: T) => Promise<void>;\n    addSourceSync: (source: T) => void;\n    addTypes: (\n        ctx: RunContext,\n        typeBuilder: TypeBuilder,\n        inferMaps: boolean,\n        inferEnums: boolean,\n        fixedTopLevels: boolean\n    ) => Promise<void>;\n\n    addTypesSync: (\n        ctx: RunContext,\n        typeBuilder: TypeBuilder,\n        inferMaps: boolean,\n        inferEnums: boolean,\n        fixedTopLevels: boolean\n    ) => void;\n    readonly kind: string;\n\n    readonly needIR: boolean;\n\n    readonly needSchemaProcessing: boolean;\n    singleStringSchemaSource: () => string | undefined;\n}\n\ninterface JSONTopLevel {\n    description: string | undefined;\n    samples: Value[];\n}\n\nexport interface JSONSourceData<T> {\n    description?: string;\n    name: string;\n    samples: T[];\n}\n\nfunction messageParseError(name: string, description: string | undefined, e: unknown): never {\n    return messageError(\"MiscJSONParseError\", {\n        description: withDefault(description, \"input\"),\n        address: name,\n        message: errorMessage(e)\n    });\n}\n\nexport class JSONInput<T> implements Input<JSONSourceData<T>> {\n    public readonly kind: string = \"json\";\n\n    public readonly needIR: boolean = true;\n\n    public readonly needSchemaProcessing: boolean = false;\n\n    private readonly _topLevels: Map<string, JSONTopLevel> = new Map();\n\n    public constructor(private readonly _compressedJSON: CompressedJSON<T>) {}\n\n    private addSample(topLevelName: string, sample: Value): void {\n        let topLevel = this._topLevels.get(topLevelName);\n        if (topLevel === undefined) {\n            topLevel = { samples: [], description: undefined };\n            this._topLevels.set(topLevelName, topLevel);\n        }\n\n        topLevel.samples.push(sample);\n    }\n\n    private setDescription(topLevelName: string, description: string): void {\n        let topLevel = this._topLevels.get(topLevelName);\n        if (topLevel === undefined) {\n            return panic(\"Trying to set description for a top-level that doesn't exist\");\n        }\n\n        topLevel.description = description;\n    }\n\n    private addSamples(name: string, values: Value[], description: string | undefined): void {\n        for (const value of values) {\n            this.addSample(name, value);\n            if (description !== undefined) {\n                this.setDescription(name, description);\n            }\n        }\n    }\n\n    public async addSource(source: JSONSourceData<T>): Promise<void> {\n        const { name, samples, description } = source;\n        try {\n            const values = await arrayMapSync(samples, async s => await this._compressedJSON.parse(s));\n            this.addSamples(name, values, description);\n        } catch (e) {\n            return messageParseError(name, description, e);\n        }\n    }\n\n    public addSourceSync(source: JSONSourceData<T>): void {\n        const { name, samples, description } = source;\n        try {\n            const values = samples.map(s => this._compressedJSON.parseSync(s));\n            this.addSamples(name, values, description);\n        } catch (e) {\n            return messageParseError(name, description, e);\n        }\n    }\n\n    public singleStringSchemaSource(): undefined {\n        return undefined;\n    }\n\n    public async addTypes(\n        ctx: RunContext,\n        typeBuilder: TypeBuilder,\n        inferMaps: boolean,\n        inferEnums: boolean,\n        fixedTopLevels: boolean\n    ): Promise<void> {\n        this.addTypesSync(ctx, typeBuilder, inferMaps, inferEnums, fixedTopLevels);\n    }\n\n    public addTypesSync(\n        _ctx: RunContext,\n        typeBuilder: TypeBuilder,\n        inferMaps: boolean,\n        inferEnums: boolean,\n        fixedTopLevels: boolean\n    ): void {\n        const inference = new TypeInference(this._compressedJSON, typeBuilder, inferMaps, inferEnums);\n\n        for (const [name, { samples, description }] of this._topLevels) {\n            const tref = inference.inferTopLevelType(makeNamesTypeAttributes(name, false), samples, fixedTopLevels);\n            typeBuilder.addTopLevel(name, tref);\n            if (description !== undefined) {\n                const attributes = descriptionTypeAttributeKind.makeAttributes(new Set([description]));\n                typeBuilder.addAttributes(tref, attributes);\n            }\n        }\n    }\n}\n\nexport function jsonInputForTargetLanguage(\n    targetLanguage: string | TargetLanguage,\n    languages?: TargetLanguage[],\n    handleJSONRefs = false\n): JSONInput<string> {\n    if (typeof targetLanguage === \"string\") {\n        targetLanguage = defined(languageNamed(targetLanguage, languages));\n    }\n\n    const compressedJSON = new CompressedJSONFromString(targetLanguage.dateTimeRecognizer, handleJSONRefs);\n    return new JSONInput(compressedJSON);\n}\n\nexport class InputData {\n    // FIXME: Make into a Map, indexed by kind.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private _inputs: Set<Input<any>> = new Set();\n\n    public addInput<T>(input: Input<T>): void {\n        this._inputs = this._inputs.add(input);\n    }\n\n    private getOrAddInput<T>(kind: string, makeInput: () => Input<T>): Input<T> {\n        let input: Input<T> | undefined = iterableFind(this._inputs, i => i.kind === kind);\n        if (input === undefined) {\n            input = makeInput();\n            this.addInput(input);\n        }\n\n        return input;\n    }\n\n    public async addSource<T>(kind: string, source: T, makeInput: () => Input<T>): Promise<void> {\n        const input = this.getOrAddInput(kind, makeInput);\n        await input.addSource(source);\n    }\n\n    public addSourceSync<T>(kind: string, source: T, makeInput: () => Input<T>): void {\n        const input = this.getOrAddInput(kind, makeInput);\n        input.addSourceSync(source);\n    }\n\n    public async addTypes(\n        ctx: RunContext,\n        typeBuilder: TypeBuilder,\n        inferMaps: boolean,\n        inferEnums: boolean,\n        fixedTopLevels: boolean\n    ): Promise<void> {\n        for (const input of this._inputs) {\n            await input.addTypes(ctx, typeBuilder, inferMaps, inferEnums, fixedTopLevels);\n        }\n    }\n\n    public addTypesSync(\n        ctx: RunContext,\n        typeBuilder: TypeBuilder,\n        inferMaps: boolean,\n        inferEnums: boolean,\n        fixedTopLevels: boolean\n    ): void {\n        for (const input of this._inputs) {\n            input.addTypesSync(ctx, typeBuilder, inferMaps, inferEnums, fixedTopLevels);\n        }\n    }\n\n    public get needIR(): boolean {\n        return iterableSome(this._inputs, i => i.needIR);\n    }\n\n    public get needSchemaProcessing(): boolean {\n        return iterableSome(this._inputs, i => i.needSchemaProcessing);\n    }\n\n    public singleStringSchemaSource(): string | undefined {\n        const schemaStrings = setFilterMap(this._inputs, i => i.singleStringSchemaSource());\n        if (schemaStrings.size > 1) {\n            return panic(\"We have more than one input with a string schema source\");\n        }\n\n        return iterableFirst(schemaStrings);\n    }\n}\n","import { arraySortByInto, iterableFirst, iterableSome, mapMapEntries, setFilter, withDefault } from \"collection-utils\";\n\nimport { minMaxLengthForType, minMaxValueForType } from \"./attributes/Constraints\";\nimport { StringTypes } from \"./attributes/StringTypes\";\nimport { type TypeAttributes, combineTypeAttributes, emptyTypeAttributes } from \"./attributes/TypeAttributes\";\nimport { type GraphRewriteBuilder } from \"./GraphRewriting\";\nimport { type RunContext } from \"./Run\";\nimport { assert, defined, panic } from \"./support/Support\";\nimport { type TargetLanguage } from \"./TargetLanguage\";\nimport {\n    ArrayDecodingTransformer,\n    ChoiceTransformer,\n    DecodingChoiceTransformer,\n    DecodingTransformer,\n    MinMaxLengthCheckTransformer,\n    MinMaxValueTransformer,\n    ParseStringTransformer,\n    StringMatchTransformer,\n    StringProducerTransformer,\n    Transformation,\n    type Transformer,\n    UnionInstantiationTransformer,\n    transformationTypeAttributeKind\n} from \"./Transformers\";\nimport {\n    ArrayType,\n    EnumType,\n    type PrimitiveStringTypeKind,\n    type PrimitiveType,\n    type Type,\n    type TypeKind,\n    UnionType,\n    isNumberTypeKind,\n    isPrimitiveStringTypeKind,\n    targetTypeKindForTransformedStringTypeKind\n} from \"./Type\";\nimport { type TypeGraph, type TypeRef, typeRefIndex } from \"./TypeGraph\";\n\nfunction transformationAttributes(\n    graph: TypeGraph,\n    reconstitutedTargetType: TypeRef,\n    transformer: Transformer,\n    debugPrintTransformations: boolean\n): TypeAttributes {\n    const transformation = new Transformation(graph, reconstitutedTargetType, transformer);\n    if (debugPrintTransformations) {\n        console.log(`transformation for ${typeRefIndex(reconstitutedTargetType)}:`);\n        transformation.debugPrint();\n        console.log(\"reverse:\");\n        transformation.reverse.debugPrint();\n    }\n\n    return transformationTypeAttributeKind.makeAttributes(transformation);\n}\n\nfunction makeEnumTransformer(\n    graph: TypeGraph,\n    enumType: EnumType,\n    stringType: TypeRef,\n    continuation?: Transformer\n): Transformer {\n    const sortedCases = Array.from(enumType.cases).sort();\n    const caseTransformers = sortedCases.map(\n        c =>\n            new StringMatchTransformer(\n                graph,\n                stringType,\n                new StringProducerTransformer(graph, stringType, continuation, c),\n                c\n            )\n    );\n    return new ChoiceTransformer(graph, stringType, caseTransformers);\n}\n\nfunction replaceUnion(\n    union: UnionType,\n    builder: GraphRewriteBuilder<Type>,\n    forwardingRef: TypeRef,\n    transformedTypes: Set<Type>,\n    debugPrintTransformations: boolean\n): TypeRef {\n    const graph = builder.typeGraph;\n\n    assert(union.members.size > 0, \"We can't have empty unions\");\n\n    // Type attributes that we lost during reconstitution.\n    let additionalAttributes = emptyTypeAttributes;\n\n    function reconstituteMember(t: Type): TypeRef {\n        // Special handling for some transformed string type kinds: The type in\n        // the union must be the target type, so if one already exists, use that\n        // one, otherwise make a new one.\n        if (isPrimitiveStringTypeKind(t.kind)) {\n            const targetTypeKind = targetTypeKindForTransformedStringTypeKind(t.kind);\n            if (targetTypeKind !== undefined) {\n                const targetTypeMember = union.findMember(targetTypeKind);\n                additionalAttributes = combineTypeAttributes(\"union\", additionalAttributes, t.getAttributes());\n                if (targetTypeMember !== undefined) {\n                    return builder.reconstituteType(targetTypeMember);\n                }\n\n                return builder.getPrimitiveType(targetTypeKind);\n            }\n        }\n\n        return builder.reconstituteType(t);\n    }\n\n    const reconstitutedMembersByKind = mapMapEntries(union.members.entries(), m => [m.kind, reconstituteMember(m)]);\n    const reconstitutedMemberSet = new Set(reconstitutedMembersByKind.values());\n    const haveUnion = reconstitutedMemberSet.size > 1;\n\n    if (!haveUnion) {\n        builder.setLostTypeAttributes();\n    }\n\n    const reconstitutedTargetType = haveUnion\n        ? builder.getUnionType(union.getAttributes(), reconstitutedMemberSet)\n        : defined(iterableFirst(reconstitutedMemberSet));\n\n    function memberForKind(kind: TypeKind): number {\n        return defined(reconstitutedMembersByKind.get(kind));\n    }\n\n    function consumer(memberTypeRef: TypeRef): Transformer | undefined {\n        if (!haveUnion) return undefined;\n        return new UnionInstantiationTransformer(graph, memberTypeRef);\n    }\n\n    function transformerForKind(kind: TypeKind): DecodingTransformer | undefined {\n        const member = union.findMember(kind);\n        if (member === undefined) return undefined;\n        const memberTypeRef = memberForKind(kind);\n        return new DecodingTransformer(graph, memberTypeRef, consumer(memberTypeRef));\n    }\n\n    let maybeStringType: TypeRef | undefined = undefined;\n    function getStringType(): TypeRef {\n        if (maybeStringType === undefined) {\n            maybeStringType = builder.getStringType(emptyTypeAttributes, StringTypes.unrestricted);\n        }\n\n        return maybeStringType;\n    }\n\n    function transformerForStringType(t: Type): Transformer | undefined {\n        const memberRef = memberForKind(t.kind);\n        if (t.kind === \"string\") {\n            const minMax = minMaxLengthForType(t);\n            if (minMax === undefined) {\n                return consumer(memberRef);\n            }\n\n            const [min, max] = minMax;\n            return new MinMaxLengthCheckTransformer(graph, getStringType(), consumer(memberRef), min, max);\n        } else if (t instanceof EnumType && transformedTypes.has(t)) {\n            return makeEnumTransformer(graph, t, getStringType(), consumer(memberRef));\n        } else {\n            return new ParseStringTransformer(graph, getStringType(), consumer(memberRef));\n        }\n    }\n\n    const stringTypes = arraySortByInto(Array.from(union.stringTypeMembers), t => t.kind);\n    let transformerForString: Transformer | undefined;\n    if (stringTypes.length === 0) {\n        transformerForString = undefined;\n    } else if (stringTypes.length === 1) {\n        const t = stringTypes[0];\n        transformerForString = new DecodingTransformer(graph, getStringType(), transformerForStringType(t));\n    } else {\n        transformerForString = new DecodingTransformer(\n            graph,\n            getStringType(),\n            new ChoiceTransformer(\n                graph,\n                getStringType(),\n                stringTypes.map(t => defined(transformerForStringType(t)))\n            )\n        );\n    }\n\n    const transformerForClass = transformerForKind(\"class\");\n    const transformerForMap = transformerForKind(\"map\");\n    assert(\n        transformerForClass === undefined || transformerForMap === undefined,\n        \"Can't have both class and map in a transformed union\"\n    );\n    const transformerForObject = transformerForClass ?? transformerForMap;\n\n    const transformer = new DecodingChoiceTransformer(\n        graph,\n        builder.getPrimitiveType(\"any\"),\n        transformerForKind(\"null\"),\n        transformerForKind(\"integer\"),\n        transformerForKind(\"double\"),\n        transformerForKind(\"bool\"),\n        transformerForString,\n        transformerForKind(\"array\"),\n        transformerForObject\n    );\n    const attributes = transformationAttributes(graph, reconstitutedTargetType, transformer, debugPrintTransformations);\n    return builder.getPrimitiveType(\n        \"any\",\n        combineTypeAttributes(\"union\", attributes, additionalAttributes),\n        forwardingRef\n    );\n}\n\nfunction replaceArray(\n    arrayType: ArrayType,\n    builder: GraphRewriteBuilder<Type>,\n    forwardingRef: TypeRef,\n    debugPrintTransformations: boolean\n): TypeRef {\n    const anyType = builder.getPrimitiveType(\"any\");\n    const anyArrayType = builder.getArrayType(emptyTypeAttributes, anyType);\n    const reconstitutedItems = builder.reconstituteType(arrayType.items);\n    const transformer = new ArrayDecodingTransformer(\n        builder.typeGraph,\n        anyArrayType,\n        undefined,\n        reconstitutedItems,\n        new DecodingTransformer(builder.typeGraph, anyType, undefined)\n    );\n\n    const reconstitutedArray = builder.getArrayType(\n        builder.reconstituteTypeAttributes(arrayType.getAttributes()),\n        reconstitutedItems\n    );\n\n    const attributes = transformationAttributes(\n        builder.typeGraph,\n        reconstitutedArray,\n        transformer,\n        debugPrintTransformations\n    );\n\n    return builder.getArrayType(attributes, anyType, forwardingRef);\n}\n\nfunction replaceEnum(\n    enumType: EnumType,\n    builder: GraphRewriteBuilder<Type>,\n    forwardingRef: TypeRef,\n    debugPrintTransformations: boolean\n): TypeRef {\n    const stringType = builder.getStringType(emptyTypeAttributes, StringTypes.unrestricted);\n    const transformer = new DecodingTransformer(\n        builder.typeGraph,\n        stringType,\n        makeEnumTransformer(builder.typeGraph, enumType, stringType)\n    );\n    const reconstitutedEnum = builder.getEnumType(enumType.getAttributes(), enumType.cases);\n    const attributes = transformationAttributes(\n        builder.typeGraph,\n        reconstitutedEnum,\n        transformer,\n        debugPrintTransformations\n    );\n    return builder.getStringType(attributes, StringTypes.unrestricted, forwardingRef);\n}\n\nfunction replaceNumber(\n    t: PrimitiveType,\n    builder: GraphRewriteBuilder<Type>,\n    forwardingRef: TypeRef,\n    debugPrintTransformations: boolean\n): TypeRef {\n    const stringType = builder.getStringType(emptyTypeAttributes, StringTypes.unrestricted);\n    const [min, max] = defined(minMaxValueForType(t));\n    const transformer = new DecodingTransformer(\n        builder.typeGraph,\n        stringType,\n        new MinMaxValueTransformer(builder.typeGraph, stringType, undefined, min, max)\n    );\n    const reconstitutedAttributes = builder.reconstituteTypeAttributes(t.getAttributes());\n    const attributes = transformationAttributes(\n        builder.typeGraph,\n        builder.getPrimitiveType(\"double\", reconstitutedAttributes, undefined),\n        transformer,\n        debugPrintTransformations\n    );\n    return builder.getPrimitiveType(\"double\", attributes, forwardingRef);\n}\n\nfunction replaceString(\n    t: PrimitiveType,\n    builder: GraphRewriteBuilder<Type>,\n    forwardingRef: TypeRef,\n    debugPrintTransformations: boolean\n): TypeRef {\n    const [min, max] = defined(minMaxLengthForType(t));\n    const reconstitutedAttributes = builder.reconstituteTypeAttributes(t.getAttributes());\n    const stringType = builder.getStringType(emptyTypeAttributes, StringTypes.unrestricted);\n    const transformer = new DecodingTransformer(\n        builder.typeGraph,\n        stringType,\n        new MinMaxLengthCheckTransformer(builder.typeGraph, stringType, undefined, min, max)\n    );\n    const attributes = transformationAttributes(\n        builder.typeGraph,\n        builder.getStringType(reconstitutedAttributes, undefined),\n        transformer,\n        debugPrintTransformations\n    );\n    return builder.getStringType(attributes, StringTypes.unrestricted, forwardingRef);\n}\n\nfunction replaceTransformedStringType(\n    t: PrimitiveType,\n    kind: PrimitiveStringTypeKind,\n    builder: GraphRewriteBuilder<Type>,\n    forwardingRef: TypeRef,\n    debugPrintTransformations: boolean\n): TypeRef {\n    const reconstitutedAttributes = builder.reconstituteTypeAttributes(t.getAttributes());\n    const targetTypeKind = withDefault(targetTypeKindForTransformedStringTypeKind(kind), kind);\n    const stringType = builder.getStringType(emptyTypeAttributes, StringTypes.unrestricted);\n    const transformer = new DecodingTransformer(\n        builder.typeGraph,\n        stringType,\n        new ParseStringTransformer(builder.typeGraph, stringType, undefined)\n    );\n    const attributes = transformationAttributes(\n        builder.typeGraph,\n        builder.getPrimitiveType(targetTypeKind, reconstitutedAttributes),\n        transformer,\n        debugPrintTransformations\n    );\n    return builder.getStringType(attributes, StringTypes.unrestricted, forwardingRef);\n}\n\nexport function makeTransformations(ctx: RunContext, graph: TypeGraph, targetLanguage: TargetLanguage): TypeGraph {\n    const transformedTypes = setFilter(graph.allTypesUnordered(), t => {\n        if (targetLanguage.needsTransformerForType(t)) return true;\n        if (!(t instanceof UnionType)) return false;\n        const stringMembers = t.stringTypeMembers;\n        if (stringMembers.size <= 1) return false;\n        return iterableSome(stringMembers, m => targetLanguage.needsTransformerForType(m));\n    });\n\n    function replace(\n        setOfOneUnion: ReadonlySet<Type>,\n        builder: GraphRewriteBuilder<Type>,\n        forwardingRef: TypeRef\n    ): TypeRef {\n        const t = defined(iterableFirst(setOfOneUnion));\n        if (t instanceof UnionType) {\n            return replaceUnion(t, builder, forwardingRef, transformedTypes, ctx.debugPrintTransformations);\n        }\n\n        if (t instanceof ArrayType) {\n            return replaceArray(t, builder, forwardingRef, ctx.debugPrintTransformations);\n        }\n\n        if (t instanceof EnumType) {\n            return replaceEnum(t, builder, forwardingRef, ctx.debugPrintTransformations);\n        }\n\n        if (t.kind === \"string\") {\n            return replaceString(t as PrimitiveType, builder, forwardingRef, ctx.debugPrintTransformations);\n        }\n\n        if (isNumberTypeKind(t.kind)) {\n            return replaceNumber(t as PrimitiveType, builder, forwardingRef, ctx.debugPrintTransformations);\n        }\n\n        if (isPrimitiveStringTypeKind(t.kind)) {\n            return replaceTransformedStringType(\n                t as PrimitiveType,\n                t.kind,\n                builder,\n                forwardingRef,\n                ctx.debugPrintTransformations\n            );\n        }\n\n        return panic(`Cannot make transformation for type ${t.kind}`);\n    }\n\n    const groups = Array.from(transformedTypes).map(t => [t]);\n    return graph.rewrite(\n        \"make-transformations\",\n        ctx.stringTypeMapping,\n        false,\n        groups,\n        ctx.debugPrintReconstitution,\n        replace\n    );\n}\n","import { iterableFirst, setUnionInto } from \"collection-utils\";\n\nimport { type TypeAttributes, combineTypeAttributes, emptyTypeAttributes } from \"./attributes/TypeAttributes\";\nimport { type BaseGraphRewriteBuilder, type GraphRewriteBuilder, type TypeLookerUp } from \"./GraphRewriting\";\nimport { assert, defined, panic } from \"./support/Support\";\nimport { type ClassProperty, type ObjectType, type Type, UnionType } from \"./Type\";\nimport { type TypeBuilder } from \"./TypeBuilder\";\nimport { type TypeRef, derefTypeRef } from \"./TypeGraph\";\nimport { assertIsObject } from \"./TypeUtils\";\nimport { TypeRefUnionAccumulator, UnionBuilder } from \"./UnionBuilder\";\n\nfunction getCliqueProperties(\n    clique: ObjectType[],\n    builder: TypeBuilder,\n    makePropertyType: (types: ReadonlySet<Type>) => TypeRef\n): [ReadonlyMap<string, ClassProperty>, TypeRef | undefined, boolean] {\n    let lostTypeAttributes = false;\n    let propertyNames = new Set<string>();\n    for (const o of clique) {\n        setUnionInto(propertyNames, o.getProperties().keys());\n    }\n\n    let properties = Array.from(propertyNames).map(name => [name, new Set(), false] as [string, Set<Type>, boolean]);\n    let additionalProperties: Set<Type> | undefined = undefined;\n    for (const o of clique) {\n        let additional = o.getAdditionalProperties();\n        if (additional !== undefined) {\n            if (additionalProperties === undefined) {\n                additionalProperties = new Set();\n            }\n\n            if (additional !== undefined) {\n                additionalProperties.add(additional);\n            }\n        }\n\n        // FIXME: refactor this\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for (let i = 0; i < properties.length; i++) {\n            let [name, types, isOptional] = properties[i];\n            const maybeProperty = o.getProperties().get(name);\n            if (maybeProperty === undefined) {\n                isOptional = true;\n                if (additional !== undefined && additional.kind !== \"any\") {\n                    types.add(additional);\n                }\n            } else {\n                if (maybeProperty.isOptional) {\n                    isOptional = true;\n                }\n\n                types.add(maybeProperty.type);\n            }\n\n            properties[i][2] = isOptional;\n        }\n    }\n\n    const unifiedAdditionalProperties =\n        additionalProperties === undefined ? undefined : makePropertyType(additionalProperties);\n\n    const unifiedPropertiesArray = properties.map(([name, types, isOptional]) => {\n        return [name, builder.makeClassProperty(makePropertyType(types), isOptional)] as [string, ClassProperty];\n    });\n    const unifiedProperties = new Map(unifiedPropertiesArray);\n\n    return [unifiedProperties, unifiedAdditionalProperties, lostTypeAttributes];\n}\n\nfunction countProperties(clique: ObjectType[]): {\n    hasAdditionalProperties: boolean;\n    hasNonAnyAdditionalProperties: boolean;\n    hasProperties: boolean;\n} {\n    let hasProperties = false;\n    let hasAdditionalProperties = false;\n    let hasNonAnyAdditionalProperties = false;\n    for (const o of clique) {\n        if (o.getProperties().size > 0) {\n            hasProperties = true;\n        }\n\n        const additional = o.getAdditionalProperties();\n        if (additional !== undefined) {\n            hasAdditionalProperties = true;\n            if (additional.kind !== \"any\") {\n                hasNonAnyAdditionalProperties = true;\n            }\n        }\n    }\n\n    return { hasProperties, hasAdditionalProperties, hasNonAnyAdditionalProperties };\n}\n\nexport class UnifyUnionBuilder extends UnionBuilder<BaseGraphRewriteBuilder, TypeRef[], TypeRef[]> {\n    public constructor(\n        typeBuilder: BaseGraphRewriteBuilder,\n        private readonly _makeObjectTypes: boolean,\n        private readonly _makeClassesFixed: boolean,\n        private readonly _unifyTypes: (typesToUnify: TypeRef[]) => TypeRef\n    ) {\n        super(typeBuilder);\n    }\n\n    protected makeObject(\n        objectRefs: TypeRef[],\n        typeAttributes: TypeAttributes,\n        forwardingRef: TypeRef | undefined\n    ): TypeRef {\n        const maybeTypeRef = this.typeBuilder.lookupTypeRefs(objectRefs, forwardingRef);\n        if (maybeTypeRef !== undefined) {\n            assert(\n                forwardingRef === undefined || maybeTypeRef === forwardingRef,\n                \"The forwarding ref must be consumed\"\n            );\n            this.typeBuilder.addAttributes(maybeTypeRef, typeAttributes);\n            return maybeTypeRef;\n        }\n\n        if (objectRefs.length === 1) {\n            return this.typeBuilder.reconstituteTypeRef(objectRefs[0], typeAttributes, forwardingRef);\n        }\n\n        const objectTypes = objectRefs.map(r => assertIsObject(derefTypeRef(r, this.typeBuilder)));\n        const { hasProperties, hasAdditionalProperties, hasNonAnyAdditionalProperties } = countProperties(objectTypes);\n\n        if (!this._makeObjectTypes && (hasNonAnyAdditionalProperties || (!hasProperties && hasAdditionalProperties))) {\n            const propertyTypes = new Set<TypeRef>();\n            for (const o of objectTypes) {\n                setUnionInto(\n                    propertyTypes,\n                    Array.from(o.getProperties().values()).map(cp => cp.typeRef)\n                );\n            }\n\n            const additionalPropertyTypes = new Set(\n                objectTypes\n                    .filter(o => o.getAdditionalProperties() !== undefined)\n                    .map(o => defined(o.getAdditionalProperties()).typeRef)\n            );\n            setUnionInto(propertyTypes, additionalPropertyTypes);\n            return this.typeBuilder.getMapType(typeAttributes, this._unifyTypes(Array.from(propertyTypes)));\n        } else {\n            const [properties, additionalProperties, lostTypeAttributes] = getCliqueProperties(\n                objectTypes,\n                this.typeBuilder,\n                types => {\n                    assert(types.size > 0, \"Property has no type\");\n                    return this._unifyTypes(Array.from(types).map(t => t.typeRef));\n                }\n            );\n            if (lostTypeAttributes) {\n                this.typeBuilder.setLostTypeAttributes();\n            }\n\n            if (this._makeObjectTypes) {\n                return this.typeBuilder.getUniqueObjectType(\n                    typeAttributes,\n                    properties,\n                    additionalProperties,\n                    forwardingRef\n                );\n            } else {\n                assert(additionalProperties === undefined, \"We have additional properties but want to make a class\");\n                return this.typeBuilder.getUniqueClassType(\n                    typeAttributes,\n                    this._makeClassesFixed,\n                    properties,\n                    forwardingRef\n                );\n            }\n        }\n    }\n\n    protected makeArray(\n        arrays: TypeRef[],\n        typeAttributes: TypeAttributes,\n        forwardingRef: TypeRef | undefined\n    ): TypeRef {\n        const ref = this.typeBuilder.getArrayType(typeAttributes, this._unifyTypes(arrays), forwardingRef);\n        return ref;\n    }\n}\n\nexport function unionBuilderForUnification<T extends Type>(\n    typeBuilder: GraphRewriteBuilder<T>,\n    makeObjectTypes: boolean,\n    makeClassesFixed: boolean,\n    conflateNumbers: boolean\n): UnionBuilder<TypeBuilder & TypeLookerUp, TypeRef[], TypeRef[]> {\n    return new UnifyUnionBuilder(typeBuilder, makeObjectTypes, makeClassesFixed, trefs =>\n        unifyTypes(\n            new Set(trefs.map(tref => derefTypeRef(tref, typeBuilder))),\n            emptyTypeAttributes,\n            typeBuilder,\n            unionBuilderForUnification(typeBuilder, makeObjectTypes, makeClassesFixed, conflateNumbers),\n            conflateNumbers\n        )\n    );\n}\n\n// typeAttributes must not be reconstituted yet.\n// FIXME: The UnionBuilder might end up not being used.\nexport function unifyTypes<T extends Type>(\n    types: ReadonlySet<Type>,\n    typeAttributes: TypeAttributes,\n    typeBuilder: GraphRewriteBuilder<T>,\n    unionBuilder: UnionBuilder<TypeBuilder & TypeLookerUp, TypeRef[], TypeRef[]>,\n    conflateNumbers: boolean,\n    maybeForwardingRef?: TypeRef\n): TypeRef {\n    typeAttributes = typeBuilder.reconstituteTypeAttributes(typeAttributes);\n    if (types.size === 0) {\n        return panic(\"Cannot unify empty set of types\");\n    } else if (types.size === 1) {\n        const first = defined(iterableFirst(types));\n        if (!(first instanceof UnionType)) {\n            return typeBuilder.reconstituteTypeRef(first.typeRef, typeAttributes, maybeForwardingRef);\n        }\n    }\n\n    const typeRefs = Array.from(types).map(t => t.typeRef);\n    const maybeTypeRef = typeBuilder.lookupTypeRefs(typeRefs, maybeForwardingRef);\n    if (maybeTypeRef !== undefined) {\n        typeBuilder.addAttributes(maybeTypeRef, typeAttributes);\n        return maybeTypeRef;\n    }\n\n    const accumulator = new TypeRefUnionAccumulator(conflateNumbers);\n    const nestedAttributes = typeBuilder.reconstituteTypeAttributes(accumulator.addTypes(types));\n    typeAttributes = combineTypeAttributes(\"union\", typeAttributes, nestedAttributes);\n\n    return typeBuilder.withForwardingRef(maybeForwardingRef, forwardingRef => {\n        typeBuilder.registerUnion(typeRefs, forwardingRef);\n        return unionBuilder.buildUnion(accumulator, false, typeAttributes, forwardingRef);\n    });\n}\n","import { type GraphRewriteBuilder } from \"../GraphRewriting\";\nimport { type RunContext } from \"../Run\";\nimport { assert, panic } from \"../support/Support\";\nimport { type ClassProperty, ClassType, type Type, setOperationCasesEqual } from \"../Type\";\nimport { type TypeGraph, type TypeRef } from \"../TypeGraph\";\nimport { combineTypeAttributesOfTypes, nonNullTypeCases } from \"../TypeUtils\";\nimport { unifyTypes, unionBuilderForUnification } from \"../UnifyClasses\";\n\nconst REQUIRED_OVERLAP = 3 / 4;\n\ninterface Clique {\n    members: ClassType[];\n    prototypes: ClassType[];\n}\n\n// FIXME: Allow some type combinations to unify, like different enums,\n// enums with strings, integers with doubles, maps with objects of\n// the correct type.\nfunction typeSetsCanBeCombined(s1: Iterable<Type>, s2: Iterable<Type>): boolean {\n    return setOperationCasesEqual(s1, s2, true, (a, b) => a.structurallyCompatible(b, true));\n}\n\nfunction canBeCombined(c1: ClassType, c2: ClassType, onlyWithSameProperties: boolean): boolean {\n    const p1 = c1.getProperties();\n    const p2 = c2.getProperties();\n    if (onlyWithSameProperties) {\n        if (p1.size !== p2.size) {\n            return false;\n        }\n    } else {\n        if (p1.size < p2.size * REQUIRED_OVERLAP || p2.size < p1.size * REQUIRED_OVERLAP) {\n            return false;\n        }\n    }\n\n    let larger: ReadonlyMap<string, ClassProperty>;\n    let smaller: ReadonlyMap<string, ClassProperty>;\n    if (p1.size > p2.size) {\n        larger = p1;\n        smaller = p2;\n    } else {\n        larger = p2;\n        smaller = p1;\n    }\n\n    let maxFaults: number;\n    if (onlyWithSameProperties) {\n        maxFaults = 0;\n    } else {\n        const minOverlap = Math.ceil(larger.size * REQUIRED_OVERLAP);\n        maxFaults = smaller.size - minOverlap;\n    }\n\n    assert(maxFaults >= 0, \"Max faults negative\");\n    const commonProperties: string[] = [];\n    let faults = 0;\n    for (const [name] of smaller) {\n        if (larger.has(name)) {\n            commonProperties.push(name);\n        } else {\n            faults += 1;\n            if (faults > maxFaults) break;\n        }\n    }\n\n    if (faults > maxFaults) return false;\n    for (const name of commonProperties) {\n        let ts = smaller.get(name);\n        let tl = larger.get(name);\n        if (ts === undefined || tl === undefined) {\n            return panic(`Both classes should have property ${name}`);\n        }\n\n        const tsCases = nonNullTypeCases(ts.type);\n        const tlCases = nonNullTypeCases(tl.type);\n        if (tsCases.size > 0 && tlCases.size > 0 && !typeSetsCanBeCombined(tsCases, tlCases)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction tryAddToClique(c: ClassType, clique: Clique, onlyWithSameProperties: boolean): boolean {\n    for (const prototype of clique.prototypes) {\n        if (prototype.structurallyCompatible(c)) {\n            clique.members.push(c);\n            return true;\n        }\n    }\n\n    for (const prototype of clique.prototypes) {\n        if (canBeCombined(prototype, c, onlyWithSameProperties)) {\n            clique.prototypes.push(c);\n            clique.members.push(c);\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction findSimilarityCliques(\n    graph: TypeGraph,\n    onlyWithSameProperties: boolean,\n    includeFixedClasses: boolean\n): ClassType[][] {\n    const classCandidates = Array.from(graph.allNamedTypesSeparated().objects).filter(\n        o => o instanceof ClassType && (includeFixedClasses || !o.isFixed)\n    ) as ClassType[];\n    const cliques: Clique[] = [];\n\n    for (const c of classCandidates) {\n        let cliqueIndex: number | undefined = undefined;\n        for (let i = 0; i < cliques.length; i++) {\n            if (tryAddToClique(c, cliques[i], onlyWithSameProperties)) {\n                cliqueIndex = i;\n                break;\n            }\n        }\n\n        if (cliqueIndex === undefined) {\n            // New clique\n            cliqueIndex = cliques.length;\n            cliques.push({ members: [c], prototypes: [c] });\n        }\n\n        // Move the clique we just added to to the front, in the hope that\n        // some cliques are more often added to than others, and they'll\n        // move to the front.\n        const tmp = cliques[0];\n        cliques[0] = cliques[cliqueIndex];\n        cliques[cliqueIndex] = tmp;\n    }\n\n    return cliques.map(clique => clique.members).filter(cl => cl.length > 1);\n}\n\nexport function combineClasses(\n    ctx: RunContext,\n    graph: TypeGraph,\n    alphabetizeProperties: boolean,\n    conflateNumbers: boolean,\n    onlyWithSameProperties: boolean,\n    debugPrintReconstitution: boolean\n): TypeGraph {\n    const cliques = ctx.time(\"  find similarity cliques\", () =>\n        findSimilarityCliques(graph, onlyWithSameProperties, false)\n    );\n\n    function makeCliqueClass(\n        clique: ReadonlySet<ClassType>,\n        builder: GraphRewriteBuilder<ClassType>,\n        forwardingRef: TypeRef\n    ): TypeRef {\n        assert(clique.size > 0, \"Clique can't be empty\");\n        const attributes = combineTypeAttributesOfTypes(\"union\", clique);\n        return unifyTypes(\n            clique,\n            attributes,\n            builder,\n            unionBuilderForUnification(builder, false, false, conflateNumbers),\n            conflateNumbers,\n            forwardingRef\n        );\n    }\n\n    return graph.rewrite(\n        \"combine classes\",\n        ctx.stringTypeMapping,\n        alphabetizeProperties,\n        cliques,\n        debugPrintReconstitution,\n        makeCliqueClass\n    );\n}\n","import {\n    areEqual,\n    iterableFirst,\n    iterableReduce,\n    iterableSome,\n    mapFilter,\n    setIntersect,\n    setIsSuperset,\n    setUnion\n} from \"collection-utils\";\n\nimport { StringTypes } from \"../attributes/StringTypes\";\nimport { emptyTypeAttributes } from \"../attributes/TypeAttributes\";\nimport { type GraphRewriteBuilder } from \"../GraphRewriting\";\nimport { type RunContext } from \"../Run\";\nimport { assert, defined } from \"../support/Support\";\nimport { type PrimitiveType } from \"../Type\";\nimport { type TypeGraph, type TypeRef } from \"../TypeGraph\";\nimport { stringTypesForType } from \"../TypeUtils\";\n\nconst MIN_LENGTH_FOR_ENUM = 10;\n\nconst MIN_LENGTH_FOR_OVERLAP = 5;\nconst REQUIRED_OVERLAP = 3 / 4;\n\nexport type EnumInference = \"none\" | \"all\" | \"infer\";\n\ninterface EnumInfo {\n    cases: ReadonlySet<string>;\n    numValues: number;\n}\n\nfunction isOwnEnum({ numValues, cases }: EnumInfo): boolean {\n    return numValues >= MIN_LENGTH_FOR_ENUM && cases.size < Math.sqrt(numValues);\n}\n\nfunction enumCasesOverlap(\n    newCases: ReadonlySet<string>,\n    existingCases: ReadonlySet<string>,\n    newAreSubordinate: boolean\n): boolean {\n    const smaller = newAreSubordinate ? newCases.size : Math.min(newCases.size, existingCases.size);\n    const overlap = setIntersect(newCases, existingCases).size;\n    return overlap >= smaller * REQUIRED_OVERLAP;\n}\n\nfunction isAlwaysEmptyString(cases: string[]): boolean {\n    return cases.length === 1 && cases[0] === \"\";\n}\n\nexport function expandStrings(ctx: RunContext, graph: TypeGraph, inference: EnumInference): TypeGraph {\n    const stringTypeMapping = ctx.stringTypeMapping;\n    const allStrings = Array.from(graph.allTypesUnordered()).filter(\n        t => t.kind === \"string\" && stringTypesForType(t as PrimitiveType).isRestricted\n    ) as PrimitiveType[];\n\n    function makeEnumInfo(t: PrimitiveType): EnumInfo | undefined {\n        const stringTypes = stringTypesForType(t);\n        const mappedStringTypes = stringTypes.applyStringTypeMapping(stringTypeMapping);\n        if (!mappedStringTypes.isRestricted) return undefined;\n\n        const cases = defined(mappedStringTypes.cases);\n        if (cases.size === 0) return undefined;\n\n        const numValues = iterableReduce(cases.values(), 0, (a, b) => a + b);\n\n        if (inference !== \"all\") {\n            const keys = Array.from(cases.keys());\n            if (isAlwaysEmptyString(keys)) return undefined;\n\n            const someCaseIsNotNumber = iterableSome(keys, key => /^[-+]?[0-9]+(\\.[0-9]+)?$/.test(key) === false);\n            if (!someCaseIsNotNumber) return undefined;\n        }\n\n        return { cases: new Set(cases.keys()), numValues };\n    }\n\n    const enumInfos = new Map<PrimitiveType, EnumInfo>();\n    const enumSets: Array<ReadonlySet<string>> = [];\n\n    if (inference !== \"none\") {\n        for (const t of allStrings) {\n            const enumInfo = makeEnumInfo(t);\n            if (enumInfo === undefined) continue;\n            enumInfos.set(t, enumInfo);\n        }\n\n        // FIXME: refactor this\n        // eslint-disable-next-line no-inner-declarations\n        function findOverlap(newCases: ReadonlySet<string>, newAreSubordinate: boolean): number {\n            return enumSets.findIndex(s => enumCasesOverlap(newCases, s, newAreSubordinate));\n        }\n\n        // First, make case sets for all the enums that stand on their own.  If\n        // we find some overlap (searching eagerly), make unions.\n        for (const t of Array.from(enumInfos.keys())) {\n            const enumInfo = defined(enumInfos.get(t));\n            const cases = enumInfo.cases;\n\n            if (inference === \"all\") {\n                enumSets.push(cases);\n            } else {\n                if (!isOwnEnum(enumInfo)) continue;\n\n                const index = findOverlap(cases, false);\n                if (index >= 0) {\n                    // console.log(\n                    //     `unifying ${JSON.stringify(Array.from(cases))} with ${JSON.stringify(\n                    //         Array.from(enumSets[index])\n                    //     )}`\n                    // );\n                    enumSets[index] = setUnion(enumSets[index], cases);\n                } else {\n                    // console.log(`adding new ${JSON.stringify(Array.from(cases))}`);\n                    enumSets.push(cases);\n                }\n            }\n\n            // Remove the ones we're done with.\n            enumInfos.delete(t);\n        }\n\n        if (inference === \"all\") {\n            assert(enumInfos.size === 0);\n        }\n\n        // Now see if we can unify the rest with some a set we found in the\n        // previous step.\n        for (const [, enumInfo] of enumInfos.entries()) {\n            if (enumInfo.numValues < MIN_LENGTH_FOR_OVERLAP) continue;\n\n            const index = findOverlap(enumInfo.cases, true);\n            if (index >= 0) {\n                // console.log(\n                //     `late unifying ${JSON.stringify(Array.from(enumInfo.cases))} with ${JSON.stringify(\n                //         Array.from(enumSets[index])\n                //     )}`\n                // );\n                enumSets[index] = setUnion(enumSets[index], enumInfo.cases);\n            }\n        }\n    }\n\n    function replaceString(\n        group: ReadonlySet<PrimitiveType>,\n        builder: GraphRewriteBuilder<PrimitiveType>,\n        forwardingRef: TypeRef\n    ): TypeRef {\n        assert(group.size === 1);\n        const t = defined(iterableFirst(group));\n        const stringTypes = stringTypesForType(t);\n        const attributes = mapFilter(t.getAttributes(), a => a !== stringTypes);\n        const mappedStringTypes = stringTypes.applyStringTypeMapping(stringTypeMapping);\n\n        if (!mappedStringTypes.isRestricted) {\n            return builder.getStringType(attributes, StringTypes.unrestricted, forwardingRef);\n        }\n\n        const setMatches = inference === \"all\" ? areEqual : setIsSuperset;\n\n        const types: TypeRef[] = [];\n        const cases = defined(mappedStringTypes.cases);\n        if (cases.size > 0) {\n            const keys = new Set(cases.keys());\n            const fullCases = enumSets.find(s => setMatches(s, keys));\n            if (inference !== \"none\" && !isAlwaysEmptyString(Array.from(keys)) && fullCases !== undefined) {\n                types.push(builder.getEnumType(emptyTypeAttributes, fullCases));\n            } else {\n                return builder.getStringType(attributes, StringTypes.unrestricted, forwardingRef);\n            }\n        }\n\n        const transformations = mappedStringTypes.transformations;\n        // FIXME: This is probably wrong, or at least overly conservative.  This is for the case\n        // where some attributes are identity ones, i.e. where we can't merge the primitive types,\n        // like it happens in the line after the `if`.  The case where this occured was with URI\n        // attributes: we had two separate string types with different URI attributes, but because\n        // both are rewritten via `getPrimitiveType` below without any attributes, they end up\n        // being the same string type.\n        if (types.length === 0 && transformations.size === 1) {\n            const kind = defined(iterableFirst(transformations));\n            return builder.getPrimitiveType(kind, attributes, forwardingRef);\n        }\n\n        types.push(...Array.from(transformations).map(k => builder.getPrimitiveType(k)));\n        assert(types.length > 0, \"We got an empty string type\");\n        return builder.getUnionType(attributes, new Set(types), forwardingRef);\n    }\n\n    return graph.rewrite(\n        \"expand strings\",\n        stringTypeMapping,\n        false,\n        allStrings.map(t => [t]),\n        ctx.debugPrintReconstitution,\n        replaceString\n    );\n}\n","import { iterableFirst } from \"collection-utils\";\n\nimport { combineTypeAttributes } from \"../attributes/TypeAttributes\";\nimport { type GraphRewriteBuilder } from \"../GraphRewriting\";\nimport { assert, defined } from \"../support/Support\";\nimport { type PrimitiveType, type Type, type UnionType } from \"../Type\";\nimport { type StringTypeMapping } from \"../TypeBuilder\";\nimport { type TypeGraph, type TypeRef } from \"../TypeGraph\";\nimport { combineTypeAttributesOfTypes, stringTypesForType } from \"../TypeUtils\";\n\n// A union needs replacing if it contains more than one string type, one of them being\n// a basic string type.\nfunction unionNeedsReplacing(u: UnionType): ReadonlySet<Type> | undefined {\n    const stringMembers = u.stringTypeMembers;\n    if (stringMembers.size <= 1) return undefined;\n    const stringType = u.findMember(\"string\");\n    if (stringType === undefined) return undefined;\n    assert(\n        !stringTypesForType(stringType as PrimitiveType).isRestricted,\n        \"We must only flatten strings if we have no restriced strings\"\n    );\n    return stringMembers;\n}\n\n// Replaces all string types in an enum with the basic string type.\nfunction replaceUnion(\n    group: ReadonlySet<UnionType>,\n    builder: GraphRewriteBuilder<UnionType>,\n    forwardingRef: TypeRef\n): TypeRef {\n    assert(group.size === 1);\n    const u = defined(iterableFirst(group));\n    const stringMembers = defined(unionNeedsReplacing(u));\n    const stringAttributes = combineTypeAttributesOfTypes(\"union\", stringMembers);\n    const types: TypeRef[] = [];\n    for (const t of u.members) {\n        if (stringMembers.has(t)) continue;\n        types.push(builder.reconstituteType(t));\n    }\n\n    if (types.length === 0) {\n        return builder.getStringType(\n            combineTypeAttributes(\"union\", stringAttributes, u.getAttributes()),\n            undefined,\n            forwardingRef\n        );\n    }\n\n    types.push(builder.getStringType(stringAttributes, undefined));\n    return builder.getUnionType(u.getAttributes(), new Set(types), forwardingRef);\n}\n\nexport function flattenStrings(\n    graph: TypeGraph,\n    stringTypeMapping: StringTypeMapping,\n    debugPrintReconstitution: boolean\n): TypeGraph {\n    const allUnions = graph.allNamedTypesSeparated().unions;\n    const unionsToReplace = Array.from(allUnions)\n        .filter(unionNeedsReplacing)\n        .map(t => [t]);\n    return graph.rewrite(\n        \"flatten strings\",\n        stringTypeMapping,\n        false,\n        unionsToReplace,\n        debugPrintReconstitution,\n        replaceUnion\n    );\n}\n","import { iterableSome, setFilter } from \"collection-utils\";\n\nimport { emptyTypeAttributes } from \"../attributes/TypeAttributes\";\nimport { type GraphRewriteBuilder } from \"../GraphRewriting\";\nimport { messageAssert } from \"../Messages\";\nimport { assert } from \"../support/Support\";\nimport { IntersectionType, type Type, UnionType } from \"../Type\";\nimport { type StringTypeMapping } from \"../TypeBuilder\";\nimport { type TypeGraph, type TypeRef, derefTypeRef } from \"../TypeGraph\";\nimport { makeGroupsToFlatten } from \"../TypeUtils\";\nimport { UnifyUnionBuilder, unifyTypes } from \"../UnifyClasses\";\n\nexport function flattenUnions(\n    graph: TypeGraph,\n    stringTypeMapping: StringTypeMapping,\n    conflateNumbers: boolean,\n    makeObjectTypes: boolean,\n    debugPrintReconstitution: boolean\n): [TypeGraph, boolean] {\n    let needsRepeat = false;\n\n    function replace(types: ReadonlySet<Type>, builder: GraphRewriteBuilder<Type>, forwardingRef: TypeRef): TypeRef {\n        const unionBuilder = new UnifyUnionBuilder(builder, makeObjectTypes, true, trefs => {\n            assert(trefs.length > 0, \"Must have at least one type to build union\");\n            trefs = trefs.map(tref => builder.reconstituteType(derefTypeRef(tref, graph)));\n            if (trefs.length === 1) {\n                return trefs[0];\n            }\n\n            needsRepeat = true;\n            return builder.getUnionType(emptyTypeAttributes, new Set(trefs));\n        });\n        return unifyTypes(types, emptyTypeAttributes, builder, unionBuilder, conflateNumbers, forwardingRef);\n    }\n\n    const allUnions = setFilter(graph.allTypesUnordered(), t => t instanceof UnionType) as Set<UnionType>;\n    const nonCanonicalUnions = setFilter(allUnions, u => !u.isCanonical);\n    let foundIntersection = false;\n    const groups = makeGroupsToFlatten(nonCanonicalUnions, members => {\n        messageAssert(members.size > 0, \"IRNoEmptyUnions\", {});\n        if (!iterableSome(members, m => m instanceof IntersectionType)) return true;\n\n        // FIXME: This is stupid.  `flattenUnions` returns true when no more union\n        // flattening is necessary, but `resolveIntersections` can introduce new\n        // unions that might require flattening, so now `flattenUnions` needs to take\n        // that into account.  Either change `resolveIntersections` such that it\n        // doesn't introduce non-canonical unions (by using `unifyTypes`), or have\n        // some other way to tell whether more work is needed that doesn't require\n        // the two passes to know about each other.\n        foundIntersection = true;\n        return false;\n    });\n    graph = graph.rewrite(\"flatten unions\", stringTypeMapping, false, groups, debugPrintReconstitution, replace);\n\n    // console.log(`flattened ${nonCanonicalUnions.size} of ${unions.size} unions`);\n    return [graph, !needsRepeat && !foundIntersection];\n}\n","export const encodedMarkovChain =\n    \"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\";\n","import { encodedMarkovChain } from \"./EncodedMarkovChain\";\nimport { assert, inflateBase64, panic } from \"./support/Support\";\n\n// This must be null, not undefined, because we read it from JSON.\nexport type SubTrie = number | null | Trie;\nexport interface Trie {\n    arr: SubTrie[];\n    count: number;\n}\n\nexport interface MarkovChain {\n    depth: number;\n    trie: Trie;\n}\n\nfunction makeTrie(): Trie {\n    const arr: SubTrie[] = [];\n    for (let i = 0; i < 128; i++) {\n        arr.push(null);\n    }\n\n    return { count: 0, arr };\n}\n\nfunction lookup(t: Trie, seq: string, i: number): Trie | number | undefined {\n    if (i >= seq.length) {\n        return t;\n    }\n\n    let first = seq.charCodeAt(i);\n    if (first >= 128) {\n        first = 0;\n    }\n\n    const n = t.arr[first];\n    if (n === null) {\n        return undefined;\n    }\n\n    if (typeof n === \"object\") {\n        return lookup(n, seq, i + 1);\n    } else {\n        return n / t.count;\n    }\n}\n\nfunction increment(t: Trie, seq: string, i: number): void {\n    let first = seq.charCodeAt(i);\n    if (first >= 128) {\n        first = 0;\n    }\n\n    if (i >= seq.length - 1) {\n        if (typeof t !== \"object\") {\n            return panic(\"Malformed trie\");\n        }\n\n        let n = t.arr[first];\n        if (n === null) {\n            n = 0;\n        } else if (typeof n === \"object\") {\n            return panic(\"Malformed trie\");\n        }\n\n        t.arr[first] = n + 1;\n        t.count += 1;\n        return;\n    }\n\n    let st = t.arr[first];\n    if (st === null) {\n        t.arr[first] = st = makeTrie();\n    }\n\n    if (typeof st !== \"object\") {\n        return panic(\"Malformed trie\");\n    }\n\n    increment(st, seq, i + 1);\n}\n\nexport function train(lines: string[], depth: number): MarkovChain {\n    const trie = makeTrie();\n    for (const l of lines) {\n        for (let i = depth; i <= l.length; i++) {\n            increment(trie, l.slice(i - depth, i), 0);\n        }\n    }\n\n    return { trie, depth };\n}\n\nexport function load(): MarkovChain {\n    return JSON.parse(inflateBase64(encodedMarkovChain));\n}\n\nexport function evaluateFull(mc: MarkovChain, word: string): [number, number[]] {\n    const { trie, depth } = mc;\n    if (word.length < depth) {\n        return [1, []];\n    }\n\n    let p = 1;\n    const scores: number[] = [];\n    for (let i = depth; i <= word.length; i++) {\n        let cp = lookup(trie, word.slice(i - depth, i), 0);\n        if (typeof cp === \"object\") {\n            return panic(\"Did we mess up the depth?\");\n        }\n\n        if (cp === undefined) {\n            cp = 0.0001;\n        }\n\n        scores.push(cp);\n        p = p * cp;\n    }\n\n    return [Math.pow(p, 1 / (word.length - depth + 1)), scores];\n}\n\nexport function evaluate(mc: MarkovChain, word: string): number {\n    return evaluateFull(mc, word)[0];\n}\n\nfunction randomInt(lower: number, upper: number): number {\n    const range = upper - lower;\n    return lower + Math.floor(Math.random() * range);\n}\n\nexport function generate(mc: MarkovChain, state: string, unseenWeight: number): string {\n    assert(state.length === mc.depth - 1, \"State and chain length don't match up\");\n    const t = lookup(mc.trie, state, 0);\n    if (typeof t === \"number\") {\n        return panic(\"Wrong depth?\");\n    }\n\n    if (t === undefined) {\n        return String.fromCharCode(randomInt(32, 127));\n    }\n\n    const counts = t.arr.map((x, i) => (x === null ? (i === 0 ? 0 : unseenWeight) : (x as number)));\n    let n = 0;\n    for (const c of counts) {\n        n += c;\n    }\n\n    const r = randomInt(0, n);\n    let sum = 0;\n    for (let i = 0; i < counts.length; i++) {\n        sum += counts[i];\n        if (r < sum) {\n            return String.fromCharCode(i);\n        }\n    }\n\n    return panic(\"We screwed up bookkeeping, or randomInt\");\n}\n\nfunction testWord(mc: MarkovChain, word: string): void {\n    console.log(`\"${word}\": ${evaluate(mc, word)}`);\n}\n\nexport function test(): void {\n    const mc = load();\n\n    testWord(mc, \"url\");\n    testWord(mc, \"json\");\n    testWord(mc, \"my_property\");\n    testWord(mc, \"ordinary\");\n    testWord(mc, \"different\");\n    testWord(mc, \"189512\");\n    testWord(mc, \"2BTZIqw0ntH9MvilQ3ewNY\");\n    testWord(mc, \"0uBTNdNGb2OY5lou41iYL52LcDq2\");\n    testWord(mc, \"-KpqHmWuDOUnr1hmAhxp\");\n    testWord(mc, \"granularity\");\n    testWord(mc, \"coverage\");\n    testWord(mc, \"postingFrequency\");\n    testWord(mc, \"dataFrequency\");\n    testWord(mc, \"units\");\n    testWord(mc, \"datasetOwner\");\n    testWord(mc, \"organization\");\n    testWord(mc, \"timePeriod\");\n    testWord(mc, \"contactInformation\");\n\n    testWord(\n        mc,\n        \"\\ud83d\\udebe \\ud83c\\udd92 \\ud83c\\udd93 \\ud83c\\udd95 \\ud83c\\udd96 \\ud83c\\udd97 \\ud83c\\udd99 \\ud83c\\udfe7\"\n    );\n}\n","import { iterableEvery, iterableFirst, setMap } from \"collection-utils\";\n\nimport { type GraphRewriteBuilder } from \"../GraphRewriting\";\nimport { type MarkovChain, evaluate, load } from \"../MarkovChain\";\nimport { defined, panic } from \"../support/Support\";\nimport { type ClassProperty, ClassType, type Type, isPrimitiveStringTypeKind, setOperationCasesEqual } from \"../Type\";\nimport { type StringTypeMapping } from \"../TypeBuilder\";\nimport { type TypeGraph, type TypeRef } from \"../TypeGraph\";\nimport { removeNullFromType } from \"../TypeUtils\";\nimport { unifyTypes, unionBuilderForUnification } from \"../UnifyClasses\";\n\nconst mapSizeThreshold = 20;\nconst stringMapSizeThreshold = 50;\n\nlet markovChain: MarkovChain | undefined = undefined;\n\nfunction nameProbability(name: string): number {\n    if (markovChain === undefined) {\n        markovChain = load();\n    }\n\n    return evaluate(markovChain, name);\n}\n\nfunction shouldBeMap(properties: ReadonlyMap<string, ClassProperty>): ReadonlySet<Type> | undefined {\n    // Only classes with a certain number of properties are inferred\n    // as maps.\n    const numProperties = properties.size;\n    if (numProperties < 2) return undefined;\n\n    // If all property names are digit-only, we always make a map, no\n    // questions asked.\n    if (iterableEvery(properties.keys(), n => /^[0-9]+$/.test(n))) {\n        return setMap(properties.values(), cp => cp.type);\n    }\n\n    // If all properties are strings or null then an object must have at least\n    // `stringMapSizeThreshold` to qualify as a map.\n    if (\n        numProperties < stringMapSizeThreshold &&\n        iterableEvery(properties.values(), cp => isPrimitiveStringTypeKind(cp.type.kind) || cp.type.kind === \"null\")\n    ) {\n        return undefined;\n    }\n\n    if (numProperties < mapSizeThreshold) {\n        const names = Array.from(properties.keys());\n        const probabilities = names.map(nameProbability);\n        const product = probabilities.reduce((a, b) => a * b, 1);\n        const probability = Math.pow(product, 1 / numProperties);\n        // The idea behind this is to have a probability around 0.0025 for\n        // n=1, up to around 1.0 for n=20.  I.e. when we only have a few\n        // properties, they need to look really weird to infer a map, but\n        // when we have more we'll accept more ordinary names.  The details\n        // of the formula are immaterial because I pulled it out of my ass.\n\n        // FIXME: Use different exponents and start values depending on\n        // the property type kind.  For string properties, for example, we\n        // should be more conservative, with class properties more\n        // aggressive.  An exponent of 6 is probably good for string\n        // properties, and maybe a start value of 0.002, whereas for classes\n        // we want maybe 0.004 and 5, or maybe something even more\n        // trigger-happy.\n        const exponent = 5;\n        const scale = Math.pow(22, exponent);\n        const limit = Math.pow(numProperties + 2, exponent) / scale + (0.0025 - Math.pow(3, exponent) / scale);\n        if (probability > limit) return undefined;\n    }\n\n    // FIXME: simplify this - it's no longer necessary with the new\n    // class properties.\n\n    // We need to handle three cases for maps (and the fourth case\n    // where we leave the class as is):\n    //\n    // 1. All property types are null.\n    // 2. Some property types are null or nullable.\n    // 3. No property types are null or nullable.\n    let firstNonNullCases: ReadonlySet<Type> | undefined = undefined;\n    const allCases = new Set<Type>();\n    let canBeMap = true;\n    // Check that all the property types are the same, modulo nullability.\n    for (const [, p] of properties) {\n        // The set of types first property can be, minus null.\n        const nn = removeNullFromType(p.type)[1];\n        if (nn.size > 0) {\n            if (firstNonNullCases !== undefined) {\n                // The set of non-null cases for all other properties must\n                // be the the same, otherwise we won't infer a map.\n                if (!setOperationCasesEqual(nn, firstNonNullCases, true, (a, b) => a.structurallyCompatible(b, true))) {\n                    canBeMap = false;\n                    break;\n                }\n            } else {\n                firstNonNullCases = nn;\n            }\n        }\n\n        allCases.add(p.type);\n    }\n\n    if (!canBeMap) {\n        return undefined;\n    }\n\n    return allCases;\n}\n\nexport function inferMaps(\n    graph: TypeGraph,\n    stringTypeMapping: StringTypeMapping,\n    conflateNumbers: boolean,\n    debugPrintReconstitution: boolean\n): TypeGraph {\n    function replaceClass(\n        setOfOneClass: ReadonlySet<ClassType>,\n        builder: GraphRewriteBuilder<ClassType>,\n        forwardingRef: TypeRef\n    ): TypeRef {\n        const c = defined(iterableFirst(setOfOneClass));\n        const properties = c.getProperties();\n\n        const shouldBe = shouldBeMap(properties);\n        if (shouldBe === undefined) {\n            return panic(`We shouldn't be replacing class ${c.getCombinedName()} with a map`);\n        }\n\n        // Now reconstitute all the types in the new graph.  TypeGraphs are\n        // immutable, so any change in the graph actually means building a new\n        // graph, and the types in the new graph are different objects.\n        // Reconstituting a type means generating the \"same\" type in the new\n        // type graph.  Except we don't get Type objects but TypeRef objects,\n        // which is a type-to-be.\n        return builder.getMapType(\n            c.getAttributes(),\n            unifyTypes(\n                shouldBe,\n                c.getAttributes(),\n                builder,\n                unionBuilderForUnification(builder, false, false, conflateNumbers),\n                conflateNumbers\n            ),\n            forwardingRef\n        );\n    }\n\n    const classesToReplace = Array.from(graph.allNamedTypesSeparated().objects).filter(o => {\n        if (!(o instanceof ClassType)) return false;\n        return !o.isFixed && shouldBeMap(o.getProperties()) !== undefined;\n    }) as ClassType[];\n    return graph.rewrite(\n        \"infer maps\",\n        stringTypeMapping,\n        false,\n        classesToReplace.map(c => [c]),\n        debugPrintReconstitution,\n        replaceClass\n    );\n}\n","import { iterableFirst, mapMap, setFilter, setMap } from \"collection-utils\";\n\nimport { emptyTypeAttributes } from \"../attributes/TypeAttributes\";\nimport { type GraphRewriteBuilder } from \"../GraphRewriting\";\nimport { defined } from \"../support/Support\";\nimport { type ClassProperty, type ObjectType } from \"../Type\";\nimport { type StringTypeMapping } from \"../TypeBuilder\";\nimport { type TypeGraph, type TypeRef } from \"../TypeGraph\";\n\nexport function replaceObjectType(\n    graph: TypeGraph,\n    stringTypeMapping: StringTypeMapping,\n    _conflateNumbers: boolean,\n    leaveFullObjects: boolean,\n    debugPrintReconstitution: boolean\n): TypeGraph {\n    function replace(\n        setOfOneType: ReadonlySet<ObjectType>,\n        builder: GraphRewriteBuilder<ObjectType>,\n        forwardingRef: TypeRef\n    ): TypeRef {\n        const o = defined(iterableFirst(setOfOneType));\n        const attributes = o.getAttributes();\n        const properties = o.getProperties();\n        const additionalProperties = o.getAdditionalProperties();\n\n        function reconstituteProperties(): ReadonlyMap<string, ClassProperty> {\n            return mapMap(properties, cp =>\n                builder.makeClassProperty(builder.reconstituteTypeRef(cp.typeRef), cp.isOptional)\n            );\n        }\n\n        function makeClass(): TypeRef {\n            return builder.getUniqueClassType(attributes, true, reconstituteProperties(), forwardingRef);\n        }\n\n        function reconstituteAdditionalProperties(): TypeRef {\n            return builder.reconstituteType(defined(additionalProperties));\n        }\n\n        if (additionalProperties === undefined) {\n            return makeClass();\n        }\n\n        if (properties.size === 0) {\n            return builder.getMapType(attributes, reconstituteAdditionalProperties(), forwardingRef);\n        }\n\n        if (additionalProperties.kind === \"any\") {\n            // FIXME: Warn that we're losing additional property semantics.\n            builder.setLostTypeAttributes();\n            return makeClass();\n        }\n\n        // FIXME: Warn that we're losing class semantics.\n        const propertyTypes = setMap(properties.values(), cp => cp.type).add(additionalProperties);\n        let union = builder.lookupTypeRefs(Array.from(propertyTypes).map(t => t.typeRef));\n        if (union === undefined) {\n            const reconstitutedTypes = setMap(propertyTypes, t => builder.reconstituteType(t));\n            union = builder.getUniqueUnionType(emptyTypeAttributes, new Set(reconstitutedTypes));\n\n            // This is the direct unification alternative.  Weirdly enough, it is a tiny\n            // bit slower.  It gives the same results.\n            /*\n            union = unifyTypes(\n                propertyTypes,\n                combineTypeAttributes(propertyTypes.toArray().map(t => t.getAttributes())),\n                builder,\n                unionBuilderForUnification(builder, false, false, false, conflateNumbers),\n                conflateNumbers\n            );\n            */\n        }\n\n        return builder.getMapType(attributes, union, forwardingRef);\n    }\n\n    const allObjectTypes = setFilter(graph.allTypesUnordered(), t => t.kind === \"object\") as Set<ObjectType>;\n    const objectTypesToReplace = leaveFullObjects\n        ? setFilter(allObjectTypes, o => o.getProperties().size === 0 || o.getAdditionalProperties() === undefined)\n        : allObjectTypes;\n    const groups = Array.from(objectTypesToReplace).map(t => [t]);\n    return graph.rewrite(\"replace object type\", stringTypeMapping, false, groups, debugPrintReconstitution, replace);\n}\n","/* eslint-disable @typescript-eslint/brace-style */\nimport {\n    iterableEvery,\n    iterableFind,\n    iterableFirst,\n    mapMap,\n    mapMapEntries,\n    mapMergeWithInto,\n    mapUpdateInto,\n    setFilter,\n    setIntersect,\n    setMap,\n    setUnionInto\n} from \"collection-utils\";\n\nimport {\n    type TypeAttributes,\n    combineTypeAttributes,\n    emptyTypeAttributes,\n    makeTypeAttributesInferred\n} from \"../attributes/TypeAttributes\";\nimport { type GraphRewriteBuilder, type TypeLookerUp } from \"../GraphRewriting\";\nimport { assert, defined, mustNotHappen, panic } from \"../support/Support\";\nimport {\n    ArrayType,\n    GenericClassProperty,\n    IntersectionType,\n    ObjectType,\n    type PrimitiveTypeKind,\n    type Type,\n    type TypeKind,\n    UnionType,\n    isNumberTypeKind,\n    isPrimitiveTypeKind\n} from \"../Type\";\nimport { type StringTypeMapping, type TypeBuilder } from \"../TypeBuilder\";\nimport { type TypeGraph, type TypeRef } from \"../TypeGraph\";\nimport { makeGroupsToFlatten, matchTypeExhaustive, setOperationMembersRecursively } from \"../TypeUtils\";\nimport { type TypeAttributeMap, UnionBuilder, type UnionTypeProvider } from \"../UnionBuilder\";\n\nfunction canResolve(t: IntersectionType): boolean {\n    const members = setOperationMembersRecursively(t, undefined)[0];\n    if (members.size <= 1) return true;\n    return iterableEvery(members, m => !(m instanceof UnionType) || m.isCanonical);\n}\n\nfunction attributesForTypes<T extends TypeKind>(types: ReadonlySet<Type>): TypeAttributeMap<T> {\n    return mapMapEntries(types.entries(), t => [t.kind, t.getAttributes()] as [T, TypeAttributes]);\n}\n\ntype PropertyMap = Map<string, GenericClassProperty<Set<Type>>>;\n\nclass IntersectionAccumulator\n    implements UnionTypeProvider<ReadonlySet<Type>, [PropertyMap, ReadonlySet<Type> | undefined] | undefined>\n{\n    private _primitiveTypes: Set<PrimitiveTypeKind> | undefined;\n\n    private readonly _primitiveAttributes: TypeAttributeMap<PrimitiveTypeKind> = new Map();\n\n    // * undefined: We haven't seen any types yet.\n    // * Set: All types we've seen can be arrays.\n    // * false: At least one of the types seen can't be an array.\n    private _arrayItemTypes: Set<Type> | undefined | false;\n\n    private _arrayAttributes: TypeAttributes = emptyTypeAttributes;\n\n    // We start out with all object types allowed, which means\n    // _additionalPropertyTypes is empty - no restrictions - and\n    // _classProperties is empty - no defined properties so far.\n    //\n    // If _additionalPropertyTypes is undefined, no additional\n    // properties are allowed anymore.  If _classProperties is\n    // undefined, no object types are allowed, in which case\n    // _additionalPropertyTypes must also be undefined;\n    private _objectProperties: PropertyMap | undefined = new Map();\n\n    private _objectAttributes: TypeAttributes = emptyTypeAttributes;\n\n    private _additionalPropertyTypes: Set<Type> | undefined = new Set();\n\n    private _lostTypeAttributes = false;\n\n    private updatePrimitiveTypes(members: Iterable<Type>): void {\n        const types = setFilter(members, t => isPrimitiveTypeKind(t.kind));\n        const attributes = attributesForTypes<PrimitiveTypeKind>(types);\n        mapMergeWithInto(this._primitiveAttributes, (a, b) => combineTypeAttributes(\"intersect\", a, b), attributes);\n\n        const kinds = setMap(types, t => t.kind) as ReadonlySet<PrimitiveTypeKind>;\n        if (this._primitiveTypes === undefined) {\n            this._primitiveTypes = new Set(kinds);\n            return;\n        }\n\n        const haveNumber =\n            iterableFind(this._primitiveTypes, isNumberTypeKind) !== undefined &&\n            iterableFind(kinds, isNumberTypeKind) !== undefined;\n        this._primitiveTypes = setIntersect(this._primitiveTypes, kinds);\n        if (haveNumber && iterableFind(this._primitiveTypes, isNumberTypeKind) === undefined) {\n            // One set has integer, the other has double.  The intersection\n            // of that is integer.\n            this._primitiveTypes = this._primitiveTypes.add(\"integer\");\n        }\n    }\n\n    private updateArrayItemTypes(members: Iterable<Type>): void {\n        const maybeArray = iterableFind(members, t => t instanceof ArrayType) as ArrayType | undefined;\n        if (maybeArray === undefined) {\n            this._arrayItemTypes = false;\n            return;\n        }\n\n        this._arrayAttributes = combineTypeAttributes(\"intersect\", this._arrayAttributes, maybeArray.getAttributes());\n\n        if (this._arrayItemTypes === undefined) {\n            this._arrayItemTypes = new Set();\n        } else if (this._arrayItemTypes !== false) {\n            this._arrayItemTypes.add(maybeArray.items);\n        }\n    }\n\n    private updateObjectProperties(members: Iterable<Type>): void {\n        const maybeObject = iterableFind(members, t => t instanceof ObjectType) as ObjectType | undefined;\n        if (maybeObject === undefined) {\n            this._objectProperties = undefined;\n            this._additionalPropertyTypes = undefined;\n            return;\n        }\n\n        this._objectAttributes = combineTypeAttributes(\n            \"intersect\",\n            this._objectAttributes,\n            maybeObject.getAttributes()\n        );\n        const objectAdditionalProperties = maybeObject.getAdditionalProperties();\n\n        if (this._objectProperties === undefined) {\n            assert(this._additionalPropertyTypes === undefined);\n            return;\n        }\n\n        const allPropertyNames = setUnionInto(\n            new Set(this._objectProperties.keys()),\n            maybeObject.getProperties().keys()\n        );\n        for (const name of allPropertyNames) {\n            const existing = defined(this._objectProperties).get(name);\n            const newProperty = maybeObject.getProperties().get(name);\n\n            if (existing !== undefined && newProperty !== undefined) {\n                const cp = new GenericClassProperty(\n                    existing.typeData.add(newProperty.type),\n                    existing.isOptional && newProperty.isOptional\n                );\n                defined(this._objectProperties).set(name, cp);\n            } else if (existing !== undefined && objectAdditionalProperties !== undefined) {\n                const cp = new GenericClassProperty(\n                    existing.typeData.add(objectAdditionalProperties),\n                    existing.isOptional\n                );\n                defined(this._objectProperties).set(name, cp);\n            } else if (existing !== undefined) {\n                defined(this._objectProperties).delete(name);\n            } else if (newProperty !== undefined && this._additionalPropertyTypes !== undefined) {\n                // FIXME: This is potentially slow\n                const types = new Set(this._additionalPropertyTypes).add(newProperty.type);\n                defined(this._objectProperties).set(name, new GenericClassProperty(types, newProperty.isOptional));\n            } else if (newProperty !== undefined) {\n                defined(this._objectProperties).delete(name);\n            } else {\n                return mustNotHappen();\n            }\n        }\n\n        if (this._additionalPropertyTypes !== undefined && objectAdditionalProperties !== undefined) {\n            this._additionalPropertyTypes.add(objectAdditionalProperties);\n        } else if (this._additionalPropertyTypes !== undefined || objectAdditionalProperties !== undefined) {\n            this._additionalPropertyTypes = undefined;\n            this._lostTypeAttributes = true;\n        }\n    }\n\n    private addUnionSet(members: Iterable<Type>): void {\n        this.updatePrimitiveTypes(members);\n        this.updateArrayItemTypes(members);\n        this.updateObjectProperties(members);\n    }\n\n    public addType(t: Type): TypeAttributes {\n        let attributes = t.getAttributes();\n        matchTypeExhaustive(\n            t,\n            _noneType => {\n                return panic(\"There shouldn't be a none type\");\n            },\n            _anyType => {\n                return panic(\"The any type should have been filtered out in setOperationMembersRecursively\");\n            },\n            nullType => this.addUnionSet([nullType]),\n            boolType => this.addUnionSet([boolType]),\n            integerType => this.addUnionSet([integerType]),\n            doubleType => this.addUnionSet([doubleType]),\n            stringType => this.addUnionSet([stringType]),\n            arrayType => this.addUnionSet([arrayType]),\n            _classType => panic(\"We should never see class types in intersections\"),\n            _mapType => panic(\"We should never see map types in intersections\"),\n            objectType => this.addUnionSet([objectType]),\n            _enumType => panic(\"We should never see enum types in intersections\"),\n            unionType => {\n                attributes = combineTypeAttributes(\n                    \"intersect\",\n                    [attributes].concat(Array.from(unionType.members).map(m => m.getAttributes()))\n                );\n                this.addUnionSet(unionType.members);\n            },\n            transformedStringType => this.addUnionSet([transformedStringType])\n        );\n        return makeTypeAttributesInferred(attributes);\n    }\n\n    public get arrayData(): ReadonlySet<Type> {\n        if (this._arrayItemTypes === undefined || this._arrayItemTypes === false) {\n            return panic(\"This should not be called if the type can't be an array\");\n        }\n\n        return this._arrayItemTypes;\n    }\n\n    public get objectData(): [PropertyMap, ReadonlySet<Type> | undefined] | undefined {\n        if (this._objectProperties === undefined) {\n            assert(this._additionalPropertyTypes === undefined);\n            return undefined;\n        }\n\n        return [this._objectProperties, this._additionalPropertyTypes];\n    }\n\n    public get enumCases(): ReadonlySet<string> {\n        return panic(\"We don't support enums in intersections\");\n    }\n\n    public getMemberKinds(): TypeAttributeMap<TypeKind> {\n        const kinds: TypeAttributeMap<TypeKind> = mapMap(defined(this._primitiveTypes).entries(), k =>\n            defined(this._primitiveAttributes.get(k))\n        );\n        const maybeDoubleAttributes = this._primitiveAttributes.get(\"double\");\n        // If double was eliminated, add its attributes to integer\n        if (maybeDoubleAttributes !== undefined && !kinds.has(\"double\") && kinds.has(\"integer\")) {\n            // FIXME: How can this ever happen???  Where do we \"eliminate\" double?\n            mapUpdateInto(kinds, \"integer\", a => {\n                return combineTypeAttributes(\"intersect\", defined(a), maybeDoubleAttributes);\n            });\n        }\n\n        if (this._arrayItemTypes !== undefined && this._arrayItemTypes !== false) {\n            kinds.set(\"array\", this._arrayAttributes);\n        } else if (this._arrayAttributes.size > 0) {\n            this._lostTypeAttributes = true;\n        }\n\n        if (this._objectProperties !== undefined) {\n            kinds.set(\"object\", this._objectAttributes);\n        } else if (this._objectAttributes.size > 0) {\n            this._lostTypeAttributes = true;\n        }\n\n        return kinds;\n    }\n\n    public get lostTypeAttributes(): boolean {\n        return this._lostTypeAttributes;\n    }\n}\n\nclass IntersectionUnionBuilder extends UnionBuilder<\n    TypeBuilder & TypeLookerUp,\n    ReadonlySet<Type>,\n    [PropertyMap, ReadonlySet<Type> | undefined] | undefined\n> {\n    private _createdNewIntersections = false;\n\n    private makeIntersection(members: ReadonlySet<Type>, attributes: TypeAttributes): TypeRef {\n        const reconstitutedMembers = setMap(members, t => this.typeBuilder.reconstituteTypeRef(t.typeRef));\n\n        const first = defined(iterableFirst(reconstitutedMembers));\n        if (reconstitutedMembers.size === 1) {\n            this.typeBuilder.addAttributes(first, attributes);\n            return first;\n        }\n\n        this._createdNewIntersections = true;\n        return this.typeBuilder.getUniqueIntersectionType(attributes, reconstitutedMembers);\n    }\n\n    public get createdNewIntersections(): boolean {\n        return this._createdNewIntersections;\n    }\n\n    protected makeObject(\n        maybeData: [PropertyMap, ReadonlySet<Type> | undefined] | undefined,\n        typeAttributes: TypeAttributes,\n        forwardingRef: TypeRef | undefined\n    ): TypeRef {\n        if (maybeData === undefined) {\n            return panic(\"Either properties or additional properties must be given to make an object type\");\n        }\n\n        const [propertyTypes, maybeAdditionalProperties] = maybeData;\n        const properties = mapMap(propertyTypes, cp =>\n            this.typeBuilder.makeClassProperty(this.makeIntersection(cp.typeData, emptyTypeAttributes), cp.isOptional)\n        );\n        const additionalProperties =\n            maybeAdditionalProperties === undefined\n                ? undefined\n                : this.makeIntersection(maybeAdditionalProperties, emptyTypeAttributes);\n        return this.typeBuilder.getUniqueObjectType(typeAttributes, properties, additionalProperties, forwardingRef);\n    }\n\n    protected makeArray(\n        arrays: ReadonlySet<Type>,\n        typeAttributes: TypeAttributes,\n        forwardingRef: TypeRef | undefined\n    ): TypeRef {\n        // FIXME: attributes\n        const itemsType = this.makeIntersection(arrays, emptyTypeAttributes);\n        const tref = this.typeBuilder.getArrayType(typeAttributes, itemsType, forwardingRef);\n        return tref;\n    }\n}\n\nexport function resolveIntersections(\n    graph: TypeGraph,\n    stringTypeMapping: StringTypeMapping,\n    debugPrintReconstitution: boolean\n): [TypeGraph, boolean] {\n    let needsRepeat = false;\n\n    function replace(types: ReadonlySet<Type>, builder: GraphRewriteBuilder<Type>, forwardingRef: TypeRef): TypeRef {\n        const intersections = setFilter(types, t => t instanceof IntersectionType) as Set<IntersectionType>;\n        const [members, intersectionAttributes] = setOperationMembersRecursively(\n            Array.from(intersections),\n            \"intersect\"\n        );\n        if (members.size === 0) {\n            const t = builder.getPrimitiveType(\"any\", intersectionAttributes, forwardingRef);\n            return t;\n        }\n\n        if (members.size === 1) {\n            return builder.reconstituteType(defined(iterableFirst(members)), intersectionAttributes, forwardingRef);\n        }\n\n        const accumulator = new IntersectionAccumulator();\n        const extraAttributes = makeTypeAttributesInferred(\n            combineTypeAttributes(\n                \"intersect\",\n                Array.from(members).map(t => accumulator.addType(t))\n            )\n        );\n        const attributes = combineTypeAttributes(\"intersect\", intersectionAttributes, extraAttributes);\n\n        const unionBuilder = new IntersectionUnionBuilder(builder);\n        const tref = unionBuilder.buildUnion(accumulator, true, attributes, forwardingRef);\n        if (unionBuilder.createdNewIntersections) {\n            needsRepeat = true;\n        }\n\n        return tref;\n    }\n\n    // FIXME: We need to handle intersections that resolve to the same set of types.\n    // See for example the intersections-nested.schema example.\n    const allIntersections = setFilter(\n        graph.allTypesUnordered(),\n        t => t instanceof IntersectionType\n    ) as Set<IntersectionType>;\n    const resolvableIntersections = setFilter(allIntersections, canResolve);\n    const groups = makeGroupsToFlatten(resolvableIntersections, undefined);\n    graph = graph.rewrite(\"resolve intersections\", stringTypeMapping, false, groups, debugPrintReconstitution, replace);\n\n    // console.log(`resolved ${resolvableIntersections.size} of ${intersections.size} intersections`);\n    return [graph, !needsRepeat && allIntersections.size === resolvableIntersections.size];\n}\n","import { mapFirst } from \"collection-utils\";\n\nimport { initTypeNames } from \"./attributes/TypeNames\";\nimport { gatherNames } from \"./GatherNames\";\nimport { InputData } from \"./input/Inputs\";\nimport * as targetLanguages from \"./language/All\";\nimport { makeTransformations } from \"./MakeTransformations\";\nimport { messageError } from \"./Messages\";\nimport { combineClasses } from \"./rewrites/CombineClasses\";\nimport { expandStrings } from \"./rewrites/ExpandStrings\";\nimport { flattenStrings } from \"./rewrites/FlattenStrings\";\nimport { flattenUnions } from \"./rewrites/FlattenUnions\";\nimport { inferMaps } from \"./rewrites/InferMaps\";\nimport { replaceObjectType } from \"./rewrites/ReplaceObjectType\";\nimport { resolveIntersections } from \"./rewrites/ResolveIntersections\";\nimport { type Annotation, type Location, type SerializedRenderResult, type Span } from \"./Source\";\nimport { type Comment } from \"./support/Comments\";\nimport { assert } from \"./support/Support\";\nimport { type MultiFileRenderResult, type TargetLanguage } from \"./TargetLanguage\";\nimport { type TransformedStringTypeKind } from \"./Type\";\nimport { type StringTypeMapping, TypeBuilder } from \"./TypeBuilder\";\nimport { type TypeGraph, noneToAny, optionalToNullable, removeIndirectionIntersections } from \"./TypeGraph\";\nimport { type FixMeOptionsType } from \"./types\";\n\nexport function getTargetLanguage(nameOrInstance: string | TargetLanguage): TargetLanguage {\n    if (typeof nameOrInstance === \"object\") {\n        return nameOrInstance;\n    }\n\n    const language = targetLanguages.languageNamed(nameOrInstance);\n    if (language !== undefined) {\n        return language;\n    }\n\n    return messageError(\"DriverUnknownOutputLanguage\", { lang: nameOrInstance });\n}\n\nexport interface RendererOptions {\n    [name: string]: string | boolean;\n}\n\nexport interface InferenceFlag {\n    description: string;\n    explanation: string;\n    negationDescription: string;\n    order: number;\n    stringType?: TransformedStringTypeKind;\n}\n\nexport const inferenceFlagsObject = {\n    /** Whether to infer map types from JSON data */\n    inferMaps: {\n        description: \"Detect maps\",\n        negationDescription: \"Don't infer maps, always use classes\",\n        explanation: \"Infer maps when object keys look like map keys.\",\n        order: 1\n    },\n    /** Whether to infer enum types from JSON data */\n    inferEnums: {\n        description: \"Detect enums\",\n        negationDescription: \"Don't infer enums, always use strings\",\n        explanation: \"If string values occur within a relatively small domain,\\ninfer them as enum values.\",\n        order: 2\n    },\n    /** Whether to convert UUID strings to UUID objects */\n    inferUuids: {\n        description: \"Detect UUIDs\",\n        negationDescription: \"Don't convert UUIDs to UUID objects\",\n        explanation: \"Detect UUIDs like '123e4567-e89b-12d3-a456-426655440000' (partial support).\",\n        stringType: \"uuid\" as TransformedStringTypeKind,\n        order: 3\n    },\n    /** Whether to assume that JSON strings that look like dates are dates */\n    inferDateTimes: {\n        description: \"Detect dates & times\",\n        negationDescription: \"Don't infer dates or times\",\n        explanation: \"Infer dates from strings (partial support).\",\n        stringType: \"date-time\" as TransformedStringTypeKind,\n        order: 4\n    },\n    /** Whether to convert stringified integers to integers */\n    inferIntegerStrings: {\n        description: \"Detect integers in strings\",\n        negationDescription: \"Don't convert stringified integers to integers\",\n        explanation: 'Automatically convert stringified integers to integers.\\nFor example, \"1\" is converted to 1.',\n        stringType: \"integer-string\" as TransformedStringTypeKind,\n        order: 5\n    },\n    /** Whether to convert stringified booleans to boolean values */\n    inferBooleanStrings: {\n        description: \"Detect booleans in strings\",\n        negationDescription: \"Don't convert stringified booleans to booleans\",\n        explanation:\n            'Automatically convert stringified booleans to booleans.\\nFor example, \"true\" is converted to true.',\n        stringType: \"bool-string\" as TransformedStringTypeKind,\n        order: 6\n    },\n    /** Combine similar classes.  This doesn't apply to classes from a schema, only from inference. */\n    combineClasses: {\n        description: \"Merge similar classes\",\n        negationDescription: \"Don't combine similar classes\",\n        explanation:\n            \"Combine classes with significantly overlapping properties,\\ntreating contingent properties as nullable.\",\n        order: 7\n    },\n    /** Whether to treat $ref as references within JSON */\n    ignoreJsonRefs: {\n        description: \"Don't treat $ref as a reference in JSON\",\n        negationDescription: \"Treat $ref as a reference in JSON\",\n        explanation:\n            \"Like in JSON Schema, allow objects like\\n'{ $ref: \\\"#/foo/bar\\\" }' to refer\\nto another part of the input.\",\n        order: 8\n    }\n};\nexport type InferenceFlagName = keyof typeof inferenceFlagsObject;\nexport const inferenceFlagNames = Object.getOwnPropertyNames(inferenceFlagsObject) as InferenceFlagName[];\nexport const inferenceFlags: { [F in InferenceFlagName]: InferenceFlag } = inferenceFlagsObject;\n\nexport type InferenceFlags = { [F in InferenceFlagName]: boolean };\n\n/**\n * The options type for the main quicktype entry points,\n * `quicktypeMultiFile` and `quicktype`.\n */\nexport interface NonInferenceOptions {\n    /** Make all class property optional */\n    allPropertiesOptional: boolean;\n    /** Put class properties in alphabetical order, instead of in the order found in the JSON */\n    alphabetizeProperties: boolean;\n    /** Check that we're propagating all type attributes (unless we actually can't) */\n    checkProvenance: boolean;\n    /**\n     * Print name gathering debug information to the console.  This might help to figure out why\n     * your types get weird names, but the output is quite arcane.\n     */\n    debugPrintGatherNames: boolean;\n    /** Print the type graph to the console at every processing step */\n    debugPrintGraph: boolean;\n    /**\n     * Print type reconstitution debug information to the console.  You'll only ever need this if\n     * you're working deep inside quicktype-core.\n     */\n    debugPrintReconstitution: boolean;\n    /** Print schema resolving steps */\n    debugPrintSchemaResolving: boolean;\n    /** Print the time it took for each pass to run */\n    debugPrintTimes: boolean;\n    /** Print all transformations to the console prior to generating code */\n    debugPrintTransformations: boolean;\n    /**\n     * Make top-levels classes from JSON fixed.  That means even if two top-level classes are exactly\n     * the same, quicktype will still generate two separate types for them.\n     */\n    fixedTopLevels: boolean;\n    /** String to use for one indentation level.  If not given, use the target language's default. */\n    indentation: string | undefined;\n    /** The input data from which to produce types */\n    inputData: InputData;\n    /**\n     * The target language for which to produce code.  This can be either an instance of `TargetLanguage`,\n     * or a string specifying one of the names for quicktype's built-in target languages.  For example,\n     * both `cs` and `csharp` will generate C#.\n     */\n    lang: string | TargetLanguage;\n    /** If given, output these comments at the beginning of the main output file */\n    leadingComments?: Comment[];\n    /** Don't render output.  This is mainly useful for benchmarking. */\n    noRender: boolean;\n    /** Name of the output file.  Note that quicktype will not write that file, but you'll get its name\n     * back as a key in the resulting `Map`.\n     */\n    outputFilename: string;\n    /** Options for the target language's renderer */\n    rendererOptions: RendererOptions;\n}\n\nexport type Options = NonInferenceOptions & InferenceFlags;\n\nconst defaultOptions: NonInferenceOptions = {\n    lang: \"ts\",\n    inputData: new InputData(),\n    alphabetizeProperties: false,\n    allPropertiesOptional: false,\n    fixedTopLevels: false,\n    noRender: false,\n    leadingComments: undefined,\n    rendererOptions: {},\n    indentation: undefined,\n    outputFilename: \"stdout\",\n    debugPrintGraph: false,\n    checkProvenance: false,\n    debugPrintReconstitution: false,\n    debugPrintGatherNames: false,\n    debugPrintTransformations: false,\n    debugPrintTimes: false,\n    debugPrintSchemaResolving: false\n};\n\nexport interface RunContext {\n    debugPrintReconstitution: boolean;\n    debugPrintSchemaResolving: boolean;\n    debugPrintTransformations: boolean;\n    stringTypeMapping: StringTypeMapping;\n\n    time: <T>(name: string, f: () => T) => T;\n    timeSync: <T>(name: string, f: () => Promise<T>) => Promise<T>;\n}\n\ninterface GraphInputs {\n    conflateNumbers: boolean;\n    stringTypeMapping: StringTypeMapping;\n    targetLanguage: TargetLanguage;\n    typeBuilder: TypeBuilder;\n}\n\nfunction makeDefaultInferenceFlags(): InferenceFlags {\n    const flags = {} as InferenceFlags;\n    for (const flag of inferenceFlagNames) {\n        flags[flag] = true;\n    }\n\n    return flags;\n}\n\nexport const defaultInferenceFlags = makeDefaultInferenceFlags();\n\nclass Run implements RunContext {\n    private readonly _options: Options;\n\n    public constructor(options: Partial<Options>) {\n        // We must not overwrite defaults with undefined values, which\n        // we sometimes get.\n        this._options = Object.assign({}, defaultOptions, defaultInferenceFlags);\n        for (const k of Object.getOwnPropertyNames(options)) {\n            const v = (options as FixMeOptionsType)[k];\n            if (v !== undefined) {\n                (this._options as FixMeOptionsType)[k] = v;\n            }\n        }\n    }\n\n    public get stringTypeMapping(): StringTypeMapping {\n        const targetLanguage = getTargetLanguage(this._options.lang);\n        const mapping = new Map(targetLanguage.stringTypeMapping);\n        for (const flag of inferenceFlagNames) {\n            const stringType = inferenceFlags[flag].stringType;\n            if (!this._options[flag] && stringType !== undefined) {\n                mapping.set(stringType, \"string\");\n            }\n        }\n\n        return mapping;\n    }\n\n    public get debugPrintReconstitution(): boolean {\n        return this._options.debugPrintReconstitution === true;\n    }\n\n    public get debugPrintTransformations(): boolean {\n        return this._options.debugPrintTransformations;\n    }\n\n    public get debugPrintSchemaResolving(): boolean {\n        return this._options.debugPrintSchemaResolving;\n    }\n\n    public async timeSync<T>(name: string, f: () => Promise<T>): Promise<T> {\n        const start = Date.now();\n        const result = await f();\n        const end = Date.now();\n        if (this._options.debugPrintTimes) {\n            console.log(`${name} took ${end - start}ms`);\n        }\n\n        return result;\n    }\n\n    public time<T>(name: string, f: () => T): T {\n        const start = Date.now();\n        const result = f();\n        const end = Date.now();\n        if (this._options.debugPrintTimes) {\n            console.log(`${name} took ${end - start}ms`);\n        }\n\n        return result;\n    }\n\n    private makeGraphInputs(): GraphInputs {\n        const targetLanguage = getTargetLanguage(this._options.lang);\n        const stringTypeMapping = this.stringTypeMapping;\n        const conflateNumbers = !targetLanguage.supportsUnionsWithBothNumberTypes;\n        const typeBuilder = new TypeBuilder(\n            0,\n            stringTypeMapping,\n            this._options.alphabetizeProperties,\n            this._options.allPropertiesOptional,\n            this._options.checkProvenance,\n            false\n        );\n\n        return { targetLanguage, stringTypeMapping, conflateNumbers, typeBuilder };\n    }\n\n    private async makeGraph(allInputs: InputData): Promise<TypeGraph> {\n        const graphInputs = this.makeGraphInputs();\n\n        await this.timeSync(\n            \"read input\",\n            async () =>\n                await allInputs.addTypes(\n                    this,\n                    graphInputs.typeBuilder,\n                    this._options.inferMaps,\n                    this._options.inferEnums,\n                    this._options.fixedTopLevels\n                )\n        );\n\n        return this.processGraph(allInputs, graphInputs);\n    }\n\n    private makeGraphSync(allInputs: InputData): TypeGraph {\n        const graphInputs = this.makeGraphInputs();\n\n        this.time(\"read input\", () =>\n            allInputs.addTypesSync(\n                this,\n                graphInputs.typeBuilder,\n                this._options.inferMaps,\n                this._options.inferEnums,\n                this._options.fixedTopLevels\n            )\n        );\n\n        return this.processGraph(allInputs, graphInputs);\n    }\n\n    private processGraph(allInputs: InputData, graphInputs: GraphInputs): TypeGraph {\n        const { targetLanguage, stringTypeMapping, conflateNumbers, typeBuilder } = graphInputs;\n\n        let graph = typeBuilder.finish();\n        if (this._options.debugPrintGraph) {\n            graph.setPrintOnRewrite();\n            graph.printGraph();\n        }\n\n        const debugPrintReconstitution = this.debugPrintReconstitution;\n\n        if (typeBuilder.didAddForwardingIntersection || !this._options.ignoreJsonRefs) {\n            this.time(\n                \"remove indirection intersections\",\n                () => (graph = removeIndirectionIntersections(graph, stringTypeMapping, debugPrintReconstitution))\n            );\n        }\n\n        let unionsDone = false;\n        if (allInputs.needSchemaProcessing || !this._options.ignoreJsonRefs) {\n            let intersectionsDone = false;\n            do {\n                const graphBeforeRewrites = graph;\n                if (!intersectionsDone) {\n                    this.time(\n                        \"resolve intersections\",\n                        () =>\n                            ([graph, intersectionsDone] = resolveIntersections(\n                                graph,\n                                stringTypeMapping,\n                                debugPrintReconstitution\n                            ))\n                    );\n                }\n\n                if (!unionsDone) {\n                    this.time(\n                        \"flatten unions\",\n                        () =>\n                            ([graph, unionsDone] = flattenUnions(\n                                graph,\n                                stringTypeMapping,\n                                conflateNumbers,\n                                true,\n                                debugPrintReconstitution\n                            ))\n                    );\n                }\n\n                if (graph === graphBeforeRewrites) {\n                    assert(intersectionsDone && unionsDone, \"Graph didn't change but we're not done\");\n                }\n            } while (!intersectionsDone || !unionsDone);\n        }\n\n        this.time(\n            \"replace object type\",\n            () =>\n                (graph = replaceObjectType(\n                    graph,\n                    stringTypeMapping,\n                    conflateNumbers,\n                    targetLanguage.supportsFullObjectType,\n                    debugPrintReconstitution\n                ))\n        );\n        do {\n            this.time(\n                \"flatten unions\",\n                () =>\n                    ([graph, unionsDone] = flattenUnions(\n                        graph,\n                        stringTypeMapping,\n                        conflateNumbers,\n                        false,\n                        debugPrintReconstitution\n                    ))\n            );\n        } while (!unionsDone);\n\n        if (this._options.combineClasses) {\n            const combinedGraph = this.time(\"combine classes\", () =>\n                combineClasses(this, graph, this._options.alphabetizeProperties, true, false, debugPrintReconstitution)\n            );\n            if (combinedGraph === graph) {\n                graph = combinedGraph;\n            } else {\n                this.time(\n                    \"combine classes cleanup\",\n                    () =>\n                        (graph = combineClasses(\n                            this,\n                            combinedGraph,\n                            this._options.alphabetizeProperties,\n                            false,\n                            true,\n                            debugPrintReconstitution\n                        ))\n                );\n            }\n        }\n\n        if (this._options.inferMaps) {\n            for (;;) {\n                const newGraph = this.time(\"infer maps\", () =>\n                    inferMaps(graph, stringTypeMapping, true, debugPrintReconstitution)\n                );\n                if (newGraph === graph) {\n                    break;\n                }\n\n                graph = newGraph;\n            }\n        }\n\n        const enumInference = allInputs.needSchemaProcessing ? \"all\" : this._options.inferEnums ? \"infer\" : \"none\";\n        this.time(\"expand strings\", () => (graph = expandStrings(this, graph, enumInference)));\n        this.time(\n            \"flatten unions\",\n            () =>\n                ([graph, unionsDone] = flattenUnions(\n                    graph,\n                    stringTypeMapping,\n                    conflateNumbers,\n                    false,\n                    debugPrintReconstitution\n                ))\n        );\n        assert(unionsDone, \"We should only have to flatten unions once after expanding strings\");\n\n        if (allInputs.needSchemaProcessing) {\n            this.time(\n                \"flatten strings\",\n                () => (graph = flattenStrings(graph, stringTypeMapping, debugPrintReconstitution))\n            );\n        }\n\n        this.time(\"none to any\", () => (graph = noneToAny(graph, stringTypeMapping, debugPrintReconstitution)));\n        if (!targetLanguage.supportsOptionalClassProperties) {\n            this.time(\n                \"optional to nullable\",\n                () => (graph = optionalToNullable(graph, stringTypeMapping, debugPrintReconstitution))\n            );\n        }\n\n        this.time(\"fixed point\", () => (graph = graph.rewriteFixedPoint(false, debugPrintReconstitution)));\n\n        this.time(\"make transformations\", () => (graph = makeTransformations(this, graph, targetLanguage)));\n\n        this.time(\n            \"flatten unions\",\n            () =>\n                ([graph, unionsDone] = flattenUnions(\n                    graph,\n                    stringTypeMapping,\n                    conflateNumbers,\n                    false,\n                    debugPrintReconstitution\n                ))\n        );\n        assert(unionsDone, \"We should only have to flatten unions once after making transformations\");\n\n        // Sometimes we combine classes in ways that will the order come out\n        // differently compared to what it would be from the equivalent schema,\n        // so we always just garbage collect to get a defined order and be done\n        // with it.\n        // FIXME: We don't actually have to do this if any of the above graph\n        // rewrites did anything.  We could just check whether the current graph\n        // is different from the one we started out with.\n        this.time(\n            \"GC\",\n            () => (graph = graph.garbageCollect(this._options.alphabetizeProperties, debugPrintReconstitution))\n        );\n\n        if (this._options.debugPrintGraph) {\n            console.log(\"\\n# gather names\");\n        }\n\n        this.time(\"gather names\", () =>\n            gatherNames(graph, !allInputs.needSchemaProcessing, this._options.debugPrintGatherNames)\n        );\n        if (this._options.debugPrintGraph) {\n            graph.printGraph();\n        }\n\n        return graph;\n    }\n\n    private makeSimpleTextResult(lines: string[]): MultiFileRenderResult {\n        return new Map([[this._options.outputFilename, { lines, annotations: [] }]] as Array<\n            [string, SerializedRenderResult]\n        >);\n    }\n\n    private preRun(): MultiFileRenderResult | [InputData, TargetLanguage] {\n        // FIXME: This makes quicktype not quite reentrant\n        initTypeNames();\n\n        const targetLanguage = getTargetLanguage(this._options.lang);\n        const inputData = this._options.inputData;\n        const needIR = inputData.needIR || !targetLanguage.names.includes(\"schema\");\n\n        const schemaString = needIR ? undefined : inputData.singleStringSchemaSource();\n        if (schemaString !== undefined) {\n            const lines = JSON.stringify(JSON.parse(schemaString), undefined, 4).split(\"\\n\");\n            lines.push(\"\");\n            const srr = { lines, annotations: [] };\n            return new Map([[this._options.outputFilename, srr] as [string, SerializedRenderResult]]);\n        }\n\n        return [inputData, targetLanguage];\n    }\n\n    public async run(): Promise<MultiFileRenderResult> {\n        const preRunResult = this.preRun();\n        if (!Array.isArray(preRunResult)) {\n            return preRunResult;\n        }\n\n        const [inputData, targetLanguage] = preRunResult;\n\n        const graph = await this.makeGraph(inputData);\n\n        return this.renderGraph(targetLanguage, graph);\n    }\n\n    public runSync(): MultiFileRenderResult {\n        const preRunResult = this.preRun();\n        if (!Array.isArray(preRunResult)) {\n            return preRunResult;\n        }\n\n        const [inputData, targetLanguage] = preRunResult;\n\n        const graph = this.makeGraphSync(inputData);\n\n        return this.renderGraph(targetLanguage, graph);\n    }\n\n    private renderGraph(targetLanguage: TargetLanguage, graph: TypeGraph): MultiFileRenderResult {\n        if (this._options.noRender) {\n            return this.makeSimpleTextResult([\"Done.\", \"\"]);\n        }\n\n        return targetLanguage.renderGraphAndSerialize(\n            graph,\n            this._options.outputFilename,\n            this._options.alphabetizeProperties,\n            this._options.leadingComments,\n            this._options.rendererOptions,\n            this._options.indentation\n        );\n    }\n}\n\n/**\n * Run quicktype and produce one or more output files.\n *\n * @param options Partial options.  For options that are not defined, the\n * defaults will be used.\n */\nexport async function quicktypeMultiFile(options: Partial<Options>): Promise<MultiFileRenderResult> {\n    return await new Run(options).run();\n}\n\nexport function quicktypeMultiFileSync(options: Partial<Options>): MultiFileRenderResult {\n    return new Run(options).runSync();\n}\n\nfunction offsetLocation(loc: Location, lineOffset: number): Location {\n    return { line: loc.line + lineOffset, column: loc.column };\n}\n\nfunction offsetSpan(span: Span, lineOffset: number): Span {\n    return { start: offsetLocation(span.start, lineOffset), end: offsetLocation(span.end, lineOffset) };\n}\n\n/**\n * Combines a multi-file render result into a single output.  All the files\n * are concatenated and prefixed with a `//`-style comment giving the\n * filename.\n */\nexport function combineRenderResults(result: MultiFileRenderResult): SerializedRenderResult {\n    if (result.size <= 1) {\n        const first = mapFirst(result);\n        if (first === undefined) {\n            return { lines: [], annotations: [] };\n        }\n\n        return first;\n    }\n\n    let lines: string[] = [];\n    let annotations: Annotation[] = [];\n    for (const [filename, srr] of result) {\n        const offset = lines.length + 2;\n        lines = lines.concat([`// ${filename}`, \"\"], srr.lines);\n        annotations = annotations.concat(\n            srr.annotations.map(ann => ({ annotation: ann.annotation, span: offsetSpan(ann.span, offset) }))\n        );\n    }\n\n    return { lines, annotations };\n}\n\n/**\n * Run quicktype like `quicktypeMultiFile`, but if there are multiple\n * output files they will all be squashed into one output, with comments at the\n * start of each file.\n *\n * @param options Partial options.  For options that are not defined, the\n * defaults will be used.\n */\nexport async function quicktype(options: Partial<Options>): Promise<SerializedRenderResult> {\n    const result = await quicktypeMultiFile(options);\n    return combineRenderResults(result);\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { PassThrough } from \"readable-stream\";\n\nimport { type Options } from \".\";\n\nexport default function bufferStream(opts: Options) {\n    opts = Object.assign({}, opts);\n\n    const array = opts.array;\n    let encoding: string | undefined = opts.encoding;\n    const buffer = encoding === \"buffer\";\n    let objectMode = false;\n\n    if (array) {\n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        objectMode = !(encoding || buffer);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        encoding = encoding || \"utf8\";\n    }\n\n    if (buffer) {\n        encoding = undefined;\n    }\n\n    let len = 0;\n    const ret: any[] = [];\n    const stream = new PassThrough({\n        objectMode\n    }) as any;\n\n    if (encoding) {\n        stream.setEncoding(encoding);\n    }\n\n    stream.on(\"data\", (chunk: any) => {\n        ret.push(chunk);\n\n        if (objectMode) {\n            len = ret.length;\n        } else {\n            len += chunk.length;\n        }\n    });\n\n    stream.getBufferedValue = () => {\n        if (array) {\n            return ret;\n        }\n\n        return buffer ? Buffer.concat(ret, len) : ret.join(\"\");\n    };\n\n    stream.getBufferedLength = () => len;\n\n    return stream;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { type Readable } from \"readable-stream\";\n\nimport bufferStream from \"./buffer-stream\";\n\nexport interface Options {\n    array?: boolean;\n    encoding?: string;\n    maxBuffer?: number;\n}\n\nexport async function getStream(inputStream: Readable, opts: Options = {}) {\n    if (!inputStream) {\n        return await Promise.reject(new Error(\"Expected a stream\"));\n    }\n\n    opts = Object.assign({ maxBuffer: Infinity }, opts);\n\n    const maxBuffer = opts.maxBuffer ?? Infinity;\n    let stream: any;\n    let clean;\n\n    const p = new Promise((resolve, reject) => {\n        const error = (err: any) => {\n            if (err) {\n                // null check\n                err.bufferedData = stream.getBufferedValue();\n            }\n\n            reject(err);\n        };\n\n        stream = bufferStream(opts);\n        inputStream.once(\"error\", error);\n        inputStream.pipe(stream);\n\n        stream.on(\"data\", () => {\n            if (stream.getBufferedLength() > maxBuffer) {\n                reject(new Error(\"maxBuffer exceeded\"));\n            }\n        });\n        stream.once(\"error\", error);\n        stream.on(\"end\", resolve);\n\n        clean = () => {\n            // some streams doesn't implement the `stream.Readable` interface correctly\n            if (inputStream.unpipe) {\n                inputStream.unpipe(stream);\n            }\n        };\n    });\n\n    return await p.then(clean, clean).then(() => stream.getBufferedValue());\n}\n\n// FIXME: should these be async ?\nexport function buffer(stream: Readable, opts: Options = {}) {\n    void getStream(stream, Object.assign({}, opts, { encoding: \"buffer\" }));\n}\n\n// FIXME: should these be async ?\nexport function array(stream: Readable, opts: Options = {}) {\n    void getStream(stream, Object.assign({}, opts, { array: true }));\n}\n","// src/index.ts\nvar isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\nvar isNode = (\n  // @ts-expect-error\n  typeof process !== \"undefined\" && // @ts-expect-error\n  process.versions != null && // @ts-expect-error\n  process.versions.node != null\n);\nvar isWebWorker = typeof self === \"object\" && self.constructor && self.constructor.name === \"DedicatedWorkerGlobalScope\";\nvar isJsDom = typeof window !== \"undefined\" && window.name === \"nodejs\" || typeof navigator !== \"undefined\" && \"userAgent\" in navigator && typeof navigator.userAgent === \"string\" && (navigator.userAgent.includes(\"Node.js\") || navigator.userAgent.includes(\"jsdom\"));\nvar isDeno = (\n  // @ts-expect-error\n  typeof Deno !== \"undefined\" && // @ts-expect-error\n  typeof Deno.version !== \"undefined\" && // @ts-expect-error\n  typeof Deno.version.deno !== \"undefined\"\n);\nvar isBun = typeof process !== \"undefined\" && process.versions != null && process.versions.bun != null;\nexport {\n  isBrowser,\n  isBun,\n  isDeno,\n  isJsDom,\n  isNode,\n  isWebWorker\n};\n","import * as fs from \"fs\";\n\nimport { defined, exceptionToString } from \"@glideapps/ts-necessities\";\nimport { isNode } from \"browser-or-node\";\nimport _fetch from \"cross-fetch\";\nimport isURL from \"is-url\";\nimport { type Readable } from \"readable-stream\";\n\n// eslint-disable-next-line import/no-cycle\nimport { messageError, panic } from \"../../index\";\n\nimport { getStream } from \"./get-stream\";\n\n// Only use cross-fetch in CI\n// FIXME: type global\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst fetch = process.env.CI ? _fetch : (global as any).fetch ?? _fetch;\n\ninterface HttpHeaders {\n    [key: string]: string;\n}\n\nfunction parseHeaders(httpHeaders?: string[]): HttpHeaders {\n    if (!Array.isArray(httpHeaders)) {\n        return {};\n    }\n\n    return httpHeaders.reduce(function (result: HttpHeaders, httpHeader: string) {\n        if (httpHeader !== undefined && httpHeader.length > 0) {\n            const split = httpHeader.indexOf(\":\");\n\n            if (split < 0) {\n                return panic(`Could not parse HTTP header \"${httpHeader}\".`);\n            }\n\n            const key = httpHeader.slice(0, split).trim();\n            const value = httpHeader.slice(split + 1).trim();\n            result[key] = value;\n        }\n\n        return result;\n    }, {} as HttpHeaders);\n}\n\nexport async function readableFromFileOrURL(fileOrURL: string, httpHeaders?: string[]): Promise<Readable> {\n    try {\n        if (isURL(fileOrURL)) {\n            const response = await fetch(fileOrURL, {\n                headers: parseHeaders(httpHeaders)\n            });\n\n            return defined(response.body) as unknown as Readable;\n        } else if (isNode) {\n            if (fileOrURL === \"-\") {\n                // Cast node readable to isomorphic readable from readable-stream\n                return process.stdin as unknown as Readable;\n            }\n\n            const filePath = fs.lstatSync(fileOrURL).isSymbolicLink() ? fs.readlinkSync(fileOrURL) : fileOrURL;\n            if (fs.existsSync(filePath)) {\n                // Cast node readable to isomorphic readable from readable-stream\n                return fs.createReadStream(filePath, \"utf8\") as unknown as Readable;\n            }\n        }\n    } catch (e) {\n        return messageError(\"MiscReadError\", { fileOrURL, message: exceptionToString(e) });\n    }\n\n    return messageError(\"DriverInputFileDoesNotExist\", { filename: fileOrURL });\n}\n\nexport async function readFromFileOrURL(fileOrURL: string, httpHeaders?: string[]): Promise<string> {\n    const readable = await readableFromFileOrURL(fileOrURL, httpHeaders);\n    try {\n        return await getStream(readable);\n    } catch (e) {\n        return messageError(\"MiscReadError\", { fileOrURL, message: exceptionToString(e) });\n    }\n}\n","// eslint-disable-next-line import/no-cycle\nimport { parseJSON } from \"..\";\n\nimport { readFromFileOrURL } from \"./io/NodeIO\";\nimport { type JSONSchema, JSONSchemaStore } from \"./JSONSchemaStore\";\n\nexport class FetchingJSONSchemaStore extends JSONSchemaStore {\n    public constructor(private readonly _httpHeaders?: string[]) {\n        super();\n    }\n\n    public async fetch(address: string): Promise<JSONSchema | undefined> {\n        // console.log(`Fetching ${address}`);\n        return parseJSON(await readFromFileOrURL(address, this._httpHeaders), \"JSON Schema\", address);\n    }\n}\n","import { parseJSON } from \"../support/Support\";\n\nimport { type JSONSourceData } from \"./Inputs\";\n\nfunction isValidJSON(s: string): boolean {\n    try {\n        JSON.parse(s);\n        return true;\n    } catch (error) {\n        return false;\n    }\n}\n\nexport function sourcesFromPostmanCollection(\n    collectionJSON: string,\n    collectionJSONAddress?: string\n): { description: string | undefined; sources: Array<JSONSourceData<string>> } {\n    const sources: Array<JSONSourceData<string>> = [];\n    const descriptions: string[] = [];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function processCollection(c: any): void {\n        if (typeof c !== \"object\") return;\n        if (Array.isArray(c.item)) {\n            for (const item of c.item) {\n                processCollection(item);\n            }\n\n            if (typeof c.info === \"object\" && typeof c.info.description === \"string\") {\n                descriptions.push(c.info.description);\n            }\n        }\n\n        if (typeof c.name === \"string\" && Array.isArray(c.response)) {\n            const samples: string[] = [];\n            for (const r of c.response) {\n                if (typeof r === \"object\" && typeof r.body === \"string\" && isValidJSON(r.body)) {\n                    samples.push(r.body);\n                }\n            }\n\n            if (samples.length > 0) {\n                const source: JSONSourceData<string> = { name: c.name, samples };\n                const sourceDescription = [c.name];\n\n                if (typeof c.request === \"object\") {\n                    const { method, url } = c.request;\n                    if (method !== undefined && typeof url === \"object\" && url.raw !== undefined) {\n                        sourceDescription.push(`${method} ${url.raw}`);\n                    }\n                }\n\n                if (typeof c.request === \"object\" && typeof c.request.description === \"string\") {\n                    sourceDescription.push(c.request.description);\n                }\n\n                source.description = sourceDescription.length === 0 ? undefined : sourceDescription.join(\"\\n\\n\");\n                sources.push(source);\n            }\n        }\n    }\n\n    processCollection(parseJSON(collectionJSON, \"Postman collection\", collectionJSONAddress));\n\n    const joinedDescription = descriptions.join(\"\\n\\n\").trim();\n    let description: string | undefined = undefined;\n    if (joinedDescription !== \"\") {\n        description = joinedDescription;\n    }\n\n    return { sources, description };\n}\n"],"names":["SCALAR","isNode","floatNaN","floatExp","float","intIdentify","intResolve","intStringify","intOct","int","intHex","schema","schema$2","Base64","YAML.parse","stringEscape","unicode","URI","pascalValue","underscoreValue","camelValue","upperUnderscoreValue","pascalUpperAcronymsValue","camelUpperAcronymsValue","legalizeName","keywords","GlobalNames","IncludeKind","isAsciiLetterOrUnderscoreOrDigit","isAsciiLetterOrUnderscore","snakeNamingFunction","camelNamingFunction","Framework","namingFunction","isStartCharacter","isPartCharacter","isValueType","unicodeEscape","unicode.getCategory","simpleNameStyle","memberNameStyle","forbiddenNames","upperNamingFunction","lowerNamingFunction","identityNamingFunction","panic","forbiddenPropertyNames","makeValue","keywords.keywords","keywords.reservedProperties","keywords.globals","invalidSymbols","shouldAddBacktick","scalaNameStyle","attributesForTypes","replaceUnion","REQUIRED_OVERLAP","targetLanguages.languageNamed","defined"],"mappings":"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K;IACL,OAAO;IACP,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,IAAI;IACJ,KAAK;IACL,KAAK;IACL,KAAK;IACL,QAAQ;IACR,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,MAAM;IACN,KAAK;IACL,KAAK;IACL,KAAK;IACL,OAAO;IACP,OAAO;IACP,QAAQ;IACR,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,OAAO;IACP,MAAM;IACN,KAAK;IACL,OAAO;IACP,KAAK;IACL,OAAO;IACP,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,OAAO;IACP,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,OAAO;IACP,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,MAAM;IACN,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,QAAQ;IACR,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,OAAO;IACP,MAAM;IACN,MAAM;IACN,IAAI;IACJ,MAAM;IACN,OAAO;IACP,KAAK;IACL,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,MAAM;IACN,IAAI;IACJ,MAAM;IACN,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,IAAI;IACJ,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,KAAK;IACL,IAAI;IACJ,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,OAAO;IACP,MAAM;IACN,KAAK;IACL,MAAM;IACN,OAAO;IACP,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAA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K;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,MAAM;IACN,MAAM;IACN,OAAO;IACP,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,IAAI;IACJ,IAAI;IACJ,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,IAAI;IACJ,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,IAAI;IACJ,KAAK;IACL,KAAK;IACL,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,KAAK;IACL,MAAM;IACN,MAAM;IACN,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,IAAI;IACJ,KAAK;IACL,IAAI;IACJ,OAAO;IACP,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,OAAO;IACP,MAAM;IACN,IAAI;IACJ,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,MAAM;IACN,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,OAAO;IACP,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,MAAM;IACN,MAAM;IACN,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,OAAO;IACP,MAAM;IACN,KAAK;IACL,KAAK;IACL,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,IAAI;IACJ,MAAM;IACN,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,OAAO;IACP,MAAM;IACN,IAAI;IACJ,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,OAAO;IACP,QAAQ;IACR,UAAU;IACV,MAAM;IACN,MAAM;IACN,KAAK;IACL,MAAM;IACN,MAAM;IACN,MAAM;IACN,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,QAAQ;IACR,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,MAAM;IACN,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,IAAI;IACJ,KAAK;IACL,OAAO;IACP,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,MAAM;IACN,MAAM;IACN,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,MAAM;IACN,IAAI;IACJ,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,IAAI;IACJ,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,OAAO;IACP,MAAM;IACN,QAAQ;IACR,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,QAAQ;IACR,OAAO;IACP,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,MAAM;IACN,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,IAAI;IACJ,IAAI;IACJ,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,MAAM;IACN,KAAK;IACL,QAAQ;IACR,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAA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GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;AACjH,IAAA,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK;AAC9G,IAAA,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK;AAC9G,IAAA,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK;AAC9G,IAAA,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK;AAC9G,IAAA,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK;IAC9G,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK;CAC3C,CAAC;AACF,MAAM,wBAAwB,GAAG;AAC7B,IAAA,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;AACjH,IAAA,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;AAClH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAChH,IAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,E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","x_google_ignoreList":[0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,151]}